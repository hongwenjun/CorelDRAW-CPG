// Created by Microsoft (R) C/C++ Compiler Version 14.40.33808.0 (cc163f71).
//
// R:\lycpg64\obj\Release\vgcoreauto.tlh
//
// C++ source equivalent of type library vgcoreauto.tlb
// compiler-generated file - DO NOT EDIT!

#pragma once
#pragma pack(push, 8)

#include <comdef.h>

namespace VGCore {

//
// Forward references and typedefs
//

struct __declspec(uuid("95e23c91-bc5a-49f3-8cd1-1fc515597048"))
/* LIBID */ __VGCore;
enum cdrFilter : int;
enum cdrFillType : int;
enum cdrFountainFillType : int;
enum cdrFountainFillBlendType : int;
enum cdrPaletteType : int;
enum cdrPaletteID : int;
enum cdrFittedOrientation : int;
enum cdrFittedVertPlacement : int;
enum cdrFittedPlacement : int;
enum cdrFittedQuadrant : int;
enum cdrFontStyle : int;
enum cdrFontLine : int;
enum cdrFontCase : int;
enum cdrFontPosition : int;
enum cdrAlignment : int;
enum cdrLineSpacingType : int;
enum cdrColorType : int;
enum cdrImageType : int;
enum cdrViewType : int;
enum cdrWindowState : int;
enum cdrPatternFillType : int;
enum cdrTileOffsetType : int;
enum cdrPatternCanvasSize : int;
enum cdrFlipAxes : int;
enum cdrTexturePropertyType : int;
enum cdrWindowArrangeStyle : int;
enum cdrTransparencyType : int;
enum cdrTransparencyAppliedTo : int;
enum cdrImageMode : int;
enum cdrImagePaletteType : int;
enum cdrDitherType : int;
enum cdrRenderType : int;
enum cdrHalftoneType : int;
enum cdrDuotoneType : int;
enum cdrUnit : int;
enum cdrCompressionType : int;
enum cdrMergeMode : int;
enum cdrReferencePoint : int;
enum cdrEllipseType : int;
enum cdrPolygonType : int;
enum cdrSpiralType : int;
enum cdrShapeType : int;
enum cdrPageOrientation : int;
enum cdrAntiAliasingType : int;
enum cdrOutlineType : int;
enum cdrTextType : int;
enum cdrTextIndexingType : int;
enum cdrTextFrames : int;
enum cdrExportRange : int;
enum cdrThumbnailSize : int;
enum cdrFileVersion : int;
enum cdrPointType : int;
enum cdrPresetPoint : int;
enum cdrNodeType : int;
enum cdrSegmentType : int;
enum cdrSegmentOffsetType : int;
enum cdrCursorShape : int;
enum cdrPositionOfPointOverShape : int;
enum cdrOutlineLineCaps : int;
enum cdrOutlineLineJoin : int;
enum cdrShapeEnumDirection : int;
enum cdrPageBackground : int;
enum cdrEffectType : int;
enum cdrBlendMode : int;
enum cdrExtrudeType : int;
enum cdrExtrudeShading : int;
enum cdrFeatherType : int;
enum cdrEdgeType : int;
enum cdrDropShadowType : int;
enum cdrExtrudeLightPosition : int;
enum cdrExtrudeVPType : int;
enum cdrEnvelopeMode : int;
enum cdrLensType : int;
enum cdrContourDirection : int;
enum cdrDistortionType : int;
enum cdrTools : int;
enum cdrGridType : int;
enum cdrGuideType : int;
enum cdrURLRegion : int;
enum cdrPanoseMatchingType : int;
enum cdrDataFormatType : int;
enum cdrShapeLevel : int;
enum cdrTriState : int;
enum cdrTextChangeCase : int;
enum cdrTextLanguage : int;
enum cdrTextCharSet : int;
enum cdrVerticalAlignment : int;
enum cdrCloneLinkType : int;
enum cdrWrapStyle : int;
enum cdrCurveElementType : int;
enum cdrAddinFilter : int;
enum cdrAlignType : int;
enum cdrDistributeType : int;
enum cdrDimensionType : int;
enum cdrLinearDimensionType : int;
enum cdrDimensionStyle : int;
enum cdrDimensionLinearUnits : int;
enum cdrDimensionPlacement : int;
enum cdrDimensionAngularUnits : int;
enum cdrDimensionSymbol : int;
enum cdrSymbolType : int;
enum cdrCurveElementFlags : int;
enum cdrPaletteSortMethod : int;
enum cdrImportMode : int;
enum cdrImportTextFormatting : int;
enum cdrImportTableOutline : int;
enum cdrDataType : int;
enum cdrPaletteVersion : int;
enum cdrOLEType : int;
enum cdrTextAlignOrigin : int;
enum cdrCompareType : int;
enum cdrCompareCondition : int;
enum cdrApplicationID : int;
enum cdrApplicationClass : int;
enum cdrShapeChangeScope : int;
enum cdrTreeNodeType : int;
enum cdrTextTabAlignment : int;
enum cdrTextEffect : int;
enum clrMonitorCalibration : int;
enum clrRenderingIntent : int;
enum clrColorEngine : int;
enum clrDeviceType : int;
enum clrCompPrnCalibration : int;
enum clrImportColorCorrection : int;
enum clrExportColorCorrection : int;
enum cdrFillMode : int;
enum cdrCommandCheckState : int;
enum cdrAppStartupMode : int;
enum cdrDistanceMode : int;
enum cdrDirection : int;
enum cdrShapeLinkType : int;
enum cdrEnvelopeCopyMode : int;
enum cdrContourEndCapType : int;
enum cdrContourCornerType : int;
enum cdrTraceType : int;
enum cdrTraceBackgroundMode : int;
enum cdrTextPropertySet : int;
enum cdrDocLayout : int;
enum cdrCopyProperties : int;
enum cdrOverprintState : int;
enum cdrObjectSnapPointType : int;
enum cdrConnectorType : int;
enum cdrCornerType : int;
enum clrColorModel : int;
enum clrColorPolicyAction : int;
enum cdrAlignDistributeH : int;
enum cdrAlignDistributeV : int;
enum cdrDistributeArea : int;
enum cdrAlignShapesTo : int;
enum cdrOutlineJustification : int;
enum cdrFillStyleType : int;
enum cdrFountainFillSpreadMethod : int;
enum cdrProjectPlane : int;
enum cdrOnScreenCurvePenStyle : int;
enum cdrOnScreenTextAlign : int;
enum cdrWeldFlags : int;
enum cdrWeldMethod : int;
enum cdrOutlineDashAdjust : int;
enum cdrTextIndentLevelStyle : int;
enum cdrAuthorAuthentication : int;
enum cdrCommentAnnotationType : int;
enum cdrCommentStatus : int;
enum PrnFileMode : int;
enum PrnPrintRange : int;
enum PrnPlateType : int;
enum PrnRegistrationStyle : int;
enum PrnPostScriptLevel : int;
enum PrnPDFStartup : int;
enum PrnImageTrap : int;
enum PrnTrapType : int;
enum PrnColorMode : int;
enum PrnBitmapColorMode : int;
enum PrnPageSet : int;
enum PrnPaperSize : int;
enum PrnPaperOrientation : int;
enum PrnPlaceType : int;
enum PrnObjectsColorMode : int;
enum PrnPageMatchingMode : int;
enum pdfExportRange : int;
enum pdfBitmapCompressionType : int;
enum pdfEncodingType : int;
enum pdfColorMode : int;
enum pdfColorProfile : int;
enum pdfEPSAs : int;
enum pdfDisplayOnStart : int;
enum pdfVersion : int;
enum pdfTextExportMode : int;
enum pdfPrintPermissions : int;
enum pdfEditPermissions : int;
enum pdfEncryptionType : int;
enum pdfSpotType : int;
enum cuiBarType : int;
enum cuiBarPosition : int;
enum cuiBarProtection : int;
enum cuiWindowState : int;
enum cuiDockHostOrientation : int;
enum cuiDockItemType : int;
enum cuiDockOperation : int;
enum cuiMessageBoxFlags : int;
enum cuiTaskPriority : int;
struct CurveElement;
struct __declspec(uuid("f5200003-8d23-0001-89e7-0000861ebbd6"))
/* dual interface */ ICorelImportFilter;
struct __declspec(uuid("f5200000-8d23-0002-89e7-0000861ebbd6"))
/* dual interface */ ICorelExportFilter;
struct __declspec(uuid("9cee0002-42a0-5980-43a3-7aa71461482c"))
/* dual interface */ ICUIAutomation;
struct __declspec(uuid("9cee0001-42a0-5980-43a3-7aa71461482c"))
/* dual interface */ ICUIControlData;
struct __declspec(uuid("9cee0003-42a0-5980-43a3-7aa71461482c"))
/* dual interface */ ICUIFrameWork;
struct __declspec(uuid("9cee0004-42a0-5980-43a3-7aa71461482c"))
/* dual interface */ ICUICommandBars;
struct __declspec(uuid("9cee0009-42a0-5980-43a3-7aa71461482c"))
/* dual interface */ ICUICommandBar;
struct __declspec(uuid("9cee0007-42a0-5980-43a3-7aa71461482c"))
/* dual interface */ ICUIControls;
struct __declspec(uuid("9cee0008-42a0-5980-43a3-7aa71461482c"))
/* dual interface */ ICUIControl;
struct __declspec(uuid("9cee0005-42a0-5980-43a3-7aa71461482c"))
/* dual interface */ ICUICommandBarModes;
struct __declspec(uuid("9cee0006-42a0-5980-43a3-7aa71461482c"))
/* dual interface */ ICUICommandBarMode;
struct __declspec(uuid("9cee000f-42a0-5980-43a3-7aa71461482c"))
/* dual interface */ ICUIFrameWindows;
struct __declspec(uuid("9cee0010-42a0-5980-43a3-7aa71461482c"))
/* dual interface */ ICUIFrameWindow;
struct __declspec(uuid("9cee0011-42a0-5980-43a3-7aa71461482c"))
/* dual interface */ ICUIViewHosts;
struct __declspec(uuid("9cee0012-42a0-5980-43a3-7aa71461482c"))
/* dual interface */ ICUIViewHost;
struct __declspec(uuid("9cee0014-42a0-5980-43a3-7aa71461482c"))
/* dual interface */ ICUIDockHost;
struct __declspec(uuid("9cee0018-42a0-5980-43a3-7aa71461482c"))
/* dual interface */ ICUIDockItem;
struct __declspec(uuid("9cee0019-42a0-5980-43a3-7aa71461482c"))
/* dual interface */ ICUIScreenRect;
struct __declspec(uuid("9cee0017-42a0-5980-43a3-7aa71461482c"))
/* dual interface */ ICUIDockItems;
struct __declspec(uuid("9cee0016-42a0-5980-43a3-7aa71461482c"))
/* dual interface */ ICUIViewWindow;
struct __declspec(uuid("9cee0015-42a0-5980-43a3-7aa71461482c"))
/* dual interface */ ICUIViewWindows;
struct __declspec(uuid("9cee0013-42a0-5980-43a3-7aa71461482c"))
/* dual interface */ ICUIDockHosts;
struct __declspec(uuid("9cee000a-42a0-5980-43a3-7aa71461482c"))
/* dual interface */ ICUIApplication;
struct __declspec(uuid("9cee000b-42a0-5980-43a3-7aa71461482c"))
/* dual interface */ ICUIDataContext;
struct __declspec(uuid("9cee000c-42a0-5980-43a3-7aa71461482c"))
/* dual interface */ ICUIDataSourceProxy;
struct __declspec(uuid("9cee000d-42a0-5980-43a3-7aa71461482c"))
/* dual interface */ ICUIDataSourceFactory;
struct __declspec(uuid("9cee000e-42a0-5980-43a3-7aa71461482c"))
/* dual interface */ ICUIImageList;
struct __declspec(uuid("9cee001a-42a0-5980-43a3-7aa71461482c"))
/* dual interface */ ICUIBitmapImage;
struct __declspec(uuid("9cee001b-42a0-5980-43a3-7aa71461482c"))
/* dual interface */ ICUIStatusText;
struct __declspec(uuid("9cee001c-42a0-5980-43a3-7aa71461482c"))
/* dual interface */ ICUIWarning;
struct __declspec(uuid("9cee001f-42a0-5980-43a3-7aa71461482c"))
/* dual interface */ ICUITaskManager;
struct __declspec(uuid("9cee001d-42a0-5980-43a3-7aa71461482c"))
/* dual interface */ ICUITask;
struct __declspec(uuid("9cee001e-42a0-5980-43a3-7aa71461482c"))
/* dual interface */ ICUIBackgroundTask;
struct __declspec(uuid("9cee0021-42a0-5980-43a3-7aa71461482c"))
/* dual interface */ ICUIRunningBackgroundTask;
struct __declspec(uuid("9cee0020-42a0-5980-43a3-7aa71461482c"))
/* dual interface */ ICUIRunningTask;
struct __declspec(uuid("a25250a9-50c1-11d3-8ea3-0090271becdd"))
/* dual interface */ IPrnVBAPrintLayout;
struct __declspec(uuid("a2525098-50c1-11d3-8ea3-0090271becdd"))
/* dual interface */ IPrnVBAPrinter;
struct __declspec(uuid("a2525099-50c1-11d3-8ea3-0090271becdd"))
/* dual interface */ IPrnVBAPrinters;
struct __declspec(uuid("a252509a-50c1-11d3-8ea3-0090271becdd"))
/* dual interface */ IPrnVBASeparationPlate;
struct __declspec(uuid("a252509b-50c1-11d3-8ea3-0090271becdd"))
/* dual interface */ IPrnVBASeparationPlates;
struct __declspec(uuid("a252509c-50c1-11d3-8ea3-0090271becdd"))
/* dual interface */ IPrnVBAPrintSeparations;
struct __declspec(uuid("a252509d-50c1-11d3-8ea3-0090271becdd"))
/* dual interface */ IPrnVBAPrintPrepress;
struct __declspec(uuid("a252509e-50c1-11d3-8ea3-0090271becdd"))
/* dual interface */ IPrnVBAPrintPostScript;
struct __declspec(uuid("a252509f-50c1-11d3-8ea3-0090271becdd"))
/* dual interface */ IPrnVBATrapLayer;
struct __declspec(uuid("a25250a0-50c1-11d3-8ea3-0090271becdd"))
/* dual interface */ IPrnVBATrapLayers;
struct __declspec(uuid("a25250a1-50c1-11d3-8ea3-0090271becdd"))
/* dual interface */ IPrnVBAPrintTrapping;
struct __declspec(uuid("a25250a2-50c1-11d3-8ea3-0090271becdd"))
/* dual interface */ IPrnVBAPrintOptions;
struct __declspec(uuid("a25250a3-50c1-11d3-8ea3-0090271becdd"))
/* dual interface */ IPrnVBAPrintSettings;
struct __declspec(uuid("a25250a4-50c1-11d3-8ea3-0090271becdd"))
/* dual interface */ IPrnVBAPrintDocument;
struct __declspec(uuid("a25250a5-50c1-11d3-8ea3-0090271becdd"))
/* dual interface */ IPrnVBAPrintDocuments;
struct __declspec(uuid("a25250a6-50c1-11d3-8ea3-0090271becdd"))
/* dual interface */ IPrnVBAPrintPage;
struct __declspec(uuid("a25250a7-50c1-11d3-8ea3-0090271becdd"))
/* dual interface */ IPrnVBAPrintPages;
struct __declspec(uuid("a25250a8-50c1-11d3-8ea3-0090271becdd"))
/* dual interface */ IPrnVBAPrintJob;
struct __declspec(uuid("a2524ffb-50c1-11d3-8ea3-0090271becdd"))
/* dual interface */ IPDFVBASettings;
struct __declspec(uuid("b0580024-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGDocument;
struct __declspec(uuid("b058000b-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGApplication;
struct __declspec(uuid("b0580025-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGDocuments;
struct __declspec(uuid("b0580048-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGPage;
struct __declspec(uuid("b0580049-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGPages;
struct __declspec(uuid("b0580041-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGLayers;
struct __declspec(uuid("b0580040-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGLayer;
struct __declspec(uuid("b058005f-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGShapes;
struct __declspec(uuid("b058005d-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGShape;
struct __declspec(uuid("b0580057-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGRectangle;
struct __declspec(uuid("b0580037-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGEllipse;
struct __declspec(uuid("b0580051-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGPolygon;
struct __declspec(uuid("b0580019-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGCurve;
struct __declspec(uuid("b058006b-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGSubPaths;
struct __declspec(uuid("b058006a-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGSubPath;
struct __declspec(uuid("b0580044-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGNodes;
struct __declspec(uuid("b0580042-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGNode;
struct __declspec(uuid("b0580059-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGSegment;
struct __declspec(uuid("b0580018-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGCrossPoints;
struct __declspec(uuid("b0580017-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGCrossPoint;
struct __declspec(uuid("b05800a3-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGRect;
struct __declspec(uuid("b05800d2-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGVector;
struct __declspec(uuid("b05800d0-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGPoint;
struct __declspec(uuid("b0580043-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGNodeRange;
struct __declspec(uuid("b058005a-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGSegmentRange;
struct __declspec(uuid("b058005b-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGSegments;
struct __declspec(uuid("b05800d1-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGPointRange;
struct __declspec(uuid("b05800d3-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGTransformMatrix;
struct __declspec(uuid("b058000f-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGBitmap;
struct __declspec(uuid("b0580067-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGStructPaletteOptions;
struct __declspec(uuid("b0580091-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGDuotone;
struct __declspec(uuid("b0580092-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGDuotoneOverprint;
struct __declspec(uuid("b0580012-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGColor;
struct __declspec(uuid("b05800b0-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGColorContext;
struct __declspec(uuid("b0580098-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGColorProfile;
struct __declspec(uuid("b0580099-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGColorProfiles;
struct __declspec(uuid("b058004c-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGPalette;
struct __declspec(uuid("b0580013-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGColors;
struct __declspec(uuid("b0580093-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGDuotoneInk;
struct __declspec(uuid("b05800a1-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGTraceSettings;
struct __declspec(uuid("b058005e-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGShapeRange;
struct __declspec(uuid("b0580046-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGOutlineStyle;
struct __declspec(uuid("b058000d-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGArrowHead;
struct __declspec(uuid("b0580038-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGFill;
struct __declspec(uuid("b058003c-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGFountainFill;
struct __declspec(uuid("b058003b-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGFountainColors;
struct __declspec(uuid("b058003a-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGFountainColor;
struct __declspec(uuid("b0580050-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGPatternFill;
struct __declspec(uuid("b058004e-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGPatternCanvas;
struct __declspec(uuid("b0580079-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGTextureFill;
struct __declspec(uuid("b058007a-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGTextureFillProperties;
struct __declspec(uuid("b058007b-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGTextureFillProperty;
struct __declspec(uuid("b0580052-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGPostScriptFill;
struct __declspec(uuid("b0580096-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGPSScreenOptions;
struct __declspec(uuid("b058009a-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGHatchFill;
struct __declspec(uuid("b058009b-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGHatchPatterns;
struct __declspec(uuid("b058009c-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGHatchPattern;
struct __declspec(uuid("b0580045-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGOutline;
struct __declspec(uuid("b05800a7-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGArrowHeadOptions;
struct __declspec(uuid("b058009e-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGHatchLibrary;
struct __declspec(uuid("b058009f-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGHatchFills;
struct __declspec(uuid("b0580054-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGProperties;
struct __declspec(uuid("b05800d8-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGImage;
struct __declspec(uuid("b05800d9-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGImageTiles;
struct __declspec(uuid("b05800da-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGImageTile;
struct __declspec(uuid("b0580071-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGText;
struct __declspec(uuid("b0580064-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGStructFontProperties;
struct __declspec(uuid("b0580062-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGStructAlignProperties;
struct __declspec(uuid("b0580069-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGStructSpaceProperties;
struct __declspec(uuid("b0580066-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGStructHyphenationSettings;
struct __declspec(uuid("b0580026-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGEffect;
struct __declspec(uuid("b0580036-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGEffects;
struct __declspec(uuid("b0580027-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGEffectBlend;
struct __declspec(uuid("b0580060-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGSnapPoint;
struct __declspec(uuid("b05800a8-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGUserSnapPoint;
struct __declspec(uuid("b05800a9-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGObjectSnapPoint;
struct __declspec(uuid("b05800aa-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGBBoxSnapPoint;
struct __declspec(uuid("b05800ac-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGEdgeSnapPoint;
struct __declspec(uuid("b0580029-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGEffectControlPath;
struct __declspec(uuid("b058002d-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGEffectExtrude;
struct __declspec(uuid("b058002e-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGExtrudeVanishingPoint;
struct __declspec(uuid("b058002c-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGEffectEnvelope;
struct __declspec(uuid("b0580033-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGEffectTextOnPath;
struct __declspec(uuid("b058002b-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGEffectDropShadow;
struct __declspec(uuid("b0580028-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGEffectContour;
struct __declspec(uuid("b058002a-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGEffectDistortion;
struct __declspec(uuid("b0580032-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGEffectPushPullDistortion;
struct __declspec(uuid("b0580035-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGEffectZipperDistortion;
struct __declspec(uuid("b0580034-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGEffectTwisterDistortion;
struct __declspec(uuid("b058001b-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGEffectCustomDistortion;
struct __declspec(uuid("b0580030-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGEffectLens;
struct __declspec(uuid("b0580031-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGEffectPerspective;
struct __declspec(uuid("b058001a-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGCustomEffect;
struct __declspec(uuid("b05800db-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGEffectInnerShadow;
struct __declspec(uuid("b0580078-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGTextRange;
struct __declspec(uuid("b0580072-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGTextCharacters;
struct __declspec(uuid("b058007c-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGTextWords;
struct __declspec(uuid("b0580076-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGTextLines;
struct __declspec(uuid("b0580077-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGTextParagraphs;
struct __declspec(uuid("b0580073-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGTextColumns;
struct __declspec(uuid("b0580075-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGTextFrames;
struct __declspec(uuid("b0580074-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGTextFrame;
struct __declspec(uuid("b0580095-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGTextTabPositions;
struct __declspec(uuid("b0580094-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGTextTabPosition;
struct __declspec(uuid("b05800a4-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGTextRanges;
struct __declspec(uuid("b05800b8-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGStyle;
struct __declspec(uuid("b05800bb-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGStyleOutline;
struct __declspec(uuid("b05800bc-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGStyleFill;
struct __declspec(uuid("b05800c0-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGFillMetadata;
struct __declspec(uuid("b05800c1-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGLocalizableString;
struct __declspec(uuid("b05800bd-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGStyleCharacter;
struct __declspec(uuid("b05800be-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGStyleParagraph;
struct __declspec(uuid("b05800bf-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGStyleFrame;
struct __declspec(uuid("b05800b9-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGStyles;
struct __declspec(uuid("b05800d7-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGStyleTransparency;
struct __declspec(uuid("b05800dc-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGTextIndentLevelStyles;
struct __declspec(uuid("b05800dd-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGTextIndentLevelStyle;
struct __declspec(uuid("b05800de-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGTextVariableAxes;
struct __declspec(uuid("b05800df-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGTextVariableAxis;
struct __declspec(uuid("b0580061-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGSnapPoints;
struct __declspec(uuid("b05800ab-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGSnapPointRange;
struct __declspec(uuid("b0580016-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGConnector;
struct __declspec(uuid("b058003f-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGGuide;
struct __declspec(uuid("b0580053-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGPowerClip;
struct __declspec(uuid("b058007e-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGURL;
struct __declspec(uuid("b0580020-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGDataItems;
struct __declspec(uuid("b058001f-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGDataItem;
struct __declspec(uuid("b058001d-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGDataField;
struct __declspec(uuid("b058001e-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGDataFields;
struct __declspec(uuid("b0580011-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGCloneLink;
struct __declspec(uuid("b058007d-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGTransparency;
struct __declspec(uuid("b058001c-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGCustomShape;
struct __declspec(uuid("b0580021-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGDimension;
struct __declspec(uuid("b0580023-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGDimensionLinear;
struct __declspec(uuid("b0580022-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGDimensionAngular;
struct __declspec(uuid("b058006c-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGSymbol;
struct __declspec(uuid("b058006d-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGSymbolDefinition;
struct __declspec(uuid("b058006e-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGSymbolDefinitions;
struct __declspec(uuid("b0580088-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGOLE;
struct __declspec(uuid("b058008f-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGTreeNode;
struct __declspec(uuid("b0580090-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGTreeNodes;
struct __declspec(uuid("b05800a0-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGEPS;
struct __declspec(uuid("b05800a5-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGSpread;
struct __declspec(uuid("b05800ad-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGBSpline;
struct __declspec(uuid("b05800af-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGBSplineControlPoints;
struct __declspec(uuid("b05800ae-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGBSplineControlPoint;
struct __declspec(uuid("b0580085-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGStructImportOptions;
struct __declspec(uuid("f5200005-8d23-0001-89e7-0000861ebbd6"))
/* dual interface */ IImportCropHandler;
struct __declspec(uuid("b0580087-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IStructImportCropOptions;
struct __declspec(uuid("f5200004-8d23-0001-89e7-0000861ebbd6"))
/* dual interface */ IImportResampleHandler;
struct __declspec(uuid("b0580086-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IStructImportResampleOptions;
struct __declspec(uuid("b05800b2-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGStructColorConversionOptions;
struct __declspec(uuid("b05800b1-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGColorManagementPolicy;
struct __declspec(uuid("7cb12d17-eca6-0e87-46f7-e4d31c0d0500"))
/* dual interface */ IColorConversionHandler;
struct __declspec(uuid("b0580070-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGSymbolLibrary;
struct __declspec(uuid("b05800b5-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGStructPasteOptions;
struct __declspec(uuid("b05800e6-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGPageMarkup;
struct __declspec(uuid("b05800ec-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGCommentThreads;
struct __declspec(uuid("b05800e7-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGCommentThread;
struct __declspec(uuid("b05800ed-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGCommentTarget;
struct __declspec(uuid("b05800e4-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGComments;
struct __declspec(uuid("b05800e9-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGComment;
struct __declspec(uuid("b05800e1-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGCommentAuthor;
struct __declspec(uuid("b05800e8-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGCommentAnnotation;
struct __declspec(uuid("b0580081-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGWindow;
struct __declspec(uuid("b0580082-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGWindows;
struct __declspec(uuid("b058000a-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGActiveView;
struct __declspec(uuid("b05800b6-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGProofColorSettings;
struct __declspec(uuid("b0580000-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ ICorelScriptTools;
struct __declspec(uuid("b0580083-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGWorkspace;
struct __declspec(uuid("b0580084-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGWorkspaces;
struct __declspec(uuid("b058004d-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGPalettes;
struct __declspec(uuid("b0580039-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGFontList;
struct __declspec(uuid("b058000c-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGAppWindow;
struct __declspec(uuid("b0580056-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGRecentFiles;
struct __declspec(uuid("b0580055-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGRecentFile;
struct __declspec(uuid("b058000e-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGArrowHeads;
struct __declspec(uuid("b0580047-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGOutlineStyles;
struct __declspec(uuid("b058004f-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGPatternCanvases;
struct __declspec(uuid("b0580010-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGClipboard;
struct __declspec(uuid("b058003d-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGGMSManager;
struct __declspec(uuid("b058008a-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGGMSProjects;
struct __declspec(uuid("b058008b-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGGMSProject;
struct __declspec(uuid("b058008c-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGGMSMacros;
struct __declspec(uuid("b058008d-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGGMSMacro;
struct __declspec(uuid("b0580068-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGStructSaveAsOptions;
struct __declspec(uuid("b0580063-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGStructExportOptions;
struct __declspec(uuid("b0580015-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGComponents;
struct __declspec(uuid("b0580014-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGComponent;
struct __declspec(uuid("b058006f-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGSymbolLibraries;
struct __declspec(uuid("b0580089-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGAppStatus;
struct __declspec(uuid("b058004b-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGPageSizes;
struct __declspec(uuid("b058004a-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGPageSize;
struct __declspec(uuid("b058008e-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGTreeManager;
struct __declspec(uuid("b0580097-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGColorManager;
struct __declspec(uuid("b05800b3-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGStructOpenOptions;
struct __declspec(uuid("b05800b4-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGStructCreateOptions;
struct __declspec(uuid("b05800b7-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGPaletteManager;
struct __declspec(uuid("b05800cf-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGToolState;
struct __declspec(uuid("b05800ce-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGToolStateAttributes;
struct __declspec(uuid("b05800cb-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGOnScreenCurve;
struct __declspec(uuid("b05800cc-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGOnScreenHandle;
struct __declspec(uuid("b05800cd-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGOnScreenText;
struct __declspec(uuid("b05800d4-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGMathUtils;
struct __declspec(uuid("b05800d5-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGToolShapeAttributes;
struct __declspec(uuid("b05800d6-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGToolShape;
struct __declspec(uuid("b0580058-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGRulers;
struct __declspec(uuid("b058003e-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGGrid;
struct __declspec(uuid("b0580080-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGViews;
struct __declspec(uuid("b058007f-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGView;
struct __declspec(uuid("b058005c-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGSelectionInformation;
struct __declspec(uuid("b058009d-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGHatchLibraries;
struct __declspec(uuid("b05800a2-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGMetadata;
struct __declspec(uuid("b05800a6-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGSpreads;
struct __declspec(uuid("b05800ba-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGStyleSheet;
struct __declspec(uuid("b05800e0-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGDocumentMarkup;
struct __declspec(uuid("b05800c2-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ _IGlobalMacroStorage;
struct __declspec(uuid("b0580005-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGAppPlugin;
struct __declspec(uuid("b05800c3-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGApplicationEvents;
struct /* coclass */ Document;
struct __declspec(uuid("b05800c6-9aa4-44fd-9547-4f91eb757ac4"))
/* dispinterface */ DIVGDocumentEvents;
struct __declspec(uuid("b05800c4-9aa4-44fd-9547-4f91eb757ac4"))
/* dual interface */ IVGDocumentEvents;
struct /* coclass */ Layer;
struct /* coclass */ Page;
struct /* coclass */ Shape;
struct /* coclass */ Window;
struct __declspec(uuid("b05800c5-9aa4-44fd-9547-4f91eb757ac4"))
/* dispinterface */ DIVGApplicationEvents;
struct /* coclass */ ActiveView;
struct /* coclass */ Application;
struct /* coclass */ AppStatus;
struct /* coclass */ AppWindow;
struct /* coclass */ ArrowHead;
struct /* coclass */ ArrowHeadOptions;
struct /* coclass */ ArrowHeads;
struct /* coclass */ BBoxSnapPoint;
struct /* coclass */ Bitmap;
struct /* coclass */ BSpline;
struct /* coclass */ BSplineControlPoint;
struct /* coclass */ BSplineControlPoints;
struct /* coclass */ Clipboard;
struct /* coclass */ CloneLink;
struct /* coclass */ Color;
struct /* coclass */ ColorContext;
struct /* coclass */ ColorManagementPolicy;
struct /* coclass */ ColorManager;
struct /* coclass */ ColorProfile;
struct /* coclass */ ColorProfiles;
struct /* coclass */ Colors;
struct /* coclass */ Component;
struct /* coclass */ Components;
struct /* coclass */ Connector;
struct /* coclass */ CrossPoint;
struct /* coclass */ CrossPoints;
struct /* coclass */ Curve;
struct /* coclass */ CustomEffect;
struct /* coclass */ CustomShape;
struct /* coclass */ DataField;
struct /* coclass */ DataFields;
struct /* coclass */ DataItem;
struct /* coclass */ DataItems;
struct /* coclass */ Dimension;
struct /* coclass */ DimensionAngular;
struct /* coclass */ DimensionLinear;
struct /* coclass */ Documents;
struct /* coclass */ Duotone;
struct /* coclass */ DuotoneInk;
struct /* coclass */ DuotoneOverprint;
struct /* coclass */ EdgeSnapPoint;
struct /* coclass */ Effect;
struct /* coclass */ EffectBlend;
struct /* coclass */ EffectContour;
struct /* coclass */ EffectControlPath;
struct /* coclass */ EffectCustomDistortion;
struct /* coclass */ EffectDistortion;
struct /* coclass */ EffectDropShadow;
struct /* coclass */ EffectEnvelope;
struct /* coclass */ EffectExtrude;
struct /* coclass */ EffectLens;
struct /* coclass */ EffectPerspective;
struct /* coclass */ EffectPushPullDistortion;
struct /* coclass */ Effects;
struct /* coclass */ EffectTextOnPath;
struct /* coclass */ EffectTwisterDistortion;
struct /* coclass */ EffectZipperDistortion;
struct /* coclass */ Ellipse;
struct /* coclass */ EPS;
struct /* coclass */ ExportFilter;
struct /* coclass */ ExtrudeVanishingPoint;
struct /* coclass */ Fill;
struct /* coclass */ FillMetadata;
struct /* coclass */ FontList;
struct /* coclass */ FountainColor;
struct /* coclass */ FountainColors;
struct /* coclass */ FountainFill;
struct /* coclass */ GlobalMacroStorage;
struct /* coclass */ GMSManager;
struct /* coclass */ Grid;
struct /* coclass */ Guide;
struct /* coclass */ HatchFill;
struct /* coclass */ HatchFills;
struct /* coclass */ HatchLibraries;
struct /* coclass */ HatchLibrary;
struct /* coclass */ HatchPattern;
struct /* coclass */ HatchPatterns;
struct /* coclass */ ImportFilter;
struct /* coclass */ Layers;
struct /* coclass */ LocalizableString;
struct /* coclass */ Metadata;
struct /* coclass */ Node;
struct /* coclass */ NodeRange;
struct /* coclass */ Nodes;
struct /* coclass */ ObjectSnapPoint;
struct /* coclass */ OLE;
struct /* coclass */ Outline;
struct /* coclass */ OutlineStyle;
struct /* coclass */ OutlineStyles;
struct /* coclass */ Pages;
struct /* coclass */ PageSize;
struct /* coclass */ PageSizes;
struct /* coclass */ Palette;
struct /* coclass */ PaletteManager;
struct /* coclass */ Palettes;
struct /* coclass */ PatternCanvas;
struct /* coclass */ PatternCanvases;
struct /* coclass */ PatternFill;
struct /* coclass */ Polygon;
struct /* coclass */ PostScriptFill;
struct /* coclass */ PowerClip;
struct /* coclass */ ProofColorSettings;
struct /* coclass */ Properties;
struct /* coclass */ PSScreenOptions;
struct /* coclass */ RecentFile;
struct /* coclass */ RecentFiles;
struct /* coclass */ Rect;
struct /* coclass */ Rectangle;
struct /* coclass */ Rulers;
struct /* coclass */ Segment;
struct /* coclass */ SegmentRange;
struct /* coclass */ Segments;
struct /* coclass */ SelectionInfo;
struct /* coclass */ ShapeRange;
struct /* coclass */ Shapes;
struct /* coclass */ SnapPoint;
struct /* coclass */ SnapPointRange;
struct /* coclass */ SnapPoints;
struct /* coclass */ Spread;
struct /* coclass */ Spreads;
struct /* coclass */ StructAlignProperties;
struct /* coclass */ StructColorConversionOptions;
struct /* coclass */ StructCreateOptions;
struct /* coclass */ StructExportOptions;
struct /* coclass */ StructFontProperties;
struct /* coclass */ StructHyphenationSettings;
struct /* coclass */ StructImportCropOptions;
struct /* coclass */ StructImportOptions;
struct /* coclass */ StructImportResampleOptions;
struct /* coclass */ StructOpenOptions;
struct /* coclass */ StructPaletteOptions;
struct /* coclass */ StructPasteOptions;
struct /* coclass */ StructSaveAsOptions;
struct /* coclass */ StructSpaceProperties;
struct /* coclass */ Style;
struct /* coclass */ StyleCharacter;
struct /* coclass */ StyleFill;
struct /* coclass */ StyleFrame;
struct /* coclass */ StyleOutline;
struct /* coclass */ StyleParagraph;
struct /* coclass */ Styles;
struct /* coclass */ StyleSheet;
struct /* coclass */ SubPath;
struct /* coclass */ SubPaths;
struct /* coclass */ Symbol;
struct /* coclass */ SymbolDefinition;
struct /* coclass */ SymbolDefinitions;
struct /* coclass */ SymbolLibraries;
struct /* coclass */ SymbolLibrary;
struct /* coclass */ Text;
struct /* coclass */ TextCharacters;
struct /* coclass */ TextColumns;
struct /* coclass */ TextFrame;
struct /* coclass */ TextFrames;
struct /* coclass */ TextLines;
struct /* coclass */ TextParagraphs;
struct /* coclass */ TextRange;
struct /* coclass */ TextRanges;
struct /* coclass */ TextTabPosition;
struct /* coclass */ TextTabPositions;
struct /* coclass */ TextureFill;
struct /* coclass */ TextureFillProperties;
struct /* coclass */ TextureFillProperty;
struct /* coclass */ TextWords;
struct /* coclass */ TraceSettings;
struct /* coclass */ Transparency;
struct /* coclass */ TreeManager;
struct /* coclass */ TreeNode;
struct /* coclass */ TreeNodes;
struct /* coclass */ URL;
struct /* coclass */ UserSnapPoint;
struct /* coclass */ View;
struct /* coclass */ Views;
struct /* coclass */ Windows;
struct /* coclass */ Workspace;
struct /* coclass */ Workspaces;
struct /* coclass */ CorelScriptTools;
struct /* coclass */ GMSMacro;
struct /* coclass */ GMSMacros;
struct /* coclass */ GMSProject;
struct /* coclass */ GMSProjects;
struct /* coclass */ OnScreenCurve;
struct /* coclass */ OnScreenHandle;
struct /* coclass */ OnScreenText;
struct /* coclass */ ToolStateAttributes;
struct /* coclass */ ToolState;
struct /* coclass */ Point;
struct /* coclass */ PointRange;
struct /* coclass */ Vector;
struct /* coclass */ TransformMatrix;
struct /* coclass */ MathUtils;
struct /* coclass */ ToolShapeAttributes;
struct /* coclass */ ToolShape;
struct /* coclass */ StyleTransparency;
struct /* coclass */ Image;
struct /* coclass */ ImageTiles;
struct /* coclass */ ImageTile;
struct /* coclass */ EffectInnerShadow;
struct /* coclass */ TextIndentLevelStyles;
struct /* coclass */ TextIndentLevelStyle;
struct /* coclass */ TextVariableAxes;
struct /* coclass */ TextVariableAxis;
struct /* coclass */ FrameWork;
struct /* coclass */ CommandBars;
struct /* coclass */ CommandBarModes;
struct /* coclass */ CommandBarMode;
struct /* coclass */ Controls;
struct /* coclass */ Control;
struct /* coclass */ CommandBar;
struct /* coclass */ DataContext;
struct /* coclass */ DataSourceProxy;
struct /* coclass */ ImageList;
struct /* coclass */ FrameWindows;
struct /* coclass */ FrameWindow;
struct /* coclass */ ViewHosts;
struct /* coclass */ ViewHost;
struct /* coclass */ DockHosts;
struct /* coclass */ DockHost;
struct /* coclass */ ViewWindows;
struct /* coclass */ ViewWindow;
struct /* coclass */ DockItems;
struct /* coclass */ DockItem;
struct /* coclass */ ScreenRect;
struct /* coclass */ BitmapImage;
struct /* coclass */ StatusText;
struct /* coclass */ PDFVBASettings;
struct /* coclass */ SystemPrinters;
struct /* coclass */ Printer;
struct /* coclass */ PrintJob;
struct /* coclass */ PrintDocuments;
struct /* coclass */ PrintPages;
struct /* coclass */ PrintSettings;
struct /* coclass */ PrintSeparations;
struct /* coclass */ SeparationPlates;
struct /* coclass */ SeparationPlate;
struct /* coclass */ PrintPrepress;
struct /* coclass */ PrintPostScript;
struct /* coclass */ PrintTrapping;
struct /* coclass */ TrapLayers;
struct /* coclass */ TrapLayer;
struct /* coclass */ PrintOptions;
struct /* coclass */ PrintLayout;
#if !defined(_WIN64)
typedef __w64 long INT_PTR;
#else
typedef __int64 INT_PTR;
#endif

//
// Smart pointer typedef declarations
//

_COM_SMARTPTR_TYPEDEF(ICorelImportFilter, __uuidof(ICorelImportFilter));
_COM_SMARTPTR_TYPEDEF(ICorelExportFilter, __uuidof(ICorelExportFilter));
_COM_SMARTPTR_TYPEDEF(ICUIControlData, __uuidof(ICUIControlData));
_COM_SMARTPTR_TYPEDEF(ICUIAutomation, __uuidof(ICUIAutomation));
_COM_SMARTPTR_TYPEDEF(ICUIControl, __uuidof(ICUIControl));
_COM_SMARTPTR_TYPEDEF(ICUIControls, __uuidof(ICUIControls));
_COM_SMARTPTR_TYPEDEF(ICUICommandBarMode, __uuidof(ICUICommandBarMode));
_COM_SMARTPTR_TYPEDEF(ICUICommandBarModes, __uuidof(ICUICommandBarModes));
_COM_SMARTPTR_TYPEDEF(ICUICommandBar, __uuidof(ICUICommandBar));
_COM_SMARTPTR_TYPEDEF(ICUICommandBars, __uuidof(ICUICommandBars));
_COM_SMARTPTR_TYPEDEF(ICUIScreenRect, __uuidof(ICUIScreenRect));
_COM_SMARTPTR_TYPEDEF(ICUIBitmapImage, __uuidof(ICUIBitmapImage));
_COM_SMARTPTR_TYPEDEF(ICUIImageList, __uuidof(ICUIImageList));
_COM_SMARTPTR_TYPEDEF(ICUIStatusText, __uuidof(ICUIStatusText));
_COM_SMARTPTR_TYPEDEF(ICUIWarning, __uuidof(ICUIWarning));
_COM_SMARTPTR_TYPEDEF(ICUITask, __uuidof(ICUITask));
_COM_SMARTPTR_TYPEDEF(ICUIBackgroundTask, __uuidof(ICUIBackgroundTask));
_COM_SMARTPTR_TYPEDEF(ICUIRunningTask, __uuidof(ICUIRunningTask));
_COM_SMARTPTR_TYPEDEF(ICUIRunningBackgroundTask, __uuidof(ICUIRunningBackgroundTask));
_COM_SMARTPTR_TYPEDEF(ICUITaskManager, __uuidof(ICUITaskManager));
_COM_SMARTPTR_TYPEDEF(IPrnVBAPrintLayout, __uuidof(IPrnVBAPrintLayout));
_COM_SMARTPTR_TYPEDEF(IPrnVBAPrinter, __uuidof(IPrnVBAPrinter));
_COM_SMARTPTR_TYPEDEF(IPrnVBAPrinters, __uuidof(IPrnVBAPrinters));
_COM_SMARTPTR_TYPEDEF(IPrnVBASeparationPlate, __uuidof(IPrnVBASeparationPlate));
_COM_SMARTPTR_TYPEDEF(IPrnVBASeparationPlates, __uuidof(IPrnVBASeparationPlates));
_COM_SMARTPTR_TYPEDEF(IPrnVBAPrintSeparations, __uuidof(IPrnVBAPrintSeparations));
_COM_SMARTPTR_TYPEDEF(IPrnVBAPrintPrepress, __uuidof(IPrnVBAPrintPrepress));
_COM_SMARTPTR_TYPEDEF(IPrnVBAPrintPostScript, __uuidof(IPrnVBAPrintPostScript));
_COM_SMARTPTR_TYPEDEF(IPrnVBATrapLayer, __uuidof(IPrnVBATrapLayer));
_COM_SMARTPTR_TYPEDEF(IPrnVBATrapLayers, __uuidof(IPrnVBATrapLayers));
_COM_SMARTPTR_TYPEDEF(IPrnVBAPrintTrapping, __uuidof(IPrnVBAPrintTrapping));
_COM_SMARTPTR_TYPEDEF(IPrnVBAPrintOptions, __uuidof(IPrnVBAPrintOptions));
_COM_SMARTPTR_TYPEDEF(IPrnVBAPrintSettings, __uuidof(IPrnVBAPrintSettings));
_COM_SMARTPTR_TYPEDEF(IPrnVBAPrintDocument, __uuidof(IPrnVBAPrintDocument));
_COM_SMARTPTR_TYPEDEF(IPrnVBAPrintDocuments, __uuidof(IPrnVBAPrintDocuments));
_COM_SMARTPTR_TYPEDEF(IPrnVBAPrintPage, __uuidof(IPrnVBAPrintPage));
_COM_SMARTPTR_TYPEDEF(IPrnVBAPrintPages, __uuidof(IPrnVBAPrintPages));
_COM_SMARTPTR_TYPEDEF(IPrnVBAPrintJob, __uuidof(IPrnVBAPrintJob));
_COM_SMARTPTR_TYPEDEF(IPDFVBASettings, __uuidof(IPDFVBASettings));
_COM_SMARTPTR_TYPEDEF(IVGRectangle, __uuidof(IVGRectangle));
_COM_SMARTPTR_TYPEDEF(IVGEllipse, __uuidof(IVGEllipse));
_COM_SMARTPTR_TYPEDEF(IVGPolygon, __uuidof(IVGPolygon));
_COM_SMARTPTR_TYPEDEF(IVGCrossPoint, __uuidof(IVGCrossPoint));
_COM_SMARTPTR_TYPEDEF(IVGCrossPoints, __uuidof(IVGCrossPoints));
_COM_SMARTPTR_TYPEDEF(IVGStructPaletteOptions, __uuidof(IVGStructPaletteOptions));
_COM_SMARTPTR_TYPEDEF(IVGOutlineStyle, __uuidof(IVGOutlineStyle));
_COM_SMARTPTR_TYPEDEF(IVGPatternCanvas, __uuidof(IVGPatternCanvas));
_COM_SMARTPTR_TYPEDEF(IVGTextureFillProperty, __uuidof(IVGTextureFillProperty));
_COM_SMARTPTR_TYPEDEF(IVGTextureFillProperties, __uuidof(IVGTextureFillProperties));
_COM_SMARTPTR_TYPEDEF(IVGTextureFill, __uuidof(IVGTextureFill));
_COM_SMARTPTR_TYPEDEF(IVGPostScriptFill, __uuidof(IVGPostScriptFill));
_COM_SMARTPTR_TYPEDEF(IVGPSScreenOptions, __uuidof(IVGPSScreenOptions));
_COM_SMARTPTR_TYPEDEF(IVGArrowHeadOptions, __uuidof(IVGArrowHeadOptions));
_COM_SMARTPTR_TYPEDEF(IVGImageTile, __uuidof(IVGImageTile));
_COM_SMARTPTR_TYPEDEF(IVGImageTiles, __uuidof(IVGImageTiles));
_COM_SMARTPTR_TYPEDEF(IVGStructAlignProperties, __uuidof(IVGStructAlignProperties));
_COM_SMARTPTR_TYPEDEF(IVGStructSpaceProperties, __uuidof(IVGStructSpaceProperties));
_COM_SMARTPTR_TYPEDEF(IVGStructHyphenationSettings, __uuidof(IVGStructHyphenationSettings));
_COM_SMARTPTR_TYPEDEF(IVGUserSnapPoint, __uuidof(IVGUserSnapPoint));
_COM_SMARTPTR_TYPEDEF(IVGObjectSnapPoint, __uuidof(IVGObjectSnapPoint));
_COM_SMARTPTR_TYPEDEF(IVGBBoxSnapPoint, __uuidof(IVGBBoxSnapPoint));
_COM_SMARTPTR_TYPEDEF(IVGEdgeSnapPoint, __uuidof(IVGEdgeSnapPoint));
_COM_SMARTPTR_TYPEDEF(IVGEffectCustomDistortion, __uuidof(IVGEffectCustomDistortion));
_COM_SMARTPTR_TYPEDEF(IVGTextTabPosition, __uuidof(IVGTextTabPosition));
_COM_SMARTPTR_TYPEDEF(IVGTextTabPositions, __uuidof(IVGTextTabPositions));
_COM_SMARTPTR_TYPEDEF(IVGLocalizableString, __uuidof(IVGLocalizableString));
_COM_SMARTPTR_TYPEDEF(IVGFillMetadata, __uuidof(IVGFillMetadata));
_COM_SMARTPTR_TYPEDEF(IVGTextIndentLevelStyle, __uuidof(IVGTextIndentLevelStyle));
_COM_SMARTPTR_TYPEDEF(IVGTextIndentLevelStyles, __uuidof(IVGTextIndentLevelStyles));
_COM_SMARTPTR_TYPEDEF(IVGTextVariableAxis, __uuidof(IVGTextVariableAxis));
_COM_SMARTPTR_TYPEDEF(IVGTextVariableAxes, __uuidof(IVGTextVariableAxes));
_COM_SMARTPTR_TYPEDEF(IVGGuide, __uuidof(IVGGuide));
_COM_SMARTPTR_TYPEDEF(IVGURL, __uuidof(IVGURL));
_COM_SMARTPTR_TYPEDEF(IVGCustomShape, __uuidof(IVGCustomShape));
_COM_SMARTPTR_TYPEDEF(IVGOLE, __uuidof(IVGOLE));
_COM_SMARTPTR_TYPEDEF(IVGBSplineControlPoint, __uuidof(IVGBSplineControlPoint));
_COM_SMARTPTR_TYPEDEF(IVGBSplineControlPoints, __uuidof(IVGBSplineControlPoints));
_COM_SMARTPTR_TYPEDEF(IVGBSpline, __uuidof(IVGBSpline));
_COM_SMARTPTR_TYPEDEF(IStructImportCropOptions, __uuidof(IStructImportCropOptions));
_COM_SMARTPTR_TYPEDEF(IImportCropHandler, __uuidof(IImportCropHandler));
_COM_SMARTPTR_TYPEDEF(IStructImportResampleOptions, __uuidof(IStructImportResampleOptions));
_COM_SMARTPTR_TYPEDEF(IImportResampleHandler, __uuidof(IImportResampleHandler));
_COM_SMARTPTR_TYPEDEF(IVGColorManagementPolicy, __uuidof(IVGColorManagementPolicy));
_COM_SMARTPTR_TYPEDEF(IColorConversionHandler, __uuidof(IColorConversionHandler));
_COM_SMARTPTR_TYPEDEF(IVGStructColorConversionOptions, __uuidof(IVGStructColorConversionOptions));
_COM_SMARTPTR_TYPEDEF(IVGStructImportOptions, __uuidof(IVGStructImportOptions));
_COM_SMARTPTR_TYPEDEF(IVGStructPasteOptions, __uuidof(IVGStructPasteOptions));
_COM_SMARTPTR_TYPEDEF(IVGCommentAuthor, __uuidof(IVGCommentAuthor));
_COM_SMARTPTR_TYPEDEF(ICorelScriptTools, __uuidof(ICorelScriptTools));
_COM_SMARTPTR_TYPEDEF(IVGFontList, __uuidof(IVGFontList));
_COM_SMARTPTR_TYPEDEF(IVGAppWindow, __uuidof(IVGAppWindow));
_COM_SMARTPTR_TYPEDEF(IVGPatternCanvases, __uuidof(IVGPatternCanvases));
_COM_SMARTPTR_TYPEDEF(IVGClipboard, __uuidof(IVGClipboard));
_COM_SMARTPTR_TYPEDEF(IVGGMSMacro, __uuidof(IVGGMSMacro));
_COM_SMARTPTR_TYPEDEF(IVGGMSMacros, __uuidof(IVGGMSMacros));
_COM_SMARTPTR_TYPEDEF(IVGGMSProject, __uuidof(IVGGMSProject));
_COM_SMARTPTR_TYPEDEF(IVGGMSProjects, __uuidof(IVGGMSProjects));
_COM_SMARTPTR_TYPEDEF(IVGGMSManager, __uuidof(IVGGMSManager));
_COM_SMARTPTR_TYPEDEF(IVGStructSaveAsOptions, __uuidof(IVGStructSaveAsOptions));
_COM_SMARTPTR_TYPEDEF(IVGComponent, __uuidof(IVGComponent));
_COM_SMARTPTR_TYPEDEF(IVGComponents, __uuidof(IVGComponents));
_COM_SMARTPTR_TYPEDEF(IVGAppStatus, __uuidof(IVGAppStatus));
_COM_SMARTPTR_TYPEDEF(IVGStructOpenOptions, __uuidof(IVGStructOpenOptions));
_COM_SMARTPTR_TYPEDEF(IVGOnScreenHandle, __uuidof(IVGOnScreenHandle));
_COM_SMARTPTR_TYPEDEF(IVGOnScreenText, __uuidof(IVGOnScreenText));
_COM_SMARTPTR_TYPEDEF(IVGToolShapeAttributes, __uuidof(IVGToolShapeAttributes));
_COM_SMARTPTR_TYPEDEF(IVGMetadata, __uuidof(IVGMetadata));
_COM_SMARTPTR_TYPEDEF(_IGlobalMacroStorage, __uuidof(_IGlobalMacroStorage));
_COM_SMARTPTR_TYPEDEF(DIVGDocumentEvents, __uuidof(DIVGDocumentEvents));
_COM_SMARTPTR_TYPEDEF(IVGDocumentEvents, __uuidof(IVGDocumentEvents));
_COM_SMARTPTR_TYPEDEF(IVGApplicationEvents, __uuidof(IVGApplicationEvents));
_COM_SMARTPTR_TYPEDEF(DIVGApplicationEvents, __uuidof(DIVGApplicationEvents));
_COM_SMARTPTR_TYPEDEF(ICUIFrameWork, __uuidof(ICUIFrameWork));
_COM_SMARTPTR_TYPEDEF(ICUIFrameWindows, __uuidof(ICUIFrameWindows));
_COM_SMARTPTR_TYPEDEF(ICUIFrameWindow, __uuidof(ICUIFrameWindow));
_COM_SMARTPTR_TYPEDEF(ICUIViewHosts, __uuidof(ICUIViewHosts));
_COM_SMARTPTR_TYPEDEF(ICUIViewHost, __uuidof(ICUIViewHost));
_COM_SMARTPTR_TYPEDEF(ICUIViewWindow, __uuidof(ICUIViewWindow));
_COM_SMARTPTR_TYPEDEF(ICUIViewWindows, __uuidof(ICUIViewWindows));
_COM_SMARTPTR_TYPEDEF(ICUIDockHost, __uuidof(ICUIDockHost));
_COM_SMARTPTR_TYPEDEF(ICUIDockItem, __uuidof(ICUIDockItem));
_COM_SMARTPTR_TYPEDEF(ICUIDockItems, __uuidof(ICUIDockItems));
_COM_SMARTPTR_TYPEDEF(ICUIDockHosts, __uuidof(ICUIDockHosts));
_COM_SMARTPTR_TYPEDEF(ICUIApplication, __uuidof(ICUIApplication));
_COM_SMARTPTR_TYPEDEF(ICUIDataSourceProxy, __uuidof(ICUIDataSourceProxy));
_COM_SMARTPTR_TYPEDEF(ICUIDataContext, __uuidof(ICUIDataContext));
_COM_SMARTPTR_TYPEDEF(ICUIDataSourceFactory, __uuidof(ICUIDataSourceFactory));
_COM_SMARTPTR_TYPEDEF(IVGDocument, __uuidof(IVGDocument));
_COM_SMARTPTR_TYPEDEF(IVGRect, __uuidof(IVGRect));
_COM_SMARTPTR_TYPEDEF(IVGApplication, __uuidof(IVGApplication));
_COM_SMARTPTR_TYPEDEF(IVGDocuments, __uuidof(IVGDocuments));
_COM_SMARTPTR_TYPEDEF(IVGOutlineStyles, __uuidof(IVGOutlineStyles));
_COM_SMARTPTR_TYPEDEF(IVGRulers, __uuidof(IVGRulers));
_COM_SMARTPTR_TYPEDEF(IVGGrid, __uuidof(IVGGrid));
_COM_SMARTPTR_TYPEDEF(IVGAppPlugin, __uuidof(IVGAppPlugin));
_COM_SMARTPTR_TYPEDEF(IVGPage, __uuidof(IVGPage));
_COM_SMARTPTR_TYPEDEF(IVGPages, __uuidof(IVGPages));
_COM_SMARTPTR_TYPEDEF(IVGLayers, __uuidof(IVGLayers));
_COM_SMARTPTR_TYPEDEF(IVGLayer, __uuidof(IVGLayer));
_COM_SMARTPTR_TYPEDEF(IVGShapes, __uuidof(IVGShapes));
_COM_SMARTPTR_TYPEDEF(IVGShape, __uuidof(IVGShape));
_COM_SMARTPTR_TYPEDEF(IVGCustomEffect, __uuidof(IVGCustomEffect));
_COM_SMARTPTR_TYPEDEF(IVGCloneLink, __uuidof(IVGCloneLink));
_COM_SMARTPTR_TYPEDEF(IVGCommentTarget, __uuidof(IVGCommentTarget));
_COM_SMARTPTR_TYPEDEF(IVGSelectionInformation, __uuidof(IVGSelectionInformation));
_COM_SMARTPTR_TYPEDEF(IVGCurve, __uuidof(IVGCurve));
_COM_SMARTPTR_TYPEDEF(IVGArrowHead, __uuidof(IVGArrowHead));
_COM_SMARTPTR_TYPEDEF(IVGArrowHeads, __uuidof(IVGArrowHeads));
_COM_SMARTPTR_TYPEDEF(IVGSubPaths, __uuidof(IVGSubPaths));
_COM_SMARTPTR_TYPEDEF(IVGSubPath, __uuidof(IVGSubPath));
_COM_SMARTPTR_TYPEDEF(IVGNodes, __uuidof(IVGNodes));
_COM_SMARTPTR_TYPEDEF(IVGNode, __uuidof(IVGNode));
_COM_SMARTPTR_TYPEDEF(IVGSnapPoint, __uuidof(IVGSnapPoint));
_COM_SMARTPTR_TYPEDEF(IVGSnapPointRange, __uuidof(IVGSnapPointRange));
_COM_SMARTPTR_TYPEDEF(IVGSnapPoints, __uuidof(IVGSnapPoints));
_COM_SMARTPTR_TYPEDEF(IVGConnector, __uuidof(IVGConnector));
_COM_SMARTPTR_TYPEDEF(IVGDimensionLinear, __uuidof(IVGDimensionLinear));
_COM_SMARTPTR_TYPEDEF(IVGDimensionAngular, __uuidof(IVGDimensionAngular));
_COM_SMARTPTR_TYPEDEF(IVGSegment, __uuidof(IVGSegment));
_COM_SMARTPTR_TYPEDEF(IVGVector, __uuidof(IVGVector));
_COM_SMARTPTR_TYPEDEF(IVGPoint, __uuidof(IVGPoint));
_COM_SMARTPTR_TYPEDEF(IVGPointRange, __uuidof(IVGPointRange));
_COM_SMARTPTR_TYPEDEF(IVGTransformMatrix, __uuidof(IVGTransformMatrix));
_COM_SMARTPTR_TYPEDEF(IVGProperties, __uuidof(IVGProperties));
_COM_SMARTPTR_TYPEDEF(IVGToolStateAttributes, __uuidof(IVGToolStateAttributes));
_COM_SMARTPTR_TYPEDEF(IVGToolState, __uuidof(IVGToolState));
_COM_SMARTPTR_TYPEDEF(IVGOnScreenCurve, __uuidof(IVGOnScreenCurve));
_COM_SMARTPTR_TYPEDEF(IVGMathUtils, __uuidof(IVGMathUtils));
_COM_SMARTPTR_TYPEDEF(IVGNodeRange, __uuidof(IVGNodeRange));
_COM_SMARTPTR_TYPEDEF(IVGSegmentRange, __uuidof(IVGSegmentRange));
_COM_SMARTPTR_TYPEDEF(IVGSegments, __uuidof(IVGSegments));
_COM_SMARTPTR_TYPEDEF(IVGBitmap, __uuidof(IVGBitmap));
_COM_SMARTPTR_TYPEDEF(IVGEPS, __uuidof(IVGEPS));
_COM_SMARTPTR_TYPEDEF(IVGDuotone, __uuidof(IVGDuotone));
_COM_SMARTPTR_TYPEDEF(IVGDuotoneOverprint, __uuidof(IVGDuotoneOverprint));
_COM_SMARTPTR_TYPEDEF(IVGColor, __uuidof(IVGColor));
_COM_SMARTPTR_TYPEDEF(IVGDuotoneInk, __uuidof(IVGDuotoneInk));
_COM_SMARTPTR_TYPEDEF(IVGFountainColor, __uuidof(IVGFountainColor));
_COM_SMARTPTR_TYPEDEF(IVGFountainColors, __uuidof(IVGFountainColors));
_COM_SMARTPTR_TYPEDEF(IVGFountainFill, __uuidof(IVGFountainFill));
_COM_SMARTPTR_TYPEDEF(IVGPatternFill, __uuidof(IVGPatternFill));
_COM_SMARTPTR_TYPEDEF(IVGOutline, __uuidof(IVGOutline));
_COM_SMARTPTR_TYPEDEF(IVGHatchPattern, __uuidof(IVGHatchPattern));
_COM_SMARTPTR_TYPEDEF(IVGHatchPatterns, __uuidof(IVGHatchPatterns));
_COM_SMARTPTR_TYPEDEF(IVGImage, __uuidof(IVGImage));
_COM_SMARTPTR_TYPEDEF(IVGTransparency, __uuidof(IVGTransparency));
_COM_SMARTPTR_TYPEDEF(IVGDimension, __uuidof(IVGDimension));
_COM_SMARTPTR_TYPEDEF(IVGCommentAnnotation, __uuidof(IVGCommentAnnotation));
_COM_SMARTPTR_TYPEDEF(IVGColorContext, __uuidof(IVGColorContext));
_COM_SMARTPTR_TYPEDEF(IVGColorProfile, __uuidof(IVGColorProfile));
_COM_SMARTPTR_TYPEDEF(IVGColorProfiles, __uuidof(IVGColorProfiles));
_COM_SMARTPTR_TYPEDEF(IVGProofColorSettings, __uuidof(IVGProofColorSettings));
_COM_SMARTPTR_TYPEDEF(IVGStructExportOptions, __uuidof(IVGStructExportOptions));
_COM_SMARTPTR_TYPEDEF(IVGColorManager, __uuidof(IVGColorManager));
_COM_SMARTPTR_TYPEDEF(IVGStructCreateOptions, __uuidof(IVGStructCreateOptions));
_COM_SMARTPTR_TYPEDEF(IVGPalette, __uuidof(IVGPalette));
_COM_SMARTPTR_TYPEDEF(IVGColors, __uuidof(IVGColors));
_COM_SMARTPTR_TYPEDEF(IVGPalettes, __uuidof(IVGPalettes));
_COM_SMARTPTR_TYPEDEF(IVGPaletteManager, __uuidof(IVGPaletteManager));
_COM_SMARTPTR_TYPEDEF(IVGTraceSettings, __uuidof(IVGTraceSettings));
_COM_SMARTPTR_TYPEDEF(IVGShapeRange, __uuidof(IVGShapeRange));
_COM_SMARTPTR_TYPEDEF(IVGPowerClip, __uuidof(IVGPowerClip));
_COM_SMARTPTR_TYPEDEF(IVGFill, __uuidof(IVGFill));
_COM_SMARTPTR_TYPEDEF(IVGHatchFills, __uuidof(IVGHatchFills));
_COM_SMARTPTR_TYPEDEF(IVGHatchLibrary, __uuidof(IVGHatchLibrary));
_COM_SMARTPTR_TYPEDEF(IVGHatchFill, __uuidof(IVGHatchFill));
_COM_SMARTPTR_TYPEDEF(IVGStructFontProperties, __uuidof(IVGStructFontProperties));
_COM_SMARTPTR_TYPEDEF(IVGHatchLibraries, __uuidof(IVGHatchLibraries));
_COM_SMARTPTR_TYPEDEF(IVGText, __uuidof(IVGText));
_COM_SMARTPTR_TYPEDEF(IVGEffect, __uuidof(IVGEffect));
_COM_SMARTPTR_TYPEDEF(IVGEffects, __uuidof(IVGEffects));
_COM_SMARTPTR_TYPEDEF(IVGEffectBlend, __uuidof(IVGEffectBlend));
_COM_SMARTPTR_TYPEDEF(IVGEffectControlPath, __uuidof(IVGEffectControlPath));
_COM_SMARTPTR_TYPEDEF(IVGEffectEnvelope, __uuidof(IVGEffectEnvelope));
_COM_SMARTPTR_TYPEDEF(IVGEffectTextOnPath, __uuidof(IVGEffectTextOnPath));
_COM_SMARTPTR_TYPEDEF(IVGEffectDropShadow, __uuidof(IVGEffectDropShadow));
_COM_SMARTPTR_TYPEDEF(IVGEffectContour, __uuidof(IVGEffectContour));
_COM_SMARTPTR_TYPEDEF(IVGEffectLens, __uuidof(IVGEffectLens));
_COM_SMARTPTR_TYPEDEF(IVGEffectPerspective, __uuidof(IVGEffectPerspective));
_COM_SMARTPTR_TYPEDEF(IVGEffectInnerShadow, __uuidof(IVGEffectInnerShadow));
_COM_SMARTPTR_TYPEDEF(IVGEffectExtrude, __uuidof(IVGEffectExtrude));
_COM_SMARTPTR_TYPEDEF(IVGExtrudeVanishingPoint, __uuidof(IVGExtrudeVanishingPoint));
_COM_SMARTPTR_TYPEDEF(IVGEffectDistortion, __uuidof(IVGEffectDistortion));
_COM_SMARTPTR_TYPEDEF(IVGEffectPushPullDistortion, __uuidof(IVGEffectPushPullDistortion));
_COM_SMARTPTR_TYPEDEF(IVGEffectZipperDistortion, __uuidof(IVGEffectZipperDistortion));
_COM_SMARTPTR_TYPEDEF(IVGEffectTwisterDistortion, __uuidof(IVGEffectTwisterDistortion));
_COM_SMARTPTR_TYPEDEF(IVGTextRange, __uuidof(IVGTextRange));
_COM_SMARTPTR_TYPEDEF(IVGTextCharacters, __uuidof(IVGTextCharacters));
_COM_SMARTPTR_TYPEDEF(IVGTextWords, __uuidof(IVGTextWords));
_COM_SMARTPTR_TYPEDEF(IVGTextLines, __uuidof(IVGTextLines));
_COM_SMARTPTR_TYPEDEF(IVGTextParagraphs, __uuidof(IVGTextParagraphs));
_COM_SMARTPTR_TYPEDEF(IVGTextColumns, __uuidof(IVGTextColumns));
_COM_SMARTPTR_TYPEDEF(IVGTextFrame, __uuidof(IVGTextFrame));
_COM_SMARTPTR_TYPEDEF(IVGTextFrames, __uuidof(IVGTextFrames));
_COM_SMARTPTR_TYPEDEF(IVGTextRanges, __uuidof(IVGTextRanges));
_COM_SMARTPTR_TYPEDEF(IVGStyle, __uuidof(IVGStyle));
_COM_SMARTPTR_TYPEDEF(IVGStyleOutline, __uuidof(IVGStyleOutline));
_COM_SMARTPTR_TYPEDEF(IVGStyleFill, __uuidof(IVGStyleFill));
_COM_SMARTPTR_TYPEDEF(IVGStyleCharacter, __uuidof(IVGStyleCharacter));
_COM_SMARTPTR_TYPEDEF(IVGStyleParagraph, __uuidof(IVGStyleParagraph));
_COM_SMARTPTR_TYPEDEF(IVGStyleFrame, __uuidof(IVGStyleFrame));
_COM_SMARTPTR_TYPEDEF(IVGStyles, __uuidof(IVGStyles));
_COM_SMARTPTR_TYPEDEF(IVGStyleTransparency, __uuidof(IVGStyleTransparency));
_COM_SMARTPTR_TYPEDEF(IVGToolShape, __uuidof(IVGToolShape));
_COM_SMARTPTR_TYPEDEF(IVGStyleSheet, __uuidof(IVGStyleSheet));
_COM_SMARTPTR_TYPEDEF(IVGDataItems, __uuidof(IVGDataItems));
_COM_SMARTPTR_TYPEDEF(IVGDataItem, __uuidof(IVGDataItem));
_COM_SMARTPTR_TYPEDEF(IVGDataField, __uuidof(IVGDataField));
_COM_SMARTPTR_TYPEDEF(IVGDataFields, __uuidof(IVGDataFields));
_COM_SMARTPTR_TYPEDEF(IVGSymbol, __uuidof(IVGSymbol));
_COM_SMARTPTR_TYPEDEF(IVGSymbolDefinition, __uuidof(IVGSymbolDefinition));
_COM_SMARTPTR_TYPEDEF(IVGSymbolDefinitions, __uuidof(IVGSymbolDefinitions));
_COM_SMARTPTR_TYPEDEF(IVGSymbolLibrary, __uuidof(IVGSymbolLibrary));
_COM_SMARTPTR_TYPEDEF(IVGSymbolLibraries, __uuidof(IVGSymbolLibraries));
_COM_SMARTPTR_TYPEDEF(IVGTreeNode, __uuidof(IVGTreeNode));
_COM_SMARTPTR_TYPEDEF(IVGTreeNodes, __uuidof(IVGTreeNodes));
_COM_SMARTPTR_TYPEDEF(IVGSpread, __uuidof(IVGSpread));
_COM_SMARTPTR_TYPEDEF(IVGTreeManager, __uuidof(IVGTreeManager));
_COM_SMARTPTR_TYPEDEF(IVGSpreads, __uuidof(IVGSpreads));
_COM_SMARTPTR_TYPEDEF(IVGPageMarkup, __uuidof(IVGPageMarkup));
_COM_SMARTPTR_TYPEDEF(IVGCommentThreads, __uuidof(IVGCommentThreads));
_COM_SMARTPTR_TYPEDEF(IVGCommentThread, __uuidof(IVGCommentThread));
_COM_SMARTPTR_TYPEDEF(IVGComment, __uuidof(IVGComment));
_COM_SMARTPTR_TYPEDEF(IVGComments, __uuidof(IVGComments));
_COM_SMARTPTR_TYPEDEF(IVGDocumentMarkup, __uuidof(IVGDocumentMarkup));
_COM_SMARTPTR_TYPEDEF(IVGWindow, __uuidof(IVGWindow));
_COM_SMARTPTR_TYPEDEF(IVGWindows, __uuidof(IVGWindows));
_COM_SMARTPTR_TYPEDEF(IVGActiveView, __uuidof(IVGActiveView));
_COM_SMARTPTR_TYPEDEF(IVGWorkspace, __uuidof(IVGWorkspace));
_COM_SMARTPTR_TYPEDEF(IVGWorkspaces, __uuidof(IVGWorkspaces));
_COM_SMARTPTR_TYPEDEF(IVGRecentFiles, __uuidof(IVGRecentFiles));
_COM_SMARTPTR_TYPEDEF(IVGRecentFile, __uuidof(IVGRecentFile));
_COM_SMARTPTR_TYPEDEF(IVGPageSizes, __uuidof(IVGPageSizes));
_COM_SMARTPTR_TYPEDEF(IVGPageSize, __uuidof(IVGPageSize));
_COM_SMARTPTR_TYPEDEF(IVGViews, __uuidof(IVGViews));
_COM_SMARTPTR_TYPEDEF(IVGView, __uuidof(IVGView));

//
// Type library items
//

enum cdrFilter : int
{
    cdrAutoSense = 0,
    cdr3DMF = 1559,
    cdrAI = 1305,
    cdrAI9 = 1333,
    cdrAT1 = 1303,
    cdrAVI = 1536,
    cdrBMP = 769,
    cdrCAL = 800,
    cdrCDR = 1795,
    cdrCDT = 1800,
    cdrCDX = 1796,
    cdrCGM = 1280,
    cdrCLK = 1802,
    cdrCMX5 = 1794,
    cdrCMX6 = 1793,
    cdrCPT = 1808,
    cdrCPT10 = 1808,
    cdrCPT11 = 1808,
    cdrCPT8 = 1799,
    cdrCPT9 = 1808,
    cdrCPX = 1797,
    cdrCUR = 785,
    cdrDCS = 801,
    cdrDOC = 2068,
    cdrDRW = 1339,
    cdrDSF = 1339,
    cdrDWG = 1328,
    cdrDXF = 1296,
    cdrEMF = 1300,
    cdrEPS = 1289,
    cdrEPSPhotoPaint = 804,
    cdrEXE = 786,
    cdrFH = 1344,
    cdrFMV = 1329,
    cdrFPX = 806,
    cdrGEM = 1284,
    cdrGIF = 773,
    cdrGIFAnimation = 1558,
    cdrHPGL = 1281,
    cdrHTML = 1557,
    cdrICO = 784,
    cdrIMG = 787,
    cdrJP2 = 820,
    cdrJPC = 821,
    cdrJPEG = 774,
    cdrJPG2000Import = 818,
    cdrMAC = 791,
    cdrMacWord5 = 2052,
    cdrMET = 1291,
    cdrMIF = 2165,
    cdrNAP = 1292,
    cdrOS2BMP = 792,
    cdrPAT = 1801,
    cdrPCD = 775,
    cdrPCX = 770,
    cdrPDF = 1333,
    cdrPIC = 1334,
    cdrPICT = 1293,
    cdrPLT = 1281,
    cdrPNG = 802,
    cdrPP4 = 789,
    cdrPP5 = 803,
    cdrPPF = 819,
    cdrPPT = 1548,
    cdrPSD = 788,
    cdrPSEncapsulated = 1289,
    cdrPSInterpreted = 1290,
    cdrQTM = 1542,
    cdrQTVR = 1560,
    cdrQuattroPro = 2067,
    cdrRIFF = 807,
    cdrRTF = 2053,
    cdrSAM = 2063,
    cdrSCT = 776,
    cdrSHW = 1806,
    cdrSVG = 1345,
    cdrSVGZ = 1347,
    cdrSWF = 1343,
    cdrTGA = 771,
    cdrTIFF = 772,
    cdrTTF = 1302,
    cdrTXT = 2048,
    cdrVSD = 1315,
    cdrWI = 793,
    cdrWKS = 2066,
    cdrWMF = 1294,
    cdrWord2 = 2050,
    cdrWord55 = 2051,
    cdrWord95 = 2049,
    cdrWord2000 = 2068,
    cdrWP4 = 2058,
    cdrWP50 = 2057,
    cdrWP51 = 2056,
    cdrWP9 = 2055,
    cdrWPD = 2055,
    cdrWPG = 1287,
    cdrWPM = 2166,
    cdrWS4 = 2164,
    cdrWS6 = 2163,
    cdrWS7 = 2060,
    cdrWS2000 = 2061,
    cdrWSD = 2061,
    cdrWSW = 2059,
    cdrWVL = 793,
    cdrXCF = 816,
    cdrXLS = 2064,
    cdrXPM = 809,
    cdrXY = 2062,
    cdrCSL = 1810,
    cdrDES = 1805,
    cdrPSP = 822,
    cdrRAW = 823,
    cdrCGZ = 2315,
    cdrCMX64 = 1811,
    cdrPUB = 1349
};

enum cdrFillType : int
{
    cdrNoFill = 0,
    cdrUniformFill = 1,
    cdrFountainFill = 2,
    cdrPostscriptFill = 3,
    cdrTextureFill = 8,
    cdrPatternFill = 9,
    cdrHatchFill = 10
};

enum cdrFountainFillType : int
{
    cdrLinearFountainFill = 1,
    cdrRadialFountainFill = 2,
    cdrConicalFountainFill = 3,
    cdrSquareFountainFill = 4
};

enum cdrFountainFillBlendType : int
{
    cdrDirectFountainFillBlend = 0,
    cdrRainbowCWFountainFillBlend = 1,
    cdrRainbowCCWFountainFillBlend = 2,
    cdrCustomFountainFillBlend = 3
};

enum cdrPaletteType : int
{
    cdrFixedPalette = 0,
    cdrCustomPalette = 1,
    cdrDocumentPalette = 2
};

enum cdrPaletteID : int
{
    cdrCustom = 0,
    cdrTRUMATCH = 1,
    cdrPANTONEProcess = 2,
    cdrPANTONECorel8 = 3,
    cdrUniform = 7,
    cdrFOCOLTONE = 8,
    cdrSpectraMaster = 9,
    cdrTOYO = 10,
    cdrDIC = 11,
    cdrLab = 13,
    cdrHKS = 23,
    cdrWebSafe = 25,
    cdrPANTONEMetallic = 30,
    cdrPANTONEPastelCoated = 31,
    cdrPANTONEPastelUncoated = 32,
    cdrPANTONEHexCoated = 33,
    cdrPANTONEHexUncoated = 34,
    cdrPANTONEMatte = 35,
    cdrPANTONECoated = 36,
    cdrPANTONEUncoated = 37,
    cdrPANTONEProcessCoatedEURO = 38,
    cdrPANTONESolid2ProcessEURO = 39,
    cdrSVGPalette = 40,
    cdrUserInks = 16
};

enum cdrFittedOrientation : int
{
    cdrRotateOrientation = 0,
    cdrVerticalSkewOrientation = 1,
    cdrHorizontalSkewOrientation = 2,
    cdrUprightOrientation = 3,
    cdrTransformOrientation = 4
};

enum cdrFittedVertPlacement : int
{
    cdrCustomVertPlacement = 0,
    cdrBaselineVertPlacement = 1,
    cdrAscenderVertPlacement = 2,
    cdrDescenderVertPlacement = 3,
    cdrCenterVertPlacement = 4
};

enum cdrFittedPlacement : int
{
    cdrLeftPlacement = 0,
    cdrRightPlacement = 1,
    cdrCenterPlacement = 2
};

enum cdrFittedQuadrant : int
{
    cdrLeftQuadrant = 0,
    cdrRightQuadrant = 1,
    cdrTopQuadrant = 2,
    cdrBottomQuadrant = 3
};

enum cdrFontStyle : int
{
    cdrNormalFontStyle = 0,
    cdrBoldFontStyle = 1,
    cdrItalicFontStyle = 2,
    cdrBoldItalicFontStyle = 3,
    cdrThinFontStyle = 4,
    cdrThinItalicFontStyle = 5,
    cdrExtraLightFontStyle = 6,
    cdrExtraLightItalicFontStyle = 7,
    cdrMediumFontStyle = 8,
    cdrMediumItalicFontStyle = 9,
    cdrSemiBoldFontStyle = 10,
    cdrSemiBoldItalicFontStyle = 11,
    cdrExtraBoldFontStyle = 12,
    cdrExtraBoldItalicFontStyle = 13,
    cdrHeavyFontStyle = 14,
    cdrHeavyItalicFontStyle = 15,
    cdrMixedFontStyle = 16,
    cdrLightFontStyle = 17,
    cdrLightItalicFontStyle = 18
};

enum cdrFontLine : int
{
    cdrNoFontLine = 0,
    cdrSingleThinFontLine = 1,
    cdrSingleThinWordFontLine = 2,
    cdrSingleThickFontLine = 3,
    cdrSingleThickWordFontLine = 4,
    cdrDoubleThinFontLine = 5,
    cdrDoubleThinWordFontLine = 6,
    cdrMixedFontLine = 7
};

enum cdrFontCase : int
{
    cdrNormalFontCase = 0,
    cdrSmallCapsFontCase = 1,
    cdrAllCapsFontCase = 2,
    cdrMixedFontCase = 3
};

enum cdrFontPosition : int
{
    cdrNormalFontPosition = 0,
    cdrSubscriptFontPosition = 1,
    cdrSuperscriptFontPosition = 2,
    cdrMixedFontPosition = 3
};

enum cdrAlignment : int
{
    cdrNoAlignment = 0,
    cdrLeftAlignment = 1,
    cdrRightAlignment = 2,
    cdrCenterAlignment = 3,
    cdrFullJustifyAlignment = 4,
    cdrForceJustifyAlignment = 5,
    cdrMixedAlignment = 6
};

enum cdrLineSpacingType : int
{
    cdrPercentOfCharacterHeightLineSpacing = 0,
    cdrPointLineSpacing = 1,
    cdrPercentOfPointSizeLineSpacing = 2,
    cdrMixedLineSpacing = 3
};

enum cdrColorType : int
{
    cdrColorPantone = 1,
    cdrColorCMYK = 2,
    cdrColorCMY = 4,
    cdrColorRGB = 5,
    cdrColorHSB = 6,
    cdrColorHLS = 7,
    cdrColorBlackAndWhite = 8,
    cdrColorGray = 9,
    cdrColorYIQ = 11,
    cdrColorLab = 12,
    cdrColorPantoneHex = 14,
    cdrColorRegistration = 20,
    cdrColorSpot = 25,
    cdrColorMixed = 99,
    cdrColorUserInk = 22,
    cdrColorMultiChannel = 26
};

enum cdrImageType : int
{
    cdrBlackAndWhiteImage = 0,
    cdr16ColorsImage = 1,
    cdrGrayscaleImage = 2,
    cdrPalettedImage = 3,
    cdrRGBColorImage = 4,
    cdrCMYKColorImage = 5,
    cdrDuotoneImage = 6,
    cdrLABImage = 7,
    cdrCMYKMultiChannelImage = 8,
    cdrRGBMultiChannelImage = 9,
    cdrSpotMultiChannelImage = 10
};

enum cdrViewType : int
{
    cdrSimpleWireframeView = 0,
    cdrWireframeView = 1,
    cdrDraftView = 2,
    cdrNormalView = 3,
    cdrEnhancedView = 4,
    cdrEnhancedViewWithOverprints = 5,
    cdrPixelView = 6
};

enum cdrWindowState : int
{
    cdrWindowNormal = 1,
    cdrWindowMinimized = 2,
    cdrWindowMaximized = 3,
    cdrWindowRestore = 9
};

enum cdrPatternFillType : int
{
    cdrTwoColorPattern = 0,
    cdrFullColorPattern = 1,
    cdrBitmapPattern = 2
};

enum cdrTileOffsetType : int
{
    cdrTileOffsetRow = 0,
    cdrTileOffsetColumn = 1
};

enum cdrPatternCanvasSize : int
{
    cdrPatternCanvas16x16 = 0,
    cdrPatternCanvas32x32 = 1,
    cdrPatternCanvas64x64 = 2,
    cdrPatternCanvasCustom = 3
};

enum cdrFlipAxes : int
{
    cdrFlipHorizontal = 1,
    cdrFlipVertical = 2,
    cdrFlipBoth = 3
};

enum cdrTexturePropertyType : int
{
    cdrTexturePropertyNumeric = 0,
    cdrTexturePropertyColorRGB = 1,
    cdrTexturePropertyColorHSB = 2,
    cdrTexturePropertyColorCMYK = 3
};

enum cdrWindowArrangeStyle : int
{
    cdrTileHorizontally = 0,
    cdrTileVertically = 1,
    cdrCascade = 2
};

enum cdrTransparencyType : int
{
    cdrNoTransparency = 0,
    cdrUniformTransparency = 1,
    cdrFountainTransparency = 2,
    cdrPatternTransparency = 3,
    cdrTextureTransparency = 4
};

enum cdrTransparencyAppliedTo : int
{
    cdrApplyToFill = 0,
    cdrApplyToOutline = 1,
    cdrApplyToFillAndOutline = 2
};

enum cdrImageMode : int
{
    cdrImageBlackWhite = 0,
    cdrImageGrayscale16 = 1,
    cdrImageGrayscale = 2,
    cdrImagePaletted = 3,
    cdrImageRGB = 4,
    cdrImageCMYK = 5,
    cdrImageDuotone = 6,
    cdrImageLAB = 7,
    cdrImageRGB48 = 8,
    cdrImageMultiChannel = 9
};

enum cdrImagePaletteType : int
{
    cdrPaletteUniform = 0,
    cdrPaletteStdVGA = 1,
    cdrPaletteAdaptive = 2,
    cdrPaletteOptimized = 3,
    cdrPaletteBlackBody = 4,
    cdrPaletteGrayscale = 5,
    cdrPaletteSystem = 6,
    cdrPaletteIE = 7,
    cdrPaletteNetscape = 8,
    cdrPaletteCustom = 9
};

enum cdrDitherType : int
{
    cdrDitherNone = 0,
    cdrDitherOrdered = 1,
    cdrDitherJarvis = 2,
    cdrDitherStucki = 3,
    cdrDitherFloyd = 4
};

enum cdrRenderType : int
{
    cdrRenderLineArt = 0,
    cdrRenderOrdered = 1,
    cdrRenderJarvis = 2,
    cdrRenderStucki = 3,
    cdrRenderFloyd = 4,
    cdrRenderHalftone = 5,
    cdrRenderCardinality = 6
};

enum cdrHalftoneType : int
{
    cdrHalftoneSquare = 0,
    cdrHalftoneRound = 1,
    cdrHalftoneLine = 2,
    cdrHalftoneCross = 3,
    cdrHalftoneFixed4x4 = 4,
    cdrHalftoneFixed8x8 = 5
};

enum cdrDuotoneType : int
{
    cdrMonotone = 0,
    cdrDuotone = 1,
    cdrTritone = 2,
    cdrQuadtone = 3
};

enum cdrUnit : int
{
    cdrTenthMicron = 0,
    cdrInch = 1,
    cdrFoot = 2,
    cdrMillimeter = 3,
    cdrCentimeter = 4,
    cdrPixel = 5,
    cdrMile = 6,
    cdrMeter = 7,
    cdrKilometer = 8,
    cdrDidots = 9,
    cdrAgate = 10,
    cdrYard = 11,
    cdrPica = 12,
    cdrCicero = 13,
    cdrPoint = 14,
    cdrUnitQ = 15,
    cdrUnitH = 16
};

enum cdrCompressionType : int
{
    cdrCompressionNone = 0,
    cdrCompressionLZW = 1,
    cdrCompressionPackBits = 2,
    cdrCompressionHuffman = 3,
    cdrCompressionCCITT3_1d = 4,
    cdrCompressionCCITT3_2d = 5,
    cdrCompressionCCITT4 = 6,
    cdrCompressionRLE_LW = 7,
    cdrCompressionZIP = 7,
    cdrCompressionJPEG = 8
};

enum cdrMergeMode : int
{
    cdrMergeNormal = 0,
    cdrMergeAND = 1,
    cdrMergeOR = 2,
    cdrMergeXOR = 3,
    cdrMergeInvert = 6,
    cdrMergeAdd = 7,
    cdrMergeSubtract = 8,
    cdrMergeMultiply = 9,
    cdrMergeDivide = 10,
    cdrMergeIfLighter = 11,
    cdrMergeIfDarker = 12,
    cdrMergeTexturize = 13,
    cdrMergeColor = 14,
    cdrMergeHue = 15,
    cdrMergeSaturation = 16,
    cdrMergeLightness = 17,
    cdrMergeRed = 18,
    cdrMergeGreen = 19,
    cdrMergeBlue = 20,
    cdrMergeDifference = 24,
    cdrMergeBehind = 27,
    cdrMergeScreen = 28,
    cdrMergeOverlay = 29,
    cdrMergeSoftlight = 30,
    cdrMergeHardlight = 31,
    cdrMergeDodge = 33,
    cdrMergeBurn = 34,
    cdrMergeExclusion = 36
};

enum cdrReferencePoint : int
{
    cdrTopRight = 1,
    cdrTopMiddle = 2,
    cdrTopLeft = 3,
    cdrMiddleLeft = 4,
    cdrBottomLeft = 5,
    cdrBottomMiddle = 6,
    cdrBottomRight = 7,
    cdrMiddleRight = 8,
    cdrCenter = 9
};

enum cdrEllipseType : int
{
    cdrEllipse = 0,
    cdrArc = 1,
    cdrPie = 2
};

enum cdrPolygonType : int
{
    cdrPolygon = 0,
    cdrStar = 1,
    cdrPolygonAsStar = 2
};

enum cdrSpiralType : int
{
    cdrSymmetric = 0,
    cdrLogarithmic = 1
};

enum cdrShapeType : int
{
    cdrNoShape = 0,
    cdrRectangleShape = 1,
    cdrEllipseShape = 2,
    cdrCurveShape = 3,
    cdrPolygonShape = 4,
    cdrBitmapShape = 5,
    cdrTextShape = 6,
    cdrGroupShape = 7,
    cdrSelectionShape = 8,
    cdrGuidelineShape = 9,
    cdrBlendGroupShape = 10,
    cdrExtrudeGroupShape = 11,
    cdrOLEObjectShape = 12,
    cdrContourGroupShape = 13,
    cdrLinearDimensionShape = 14,
    cdrBevelGroupShape = 15,
    cdrDropShadowGroupShape = 16,
    cdr3DObjectShape = 17,
    cdrArtisticMediaGroupShape = 18,
    cdrConnectorShape = 19,
    cdrMeshFillShape = 20,
    cdrCustomShape = 21,
    cdrCustomEffectGroupShape = 22,
    cdrSymbolShape = 23,
    cdrHTMLFormObjectShape = 24,
    cdrHTMLActiveObjectShape = 25,
    cdrPerfectShape = 26,
    cdrEPSShape = 27
};

enum cdrPageOrientation : int
{
    cdrPortrait = 0,
    cdrLandscape = 1
};

enum cdrAntiAliasingType : int
{
    cdrNoAntiAliasing = 0,
    cdrNormalAntiAliasing = 1,
    cdrSupersampling = 2
};

enum cdrOutlineType : int
{
    cdrNoOutline = 0,
    cdrOutline = 1,
    cdrEnhancedOutline = 2
};

enum cdrTextType : int
{
    cdrArtisticText = 0,
    cdrParagraphText = 1,
    cdrArtisticFittedText = 2,
    cdrParagraphFittedText = 3
};

enum cdrTextIndexingType : int
{
    cdrCharacterIndexing = 0,
    cdrWordIndexing = 1,
    cdrParagraphIndexing = 2
};

enum cdrTextFrames : int
{
    cdrThisFrameOnly = 0,
    cdrStartAtThisFrame = 1,
    cdrAllFrames = 2
};

enum cdrExportRange : int
{
    cdrAllPages = 0,
    cdrCurrentPage = 1,
    cdrSelection = 2
};

enum cdrThumbnailSize : int
{
    cdrNoThumbnail = 0,
    cdr1KMonoThumbnail = 1,
    cdr5KColorThumbnail = 2,
    cdr10KColorThumbnail = 3
};

enum cdrFileVersion : int
{
    cdrCurrentVersion = 0,
    cdrVersion5 = 5,
    cdrVersion6 = 6,
    cdrVersion7 = 7,
    cdrVersion8 = 8,
    cdrVersion9 = 9,
    cdrVersion10 = 10,
    cdrVersion11 = 11,
    cdrVersion12 = 12,
    cdrVersion13 = 13,
    cdrVersion1 = 1,
    cdrVersion2 = 2,
    cdrVersion3 = 3,
    cdrVersion4 = 4,
    cdrVersion105 = 105,
    cdrVersion14 = 14,
    cdrVersion15 = 15,
    cdrVersion16 = 16,
    cdrVersion17 = 17,
    cdrVersion18 = 18,
    cdrVersion19 = 19,
    cdrVersion20 = 20,
    cdrVersion21 = 21,
    cdrVersion22 = 22
};

enum cdrPointType : int
{
    cdrSnapPoint = 0,
    cdrFreePoint = 1,
    cdrSnapPointUser = 1,
    cdrSnapPointObject = 2,
    cdrSnapPointBBox = 4,
    cdrSnapPointEdge = 8,
    cdrSnapPointFree = 16,
    cdrSnapPointAuto = 32
};

enum cdrPresetPoint : int
{
    cdrTopLeftPoint = -1,
    cdrTopPoint = -2,
    cdrTopRightPoint = -3,
    cdrRightPoint = -4,
    cdrBottomRightPoint = -5,
    cdrBottomPoint = -6,
    cdrBottomLeftPoint = -7,
    cdrLeftPoint = -8,
    cdrCenterPoint = -9,
    cdrFirstPoint = -10,
    cdrLastPoint = -11
};

enum cdrNodeType : int
{
    cdrCuspNode = 0,
    cdrSmoothNode = 1,
    cdrSymmetricalNode = 2,
    cdrMixedNodes = 3
};

enum cdrSegmentType : int
{
    cdrLineSegment = 0,
    cdrCurveSegment = 1,
    cdrMixedSegments = 2
};

enum cdrSegmentOffsetType : int
{
    cdrAbsoluteSegmentOffset = 0,
    cdrRelativeSegmentOffset = 1,
    cdrParamSegmentOffset = 2
};

enum cdrCursorShape : int
{
    cdrCursorWinAppStarting = 0,
    cdrCursorWinArrow = 1,
    cdrCursorWinCross = 2,
    cdrCursorWinHelp = 3,
    cdrCursorWinIbeam = 4,
    cdrCursorWinNo = 5,
    cdrCursorWinSizeAll = 6,
    cdrCursorWinSizeNeSw = 7,
    cdrCursorWinSizeNs = 8,
    cdrCursorWinSizeNwSe = 9,
    cdrCursorWinSizeWe = 10,
    cdrCursorWinUpArrow = 11,
    cdrCursorWinWait = 12,
    cdrCursorSmallcrosshair = 301,
    cdrCursorPick = 305,
    cdrCursorNodeEdit = 306,
    cdrCursorEyeDrop = 326,
    cdrCursorExtPick = 351,
    cdrCursorPickNone = 305,
    cdrCursorPenJoin = 380,
    cdrCursorPickOvertarget = 396,
    cdrCursorTrimSingle = 428,
    cdrCursorWeldSingle = 430,
    cdrCursorIntersectSingle = 432
};

enum cdrPositionOfPointOverShape : int
{
    cdrOutsideShape = 0,
    cdrOnMarginOfShape = 1,
    cdrInsideShape = 2
};

enum cdrOutlineLineCaps : int
{
    cdrOutlineUndefinedLineCaps = -1,
    cdrOutlineButtLineCaps = 0,
    cdrOutlineRoundLineCaps = 1,
    cdrOutlineSquareLineCaps = 2
};

enum cdrOutlineLineJoin : int
{
    cdrOutlineUndefinedLineJoin = -1,
    cdrOutlineMiterLineJoin = 0,
    cdrOutlineRoundLineJoin = 1,
    cdrOutlineBevelLineJoin = 2
};

enum cdrShapeEnumDirection : int
{
    cdrShapeEnumTopFirst = 0,
    cdrShapeEnumBottomFirst = 1
};

enum cdrPageBackground : int
{
    cdrPageBackgroundNone = 0,
    cdrPageBackgroundSolid = 1,
    cdrPageBackgroundBitmap = 2
};

enum cdrEffectType : int
{
    cdrBlend = 0,
    cdrExtrude = 1,
    cdrEnvelope = 2,
    cdrTextOnPath = 3,
    cdrControlPath = 4,
    cdrDropShadow = 5,
    cdrContour = 6,
    cdrDistortion = 7,
    cdrPerspective = 8,
    cdrLens = 9,
    cdrCustomEffect = 10,
    cdrInnerShadow = 11
};

enum cdrBlendMode : int
{
    cdrBlendSteps = 0,
    cdrBlendSpacing = 1
};

enum cdrExtrudeType : int
{
    cdrExtrudeSmallBack = 0,
    cdrExtrudeSmallFront = 1,
    cdrExtrudeBigBack = 2,
    cdrExtrudeBigFront = 3,
    cdrExtrudeBackParallel = 4,
    cdrExtrudeFrontParallel = 5
};

enum cdrExtrudeShading : int
{
    cdrExtrudeObjectFill = 0,
    cdrExtrudeSolidFill = 1,
    cdrExtrudeColorShading = 2
};

enum cdrFeatherType : int
{
    cdrFeatherInside = 0,
    cdrFeatherMiddle = 1,
    cdrFeatherOutside = 2,
    cdrFeatherAverage = 3,
    cdrFeatherGaussianBlur = 4
};

enum cdrEdgeType : int
{
    cdrEdgeLinear = 0,
    cdrEdgeSquared = 1,
    cdrEdgeFlat = 2,
    cdrEdgeInverseSquared = 3,
    cdrEdgeMesa = 4,
    cdrEdgeGaussian = 5
};

enum cdrDropShadowType : int
{
    cdrDropShadowFlat = 0,
    cdrDropShadowBottom = 1,
    cdrDropShadowTop = 2,
    cdrDropShadowLeft = 3,
    cdrDropShadowRight = 4
};

enum cdrExtrudeLightPosition : int
{
    cdrLightFrontTopLeft = 0,
    cdrLightFrontTop = 1,
    cdrLightFrontTopRight = 2,
    cdrLightFrontLeft = 3,
    cdrLightFrontCenter = 4,
    cdrLightFrontRight = 5,
    cdrLightFrontBottomLeft = 6,
    cdrLightFrontBottom = 7,
    cdrLightFrontBottomRight = 8,
    cdrLightBackTopLeft = 9,
    cdrLightBackTop = 10,
    cdrLightBackTopRight = 11,
    cdrLightBackRight = 14,
    cdrLightBackBottomRight = 17
};

enum cdrExtrudeVPType : int
{
    cdrVPLockedToShape = 0,
    cdrVPLockedToPage = 1,
    cdrVPShared = 2
};

enum cdrEnvelopeMode : int
{
    cdrEnvelopeHorizontal = 0,
    cdrEnvelopeOriginal = 1,
    cdrEnvelopePutty = 2,
    cdrEnvelopeVertical = 3
};

enum cdrLensType : int
{
    cdrLensMagnify = 0,
    cdrLensFishEye = 1,
    cdrLensWireframe = 2,
    cdrLensColorLimit = 3,
    cdrLensColorAdd = 4,
    cdrLensInvert = 5,
    cdrLensBrighten = 6,
    cdrLensTintedGrayscale = 7,
    cdrLensHeatMap = 8,
    cdrLensTransparency = 9,
    cdrLensCustomColorMap = 10
};

enum cdrContourDirection : int
{
    cdrContourInside = 0,
    cdrContourOutside = 1,
    cdrContourToCenter = 2
};

enum cdrDistortionType : int
{
    cdrDistortionPushPull = 0,
    cdrDistortionZipper = 1,
    cdrDistortionTwister = 2,
    cdrDistortionCustom = 3
};

enum cdrTools : int
{
    cdrToolNone = 0,
    cdrToolPick = 1,
    cdrToolNodeEdit = 2,
    cdrToolKnife = 64,
    cdrToolBezierKnife = 81,
    cdrToolEraser = 68,
    cdrToolDrawRectangle = 3,
    cdrToolDrawEllipse = 4,
    cdrToolDrawText = 7,
    cdrToolDrawFreehand = 5,
    cdrToolDrawNaturalPen = 103,
    cdrToolDrawBezier = 6,
    cdrToolHorizontalDimension = 54,
    cdrToolVerticalDimension = 55,
    cdrToolAutoDimension = 110,
    cdrToolSlantedDimension = 56,
    cdrToolLeaderText = 57,
    cdrToolAngledDimension = 58,
    cdrToolConnectorLines = 59,
    cdrToolDrawPolygon = 60,
    cdrToolDrawSpiral = 62,
    cdrToolDrawGrid = 63,
    cdrToolZoom = 66,
    cdrToolPan = 67,
    cdrToolFill = 71,
    cdrToolTransparency = 72,
    cdrToolInteractiveExtrude = 73,
    cdrToolBlend = 74,
    cdrToolRotate = 75,
    cdrToolReflect = 76,
    cdrToolScale = 77,
    cdrToolSkew = 78,
    cdrToolDistortion = 79,
    cdrToolContour = 113,
    cdrToolInsertHTMLFormObject = 111,
    cdrToolDropShadow = 80,
    cdrToolDrawConnector = 115,
    cdrToolEyeDropper = 119
};

enum cdrGridType : int
{
    cdrGridDot = 0,
    cdrGridLine = 1
};

enum cdrGuideType : int
{
    cdrAllGuides = -1,
    cdrHorizontalGuide = 0,
    cdrVerticalGuide = 1,
    cdrSlantedGuide = 2
};

enum cdrURLRegion : int
{
    cdrURLRegionDefault = 0,
    cdrURLRegionRectangle = 1,
    cdrURLRegionShape = 2
};

enum cdrPanoseMatchingType : int
{
    cdrPanosePrompt = 0,
    cdrPanoseTemporary = 1,
    cdrPanosePermanent = 2
};

enum cdrDataFormatType : int
{
    cdrFormatGeneral = 0,
    cdrFormatDateTime = 1,
    cdrFormatLinearAngular = 2,
    cdrFormatNumeric = 3
};

enum cdrShapeLevel : int
{
    cdrLevelGroup = 0,
    cdrLevelContainer = 1,
    cdrLevelLayer = 2,
    cdrLevelPage = 3,
    cdrLevelDocument = 4
};

enum cdrTriState : int
{
    cdrFalse = 0,
    cdrTrue = -1,
    cdrUndefined = -2
};

enum cdrTextChangeCase : int
{
    cdrTextSentenceCase = 0,
    cdrTextLowerCase = 1,
    cdrTextUpperCase = 2,
    cdrTextTitleCase = 3,
    cdrTextToggleCase = 4
};

enum cdrTextLanguage : int
{
    cdrLanguageMixed = -1,
    cdrLanguageNone = 0,
    cdrAfrikaans = 1078,
    cdrAlbanian = 1052,
    cdrArabicAlgeria = 5121,
    cdrArabicBahrain = 15361,
    cdrArabicEgypt = 3073,
    cdrArabicIraq = 2049,
    cdrArabicJordan = 11265,
    cdrArabicKuwait = 13313,
    cdrArabicLebanon = 12289,
    cdrArabicLibya = 4097,
    cdrArabicMorocco = 6145,
    cdrArabicOman = 8193,
    cdrArabicQatar = 16385,
    cdrArabic = 1025,
    cdrArabicSyria = 10241,
    cdrArabicTunisia = 7169,
    cdrArabicUAE = 14337,
    cdrArabicYemen = 9217,
    cdrArmenian = 1067,
    cdrAssamese = 1101,
    cdrAzeriCyrillic = 2092,
    cdrAzeriLatin = 1068,
    cdrBasque = 1069,
    cdrByelorussian = 1059,
    cdrBengali = 1093,
    cdrBulgarian = 1026,
    cdrBurmese = 1109,
    cdrCatalan = 1027,
    cdrChineseHongKong = 3076,
    cdrChineseMacao = 5124,
    cdrSimplifiedChinese = 2052,
    cdrChineseSingapore = 4100,
    cdrTraditionalChinese = 1028,
    cdrCroatian = 1050,
    cdrCzech = 1029,
    cdrDanish = 1030,
    cdrBelgianDutch = 2067,
    cdrDutch = 1043,
    cdrEnglishAUS = 3081,
    cdrEnglishBelize = 10249,
    cdrEnglishCanadian = 4105,
    cdrEnglishCaribbean = 9225,
    cdrEnglishIreland = 6153,
    cdrEnglishJamaica = 8201,
    cdrEnglishNewZealand = 5129,
    cdrEnglishPhilippines = 13321,
    cdrEnglishSouthAfrica = 7177,
    cdrEnglishTrinidad = 11273,
    cdrEnglishUK = 2057,
    cdrEnglishUS = 1033,
    cdrEnglishZimbabwe = 12297,
    cdrEstonian = 1061,
    cdrFaeroese = 1080,
    cdrFarsi = 1065,
    cdrFinnish = 1035,
    cdrBelgianFrench = 2060,
    cdrFrenchCameroon = 11276,
    cdrFrenchCanadian = 3084,
    cdrFrenchCotedIvoire = 12300,
    cdrFrench = 1036,
    cdrFrenchLuxembourg = 5132,
    cdrFrenchMali = 13324,
    cdrFrenchMonaco = 6156,
    cdrFrenchReunion = 8204,
    cdrFrenchSenegal = 10252,
    cdrSwissFrench = 4108,
    cdrFrenchWestIndies = 7180,
    cdrFrenchZaire = 9228,
    cdrFrisianNetherlands = 1122,
    cdrGaelicIreland = 2108,
    cdrGaelicScotland = 1084,
    cdrGalician = 1110,
    cdrGeorgian = 1079,
    cdrGermanAustria = 3079,
    cdrGerman = 1031,
    cdrGermanLiechtenstein = 5127,
    cdrGermanLuxembourg = 4103,
    cdrSwissGerman = 2055,
    cdrGreek = 1032,
    cdrGujarati = 1095,
    cdrHebrew = 1037,
    cdrHindi = 1081,
    cdrHungarian = 1038,
    cdrIcelandic = 1039,
    cdrIndonesian = 1057,
    cdrItalian = 1040,
    cdrSwissItalian = 2064,
    cdrJapanese = 1041,
    cdrKannada = 1099,
    cdrKashmiri = 1120,
    cdrKazakh = 1087,
    cdrKhmer = 1107,
    cdrKirghiz = 1088,
    cdrKonkani = 1111,
    cdrKorean = 1042,
    cdrLao = 1108,
    cdrLatvian = 1062,
    cdrLithuanian = 1063,
    cdrMacedonian = 1071,
    cdrMalaysian = 1086,
    cdrMalayBruneiDarussalam = 2110,
    cdrMalayalam = 1100,
    cdrMaltese = 1082,
    cdrManipuri = 1112,
    cdrMarathi = 1102,
    cdrMongolian = 1104,
    cdrNepali = 1121,
    cdrNorwegianBokmol = 1044,
    cdrNorwegianNynorsk = 2068,
    cdrOriya = 1096,
    cdrPolish = 1045,
    cdrBrazilianPortuguese = 1046,
    cdrPortuguese = 2070,
    cdrPunjabi = 1094,
    cdrRhaetoRomanic = 1047,
    cdrRomanianMoldova = 2072,
    cdrRomanian = 1048,
    cdrRussianMoldova = 2073,
    cdrRussian = 1049,
    cdrSamiLappish = 1083,
    cdrSanskrit = 1103,
    cdrSerbianCyrillic = 3098,
    cdrSerbianLatin = 2074,
    cdrSindhi = 1113,
    cdrSlovak = 1051,
    cdrSlovenian = 1060,
    cdrSorbian = 1070,
    cdrSpanishArgentina = 11274,
    cdrSpanishBolivia = 16394,
    cdrSpanishChile = 13322,
    cdrSpanishColombia = 9226,
    cdrSpanishCostaRica = 5130,
    cdrSpanishDominicanRepublic = 7178,
    cdrSpanishEcuador = 12298,
    cdrSpanishElSalvador = 17418,
    cdrSpanishGuatemala = 4106,
    cdrSpanishHonduras = 18442,
    cdrMexicanSpanish = 2058,
    cdrSpanishNicaragua = 19466,
    cdrSpanishPanama = 6154,
    cdrSpanishParaguay = 15370,
    cdrSpanishPeru = 10250,
    cdrSpanishPuertoRico = 20490,
    cdrSpanishModernSort = 3082,
    cdrSpanish = 1034,
    cdrSpanishUruguay = 14346,
    cdrSpanishVenezuela = 8202,
    cdrSesotho = 1072,
    cdrSutu = 1072,
    cdrSwahili = 1089,
    cdrSwedishFinland = 2077,
    cdrSwedish = 1053,
    cdrTajik = 1064,
    cdrTamil = 1097,
    cdrTatar = 1092,
    cdrTelugu = 1098,
    cdrThai = 1054,
    cdrTibetan = 1105,
    cdrTsonga = 1073,
    cdrTswana = 1074,
    cdrTurkish = 1055,
    cdrTurkmen = 1090,
    cdrUkrainian = 1058,
    cdrUrdu = 1056,
    cdrUzbekCyrillic = 2115,
    cdrUzbekLatin = 1091,
    cdrVenda = 1075,
    cdrVietnamese = 1066,
    cdrWelsh = 1106,
    cdrXhosa = 1076,
    cdrZulu = 1077
};

enum cdrTextCharSet : int
{
    cdrCharSetMixed = -1,
    cdrCharSetANSI = 0,
    cdrCharSetDefault = 1,
    cdrCharSetSymbol = 2,
    cdrCharSetShiftJIS = 128,
    cdrCharSetHangul = 129,
    cdrCharSetChineseBig5 = 136,
    cdrCharSetOEM = 255,
    cdrCharSetJohab = 130,
    cdrCharSetHebrew = 177,
    cdrCharSetArabic = 178,
    cdrCharSetGreek = 161,
    cdrCharSetTurkish = 162,
    cdrCharSetVietnamese = 163,
    cdrCharSetThai = 222,
    cdrCharSetEastEurope = 238,
    cdrCharSetRussian = 204,
    cdrCharSetMac = 77,
    cdrCharSetBaltic = 186
};

enum cdrVerticalAlignment : int
{
    cdrTopJustify = 0,
    cdrCenterJustify = 1,
    cdrBottomJustify = 2,
    cdrFullJustify = 3
};

enum cdrCloneLinkType : int
{
    cdrCloneFill = 1,
    cdrCloneOutline = 2,
    cdrCloneShape = 4,
    cdrCloneTransform = 8,
    cdrCloneBmpColorMask = 16,
    cdrCloneAll = 31
};

enum cdrWrapStyle : int
{
    cdrWrapNone = -1,
    cdrWrapContourLeft = 0,
    cdrWrapContourRight = 1,
    cdrWrapContourStraddle = 2,
    cdrWrapSquareLeft = 3,
    cdrWrapSquareRight = 4,
    cdrWrapSquareStraddle = 5,
    cdrWrapSquareAboveBelow = 6
};

enum cdrCurveElementType : int
{
    cdrElementStart = 0,
    cdrElementLine = 1,
    cdrElementCurve = 2,
    cdrElementControl = 3
};

enum cdrAddinFilter : int
{
    cdrAddinFilterNone = 0,
    cdrAddinFilterShapeCreated = 1,
    cdrAddinFilterNew = 2,
    cdrAddinFilterExecute = 4
};

enum cdrAlignType : int
{
    cdrAlignLeft = 1,
    cdrAlignRight = 2,
    cdrAlignHCenter = 3,
    cdrAlignTop = 4,
    cdrAlignBottom = 8,
    cdrAlignVCenter = 12
};

enum cdrDistributeType : int
{
    cdrDistributeLeft = 1,
    cdrDistributeRight = 2,
    cdrDistributeHCenter = 3,
    cdrDistributeHSpacing = 4,
    cdrDistributeTop = 8,
    cdrDistributeBottom = 16,
    cdrDistributeVCenter = 24,
    cdrDistributeVSpacing = 32
};

enum cdrDimensionType : int
{
    cdrDimensionLinear = 0,
    cdrDimensionAngular = 1
};

enum cdrLinearDimensionType : int
{
    cdrDimensionHorizontal = 0,
    cdrDimensionVertical = 1,
    cdrDimensionSlanted = 2
};

enum cdrDimensionStyle : int
{
    cdrDimensionStyleDecimal = 0,
    cdrDimensionStyleFractional = 1,
    cdrDimensionStyleEngineering = 2,
    cdrDimensionStyleArchitectural = 3
};

enum cdrDimensionLinearUnits : int
{
    cdrDimensionUnitInX = 0,
    cdrDimensionUnitIN = 1,
    cdrDimensionUnitInches = 2,
    cdrDimensionUnitFtX = 3,
    cdrDimensionUnitFT = 4,
    cdrDimensionUnitMI = 5,
    cdrDimensionUnitMiles = 6,
    cdrDimensionUnitYDS = 7,
    cdrDimensionUnitYards = 8,
    cdrDimensionUnitM = 9,
    cdrDimensionUnitMeters = 10,
    cdrDimensionUnitKM = 11,
    cdrDimensionUnitKilometers = 12,
    cdrDimensionUnitCM = 13,
    cdrDimensionUnitCentimeters = 14,
    cdrDimensionUnitMM = 15,
    cdrDimensionUnitMillimeters = 16,
    cdrDimensionUnitPicas = 17,
    cdrDimensionUnitPoints = 18,
    cdrDimensionUnitCiceros = 19,
    cdrDimensionUnitDidots = 20
};

enum cdrDimensionPlacement : int
{
    cdrDimensionAboveLine = 0,
    cdrDimensionWithinLine = 1,
    cdrDimensionBelowLine = 2
};

enum cdrDimensionAngularUnits : int
{
    cdrDimensionUnitDegrees = 0,
    cdrDimensionUnitRadians = 1,
    cdrDimensionUnitGradians = 2,
    cdrDimensionUnitDegreesSymbol = 3
};

enum cdrDimensionSymbol : int
{
    cdrDimensionSymbolNone = 0,
    cdrDimensionSymbol1After = 1,
    cdrDimensionSymbol1Before = 2,
    cdrDimensionSymbol3After = 3,
    cdrDimensionSymbol3Before = 4,
    cdrDimensionSymbolDAfter = 5,
    cdrDimensionSymbolDBefore = 6
};

enum cdrSymbolType : int
{
    cdrSymbolTypeSymbol = 1,
    cdrSymbolTypeSprite = 2,
    cdrSymbolTypeButton = 4
};

enum cdrCurveElementFlags : int
{
    cdrFlagSelected = 1,
    cdrFlagUser = 4,
    cdrFlagClosed = 8,
    cdrFlagValid = 128
};

enum cdrPaletteSortMethod : int
{
    cdrSortReverse = 0,
    cdrSortHue = 1,
    cdrSortBrightness = 2,
    cdrSortSaturation = 3,
    cdrSortRGB = 4,
    cdrSortHSB = 5,
    cdrSortName = 6
};

enum cdrImportMode : int
{
    cdrImportFull = 0,
    cdrImportCrop = 1,
    cdrImportResample = 2
};

enum cdrImportTextFormatting : int
{
    cdrImportTextFontAndFormatting = 0,
    cdrImportNoFormatting = 1,
    cdrImportFormattingOnly = 2
};

enum cdrImportTableOutline : int
{
    cdrImportNoOutline = 0,
    cdrImportTableOnly = 1,
    cdrImportCellsOnly = 2,
    cdrImportTableAndCells = 3
};

enum cdrDataType : int
{
    cdrDataTypeString = 0,
    cdrDataTypeNumber = 1,
    cdrDataTypeEvent = 2,
    cdrDataTypeAction = 3
};

enum cdrPaletteVersion : int
{
    cdrPaletteVersion9 = 0,
    cdrPaletteVersion12 = 1
};

enum cdrOLEType : int
{
    cdrOLEUnknown = 0,
    cdrOLELinked = 1,
    cdrOLEEmbedded = 2,
    cdrOLEStatic = 3
};

enum cdrTextAlignOrigin : int
{
    cdrTextAlignFirstBaseline = 0,
    cdrTextAlignLastBaseline = 1,
    cdrTextAlignBoundingBox = 2
};

enum cdrCompareType : int
{
    cdrCompareShapeType = 1,
    cdrCompareFillType = 2,
    cdrCompareFill = 4,
    cdrCompareOutlineWidth = 8,
    cdrCompareOutlineColor = 16,
    cdrCompareOutline = 32,
    cdrCompareShapeWidth = 64,
    cdrCompareShapeHeight = 128
};

enum cdrCompareCondition : int
{
    cdrCompareEquals = 0,
    cdrCompareGreater = 1,
    cdrCompareLess = 2,
    cdrCompareAtLeast = 3,
    cdrCompareAtMost = 4
};

enum cdrApplicationID : int
{
    cdrCorelDRAW = 0,
    cdrCorelDESIGNER = 1
};

enum cdrApplicationClass : int
{
    cdrCreativeGraphics = 0,
    cdrTechnicalGraphics = 1
};

enum cdrShapeChangeScope : int
{
    cdrShapeChangeFill = 1,
    cdrShapeChangeOutline = 2,
    cdrShapeChangeTransparency = 4,
    cdrShapeChangeContent = 8,
    cdrShapeChangeProperties = 16,
    cdrShapeChangeLocking = 32,
    cdrShapeChangeStyle = 64,
    cdrShapeChangeTextAttr = 128
};

enum cdrTreeNodeType : int
{
    cdrShapeNode = 1,
    cdrGroupNode = 2,
    cdrLinkGroupNode = 3,
    cdrSymbolNode = 4,
    cdrRootNode = 17,
    cdrPageNode = 18,
    cdrLayerNode = 19
};

enum cdrTextTabAlignment : int
{
    cdrTextTabLeft = 0,
    cdrTextTabRight = 1,
    cdrTextTabCenter = 2,
    cdrTextTabDecimal = 3
};

enum cdrTextEffect : int
{
    cdrTextEffectMixed = -1,
    cdrTextEffectNone = 0,
    cdrTextEffectBullet = 1,
    cdrTextEffectDropCap = 2
};

enum clrMonitorCalibration : int
{
    clrMonitorCalibrationOff = 0,
    clrMonitorCalibrationOn = 1,
    clrMonitorSimulateComposite = 2,
    clrMonitorSimulateSeparation = 3
};

enum clrRenderingIntent : int
{
    clrRenderAutomatic = 0,
    clrRenderSaturation = 1,
    clrRenderPerceptual = 2,
    clrRenderRelative = 3,
    clrRenderAbsolute = 4
};

enum clrColorEngine : int
{
    clrEngineKodak = 0,
    clrEngineICM2 = 1,
    clrEngineICM = 1,
    clrEngineWCS = 2,
    clrEngineAdobe = 3,
    clrEngineNone = 4,
    clrEngineLcms = 5
};

enum clrDeviceType : int
{
    clrMonitor = 0,
    clrCompositePrinter = 1,
    clrSeparationPrinter = 2,
    clrScanner = 3,
    clrInternalRGB = 4,
    clrDeviceAll = -1,
    clrDeviceDisplay = 0,
    clrDeviceOutput = 1,
    clrDeviceInput = 3,
    clrDeviceColorSpace = 4
};

enum clrCompPrnCalibration : int
{
    clrCompPrnCalibrationOff = 0,
    clrCompPrnCalibrationOn = 1,
    clrCompPrnSimulateSeparation = 2
};

enum clrImportColorCorrection : int
{
    clrNoImportCorrection = 0,
    clrApplyEmbeddedOrDefaultProfile = 1,
    clrApplyCustomImportProfile = 2
};

enum clrExportColorCorrection : int
{
    clrNoExportCorrection = 0,
    clrEmbedInternalRGBProfile = 1,
    clrEmbedCustomExportProfile = 2
};

enum cdrFillMode : int
{
    cdrFillAlternate = 0,
    cdrFillWinding = 1
};

enum cdrCommandCheckState : int
{
    cdrCommandUnchecked = 0,
    cdrCommandChecked = 1
};

enum cdrAppStartupMode : int
{
    cdrStartupWelcomeScreen = 0,
    cdrStartupNewDocument = 1,
    cdrStartupOpenDocument = 2,
    cdrStartupLastEditedDocument = 3,
    cdrStartupNewFromTemplate = 4,
    cdrStartupTutorial = 5,
    cdrStartupDoNothing = 6
};

enum cdrDistanceMode : int
{
    cdrModeNoOffset = 0,
    cdrModeOffset = 1,
    cdrModeSpacing = 2
};

enum cdrDirection : int
{
    cdrLeft = 0,
    cdrRight = 1,
    cdrUp = 2,
    cdrDown = 3
};

enum cdrShapeLinkType : int
{
    cdrLinkDirectDependents = 0,
    cdrLinkDirectDependentsButClones = 1,
    cdrLinkDirectDependentClones = 2,
    cdrLinkAllDependents = 3,
    cdrLinkAllDependentsButClones = 4,
    cdrLinkAllDependentClones = 5,
    cdrLinkDirectControls = 6,
    cdrLinkDirectControlsButClones = 7,
    cdrLinkAllConnections = 8
};

enum cdrEnvelopeCopyMode : int
{
    cdrEnvelopeUseOriginal = 0,
    cdrEnvelopeCenter = 1,
    cdrEnvelopeStretch = 2,
    cdrEnvelopeFit = 3
};

enum cdrContourEndCapType : int
{
    cdrContourButtCap = 0,
    cdrContourRoundCap = 1,
    cdrContourSquareCap = 2
};

enum cdrContourCornerType : int
{
    cdrContourCornerBevel = 0,
    cdrContourCornerOffsetBevel = 1,
    cdrContourCornerRound = 2,
    cdrContourCornerMiteredBevel = 3,
    cdrContourCornerMiteredOffsetBevel = 4,
    cdrContourCornerMiteredRound = 5
};

enum cdrTraceType : int
{
    cdrTraceLineArt = 1,
    cdrTraceLogo = 2,
    cdrTraceDetailedLogo = 3,
    cdrTraceClipart = 4,
    cdrTraceLowQualityImage = 5,
    cdrTraceHighQualityImage = 6,
    cdrTraceTechnical = 7,
    cdrTraceLineDrawing = 8
};

enum cdrTraceBackgroundMode : int
{
    cdrTraceBackgroundAutomatic = 1,
    cdrTraceBackgroundManual = 2
};

enum cdrTextPropertySet : int
{
    cdrTextPropertyAll = -1,
    cdrTextPropertyFill = 1,
    cdrTextPropertyOutline = 2,
    cdrTextPropertyFont = 4,
    cdrTextPropertySize = 8,
    cdrTextPropertyStyle = 16
};

enum cdrDocLayout : int
{
    cdrDocFullPage = 0,
    cdrDocBook = 1,
    cdrDocBooklet = 2,
    cdrDocTentCard = 3,
    cdrDocSideFoldCard = 4,
    cdrDocTopFoldCard = 5,
    cdrDocTriFoldBrochure = 6
};

enum cdrCopyProperties : int
{
    cdrCopyOutlineColor = 1,
    cdrCopyOutlinePen = 2,
    cdrCopyFill = 4,
    cdrCopyTextAttrs = 8
};

enum cdrOverprintState : int
{
    cdrOverprintInvalid = 1,
    cdrOverprintOn = 2,
    cdrOverprintOff = 4
};

enum cdrObjectSnapPointType : int
{
    cdrObjectPointTop = 1,
    cdrObjectPointBottom = 2,
    cdrObjectPointLeft = 3,
    cdrObjectPointRight = 4
};

enum cdrConnectorType : int
{
    cdrConnectorStraight = 0,
    cdrConnectorRightAngle = 1,
    cdrConnectorBSpline = 2,
    cdrConnectorBezier = 3,
    cdrConnectorObject = 4
};

enum cdrCornerType : int
{
    cdrCornerTypeRound = 0,
    cdrCornerTypeScallop = 1,
    cdrCornerTypeChamfer = 2
};

enum clrColorModel : int
{
    clrColorModelRGB = 0,
    clrColorModelCMYK = 1,
    clrColorModelGrayscale = 2,
    clrColorModelLab = 3,
    clrColorModelHexachrome = 4
};

enum clrColorPolicyAction : int
{
    clrAssignBaselineProfile = 0,
    clrConvertToBaselineProfile = 1,
    clrConvertToEmbeddedProfile = 2,
    clrAssignEmbeddedProfile = 3
};

enum cdrAlignDistributeH : int
{
    cdrAlignDistributeHNone = 0,
    cdrAlignDistributeHAlignRight = 1,
    cdrAlignDistributeHAlignLeft = 2,
    cdrAlignDistributeHAlignCenter = 3,
    cdrAlignDistributeHDistributeRight = 4,
    cdrAlignDistributeHDistributeLeft = 5,
    cdrAlignDistributeHDistributeCenter = 6,
    cdrAlignDistributeHDistributeSpacing = 7
};

enum cdrAlignDistributeV : int
{
    cdrAlignDistributeVNone = 0,
    cdrAlignDistributeVAlignTop = 1,
    cdrAlignDistributeVAlignBottom = 2,
    cdrAlignDistributeVAlignCenter = 3,
    cdrAlignDistributeVDistributeTop = 4,
    cdrAlignDistributeVDistributeBottom = 5,
    cdrAlignDistributeVDistributeCenter = 6,
    cdrAlignDistributeVDistributeSpacing = 7
};

enum cdrDistributeArea : int
{
    cdrDistributeToSelection = 0,
    cdrDistributeToPage = 1,
    cdrDistributeToRect = 2
};

enum cdrAlignShapesTo : int
{
    cdrAlignShapesToLastSelected = 0,
    cdrAlignShapesToEdgeOfPage = 1,
    cdrAlignShapesToCenterOfPage = 2,
    cdrAlignShapesToGrid = 3,
    cdrAlignShapesToPoint = 4
};

enum cdrOutlineJustification : int
{
    cdrOutlineJustificationUndefined = -1,
    cdrOutlineJustificationMiddle = 0,
    cdrOutlineJustificationInside = 1,
    cdrOutlineJustificationOutside = 2
};

enum cdrFillStyleType : int
{
    cdrNoFillStyle = 0,
    cdrUniformFillStyle = 1,
    cdrFountainFillStyle = 2,
    cdrPostscriptFillStyle = 3,
    cdrTwoColorPatternFillStyle = 4,
    cdrBitmapPatternFillStyle = 6,
    cdrTextureFillStyle = 8,
    cdrFullColorPatternFillStyle = 9,
    cdrHatchFillStyle = 10
};

enum cdrFountainFillSpreadMethod : int
{
    cdrFountainFillSpreadMethodPad = 0,
    cdrFountainFillSpreadMethodReflect = 1,
    cdrFountainFillSpreadMethodRepeat = 2
};

enum cdrProjectPlane : int
{
    cdrProjectFront = 0,
    cdrProjectRight = 1,
    cdrProjectTop = 2
};

enum cdrOnScreenCurvePenStyle : int
{
    cdrOnScreenCurvePenSolid = 0,
    cdrOnScreenCurvePenDash = 1,
    cdrOnScreenCurvePenDot = 2,
    cdrOnScreenCurvePenDashDot = 3,
    cdrOnScreenCurvePenDashDotDot = 4,
    cdrOnScreenCurvePenAlternatingDots = 5
};

enum cdrOnScreenTextAlign : int
{
    cdrLeftOnScreenText = 0,
    cdrRightOnScreenText = 1,
    cdrCenterOnScreenText = 2
};

enum cdrWeldFlags : int
{
    cdrWeldFlagNone = 0,
    cdrWeldFlagFollowOriginalCurve = 1,
    cdrWeldFlagUseTightTolerance = 2,
    cdrWeldFlagAutoCloseOnFailure = 4,
    cdrWeldFlagRemoveKnifeEdges = 8,
    cdrWeldFlagAutoClose = 16
};

enum cdrWeldMethod : int
{
    cdrWeldMethodUnion = 0,
    cdrWeldMethodIntersect = 1,
    cdrWeldMethodSubtract = 2,
    cdrWeldMethodXor = 3
};

enum cdrOutlineDashAdjust : int
{
    cdrOutlineDashAdjustUndefined = -1,
    cdrOutlineDashAdjustNone = 0,
    cdrOutlineDashAdjustFullLineScale = 1,
    cdrOutlineDashAdjustEvenCorner = 2
};

enum cdrTextIndentLevelStyle : int
{
    cdrTextIndentLevelStyleBullet = 0,
    cdrTextIndentLevelStyleLowercaseRomanNumeral = 1,
    cdrTextIndentLevelStyleUppercaseRomanNumeral = 2,
    cdrTextIndentLevelStyleLowercaseLatin = 3,
    cdrTextIndentLevelStyleUppercaseLatin = 4,
    cdrTextIndentLevelStyleHindi = 5,
    cdrTextIndentLevelStyleKanjiDBNum1 = 6,
    cdrTextIndentLevelStyleKanjiDBNum2 = 7,
    cdrTextIndentLevelStyleKanjiDBNum3 = 8,
    cdrTextIndentLevelStyleTaiwaneseDB2 = 9,
    cdrTextIndentLevelStyleTaiwaneseDB3 = 10,
    cdrTextIndentLevelStyleChineseDB2 = 11,
    cdrTextIndentLevelStyleChineseDB3 = 12,
    cdrTextIndentLevelStyleZodiac1 = 13,
    cdrTextIndentLevelStyleZodiac2 = 14,
    cdrTextIndentLevelStyleKatakanaAiueo = 15,
    cdrTextIndentLevelStyleKatakanaAiueoDB = 16,
    cdrTextIndentLevelStyleKatakanaIroha = 17,
    cdrTextIndentLevelStyleKatakanaIrohaDB = 18,
    cdrTextIndentLevelStyleArabicLeadingZero = 19,
    cdrTextIndentLevelStyleKoreanGanada = 20,
    cdrTextIndentLevelStyleLowercaseRussian = 21,
    cdrTextIndentLevelStyleUppercaseRussian = 22,
    cdrTextIndentLevelStyleDoubleByte = 23,
    cdrTextIndentLevelStyleCircle = 24,
    cdrTextIndentLevelStyleAlifBaTah = 25,
    cdrTextIndentLevelStyleArabic = 26,
    cdrTextIndentLevelStyleArabicSequential = 27,
    cdrTextIndentLevelStyleSingleByte = 28,
    cdrTextIndentLevelStyleHebrew = 29
};

enum cdrAuthorAuthentication : int
{
    cdrAuthorAuthenticationUndefined = -1,
    cdrAuthorAuthenticationGuest = 0,
    cdrAuthorAuthenticationGSuite = 1,
    cdrAuthorAuthenticationO365 = 2
};

enum cdrCommentAnnotationType : int
{
    cdrCommentAnnotationFreehand = 0,
    cdrCommentAnnotationHotspot = 1,
    cdrCommentAnnotationArrow = 2,
    cdrCommentAnnotationHighlight = 3,
    cdrCommentAnnotationRectangle = 4,
    cdrCommentAnnotationEllipse = 5,
    cdrCommentAnnotationCoEditing = 6
};

enum cdrCommentStatus : int
{
    cdrCommentStatusOpen = 0,
    cdrCommentStatusResolved = 1,
    cdrCommentStatusReopened = 2
};

enum PrnFileMode : int
{
    prnSingleFile = 0,
    prnSeparatePages = 1,
    prnSeparatePlates = 2
};

enum PrnPrintRange : int
{
    prnWholeDocument = 0,
    prnCurrentPage = 1,
    prnSelection = 2,
    prnPageRange = 3
};

enum PrnPlateType : int
{
    prnCyan = 0,
    prnMagenta = 1,
    prnYellow = 2,
    prnBlack = 3,
    prnOrange = 4,
    prnGreen = 5,
    prnSpot = 6
};

enum PrnRegistrationStyle : int
{
    prnStandard = 0,
    prnLong = 1,
    prnSquare = 2,
    prnHalfInverted = 3,
    prnCorel = 4
};

enum PrnPostScriptLevel : int
{
    prnPSLevel1 = 1,
    prnPSLevel2 = 2,
    prnPSLevel3 = 3
};

enum PrnPDFStartup : int
{
    prnPDFFullScreen = 0,
    prnPDFPageOnly = 1,
    prnPDFThumbnails = 2,
    prnPDFOutlines = 3
};

enum PrnImageTrap : int
{
    prnTrapNormal = 0,
    prnTrapSpread = 1,
    prnTrapChoke = 2,
    prnTrapCenter = 3
};

enum PrnTrapType : int
{
    prnLayerNormal = 0,
    prnLayerTransparent = 1,
    prnLayerOpaque = 2,
    prnLayerOpaqueIgnore = 3
};

enum PrnColorMode : int
{
    prnModeFullColor = 0,
    prnModeGrayscale = 1,
    prnModeBlack = 2
};

enum PrnBitmapColorMode : int
{
    prnBitmapCMYK = 0,
    prnBitmapRGB = 1,
    prnBitmapGrayscale = 2,
    prnBitmapNative = 3
};

enum PrnPageSet : int
{
    prnPageSetAll = 0,
    prnPageSetOdd = 1,
    prnPageSetEven = 2,
    prnPageSetLeft = 3,
    prnPageSetRight = 4
};

enum PrnPaperSize : int
{
    prnPaperSizeLetter = 1,
    prnPaperSizeLetterSmall = 2,
    prnPaperSizeTabloid = 3,
    prnPaperSizeLedger = 4,
    prnPaperSizeLegal = 5,
    prnPaperSizeStatement = 6,
    prnPaperSizeExecutive = 7,
    prnPaperSizeA3 = 8,
    prnPaperSizeA4 = 9,
    prnPaperSizeA4Small = 10,
    prnPaperSizeA5 = 11,
    prnPaperSizeB4 = 12,
    prnPaperSizeB5 = 13,
    prnPaperSizeFolio = 14,
    prnPaperSizeQuarto = 15,
    prnPaperSize10x14 = 16,
    prnPaperSize11x17 = 17,
    prnPaperSizeNote = 18,
    prnPaperSizeEnv9 = 19,
    prnPaperSizeEnv10 = 20,
    prnPaperSizeEnv11 = 21,
    prnPaperSizeEnv12 = 22,
    prnPaperSizeEnv14 = 23,
    prnPaperSizeCSheet = 24,
    prnPaperSizeDSheet = 25,
    prnPaperSizeESheet = 26,
    prnPaperSizeEnvDL = 27,
    prnPaperSizeEnvC5 = 28,
    prnPaperSizeEnvC3 = 29,
    prnPaperSizeEnvC4 = 30,
    prnPaperSizeEnvC6 = 31,
    prnPaperSizeEnvC65 = 32,
    prnPaperSizeISOB4 = 33,
    prnPaperSizeISOB5 = 34,
    prnPaperSizeISOB6 = 35,
    prnPaperSizeEnvItaly = 36,
    prnPaperSizeEnvMonarch = 37,
    prnPaperSizeEnvPersonal = 38,
    prnPaperSizeFanfoldUS = 39,
    prnPaperSizeFanfoldGerman = 40,
    prnPaperSizeFanfoldLglGerman = 41,
    prnPaperSizeJapanesePostcard = 43,
    prnPaperSize9x11 = 44,
    prnPaperSize10x11 = 45,
    prnPaperSize15x11 = 46,
    prnPaperSizeEnvInvite = 47,
    prnPaperSizeLetterExtra = 50,
    prnPaperSizeLegalExtra = 51,
    prnPaperSizeTabloidExtra = 52,
    prnPaperSizeA4Extra = 53,
    prnPaperSizeLetterTransverse = 54,
    prnPaperSizeA4Transverse = 55,
    prnPaperSizeLetterExtraTransverse = 56,
    prnPaperSizeAPlus = 57,
    prnPaperSizeBPlus = 58,
    prnPaperSizeLetterPlus = 59,
    prnPaperSizeA4Plus = 60,
    prnPaperSizeA5Transverse = 61,
    prnPaperSizeB5Transverse = 62,
    prnPaperSizeA3Extra = 63,
    prnPaperSizeA5Extra = 64,
    prnPaperSizeB5Extra = 65,
    prnPaperSizeA2 = 66,
    prnPaperSizeA3Transverse = 67,
    prnPaperSizeA3ExtraTransverse = 68,
    prnPaperSizeJapaneseDblPostcard = 69,
    prnPaperSizeA6 = 70,
    prnPaperSizeLetterRotated = 75,
    prnPaperSizeA3Rotated = 76,
    prnPaperSizeA4Rotated = 77,
    prnPaperSizeA5Rotated = 78,
    prnPaperSizeB4JISRotated = 79,
    prnPaperSizeB5JISRotated = 80,
    prnPaperSizeJapanesePostcardRotated = 81,
    prnPaperSizeJapaneseDlbPostcardRotated = 82,
    prnPaperSizeA6Rotated = 83,
    prnPaperSizeB6JIS = 88,
    prnPaperSizeB6JISRotated = 89,
    prnPaperSize12x11 = 90,
    prnPaperSizeP16K = 93,
    prnPaperSizeP32K = 94,
    prnPaperSizeP32KBig = 95,
    prnPaperSizePEnv1 = 96,
    prnPaperSizePEnv2 = 97,
    prnPaperSizePEnv3 = 98,
    prnPaperSizePEnv4 = 99,
    prnPaperSizePEnv5 = 100,
    prnPaperSizePEnv6 = 101,
    prnPaperSizePEnv7 = 102,
    prnPaperSizePEnv8 = 103,
    prnPaperSizePEnv9 = 104,
    prnPaperSizePEnv10 = 105,
    prnPaperSizeP16KRotated = 106,
    prnPaperSizeP32KRotated = 107,
    prnPaperSizeP32KBigRotated = 108,
    prnPaperSizePEnv1Rotated = 109,
    prnPaperSizePEnv2Rotated = 110,
    prnPaperSizePEnv3Rotated = 111,
    prnPaperSizePEnv4Rotated = 112,
    prnPaperSizePEnv5Rotated = 113,
    prnPaperSizePEnv6Rotated = 114,
    prnPaperSizePEnv7Rotated = 115,
    prnPaperSizePEnv8Rotated = 116,
    prnPaperSizePEnv9Rotated = 117,
    prnPaperSizePEnv10Rotated = 118
};

enum PrnPaperOrientation : int
{
    prnPaperPortrait = 1,
    prnPaperLandscape = 2,
    prnPaperRotatedLandscape = 3
};

enum PrnPlaceType : int
{
    prnPlaceAsInDocument = 0,
    prnPlaceFitToPage = 1,
    prnPlaceCenterPage = 2,
    prnPlaceCenterTop = 3,
    prnPlaceCenterLeft = 4,
    prnPlaceCenterRight = 5,
    prnPlaceCenterBottom = 6,
    prnPlaceLeftTop = 7,
    prnPlaceRightTop = 8,
    prnPlaceLeftBottom = 9,
    prnPlaceRightBottom = 10,
    prnPlaceCustom = 11
};

enum PrnObjectsColorMode : int
{
    prnObjectsCMYK = 0,
    prnObjectsRGB = 1,
    prnObjectsGrayscale = 2,
    prnObjectsNative = 3
};

enum PrnPageMatchingMode : int
{
    prnPageMatchPrinterDefault = 0,
    prnPageMatchOrientation = 1,
    prnPageMatchSizeAndOrientation = 2
};

enum pdfExportRange : int
{
    pdfWholeDocument = 0,
    pdfCurrentPage = 1,
    pdfSelection = 2,
    pdfPageRange = 3
};

enum pdfBitmapCompressionType : int
{
    pdfNone = 0,
    pdfLZW = 1,
    pdfJPEG = 2,
    pdfZIP = 3,
    pdfJP2 = 4
};

enum pdfEncodingType : int
{
    pdfASCII85 = 0,
    pdfBinary = 1
};

enum pdfColorMode : int
{
    pdfRGB = 0,
    pdfCMYK = 1,
    pdfGrayscale = 2,
    pdfNative = 3
};

enum pdfColorProfile : int
{
    pdfCompositeProfile = 0,
    pdfSeparationProfile = 1
};

enum pdfEPSAs : int
{
    pdfPostscript = 0,
    pdfPreview = 1
};

enum pdfDisplayOnStart : int
{
    pdfPageOnly = 0,
    pdfFullScreen = 1,
    pdfBookmarks = 2,
    pdfThumbnails = 3
};

enum pdfVersion : int
{
    pdfVersion12 = 0,
    pdfVersion13 = 1,
    pdfVersionPDFX1 = 2,
    pdfVersion14 = 3,
    pdfVersionPDFX1a = 4,
    pdfVersionPDFX3 = 5,
    pdfVersion15 = 6,
    pdfVersionPDFA1b = 7,
    pdfVersion17 = 8,
    pdfVersion17_Acrobat9 = 9,
    pdfVersionPDFX4 = 10
};

enum pdfTextExportMode : int
{
    pdfTextAsUnicode = 0,
    pdfTextAsAscii = 1
};

enum pdfPrintPermissions : int
{
    pdfPrintPermissionNone = 0,
    pdfPrintPermissionLowResolution = 1,
    pdfPrintPermissionHighResolution = 2
};

enum pdfEditPermissions : int
{
    pdfEditPermissionNone = 0,
    pdfEditPermissionInsertDeleteRotatePage = 1,
    pdfEditPermissionAny = 2
};

enum pdfEncryptionType : int
{
    pdfEncryptTypeNone = 0,
    pdfEncryptTypeStandard = 1,
    pdfEncryptTypeAES = 2,
    pdfEncryptTypeAES256 = 3
};

enum pdfSpotType : int
{
    pdfSpotAsSpot = 0,
    pdfSpotAsRGB = 1,
    pdfSpotAsCMYK = 2,
    pdfSpotAsGray = 3
};

enum cuiBarType : int
{
    cuiBarTypeNormal = 0,
    cuiBarTypeMenuBar = 1,
    cuiBarTypePopup = 2,
    cuiBarTypeStatusBar = 3,
    cuiBarTypePropertyBar = 4
};

enum cuiBarPosition : int
{
    cuiBarLeft = 0,
    cuiBarTop = 1,
    cuiBarRight = 2,
    cuiBarBottom = 3,
    cuiBarFloating = 4
};

enum cuiBarProtection : int
{
    cuiBarNoProtection = 0,
    cuiBarNoCustomize = 1,
    cuiBarNoMove = 4,
    cuiBarNoChangeVisible = 8,
    cuiBarNoChangeDock = 16,
    cuiBarNoVerticalDock = 32,
    cuiBarNoHorizontalDock = 64
};

enum cuiWindowState : int
{
    cuiWindowStateRestored = 0,
    cuiWindowStateMaximized = 1,
    cuiWindowStateMinimized = 2
};

enum cuiDockHostOrientation : int
{
    cuiDockHostHorizontal = 0,
    cuiDockHostVertical = 1
};

enum cuiDockItemType : int
{
    cuiDockItemDockHost = 0,
    cuiDockItemViewHost = 1
};

enum cuiDockOperation : int
{
    cuiDockOperationInsert = 0,
    cuiDockOperationSplitTopLeft = 1,
    cuiDockOperationSplitBottomRight = 2
};

enum cuiMessageBoxFlags : int
{
    Default = 0,
    NoAutoWrap = 1
};

enum cuiTaskPriority : int
{
    kMaybeLater = 0,
    kLater = 1,
    kSoon = 4,
    kASAP = 3
};
    const LPSTR cdrCmdCategoryMacros = (char*) "2cc24a3e-fe24-4708-9a74-9c75406eebcd";
    const LPSTR cdrCmdCategoryPlugins = (char*) "ab489730-8791-45d2-a825-b78bbe0d6a5d";

#pragma pack(push, 8)

struct __declspec(uuid("f51a0301-8d23-11d2-89e7-0000861ebbd6"))
CurveElement
{
    double PositionX;
    double PositionY;
    enum cdrCurveElementType ElementType;
    enum cdrNodeType NodeType;
    unsigned char Flags;
};

#pragma pack(pop)

struct __declspec(uuid("f5200003-8d23-0001-89e7-0000861ebbd6"))
ICorelImportFilter : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetHasDialog))
    VARIANT_BOOL HasDialog;

    //
    // Wrapper methods for error-handling
    //

    HRESULT Reset ( );
    HRESULT Finish ( );
    VARIANT_BOOL GetHasDialog ( );
    VARIANT_BOOL ShowDialog (
        long hWnd );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Reset ( ) = 0;
      virtual HRESULT __stdcall raw_Finish ( ) = 0;
      virtual HRESULT __stdcall get_HasDialog (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_ShowDialog (
        /*[in]*/ long hWnd,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
};

struct __declspec(uuid("f5200000-8d23-0002-89e7-0000861ebbd6"))
ICorelExportFilter : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetHasDialog))
    VARIANT_BOOL HasDialog;

    //
    // Wrapper methods for error-handling
    //

    HRESULT Reset ( );
    HRESULT Finish ( );
    VARIANT_BOOL GetHasDialog ( );
    VARIANT_BOOL ShowDialog (
        long hWnd );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Reset ( ) = 0;
      virtual HRESULT __stdcall raw_Finish ( ) = 0;
      virtual HRESULT __stdcall get_HasDialog (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_ShowDialog (
        /*[in]*/ long hWnd,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
};

struct __declspec(uuid("9cee0001-42a0-5980-43a3-7aa71461482c"))
ICUIControlData : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    _variant_t GetValue (
        _bstr_t PropertyName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_GetValue (
        /*[in]*/ BSTR PropertyName,
        /*[out,retval]*/ VARIANT * prop ) = 0;
};

struct __declspec(uuid("9cee0002-42a0-5980-43a3-7aa71461482c"))
ICUIAutomation : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    long GetNumItemsOnBar (
        _bstr_t GuidBar );
    _bstr_t GetItem (
        _bstr_t GuidBar,
        long Index,
        VARIANT_BOOL * HasSubBar );
    long GetItemInstanceHwnd (
        _bstr_t GuidParent,
        _bstr_t GuidItem );
    VARIANT_BOOL GetSubBar (
        _bstr_t GuidBar,
        BSTR * GuidSubBar );
    VARIANT_BOOL ShowBar (
        _bstr_t GuidBar,
        VARIANT_BOOL Show );
    _bstr_t GetCaptionText (
        _bstr_t GuidItem );
    HRESULT Invoke (
        _bstr_t GuidItem );
    VARIANT_BOOL IsEnabled (
        _bstr_t GuidItem );
    VARIANT_BOOL GetItemScreenRect (
        _bstr_t GuidParent,
        _bstr_t GuidItem,
        long * TopLeftX,
        long * TopLeftY,
        long * Width,
        long * Height );
    HRESULT InvokeItem (
        _bstr_t GuidItem );
    HRESULT InvokeDialogItem (
        _bstr_t GuidDialog,
        _bstr_t GuidItem );
    ICUIControlDataPtr GetControlData (
        _bstr_t Guid );
    ICUIControlDataPtr GetControlDataEx (
        _bstr_t GuidParent,
        _bstr_t Guid );
    VARIANT_BOOL GetActiveMenuItemScreenRect (
        int itemIndex,
        long * TopLeftX,
        long * TopLeftY,
        long * Width,
        long * Height );
    _bstr_t GetActiveMenuItemGuid (
        int itemIndex );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_GetNumItemsOnBar (
        /*[in]*/ BSTR GuidBar,
        /*[out,retval]*/ long * NumItems ) = 0;
      virtual HRESULT __stdcall raw_GetItem (
        /*[in]*/ BSTR GuidBar,
        /*[in]*/ long Index,
        /*[out]*/ VARIANT_BOOL * HasSubBar,
        /*[out,retval]*/ BSTR * GuidItem ) = 0;
      virtual HRESULT __stdcall raw_GetItemInstanceHwnd (
        /*[in]*/ BSTR GuidParent,
        /*[in]*/ BSTR GuidItem,
        /*[out,retval]*/ long * hWnd ) = 0;
      virtual HRESULT __stdcall raw_GetSubBar (
        /*[in]*/ BSTR GuidBar,
        /*[out]*/ BSTR * GuidSubBar,
        /*[out,retval]*/ VARIANT_BOOL * HasSubBar ) = 0;
      virtual HRESULT __stdcall raw_ShowBar (
        /*[in]*/ BSTR GuidBar,
        /*[in]*/ VARIANT_BOOL Show,
        /*[out,retval]*/ VARIANT_BOOL * WasShown ) = 0;
      virtual HRESULT __stdcall raw_GetCaptionText (
        /*[in]*/ BSTR GuidItem,
        /*[out,retval]*/ BSTR * Caption ) = 0;
      virtual HRESULT __stdcall raw_Invoke (
        /*[in]*/ BSTR GuidItem ) = 0;
      virtual HRESULT __stdcall raw_IsEnabled (
        /*[in]*/ BSTR GuidItem,
        /*[out,retval]*/ VARIANT_BOOL * IsEnabled ) = 0;
      virtual HRESULT __stdcall raw_GetItemScreenRect (
        /*[in]*/ BSTR GuidParent,
        /*[in]*/ BSTR GuidItem,
        /*[out]*/ long * TopLeftX,
        /*[out]*/ long * TopLeftY,
        /*[out]*/ long * Width,
        /*[out]*/ long * Height,
        /*[out,retval]*/ VARIANT_BOOL * IsOnScreen ) = 0;
      virtual HRESULT __stdcall raw_InvokeItem (
        /*[in]*/ BSTR GuidItem ) = 0;
      virtual HRESULT __stdcall raw_InvokeDialogItem (
        /*[in]*/ BSTR GuidDialog,
        /*[in]*/ BSTR GuidItem ) = 0;
      virtual HRESULT __stdcall raw_GetControlData (
        /*[in]*/ BSTR Guid,
        /*[out,retval]*/ struct ICUIControlData * * Result ) = 0;
      virtual HRESULT __stdcall raw_GetControlDataEx (
        /*[in]*/ BSTR GuidParent,
        /*[in]*/ BSTR Guid,
        /*[out,retval]*/ struct ICUIControlData * * Result ) = 0;
      virtual HRESULT __stdcall raw_GetActiveMenuItemScreenRect (
        /*[in]*/ int itemIndex,
        /*[out]*/ long * TopLeftX,
        /*[out]*/ long * TopLeftY,
        /*[out]*/ long * Width,
        /*[out]*/ long * Height,
        /*[out,retval]*/ VARIANT_BOOL * IsOnScreen ) = 0;
      virtual HRESULT __stdcall raw_GetActiveMenuItemGuid (
        /*[in]*/ int itemIndex,
        /*[out,retval]*/ BSTR * GuidItem ) = 0;
};

struct __declspec(uuid("9cee0008-42a0-5980-43a3-7aa71461482c"))
ICUIControl : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetDescriptionText,put=PutDescriptionText))
    _bstr_t DescriptionText;
    __declspec(property(get=GetHeight,put=PutHeight))
    long Height;
    __declspec(property(get=GetWidth,put=PutWidth))
    long Width;
    __declspec(property(get=GetID))
    _bstr_t ID;
    __declspec(property(get=GetParameter,put=PutParameter))
    _variant_t Parameter;
    __declspec(property(get=GetTag,put=PutTag))
    _bstr_t Tag;
    __declspec(property(get=GetToolTipText,put=PutToolTipText))
    _bstr_t ToolTipText;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t pVal );
    _bstr_t GetDescriptionText ( );
    void PutDescriptionText (
        _bstr_t pVal );
    long GetHeight ( );
    void PutHeight (
        long pVal );
    long GetWidth ( );
    void PutWidth (
        long pVal );
    _bstr_t GetID ( );
    _variant_t GetParameter ( );
    void PutParameter (
        const _variant_t & pVal );
    _bstr_t GetTag ( );
    void PutTag (
        _bstr_t pVal );
    _bstr_t GetToolTipText ( );
    void PutToolTipText (
        _bstr_t pVal );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL pVal );
    HRESULT SetIcon (
        long RowIndex,
        long ColumnIndex );
    HRESULT SetCustomIcon (
        _bstr_t ImageFile );
    HRESULT SetIcon2 (
        _bstr_t Icon );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Caption (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Caption (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_DescriptionText (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_DescriptionText (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_ID (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_Parameter (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_Parameter (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_Tag (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Tag (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ToolTipText (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ToolTipText (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall raw_SetIcon (
        /*[in]*/ long RowIndex,
        /*[in]*/ long ColumnIndex ) = 0;
      virtual HRESULT __stdcall raw_SetCustomIcon (
        /*[in]*/ BSTR ImageFile ) = 0;
      virtual HRESULT __stdcall raw_SetIcon2 (
        /*[in]*/ BSTR Icon ) = 0;
};

struct __declspec(uuid("9cee0007-42a0-5980-43a3-7aa71461482c"))
ICUIControls : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetItem))
    ICUIControlPtr Item[];
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    ICUIControlPtr GetItem (
        long Index );
    IUnknownPtr Get_NewEnum ( );
    ICUIControlPtr Add (
        _bstr_t ControlID,
        long Index,
        VARIANT_BOOL Temporary );
    ICUIControlPtr AddCustomButton (
        _bstr_t CategoryID,
        _bstr_t Command,
        long Index,
        VARIANT_BOOL Temporary );
    ICUIControlPtr AddCustomControl (
        _bstr_t ClassName,
        _bstr_t AssemblyPath,
        long Index,
        VARIANT_BOOL Temporary );
    ICUIControlPtr AddToggleButton (
        _bstr_t Guid,
        long Index,
        VARIANT_BOOL Temporary );
    HRESULT Remove (
        long Index );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct ICUIControl * * ppVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ BSTR ControlID,
        /*[in]*/ long Index,
        /*[in]*/ VARIANT_BOOL Temporary,
        /*[out,retval]*/ struct ICUIControl * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_AddCustomButton (
        /*[in]*/ BSTR CategoryID,
        /*[in]*/ BSTR Command,
        /*[in]*/ long Index,
        /*[in]*/ VARIANT_BOOL Temporary,
        /*[out,retval]*/ struct ICUIControl * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_AddCustomControl (
        /*[in]*/ BSTR ClassName,
        /*[in]*/ BSTR AssemblyPath,
        /*[in]*/ long Index,
        /*[in]*/ VARIANT_BOOL Temporary,
        /*[out,retval]*/ struct ICUIControl * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_AddToggleButton (
        /*[in]*/ BSTR Guid,
        /*[in]*/ long Index,
        /*[in]*/ VARIANT_BOOL Temporary,
        /*[out,retval]*/ struct ICUIControl * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_Remove (
        /*[in]*/ long Index ) = 0;
};

struct __declspec(uuid("9cee0006-42a0-5980-43a3-7aa71461482c"))
ICUICommandBarMode : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetNameLocal))
    _bstr_t NameLocal;
    __declspec(property(get=GetControls))
    ICUIControlsPtr Controls;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetName ( );
    _bstr_t GetNameLocal ( );
    ICUIControlsPtr GetControls ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_NameLocal (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_Controls (
        /*[out,retval]*/ struct ICUIControls * * ppVal ) = 0;
};

struct __declspec(uuid("9cee0005-42a0-5980-43a3-7aa71461482c"))
ICUICommandBarModes : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    ICUICommandBarModePtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    ICUICommandBarModePtr GetItem (
        const _variant_t & IndexOrName );
    long GetCount ( );
    IUnknownPtr Get_NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT IndexOrName,
        /*[out,retval]*/ struct ICUICommandBarMode * * pVal ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * pVal ) = 0;
};

struct __declspec(uuid("9cee0009-42a0-5980-43a3-7aa71461482c"))
ICUICommandBar : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetType))
    enum cuiBarType Type;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetControls))
    ICUIControlsPtr Controls;
    __declspec(property(get=GetModes))
    ICUICommandBarModesPtr Modes;
    __declspec(property(get=GetBuiltIn))
    VARIANT_BOOL BuiltIn;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetLeft,put=PutLeft))
    long Left;
    __declspec(property(get=GetTop,put=PutTop))
    long Top;
    __declspec(property(get=GetHeight))
    long Height;
    __declspec(property(get=GetWidth))
    long Width;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetNameLocal,put=PutNameLocal))
    _bstr_t NameLocal;
    __declspec(property(get=GetPosition,put=PutPosition))
    enum cuiBarPosition Position;
    __declspec(property(get=GetProtection,put=PutProtection))
    enum cuiBarProtection Protection;

    //
    // Wrapper methods for error-handling
    //

    enum cuiBarType GetType ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL pVal );
    ICUIControlsPtr GetControls ( );
    ICUICommandBarModesPtr GetModes ( );
    VARIANT_BOOL GetBuiltIn ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL pVal );
    long GetLeft ( );
    void PutLeft (
        long pVal );
    long GetTop ( );
    void PutTop (
        long pVal );
    long GetHeight ( );
    long GetWidth ( );
    long GetIndex ( );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t pVal );
    _bstr_t GetNameLocal ( );
    void PutNameLocal (
        _bstr_t pVal );
    enum cuiBarPosition GetPosition ( );
    void PutPosition (
        enum cuiBarPosition pVal );
    enum cuiBarProtection GetProtection ( );
    void PutProtection (
        enum cuiBarProtection pVal );
    HRESULT Delete ( );
    HRESULT Reset ( );
    HRESULT ShowPopup (
        const _variant_t & x,
        const _variant_t & y );
    HRESULT SetWidth (
        long Width );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum cuiBarType * pVal ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Controls (
        /*[out,retval]*/ struct ICUIControls * * pVal ) = 0;
      virtual HRESULT __stdcall get_Modes (
        /*[out,retval]*/ struct ICUICommandBarModes * * pVal ) = 0;
      virtual HRESULT __stdcall get_BuiltIn (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_Enabled (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_Enabled (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_Index (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_NameLocal (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_NameLocal (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Position (
        /*[out,retval]*/ enum cuiBarPosition * pVal ) = 0;
      virtual HRESULT __stdcall put_Position (
        /*[in]*/ enum cuiBarPosition pVal ) = 0;
      virtual HRESULT __stdcall get_Protection (
        /*[out,retval]*/ enum cuiBarProtection * pVal ) = 0;
      virtual HRESULT __stdcall put_Protection (
        /*[in]*/ enum cuiBarProtection pVal ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall raw_Reset ( ) = 0;
      virtual HRESULT __stdcall raw_ShowPopup (
        /*[in]*/ VARIANT x,
        /*[in]*/ VARIANT y ) = 0;
      virtual HRESULT __stdcall raw_SetWidth (
        /*[in]*/ long Width ) = 0;
};

struct __declspec(uuid("9cee0004-42a0-5980-43a3-7aa71461482c"))
ICUICommandBars : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    ICUICommandBarPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    ICUICommandBarPtr GetItem (
        const _variant_t & IndexOrName );
    long GetCount ( );
    IUnknownPtr Get_NewEnum ( );
    ICUICommandBarPtr Add (
        _bstr_t Name,
        enum cuiBarPosition Position,
        VARIANT_BOOL Temporary );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT IndexOrName,
        /*[out,retval]*/ struct ICUICommandBar * * pVal ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * pVal ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ BSTR Name,
        /*[in]*/ enum cuiBarPosition Position,
        /*[in]*/ VARIANT_BOOL Temporary,
        /*[out,retval]*/ struct ICUICommandBar * * pVal ) = 0;
};

struct __declspec(uuid("9cee0019-42a0-5980-43a3-7aa71461482c"))
ICUIScreenRect : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetLeft,put=PutLeft))
    long Left;
    __declspec(property(get=GetRight,put=PutRight))
    long Right;
    __declspec(property(get=GetTop,put=PutTop))
    long Top;
    __declspec(property(get=GetBottom,put=PutBottom))
    long Bottom;
    __declspec(property(get=GetWidth,put=PutWidth))
    long Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    long Height;
    __declspec(property(get=GetCenterX,put=PutCenterX))
    long CenterX;
    __declspec(property(get=GetCenterY,put=PutCenterY))
    long CenterY;
    __declspec(property(get=GetReadOnly))
    VARIANT_BOOL ReadOnly;

    //
    // Wrapper methods for error-handling
    //

    long GetLeft ( );
    void PutLeft (
        long pVal );
    long GetRight ( );
    void PutRight (
        long pVal );
    long GetTop ( );
    void PutTop (
        long pVal );
    long GetBottom ( );
    void PutBottom (
        long pVal );
    long GetWidth ( );
    void PutWidth (
        long pVal );
    long GetHeight ( );
    void PutHeight (
        long pVal );
    long GetCenterX ( );
    void PutCenterX (
        long pVal );
    long GetCenterY ( );
    void PutCenterY (
        long pVal );
    HRESULT SetPosition (
        long Left,
        long Top,
        long Width,
        long Height );
    HRESULT Resize (
        long Width,
        long Height );
    HRESULT Move (
        long Left,
        long Top );
    VARIANT_BOOL GetReadOnly ( );
    ICUIScreenRectPtr GetCopy ( );
    HRESULT CopyAssign (
        struct ICUIScreenRect * Source );
    HRESULT Offset (
        long OffsetX,
        long OffsetY );
    HRESULT Inflate (
        long Left,
        long Top,
        long Right,
        long Bottom );
    VARIANT_BOOL IsPointInside (
        long x,
        long y );
    ICUIScreenRectPtr Union (
        struct ICUIScreenRect * Source );
    ICUIScreenRectPtr Intersect (
        struct ICUIScreenRect * Source );
    VARIANT_BOOL IsEmpty ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_Right (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_Right (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_Bottom (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_Bottom (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_CenterX (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_CenterX (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_CenterY (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_CenterY (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall raw_SetPosition (
        /*[in]*/ long Left,
        /*[in]*/ long Top,
        /*[in]*/ long Width,
        /*[in]*/ long Height ) = 0;
      virtual HRESULT __stdcall raw_Resize (
        /*[in]*/ long Width,
        /*[in]*/ long Height ) = 0;
      virtual HRESULT __stdcall raw_Move (
        /*[in]*/ long Left,
        /*[in]*/ long Top ) = 0;
      virtual HRESULT __stdcall get_ReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetCopy (
        /*[out,retval]*/ struct ICUIScreenRect * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_CopyAssign (
        /*[in]*/ struct ICUIScreenRect * Source ) = 0;
      virtual HRESULT __stdcall raw_Offset (
        /*[in]*/ long OffsetX,
        /*[in]*/ long OffsetY ) = 0;
      virtual HRESULT __stdcall raw_Inflate (
        /*[in]*/ long Left,
        /*[in]*/ long Top,
        /*[in]*/ long Right,
        /*[in]*/ long Bottom ) = 0;
      virtual HRESULT __stdcall raw_IsPointInside (
        /*[in]*/ long x,
        /*[in]*/ long y,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_Union (
        /*[in]*/ struct ICUIScreenRect * Source,
        /*[out,retval]*/ struct ICUIScreenRect * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_Intersect (
        /*[in]*/ struct ICUIScreenRect * Source,
        /*[out,retval]*/ struct ICUIScreenRect * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_IsEmpty (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
};

struct __declspec(uuid("9cee001a-42a0-5980-43a3-7aa71461482c"))
ICUIBitmapImage : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetValid))
    VARIANT_BOOL Valid;
    __declspec(property(get=GetWidth))
    long Width;
    __declspec(property(get=GetHeight))
    long Height;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetValid ( );
    long GetWidth ( );
    long GetHeight ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Valid (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ long * pVal ) = 0;
};

struct __declspec(uuid("9cee000e-42a0-5980-43a3-7aa71461482c"))
ICUIImageList : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetImageCount))
    long ImageCount;
    __declspec(property(get=GetImageKeys))
    SAFEARRAY * ImageKeys;

    //
    // Wrapper methods for error-handling
    //

    long GetImageCount ( );
    VARIANT_BOOL ImageExists (
        _bstr_t Key );
    HRESULT RemoveAll ( );
    VARIANT_BOOL AddImage (
        _bstr_t Key,
        const _variant_t & ImageData,
        long MaxSize );
    SAFEARRAY * GetImageKeys ( );
    VARIANT_BOOL RemoveImage (
        _bstr_t Key );
    HRESULT AddBitmap (
        _bstr_t Key,
        struct ICUIBitmapImage * Bitmap );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ImageCount (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_ImageExists (
        /*[in]*/ BSTR Key,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_RemoveAll ( ) = 0;
      virtual HRESULT __stdcall raw_AddImage (
        /*[in]*/ BSTR Key,
        /*[in]*/ VARIANT ImageData,
        /*[in]*/ long MaxSize,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_ImageKeys (
        /*[out,retval]*/ SAFEARRAY * * pVal ) = 0;
      virtual HRESULT __stdcall raw_RemoveImage (
        /*[in]*/ BSTR Key,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_AddBitmap (
        /*[in]*/ BSTR Key,
        /*[in]*/ struct ICUIBitmapImage * Bitmap ) = 0;
};

struct __declspec(uuid("9cee001b-42a0-5980-43a3-7aa71461482c"))
ICUIStatusText : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT SetCaptionText (
        _bstr_t Text );
    HRESULT SetBitmap (
        struct ICUIBitmapImage * Bitmap );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_SetCaptionText (
        /*[in]*/ BSTR Text ) = 0;
      virtual HRESULT __stdcall raw_SetBitmap (
        /*[in]*/ struct ICUIBitmapImage * Bitmap ) = 0;
};

struct __declspec(uuid("9cee001c-42a0-5980-43a3-7aa71461482c"))
ICUIWarning : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetID))
    _bstr_t ID;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetText))
    _bstr_t Text;
    __declspec(property(get=GetTitle))
    _bstr_t Title;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL pVal );
    _bstr_t GetID ( );
    _bstr_t GetDescription ( );
    _bstr_t GetText ( );
    _bstr_t GetTitle ( );
    long DoWarningDialog (
        long unFlags,
        _bstr_t Text );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Enabled (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_Enabled (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_ID (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_Title (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall raw_DoWarningDialog (
        /*[in]*/ long unFlags,
        /*[in]*/ BSTR Text,
        /*[out,retval]*/ long * pVal ) = 0;
};

struct __declspec(uuid("9cee001d-42a0-5980-43a3-7aa71461482c"))
ICUITask : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT RunTask ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_RunTask ( ) = 0;
};

struct __declspec(uuid("9cee001e-42a0-5980-43a3-7aa71461482c"))
ICUIBackgroundTask : ICUITask
{
    //
    // Property data
    //

    __declspec(property(get=GetName))
    _bstr_t Name;

    //
    // Wrapper methods for error-handling
    //

    HRESULT FinalizeTask ( );
    HRESULT FreeTask ( );
    HRESULT QuitTask ( );
    _bstr_t GetName ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_FinalizeTask ( ) = 0;
      virtual HRESULT __stdcall raw_FreeTask ( ) = 0;
      virtual HRESULT __stdcall raw_QuitTask ( ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pVal ) = 0;
};

struct __declspec(uuid("9cee0020-42a0-5980-43a3-7aa71461482c"))
ICUIRunningTask : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT TryAbort ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_TryAbort ( ) = 0;
};

struct __declspec(uuid("9cee0021-42a0-5980-43a3-7aa71461482c"))
ICUIRunningBackgroundTask : ICUIRunningTask
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT WaitUntilDone ( );
    HRESULT Reprioritize (
        enum cuiTaskPriority __MIDL__ICUIRunningBackgroundTask0000 );
    VARIANT_BOOL FinalizeIfDone ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_WaitUntilDone ( ) = 0;
      virtual HRESULT __stdcall raw_Reprioritize (
        /*[in]*/ enum cuiTaskPriority __MIDL__ICUIRunningBackgroundTask0000 ) = 0;
      virtual HRESULT __stdcall raw_FinalizeIfDone (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
};

struct __declspec(uuid("9cee001f-42a0-5980-43a3-7aa71461482c"))
ICUITaskManager : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT RunOnUIThread (
        struct ICUITask * pTask );
    ICUIRunningBackgroundTaskPtr RunInBackground (
        enum cuiTaskPriority priority,
        struct ICUIBackgroundTask * pTask );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_RunOnUIThread (
        /*[in]*/ struct ICUITask * pTask ) = 0;
      virtual HRESULT __stdcall raw_RunInBackground (
        /*[in]*/ enum cuiTaskPriority priority,
        /*[in]*/ struct ICUIBackgroundTask * pTask,
        /*[out,retval]*/ struct ICUIRunningBackgroundTask * * ppVal ) = 0;
};

struct __declspec(uuid("a25250a9-50c1-11d3-8ea3-0090271becdd"))
IPrnVBAPrintLayout : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetUseBleedLimit,put=PutUseBleedLimit))
    VARIANT_BOOL UseBleedLimit;
    __declspec(property(get=GetBleedLimit,put=PutBleedLimit))
    double BleedLimit;
    __declspec(property(get=GetPrintTiledPages,put=PutPrintTiledPages))
    VARIANT_BOOL PrintTiledPages;
    __declspec(property(get=GetPrintTilingMarks,put=PutPrintTilingMarks))
    VARIANT_BOOL PrintTilingMarks;
    __declspec(property(get=GetTileOverlap,put=PutTileOverlap))
    double TileOverlap;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    enum PrnPlaceType Placement;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetUseBleedLimit ( );
    void PutUseBleedLimit (
        VARIANT_BOOL pVal );
    double GetBleedLimit ( );
    void PutBleedLimit (
        double pVal );
    VARIANT_BOOL GetPrintTiledPages ( );
    void PutPrintTiledPages (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetPrintTilingMarks ( );
    void PutPrintTilingMarks (
        VARIANT_BOOL pVal );
    double GetTileOverlap ( );
    void PutTileOverlap (
        double pVal );
    enum PrnPlaceType GetPlacement ( );
    void PutPlacement (
        enum PrnPlaceType pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_UseBleedLimit (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_UseBleedLimit (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_BleedLimit (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_BleedLimit (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_PrintTiledPages (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_PrintTiledPages (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_PrintTilingMarks (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_PrintTilingMarks (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_TileOverlap (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_TileOverlap (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Placement (
        /*[out,retval]*/ enum PrnPlaceType * pVal ) = 0;
      virtual HRESULT __stdcall put_Placement (
        /*[in]*/ enum PrnPlaceType pVal ) = 0;
};

struct __declspec(uuid("a2525098-50c1-11d3-8ea3-0090271becdd"))
IPrnVBAPrinter : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetType))
    _bstr_t Type;
    __declspec(property(get=GetDefault))
    VARIANT_BOOL Default;
    __declspec(property(get=GetReady))
    VARIANT_BOOL Ready;
    __declspec(property(get=GetPort))
    _bstr_t Port;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPostScriptEnabled))
    VARIANT_BOOL PostScriptEnabled;
    __declspec(property(get=GetColorEnabled))
    VARIANT_BOOL ColorEnabled;
    __declspec(property(get=GetPageSizeMatchingSupported,put=PutPageSizeMatchingSupported))
    VARIANT_BOOL PageSizeMatchingSupported;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetName ( );
    _bstr_t GetType ( );
    VARIANT_BOOL GetDefault ( );
    VARIANT_BOOL GetReady ( );
    _bstr_t GetPort ( );
    _bstr_t GetDescription ( );
    VARIANT_BOOL GetPostScriptEnabled ( );
    VARIANT_BOOL GetColorEnabled ( );
    HRESULT ShowDialog ( );
    VARIANT_BOOL GetPageSizeMatchingSupported ( );
    void PutPageSizeMatchingSupported (
        VARIANT_BOOL pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_Default (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_Ready (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_Port (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_PostScriptEnabled (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_ColorEnabled (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_ShowDialog ( ) = 0;
      virtual HRESULT __stdcall get_PageSizeMatchingSupported (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_PageSizeMatchingSupported (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
};

struct __declspec(uuid("a2525099-50c1-11d3-8ea3-0090271becdd"))
IPrnVBAPrinters : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IPrnVBAPrinterPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetDefault))
    IPrnVBAPrinterPtr Default;

    //
    // Wrapper methods for error-handling
    //

    IPrnVBAPrinterPtr GetItem (
        long nIndex );
    long GetCount ( );
    IPrnVBAPrinterPtr GetDefault ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long nIndex,
        /*[out,retval]*/ struct IPrnVBAPrinter * * pVal ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_Default (
        /*[out,retval]*/ struct IPrnVBAPrinter * * pVal ) = 0;
};

struct __declspec(uuid("a252509a-50c1-11d3-8ea3-0090271becdd"))
IPrnVBASeparationPlate : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetType))
    enum PrnPlateType Type;
    __declspec(property(get=GetColor))
    _bstr_t Color;
    __declspec(property(get=GetFrequency,put=PutFrequency))
    double Frequency;
    __declspec(property(get=GetAngle,put=PutAngle))
    double Angle;
    __declspec(property(get=GetOverprintText,put=PutOverprintText))
    VARIANT_BOOL OverprintText;
    __declspec(property(get=GetOverprintGraphic,put=PutOverprintGraphic))
    VARIANT_BOOL OverprintGraphic;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL pVal );
    enum PrnPlateType GetType ( );
    _bstr_t GetColor ( );
    double GetFrequency ( );
    void PutFrequency (
        double pVal );
    double GetAngle ( );
    void PutAngle (
        double pVal );
    VARIANT_BOOL GetOverprintText ( );
    void PutOverprintText (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetOverprintGraphic ( );
    void PutOverprintGraphic (
        VARIANT_BOOL pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Enabled (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_Enabled (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum PrnPlateType * pVal ) = 0;
      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_Frequency (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Frequency (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Angle (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Angle (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_OverprintText (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_OverprintText (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_OverprintGraphic (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_OverprintGraphic (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
};

struct __declspec(uuid("a252509b-50c1-11d3-8ea3-0090271becdd"))
IPrnVBASeparationPlates : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IPrnVBASeparationPlatePtr Item[];
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    IPrnVBASeparationPlatePtr GetItem (
        long Index );
    long GetCount ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IPrnVBASeparationPlate * * pVal ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pVal ) = 0;
};

struct __declspec(uuid("a252509c-50c1-11d3-8ea3-0090271becdd"))
IPrnVBAPrintSeparations : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetInColor,put=PutInColor))
    VARIANT_BOOL InColor;
    __declspec(property(get=GetHexachrome,put=PutHexachrome))
    VARIANT_BOOL Hexachrome;
    __declspec(property(get=GetSpotToCMYK,put=PutSpotToCMYK))
    VARIANT_BOOL SpotToCMYK;
    __declspec(property(get=GetEmptyPlates,put=PutEmptyPlates))
    VARIANT_BOOL EmptyPlates;
    __declspec(property(get=GetPreserveOverprints,put=PutPreserveOverprints))
    VARIANT_BOOL PreserveOverprints;
    __declspec(property(get=GetAlwaysOverprintBlack,put=PutAlwaysOverprintBlack))
    VARIANT_BOOL AlwaysOverprintBlack;
    __declspec(property(get=GetAutoSpreading,put=PutAutoSpreading))
    VARIANT_BOOL AutoSpreading;
    __declspec(property(get=GetAutoSpreadAmount,put=PutAutoSpreadAmount))
    double AutoSpreadAmount;
    __declspec(property(get=GetAutoSpreadFixed,put=PutAutoSpreadFixed))
    VARIANT_BOOL AutoSpreadFixed;
    __declspec(property(get=GetAutoSpreadTextAbove,put=PutAutoSpreadTextAbove))
    double AutoSpreadTextAbove;
    __declspec(property(get=GetAdvancedSettings,put=PutAdvancedSettings))
    VARIANT_BOOL AdvancedSettings;
    __declspec(property(get=GetPlates))
    IPrnVBASeparationPlatesPtr Plates;
    __declspec(property(get=GetResolution,put=PutResolution))
    long Resolution;
    __declspec(property(get=GetBasicScreen,put=PutBasicScreen))
    _bstr_t BasicScreen;
    __declspec(property(get=GetHalftoneType,put=PutHalftoneType))
    _bstr_t HalftoneType;
    __declspec(property(get=GetScreenTechnology,put=PutScreenTechnology))
    _bstr_t ScreenTechnology;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetInColor ( );
    void PutInColor (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetHexachrome ( );
    void PutHexachrome (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetSpotToCMYK ( );
    void PutSpotToCMYK (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetEmptyPlates ( );
    void PutEmptyPlates (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetPreserveOverprints ( );
    void PutPreserveOverprints (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetAlwaysOverprintBlack ( );
    void PutAlwaysOverprintBlack (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetAutoSpreading ( );
    void PutAutoSpreading (
        VARIANT_BOOL pVal );
    double GetAutoSpreadAmount ( );
    void PutAutoSpreadAmount (
        double pVal );
    VARIANT_BOOL GetAutoSpreadFixed ( );
    void PutAutoSpreadFixed (
        VARIANT_BOOL pVal );
    double GetAutoSpreadTextAbove ( );
    void PutAutoSpreadTextAbove (
        double pVal );
    VARIANT_BOOL GetAdvancedSettings ( );
    void PutAdvancedSettings (
        VARIANT_BOOL pVal );
    IPrnVBASeparationPlatesPtr GetPlates ( );
    long GetResolution ( );
    void PutResolution (
        long pVal );
    _bstr_t GetBasicScreen ( );
    void PutBasicScreen (
        _bstr_t pVal );
    _bstr_t GetHalftoneType ( );
    void PutHalftoneType (
        _bstr_t pVal );
    _bstr_t GetScreenTechnology ( );
    void PutScreenTechnology (
        _bstr_t pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Enabled (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_Enabled (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_InColor (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_InColor (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Hexachrome (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_Hexachrome (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_SpotToCMYK (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_SpotToCMYK (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_EmptyPlates (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_EmptyPlates (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_PreserveOverprints (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_PreserveOverprints (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_AlwaysOverprintBlack (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_AlwaysOverprintBlack (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_AutoSpreading (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_AutoSpreading (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_AutoSpreadAmount (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_AutoSpreadAmount (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_AutoSpreadFixed (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_AutoSpreadFixed (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_AutoSpreadTextAbove (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_AutoSpreadTextAbove (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_AdvancedSettings (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_AdvancedSettings (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Plates (
        /*[out,retval]*/ struct IPrnVBASeparationPlates * * pVal ) = 0;
      virtual HRESULT __stdcall get_Resolution (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_Resolution (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_BasicScreen (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_BasicScreen (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_HalftoneType (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_HalftoneType (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ScreenTechnology (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ScreenTechnology (
        /*[in]*/ BSTR pVal ) = 0;
};

struct __declspec(uuid("a252509d-50c1-11d3-8ea3-0090271becdd"))
IPrnVBAPrintPrepress : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetInvert,put=PutInvert))
    VARIANT_BOOL Invert;
    __declspec(property(get=GetMirror,put=PutMirror))
    VARIANT_BOOL Mirror;
    __declspec(property(get=GetFileInfo,put=PutFileInfo))
    VARIANT_BOOL FileInfo;
    __declspec(property(get=GetJobName,put=PutJobName))
    _bstr_t JobName;
    __declspec(property(get=GetPageNumbers,put=PutPageNumbers))
    VARIANT_BOOL PageNumbers;
    __declspec(property(get=GetInfoWithinPage,put=PutInfoWithinPage))
    VARIANT_BOOL InfoWithinPage;
    __declspec(property(get=GetCropMarks,put=PutCropMarks))
    VARIANT_BOOL CropMarks;
    __declspec(property(get=GetExteriorCropMarks,put=PutExteriorCropMarks))
    VARIANT_BOOL ExteriorCropMarks;
    __declspec(property(get=GetRegistrationMarks,put=PutRegistrationMarks))
    VARIANT_BOOL RegistrationMarks;
    __declspec(property(get=GetRegistrationStyle,put=PutRegistrationStyle))
    enum PrnRegistrationStyle RegistrationStyle;
    __declspec(property(get=GetColorCalibrationBar,put=PutColorCalibrationBar))
    VARIANT_BOOL ColorCalibrationBar;
    __declspec(property(get=GetDensitometerScale,put=PutDensitometerScale))
    VARIANT_BOOL DensitometerScale;
    __declspec(property(get=GetDensities,put=PutDensities))
    long Densities[];
    __declspec(property(get=GetMarksToObjects,put=PutMarksToObjects))
    VARIANT_BOOL MarksToObjects;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetInvert ( );
    void PutInvert (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetMirror ( );
    void PutMirror (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetFileInfo ( );
    void PutFileInfo (
        VARIANT_BOOL pVal );
    _bstr_t GetJobName ( );
    void PutJobName (
        _bstr_t pVal );
    VARIANT_BOOL GetPageNumbers ( );
    void PutPageNumbers (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetInfoWithinPage ( );
    void PutInfoWithinPage (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetCropMarks ( );
    void PutCropMarks (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetExteriorCropMarks ( );
    void PutExteriorCropMarks (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetRegistrationMarks ( );
    void PutRegistrationMarks (
        VARIANT_BOOL pVal );
    enum PrnRegistrationStyle GetRegistrationStyle ( );
    void PutRegistrationStyle (
        enum PrnRegistrationStyle pVal );
    VARIANT_BOOL GetColorCalibrationBar ( );
    void PutColorCalibrationBar (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetDensitometerScale ( );
    void PutDensitometerScale (
        VARIANT_BOOL pVal );
    long GetDensities (
        long Index );
    void PutDensities (
        long Index,
        long pVal );
    VARIANT_BOOL GetMarksToObjects ( );
    void PutMarksToObjects (
        VARIANT_BOOL pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Invert (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_Invert (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Mirror (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_Mirror (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_FileInfo (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_FileInfo (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_JobName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_JobName (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_PageNumbers (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_PageNumbers (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_InfoWithinPage (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_InfoWithinPage (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_CropMarks (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_CropMarks (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_ExteriorCropMarks (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_ExteriorCropMarks (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_RegistrationMarks (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_RegistrationMarks (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_RegistrationStyle (
        /*[out,retval]*/ enum PrnRegistrationStyle * pVal ) = 0;
      virtual HRESULT __stdcall put_RegistrationStyle (
        /*[in]*/ enum PrnRegistrationStyle pVal ) = 0;
      virtual HRESULT __stdcall get_ColorCalibrationBar (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_ColorCalibrationBar (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_DensitometerScale (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_DensitometerScale (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Densities (
        /*[in]*/ long Index,
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_Densities (
        /*[in]*/ long Index,
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_MarksToObjects (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_MarksToObjects (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
};

struct __declspec(uuid("a252509e-50c1-11d3-8ea3-0090271becdd"))
IPrnVBAPrintPostScript : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetLevel,put=PutLevel))
    enum PrnPostScriptLevel Level;
    __declspec(property(get=GetConformToDSC,put=PutConformToDSC))
    VARIANT_BOOL ConformToDSC;
    __declspec(property(get=GetJPEGCompression,put=PutJPEGCompression))
    VARIANT_BOOL JPEGCompression;
    __declspec(property(get=GetJPEGQuality,put=PutJPEGQuality))
    long JPEGQuality;
    __declspec(property(get=GetMaintainOPILinks,put=PutMaintainOPILinks))
    VARIANT_BOOL MaintainOPILinks;
    __declspec(property(get=GetResolveDCSLinks,put=PutResolveDCSLinks))
    VARIANT_BOOL ResolveDCSLinks;
    __declspec(property(get=GetDownloadType1,put=PutDownloadType1))
    VARIANT_BOOL DownloadType1;
    __declspec(property(get=GetTrueTypeToType1,put=PutTrueTypeToType1))
    VARIANT_BOOL TrueTypeToType1;
    __declspec(property(get=GetPDFStartup,put=PutPDFStartup))
    enum PrnPDFStartup PDFStartup;
    __declspec(property(get=GetPDFHyperlinks,put=PutPDFHyperlinks))
    VARIANT_BOOL PDFHyperlinks;
    __declspec(property(get=GetpdfBookmarks,put=PutpdfBookmarks))
    VARIANT_BOOL pdfBookmarks;
    __declspec(property(get=GetMaxPointsPerCurve,put=PutMaxPointsPerCurve))
    long MaxPointsPerCurve;
    __declspec(property(get=GetFlatness,put=PutFlatness))
    long Flatness;
    __declspec(property(get=GetAutoIncreaseFlatness,put=PutAutoIncreaseFlatness))
    VARIANT_BOOL AutoIncreaseFlatness;
    __declspec(property(get=GetAutoIncreaseFountainSteps,put=PutAutoIncreaseFountainSteps))
    VARIANT_BOOL AutoIncreaseFountainSteps;
    __declspec(property(get=GetOptimizeFountainFills,put=PutOptimizeFountainFills))
    VARIANT_BOOL OptimizeFountainFills;
    __declspec(property(get=GetScreenFrequency,put=PutScreenFrequency))
    long ScreenFrequency;

    //
    // Wrapper methods for error-handling
    //

    enum PrnPostScriptLevel GetLevel ( );
    void PutLevel (
        enum PrnPostScriptLevel pVal );
    VARIANT_BOOL GetConformToDSC ( );
    void PutConformToDSC (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetJPEGCompression ( );
    void PutJPEGCompression (
        VARIANT_BOOL pVal );
    long GetJPEGQuality ( );
    void PutJPEGQuality (
        long pVal );
    VARIANT_BOOL GetMaintainOPILinks ( );
    void PutMaintainOPILinks (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetResolveDCSLinks ( );
    void PutResolveDCSLinks (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetDownloadType1 ( );
    void PutDownloadType1 (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetTrueTypeToType1 ( );
    void PutTrueTypeToType1 (
        VARIANT_BOOL pVal );
    enum PrnPDFStartup GetPDFStartup ( );
    void PutPDFStartup (
        enum PrnPDFStartup pVal );
    VARIANT_BOOL GetPDFHyperlinks ( );
    void PutPDFHyperlinks (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetpdfBookmarks ( );
    void PutpdfBookmarks (
        VARIANT_BOOL pVal );
    long GetMaxPointsPerCurve ( );
    void PutMaxPointsPerCurve (
        long pVal );
    long GetFlatness ( );
    void PutFlatness (
        long pVal );
    VARIANT_BOOL GetAutoIncreaseFlatness ( );
    void PutAutoIncreaseFlatness (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetAutoIncreaseFountainSteps ( );
    void PutAutoIncreaseFountainSteps (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetOptimizeFountainFills ( );
    void PutOptimizeFountainFills (
        VARIANT_BOOL pVal );
    long GetScreenFrequency ( );
    void PutScreenFrequency (
        long pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Level (
        /*[out,retval]*/ enum PrnPostScriptLevel * pVal ) = 0;
      virtual HRESULT __stdcall put_Level (
        /*[in]*/ enum PrnPostScriptLevel pVal ) = 0;
      virtual HRESULT __stdcall get_ConformToDSC (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_ConformToDSC (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_JPEGCompression (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_JPEGCompression (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_JPEGQuality (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_JPEGQuality (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_MaintainOPILinks (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_MaintainOPILinks (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_ResolveDCSLinks (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_ResolveDCSLinks (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_DownloadType1 (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_DownloadType1 (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_TrueTypeToType1 (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_TrueTypeToType1 (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_PDFStartup (
        /*[out,retval]*/ enum PrnPDFStartup * pVal ) = 0;
      virtual HRESULT __stdcall put_PDFStartup (
        /*[in]*/ enum PrnPDFStartup pVal ) = 0;
      virtual HRESULT __stdcall get_PDFHyperlinks (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_PDFHyperlinks (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_pdfBookmarks (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_pdfBookmarks (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_MaxPointsPerCurve (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_MaxPointsPerCurve (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_Flatness (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_Flatness (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_AutoIncreaseFlatness (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_AutoIncreaseFlatness (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_AutoIncreaseFountainSteps (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_AutoIncreaseFountainSteps (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_OptimizeFountainFills (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_OptimizeFountainFills (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_ScreenFrequency (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_ScreenFrequency (
        /*[in]*/ long pVal ) = 0;
};

struct __declspec(uuid("a252509f-50c1-11d3-8ea3-0090271becdd"))
IPrnVBATrapLayer : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetType))
    enum PrnPlateType Type;
    __declspec(property(get=GetColor))
    _bstr_t Color;
    __declspec(property(get=GetDensity,put=PutDensity))
    double Density;
    __declspec(property(get=GetTrapType,put=PutTrapType))
    enum PrnTrapType TrapType;
    __declspec(property(get=GetOrder,put=PutOrder))
    long Order;

    //
    // Wrapper methods for error-handling
    //

    enum PrnPlateType GetType ( );
    _bstr_t GetColor ( );
    double GetDensity ( );
    void PutDensity (
        double pVal );
    enum PrnTrapType GetTrapType ( );
    void PutTrapType (
        enum PrnTrapType pVal );
    long GetOrder ( );
    void PutOrder (
        long pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum PrnPlateType * pVal ) = 0;
      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_Density (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Density (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_TrapType (
        /*[out,retval]*/ enum PrnTrapType * pVal ) = 0;
      virtual HRESULT __stdcall put_TrapType (
        /*[in]*/ enum PrnTrapType pVal ) = 0;
      virtual HRESULT __stdcall get_Order (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_Order (
        /*[in]*/ long pVal ) = 0;
};

struct __declspec(uuid("a25250a0-50c1-11d3-8ea3-0090271becdd"))
IPrnVBATrapLayers : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetItem))
    IPrnVBATrapLayerPtr Item[];

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    IPrnVBATrapLayerPtr GetItem (
        long Index );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IPrnVBATrapLayer * * pVal ) = 0;
};

struct __declspec(uuid("a25250a1-50c1-11d3-8ea3-0090271becdd"))
IPrnVBAPrintTrapping : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetLayers))
    IPrnVBATrapLayersPtr Layers;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetBlackWidth,put=PutBlackWidth))
    double BlackWidth;
    __declspec(property(get=GetColorScaling,put=PutColorScaling))
    long ColorScaling;
    __declspec(property(get=GetStepLimit,put=PutStepLimit))
    long StepLimit;
    __declspec(property(get=GetBlackColorLimit,put=PutBlackColorLimit))
    long BlackColorLimit;
    __declspec(property(get=GetBlackDensityLimit,put=PutBlackDensityLimit))
    double BlackDensityLimit;
    __declspec(property(get=GetSlidingTrapLimit,put=PutSlidingTrapLimit))
    long SlidingTrapLimit;
    __declspec(property(get=GetImageTrap,put=PutImageTrap))
    enum PrnImageTrap ImageTrap;
    __declspec(property(get=GetObjectsToImage,put=PutObjectsToImage))
    VARIANT_BOOL ObjectsToImage;
    __declspec(property(get=GetInternalImageTrapping,put=PutInternalImageTrapping))
    VARIANT_BOOL InternalImageTrapping;
    __declspec(property(get=GetTrapMonoBitmaps,put=PutTrapMonoBitmaps))
    VARIANT_BOOL TrapMonoBitmaps;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL pVal );
    IPrnVBATrapLayersPtr GetLayers ( );
    double GetWidth ( );
    void PutWidth (
        double pVal );
    double GetBlackWidth ( );
    void PutBlackWidth (
        double pVal );
    long GetColorScaling ( );
    void PutColorScaling (
        long pVal );
    long GetStepLimit ( );
    void PutStepLimit (
        long pVal );
    long GetBlackColorLimit ( );
    void PutBlackColorLimit (
        long pVal );
    double GetBlackDensityLimit ( );
    void PutBlackDensityLimit (
        double pVal );
    long GetSlidingTrapLimit ( );
    void PutSlidingTrapLimit (
        long pVal );
    enum PrnImageTrap GetImageTrap ( );
    void PutImageTrap (
        enum PrnImageTrap pVal );
    VARIANT_BOOL GetObjectsToImage ( );
    void PutObjectsToImage (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetInternalImageTrapping ( );
    void PutInternalImageTrapping (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetTrapMonoBitmaps ( );
    void PutTrapMonoBitmaps (
        VARIANT_BOOL pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Enabled (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_Enabled (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Layers (
        /*[out,retval]*/ struct IPrnVBATrapLayers * * pVal ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_BlackWidth (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_BlackWidth (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ColorScaling (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_ColorScaling (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_StepLimit (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_StepLimit (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_BlackColorLimit (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_BlackColorLimit (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_BlackDensityLimit (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_BlackDensityLimit (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_SlidingTrapLimit (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_SlidingTrapLimit (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_ImageTrap (
        /*[out,retval]*/ enum PrnImageTrap * pVal ) = 0;
      virtual HRESULT __stdcall put_ImageTrap (
        /*[in]*/ enum PrnImageTrap pVal ) = 0;
      virtual HRESULT __stdcall get_ObjectsToImage (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_ObjectsToImage (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_InternalImageTrapping (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_InternalImageTrapping (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_TrapMonoBitmaps (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_TrapMonoBitmaps (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
};

struct __declspec(uuid("a25250a2-50c1-11d3-8ea3-0090271becdd"))
IPrnVBAPrintOptions : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetUseColorProfile,put=PutUseColorProfile))
    VARIANT_BOOL UseColorProfile;
    __declspec(property(get=GetPrintVectors,put=PutPrintVectors))
    VARIANT_BOOL PrintVectors;
    __declspec(property(get=GetPrintBitmaps,put=PutPrintBitmaps))
    VARIANT_BOOL PrintBitmaps;
    __declspec(property(get=GetPrintText,put=PutPrintText))
    VARIANT_BOOL PrintText;
    __declspec(property(get=GetTextInBlack,put=PutTextInBlack))
    VARIANT_BOOL TextInBlack;
    __declspec(property(get=GetColorMode,put=PutColorMode))
    enum PrnColorMode ColorMode;
    __declspec(property(get=GetMarksToPage,put=PutMarksToPage))
    VARIANT_BOOL MarksToPage;
    __declspec(property(get=GetBitmapColorMode,put=PutBitmapColorMode))
    enum PrnBitmapColorMode BitmapColorMode;
    __declspec(property(get=GetFountainSteps,put=PutFountainSteps))
    long FountainSteps;
    __declspec(property(get=GetRasterizePage,put=PutRasterizePage))
    VARIANT_BOOL RasterizePage;
    __declspec(property(get=GetRasterizeResolution,put=PutRasterizeResolution))
    long RasterizeResolution;
    __declspec(property(get=GetDownsampleColor,put=PutDownsampleColor))
    VARIANT_BOOL DownsampleColor;
    __declspec(property(get=GetDownsampleGray,put=PutDownsampleGray))
    VARIANT_BOOL DownsampleGray;
    __declspec(property(get=GetDownsampleMono,put=PutDownsampleMono))
    VARIANT_BOOL DownsampleMono;
    __declspec(property(get=GetColorResolution,put=PutColorResolution))
    long ColorResolution;
    __declspec(property(get=GetGrayResolution,put=PutGrayResolution))
    long GrayResolution;
    __declspec(property(get=GetMonoResolution,put=PutMonoResolution))
    long MonoResolution;
    __declspec(property(get=GetJobInformation,put=PutJobInformation))
    VARIANT_BOOL JobInformation;
    __declspec(property(get=GetAppInfo,put=PutAppInfo))
    VARIANT_BOOL AppInfo;
    __declspec(property(get=GetDriverInfo,put=PutDriverInfo))
    VARIANT_BOOL DriverInfo;
    __declspec(property(get=GetPrintJobInfo,put=PutPrintJobInfo))
    VARIANT_BOOL PrintJobInfo;
    __declspec(property(get=GetSepsInfo,put=PutSepsInfo))
    VARIANT_BOOL SepsInfo;
    __declspec(property(get=GetFontInfo,put=PutFontInfo))
    VARIANT_BOOL FontInfo;
    __declspec(property(get=GetLinkInfo,put=PutLinkInfo))
    VARIANT_BOOL LinkInfo;
    __declspec(property(get=GetInRIPTrapInfo,put=PutInRIPTrapInfo))
    VARIANT_BOOL InRIPTrapInfo;
    __declspec(property(get=GetObjectsColorMode,put=PutObjectsColorMode))
    enum PrnObjectsColorMode ObjectsColorMode;
    __declspec(property(get=GetPreservePureBlack,put=PutPreservePureBlack))
    VARIANT_BOOL PreservePureBlack;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetUseColorProfile ( );
    void PutUseColorProfile (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetPrintVectors ( );
    void PutPrintVectors (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetPrintBitmaps ( );
    void PutPrintBitmaps (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetPrintText ( );
    void PutPrintText (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetTextInBlack ( );
    void PutTextInBlack (
        VARIANT_BOOL pVal );
    enum PrnColorMode GetColorMode ( );
    void PutColorMode (
        enum PrnColorMode pVal );
    VARIANT_BOOL GetMarksToPage ( );
    void PutMarksToPage (
        VARIANT_BOOL pVal );
    enum PrnBitmapColorMode GetBitmapColorMode ( );
    void PutBitmapColorMode (
        enum PrnBitmapColorMode pVal );
    long GetFountainSteps ( );
    void PutFountainSteps (
        long pVal );
    VARIANT_BOOL GetRasterizePage ( );
    void PutRasterizePage (
        VARIANT_BOOL pVal );
    long GetRasterizeResolution ( );
    void PutRasterizeResolution (
        long pVal );
    VARIANT_BOOL GetDownsampleColor ( );
    void PutDownsampleColor (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetDownsampleGray ( );
    void PutDownsampleGray (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetDownsampleMono ( );
    void PutDownsampleMono (
        VARIANT_BOOL pVal );
    long GetColorResolution ( );
    void PutColorResolution (
        long pVal );
    long GetGrayResolution ( );
    void PutGrayResolution (
        long pVal );
    long GetMonoResolution ( );
    void PutMonoResolution (
        long pVal );
    VARIANT_BOOL GetJobInformation ( );
    void PutJobInformation (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetAppInfo ( );
    void PutAppInfo (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetDriverInfo ( );
    void PutDriverInfo (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetPrintJobInfo ( );
    void PutPrintJobInfo (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetSepsInfo ( );
    void PutSepsInfo (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetFontInfo ( );
    void PutFontInfo (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetLinkInfo ( );
    void PutLinkInfo (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetInRIPTrapInfo ( );
    void PutInRIPTrapInfo (
        VARIANT_BOOL pVal );
    enum PrnObjectsColorMode GetObjectsColorMode ( );
    void PutObjectsColorMode (
        enum PrnObjectsColorMode pVal );
    VARIANT_BOOL GetPreservePureBlack ( );
    void PutPreservePureBlack (
        VARIANT_BOOL pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_UseColorProfile (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_UseColorProfile (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_PrintVectors (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_PrintVectors (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_PrintBitmaps (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_PrintBitmaps (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_PrintText (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_PrintText (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_TextInBlack (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_TextInBlack (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_ColorMode (
        /*[out,retval]*/ enum PrnColorMode * pVal ) = 0;
      virtual HRESULT __stdcall put_ColorMode (
        /*[in]*/ enum PrnColorMode pVal ) = 0;
      virtual HRESULT __stdcall get_MarksToPage (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_MarksToPage (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_BitmapColorMode (
        /*[out,retval]*/ enum PrnBitmapColorMode * pVal ) = 0;
      virtual HRESULT __stdcall put_BitmapColorMode (
        /*[in]*/ enum PrnBitmapColorMode pVal ) = 0;
      virtual HRESULT __stdcall get_FountainSteps (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_FountainSteps (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_RasterizePage (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_RasterizePage (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_RasterizeResolution (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_RasterizeResolution (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_DownsampleColor (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_DownsampleColor (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_DownsampleGray (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_DownsampleGray (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_DownsampleMono (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_DownsampleMono (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_ColorResolution (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_ColorResolution (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_GrayResolution (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_GrayResolution (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_MonoResolution (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_MonoResolution (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_JobInformation (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_JobInformation (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_AppInfo (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_AppInfo (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_DriverInfo (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_DriverInfo (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_PrintJobInfo (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_PrintJobInfo (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_SepsInfo (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_SepsInfo (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_FontInfo (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_FontInfo (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_LinkInfo (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_LinkInfo (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_InRIPTrapInfo (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_InRIPTrapInfo (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_ObjectsColorMode (
        /*[out,retval]*/ enum PrnObjectsColorMode * pVal ) = 0;
      virtual HRESULT __stdcall put_ObjectsColorMode (
        /*[in]*/ enum PrnObjectsColorMode pVal ) = 0;
      virtual HRESULT __stdcall get_PreservePureBlack (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_PreservePureBlack (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
};

struct __declspec(uuid("a25250a3-50c1-11d3-8ea3-0090271becdd"))
IPrnVBAPrintSettings : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetPrinter,put=PutRefPrinter))
    IPrnVBAPrinterPtr Printer;
    __declspec(property(get=GetUsePPD,put=PutUsePPD))
    VARIANT_BOOL UsePPD;
    __declspec(property(get=GetPPDFile,put=PutPPDFile))
    _bstr_t PPDFile;
    __declspec(property(get=GetPrintToFile,put=PutPrintToFile))
    VARIANT_BOOL PrintToFile;
    __declspec(property(get=GetFileName,put=PutFileName))
    _bstr_t FileName;
    __declspec(property(get=GetForMac,put=PutForMac))
    VARIANT_BOOL ForMac;
    __declspec(property(get=GetFileMode,put=PutFileMode))
    enum PrnFileMode FileMode;
    __declspec(property(get=GetPrintRange,put=PutPrintRange))
    enum PrnPrintRange PrintRange;
    __declspec(property(get=GetPageRange,put=PutPageRange))
    _bstr_t PageRange;
    __declspec(property(get=GetCopies,put=PutCopies))
    long Copies;
    __declspec(property(get=GetCollate,put=PutCollate))
    VARIANT_BOOL Collate;
    __declspec(property(get=GetSeparations))
    IPrnVBAPrintSeparationsPtr Separations;
    __declspec(property(get=GetPrepress))
    IPrnVBAPrintPrepressPtr Prepress;
    __declspec(property(get=GetPostScript))
    IPrnVBAPrintPostScriptPtr PostScript;
    __declspec(property(get=GetTrapping))
    IPrnVBAPrintTrappingPtr Trapping;
    __declspec(property(get=GetOptions))
    IPrnVBAPrintOptionsPtr Options;
    __declspec(property(get=GetPageSet,put=PutPageSet))
    enum PrnPageSet PageSet;
    __declspec(property(get=GetPaperOrientation,put=PutPaperOrientation))
    enum PrnPaperOrientation PaperOrientation;
    __declspec(property(get=GetPaperSize,put=PutPaperSize))
    enum PrnPaperSize PaperSize;
    __declspec(property(get=GetPaperWidth))
    double PaperWidth;
    __declspec(property(get=GetPaperHeight))
    double PaperHeight;
    __declspec(property(get=GetLayout))
    IPrnVBAPrintLayoutPtr Layout;
    __declspec(property(get=GetPageMatchingMode,put=PutPageMatchingMode))
    enum PrnPageMatchingMode PageMatchingMode;

    //
    // Wrapper methods for error-handling
    //

    IPrnVBAPrinterPtr GetPrinter ( );
    void PutRefPrinter (
        struct IPrnVBAPrinter * pVal );
    VARIANT_BOOL GetUsePPD ( );
    void PutUsePPD (
        VARIANT_BOOL pVal );
    _bstr_t GetPPDFile ( );
    void PutPPDFile (
        _bstr_t pVal );
    VARIANT_BOOL GetPrintToFile ( );
    void PutPrintToFile (
        VARIANT_BOOL pVal );
    _bstr_t GetFileName ( );
    void PutFileName (
        _bstr_t pVal );
    VARIANT_BOOL GetForMac ( );
    void PutForMac (
        VARIANT_BOOL pVal );
    enum PrnFileMode GetFileMode ( );
    void PutFileMode (
        enum PrnFileMode pVal );
    enum PrnPrintRange GetPrintRange ( );
    void PutPrintRange (
        enum PrnPrintRange pVal );
    _bstr_t GetPageRange ( );
    void PutPageRange (
        _bstr_t pVal );
    long GetCopies ( );
    void PutCopies (
        long pVal );
    VARIANT_BOOL GetCollate ( );
    void PutCollate (
        VARIANT_BOOL pVal );
    IPrnVBAPrintSeparationsPtr GetSeparations ( );
    IPrnVBAPrintPrepressPtr GetPrepress ( );
    IPrnVBAPrintPostScriptPtr GetPostScript ( );
    IPrnVBAPrintTrappingPtr GetTrapping ( );
    IPrnVBAPrintOptionsPtr GetOptions ( );
    HRESULT Reset ( );
    VARIANT_BOOL Load (
        _bstr_t FileName );
    VARIANT_BOOL Save (
        _bstr_t FileName );
    VARIANT_BOOL ShowDialog ( );
    HRESULT SelectPrinter (
        _bstr_t Name );
    enum PrnPageSet GetPageSet ( );
    void PutPageSet (
        enum PrnPageSet pVal );
    enum PrnPaperOrientation GetPaperOrientation ( );
    void PutPaperOrientation (
        enum PrnPaperOrientation pVal );
    enum PrnPaperSize GetPaperSize ( );
    void PutPaperSize (
        enum PrnPaperSize pVal );
    HRESULT SetPaperSize (
        enum PrnPaperSize PaperSize,
        enum PrnPaperOrientation Orientation );
    double GetPaperWidth ( );
    double GetPaperHeight ( );
    HRESULT SetCustomPaperSize (
        double Width,
        double Height,
        enum PrnPaperOrientation Orientation );
    IPrnVBAPrintLayoutPtr GetLayout ( );
    HRESULT PrintOut ( );
    HRESULT PrintColorProof (
        IDispatch * ProofSettings );
    enum PrnPageMatchingMode GetPageMatchingMode ( );
    void PutPageMatchingMode (
        enum PrnPageMatchingMode pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Printer (
        /*[out,retval]*/ struct IPrnVBAPrinter * * pVal ) = 0;
      virtual HRESULT __stdcall putref_Printer (
        /*[in]*/ struct IPrnVBAPrinter * pVal ) = 0;
      virtual HRESULT __stdcall get_UsePPD (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_UsePPD (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_PPDFile (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_PPDFile (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_PrintToFile (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_PrintToFile (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_FileName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_FileName (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ForMac (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_ForMac (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_FileMode (
        /*[out,retval]*/ enum PrnFileMode * pVal ) = 0;
      virtual HRESULT __stdcall put_FileMode (
        /*[in]*/ enum PrnFileMode pVal ) = 0;
      virtual HRESULT __stdcall get_PrintRange (
        /*[out,retval]*/ enum PrnPrintRange * pVal ) = 0;
      virtual HRESULT __stdcall put_PrintRange (
        /*[in]*/ enum PrnPrintRange pVal ) = 0;
      virtual HRESULT __stdcall get_PageRange (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_PageRange (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Copies (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_Copies (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_Collate (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_Collate (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Separations (
        /*[out,retval]*/ struct IPrnVBAPrintSeparations * * pVal ) = 0;
      virtual HRESULT __stdcall get_Prepress (
        /*[out,retval]*/ struct IPrnVBAPrintPrepress * * pVal ) = 0;
      virtual HRESULT __stdcall get_PostScript (
        /*[out,retval]*/ struct IPrnVBAPrintPostScript * * pVal ) = 0;
      virtual HRESULT __stdcall get_Trapping (
        /*[out,retval]*/ struct IPrnVBAPrintTrapping * * pVal ) = 0;
      virtual HRESULT __stdcall get_Options (
        /*[out,retval]*/ struct IPrnVBAPrintOptions * * pVal ) = 0;
      virtual HRESULT __stdcall raw_Reset ( ) = 0;
      virtual HRESULT __stdcall raw_Load (
        /*[in]*/ BSTR FileName,
        /*[out,retval]*/ VARIANT_BOOL * pbSuccess ) = 0;
      virtual HRESULT __stdcall raw_Save (
        /*[in]*/ BSTR FileName,
        /*[out,retval]*/ VARIANT_BOOL * pbSuccess ) = 0;
      virtual HRESULT __stdcall raw_ShowDialog (
        /*[out,retval]*/ VARIANT_BOOL * pbPrint ) = 0;
      virtual HRESULT __stdcall raw_SelectPrinter (
        /*[in]*/ BSTR Name ) = 0;
      virtual HRESULT __stdcall get_PageSet (
        /*[out,retval]*/ enum PrnPageSet * pVal ) = 0;
      virtual HRESULT __stdcall put_PageSet (
        /*[in]*/ enum PrnPageSet pVal ) = 0;
      virtual HRESULT __stdcall get_PaperOrientation (
        /*[out,retval]*/ enum PrnPaperOrientation * pVal ) = 0;
      virtual HRESULT __stdcall put_PaperOrientation (
        /*[in]*/ enum PrnPaperOrientation pVal ) = 0;
      virtual HRESULT __stdcall get_PaperSize (
        /*[out,retval]*/ enum PrnPaperSize * pVal ) = 0;
      virtual HRESULT __stdcall put_PaperSize (
        /*[in]*/ enum PrnPaperSize pVal ) = 0;
      virtual HRESULT __stdcall raw_SetPaperSize (
        /*[in]*/ enum PrnPaperSize PaperSize,
        /*[in]*/ enum PrnPaperOrientation Orientation ) = 0;
      virtual HRESULT __stdcall get_PaperWidth (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_PaperHeight (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetCustomPaperSize (
        /*[in]*/ double Width,
        /*[in]*/ double Height,
        /*[in]*/ enum PrnPaperOrientation Orientation ) = 0;
      virtual HRESULT __stdcall get_Layout (
        /*[out,retval]*/ struct IPrnVBAPrintLayout * * pVal ) = 0;
      virtual HRESULT __stdcall raw_PrintOut ( ) = 0;
      virtual HRESULT __stdcall raw_PrintColorProof (
        /*[in]*/ IDispatch * ProofSettings ) = 0;
      virtual HRESULT __stdcall get_PageMatchingMode (
        /*[out,retval]*/ enum PrnPageMatchingMode * pVal ) = 0;
      virtual HRESULT __stdcall put_PageMatchingMode (
        /*[in]*/ enum PrnPageMatchingMode pVal ) = 0;
};

struct __declspec(uuid("a25250a4-50c1-11d3-8ea3-0090271becdd"))
IPrnVBAPrintDocument : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT _GetPrintDocument (
        INT_PTR * pDoc );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw__GetPrintDocument (
        /*[out]*/ INT_PTR * pDoc ) = 0;
};

struct __declspec(uuid("a25250a5-50c1-11d3-8ea3-0090271becdd"))
IPrnVBAPrintDocuments : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IPrnVBAPrintDocumentPtr Item[];
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    IPrnVBAPrintDocumentPtr GetItem (
        long Index );
    long GetCount ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IPrnVBAPrintDocument * * pVal ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pVal ) = 0;
};

struct __declspec(uuid("a25250a6-50c1-11d3-8ea3-0090271becdd"))
IPrnVBAPrintPage : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT _GetPrintDocument (
        INT_PTR * pDoc );
    HRESULT _GetPrintPage (
        long * pPage );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw__GetPrintDocument (
        /*[out]*/ INT_PTR * pDoc ) = 0;
      virtual HRESULT __stdcall raw__GetPrintPage (
        /*[out]*/ long * pPage ) = 0;
};

struct __declspec(uuid("a25250a7-50c1-11d3-8ea3-0090271becdd"))
IPrnVBAPrintPages : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IPrnVBAPrintPagePtr Item[];
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    IPrnVBAPrintPagePtr GetItem (
        long Index );
    long GetCount ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IPrnVBAPrintPage * * pVal ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pVal ) = 0;
};

struct __declspec(uuid("a25250a8-50c1-11d3-8ea3-0090271becdd"))
IPrnVBAPrintJob : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetSettings))
    IPrnVBAPrintSettingsPtr Settings;
    __declspec(property(get=GetDocuments))
    IPrnVBAPrintDocumentsPtr Documents;
    __declspec(property(get=GetPages))
    IPrnVBAPrintPagesPtr Pages;

    //
    // Wrapper methods for error-handling
    //

    IPrnVBAPrintSettingsPtr GetSettings ( );
    IPrnVBAPrintDocumentsPtr GetDocuments ( );
    IPrnVBAPrintPagesPtr GetPages ( );
    HRESULT Clear ( );
    HRESULT PrintOut ( );
    HRESULT AddDocument (
        struct IPrnVBAPrintDocument * Document,
        _bstr_t PageRange );
    HRESULT AddPage (
        struct IPrnVBAPrintPage * Page );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Settings (
        /*[out,retval]*/ struct IPrnVBAPrintSettings * * pVal ) = 0;
      virtual HRESULT __stdcall get_Documents (
        /*[out,retval]*/ struct IPrnVBAPrintDocuments * * pVal ) = 0;
      virtual HRESULT __stdcall get_Pages (
        /*[out,retval]*/ struct IPrnVBAPrintPages * * pVal ) = 0;
      virtual HRESULT __stdcall raw_Clear ( ) = 0;
      virtual HRESULT __stdcall raw_PrintOut ( ) = 0;
      virtual HRESULT __stdcall raw_AddDocument (
        /*[in]*/ struct IPrnVBAPrintDocument * Document,
        /*[in]*/ BSTR PageRange ) = 0;
      virtual HRESULT __stdcall raw_AddPage (
        /*[in]*/ struct IPrnVBAPrintPage * Page ) = 0;
};

struct __declspec(uuid("a2524ffb-50c1-11d3-8ea3-0090271becdd"))
IPDFVBASettings : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetEncryptType,put=PutEncryptType))
    enum pdfEncryptionType EncryptType;
    __declspec(property(get=GetOutputSpotColorsAs,put=PutOutputSpotColorsAs))
    enum pdfSpotType OutputSpotColorsAs;
    __declspec(property(get=GetPublishRange,put=PutPublishRange))
    enum pdfExportRange PublishRange;
    __declspec(property(get=GetOverprintBlackLimit,put=PutOverprintBlackLimit))
    int OverprintBlackLimit;
    __declspec(property(get=GetPageRange,put=PutPageRange))
    _bstr_t PageRange;
    __declspec(property(get=GetProtectedTextAsCurves,put=PutProtectedTextAsCurves))
    VARIANT_BOOL ProtectedTextAsCurves;
    __declspec(property(get=GetAuthor,put=PutAuthor))
    _bstr_t Author;
    __declspec(property(get=GetSubject,put=PutSubject))
    _bstr_t Subject;
    __declspec(property(get=GetKeywords,put=PutKeywords))
    _bstr_t Keywords;
    __declspec(property(get=GetBitmapCompression,put=PutBitmapCompression))
    enum pdfBitmapCompressionType BitmapCompression;
    __declspec(property(get=GetJPEGQualityFactor,put=PutJPEGQualityFactor))
    int JPEGQualityFactor;
    __declspec(property(get=GetTextAsCurves,put=PutTextAsCurves))
    VARIANT_BOOL TextAsCurves;
    __declspec(property(get=GetEmbedFonts,put=PutEmbedFonts))
    VARIANT_BOOL EmbedFonts;
    __declspec(property(get=GetEmbedBaseFonts,put=PutEmbedBaseFonts))
    VARIANT_BOOL EmbedBaseFonts;
    __declspec(property(get=GetTrueTypeToType1,put=PutTrueTypeToType1))
    VARIANT_BOOL TrueTypeToType1;
    __declspec(property(get=GetSubsetFonts,put=PutSubsetFonts))
    VARIANT_BOOL SubsetFonts;
    __declspec(property(get=GetSubsetPct,put=PutSubsetPct))
    long SubsetPct;
    __declspec(property(get=GetCompressText,put=PutCompressText))
    VARIANT_BOOL CompressText;
    __declspec(property(get=GetEncoding,put=PutEncoding))
    enum pdfEncodingType Encoding;
    __declspec(property(get=GetDownsampleColor,put=PutDownsampleColor))
    VARIANT_BOOL DownsampleColor;
    __declspec(property(get=GetDownsampleGray,put=PutDownsampleGray))
    VARIANT_BOOL DownsampleGray;
    __declspec(property(get=GetDownsampleMono,put=PutDownsampleMono))
    VARIANT_BOOL DownsampleMono;
    __declspec(property(get=GetColorResolution,put=PutColorResolution))
    long ColorResolution;
    __declspec(property(get=GetMonoResolution,put=PutMonoResolution))
    long MonoResolution;
    __declspec(property(get=GetGrayResolution,put=PutGrayResolution))
    long GrayResolution;
    __declspec(property(get=GetHyperlinks,put=PutHyperlinks))
    VARIANT_BOOL Hyperlinks;
    __declspec(property(get=GetBookmarks,put=PutBookmarks))
    VARIANT_BOOL Bookmarks;
    __declspec(property(get=GetThumbnails,put=PutThumbnails))
    VARIANT_BOOL Thumbnails;
    __declspec(property(get=GetStartup,put=PutStartup))
    enum pdfDisplayOnStart Startup;
    __declspec(property(get=GetComplexFillsAsBitmaps,put=PutComplexFillsAsBitmaps))
    VARIANT_BOOL ComplexFillsAsBitmaps;
    __declspec(property(get=GetOverprints,put=PutOverprints))
    VARIANT_BOOL Overprints;
    __declspec(property(get=GetHalftones,put=PutHalftones))
    VARIANT_BOOL Halftones;
    __declspec(property(get=GetSpotColors,put=PutSpotColors))
    VARIANT_BOOL SpotColors;
    __declspec(property(get=GetMaintainOPILinks,put=PutMaintainOPILinks))
    VARIANT_BOOL MaintainOPILinks;
    __declspec(property(get=GetFountainSteps,put=PutFountainSteps))
    long FountainSteps;
    __declspec(property(get=GetEPSAs,put=PutEPSAs))
    enum pdfEPSAs EPSAs;
    __declspec(property(get=GetpdfVersion,put=PutpdfVersion))
    enum pdfVersion _pdfVersion;
    __declspec(property(get=GetIncludeBleed,put=PutIncludeBleed))
    VARIANT_BOOL IncludeBleed;
    __declspec(property(get=GetBleed,put=PutBleed))
    int Bleed;
    __declspec(property(get=GetLinearize,put=PutLinearize))
    VARIANT_BOOL Linearize;
    __declspec(property(get=GetCropMarks,put=PutCropMarks))
    VARIANT_BOOL CropMarks;
    __declspec(property(get=GetRegistrationMarks,put=PutRegistrationMarks))
    VARIANT_BOOL RegistrationMarks;
    __declspec(property(get=GetDensitometerScales,put=PutDensitometerScales))
    VARIANT_BOOL DensitometerScales;
    __declspec(property(get=GetFileInformation,put=PutFileInformation))
    VARIANT_BOOL FileInformation;
    __declspec(property(get=GetColorMode,put=PutColorMode))
    enum pdfColorMode ColorMode;
    __declspec(property(get=GetUseColorProfile,put=PutUseColorProfile))
    VARIANT_BOOL UseColorProfile;
    __declspec(property(get=GetColorProfile,put=PutColorProfile))
    enum pdfColorProfile ColorProfile;
    __declspec(property(get=GetEmbedFilename,put=PutEmbedFilename))
    _bstr_t EmbedFilename;
    __declspec(property(get=GetEmbedFile,put=PutEmbedFile))
    VARIANT_BOOL EmbedFile;
    __declspec(property(get=GetJP2QualityFactor,put=PutJP2QualityFactor))
    int JP2QualityFactor;
    __declspec(property(get=GetTextExportMode,put=PutTextExportMode))
    enum pdfTextExportMode TextExportMode;
    __declspec(property(get=GetPrintPermissions,put=PutPrintPermissions))
    enum pdfPrintPermissions PrintPermissions;
    __declspec(property(get=GetEditPermissions,put=PutEditPermissions))
    enum pdfEditPermissions EditPermissions;
    __declspec(property(get=GetContentCopyingAllowed,put=PutContentCopyingAllowed))
    VARIANT_BOOL ContentCopyingAllowed;
    __declspec(property(get=GetOpenPassword,put=PutOpenPassword))
    _bstr_t OpenPassword;
    __declspec(property(get=GetPermissionPassword,put=PutPermissionPassword))
    _bstr_t PermissionPassword;
    __declspec(property(get=GetConvertSpotColors,put=PutConvertSpotColors))
    VARIANT_BOOL ConvertSpotColors;

    //
    // Wrapper methods for error-handling
    //

    HRESULT Reset ( );
    VARIANT_BOOL Load (
        _bstr_t SettingName );
    VARIANT_BOOL Save (
        _bstr_t SettingName );
    VARIANT_BOOL ShowDialog ( );
    HRESULT PublishToPDF (
        _bstr_t FileName );
    void PutPublishRange (
        enum pdfExportRange pExportRange );
    enum pdfExportRange GetPublishRange ( );
    void PutPageRange (
        _bstr_t pszExportPagesRange );
    _bstr_t GetPageRange ( );
    void PutAuthor (
        _bstr_t pszAuthor );
    _bstr_t GetAuthor ( );
    void PutSubject (
        _bstr_t pszSubject );
    _bstr_t GetSubject ( );
    void PutKeywords (
        _bstr_t pszKeywords );
    _bstr_t GetKeywords ( );
    void PutBitmapCompression (
        enum pdfBitmapCompressionType pBitmapCompressionType );
    enum pdfBitmapCompressionType GetBitmapCompression ( );
    void PutJPEGQualityFactor (
        int pnQuality );
    int GetJPEGQualityFactor ( );
    void PutTextAsCurves (
        VARIANT_BOOL pbTextAsCurves );
    VARIANT_BOOL GetTextAsCurves ( );
    void PutEmbedFonts (
        VARIANT_BOOL pbEmbedFonts );
    VARIANT_BOOL GetEmbedFonts ( );
    void PutEmbedBaseFonts (
        VARIANT_BOOL pbEmbedBaseFonts );
    VARIANT_BOOL GetEmbedBaseFonts ( );
    void PutTrueTypeToType1 (
        VARIANT_BOOL pbTrueTypeToType1 );
    VARIANT_BOOL GetTrueTypeToType1 ( );
    void PutSubsetFonts (
        VARIANT_BOOL pbSubsetType1Fonts );
    VARIANT_BOOL GetSubsetFonts ( );
    void PutSubsetPct (
        long pnLevel );
    long GetSubsetPct ( );
    void PutCompressText (
        VARIANT_BOOL pbCompressText );
    VARIANT_BOOL GetCompressText ( );
    void PutEncoding (
        enum pdfEncodingType pEncoding );
    enum pdfEncodingType GetEncoding ( );
    void PutDownsampleColor (
        VARIANT_BOOL pbDownsample );
    VARIANT_BOOL GetDownsampleColor ( );
    void PutDownsampleGray (
        VARIANT_BOOL pbDownsample );
    VARIANT_BOOL GetDownsampleGray ( );
    void PutDownsampleMono (
        VARIANT_BOOL pbDownsample );
    VARIANT_BOOL GetDownsampleMono ( );
    void PutColorResolution (
        long pnDownsampleResolution );
    long GetColorResolution ( );
    void PutMonoResolution (
        long pnDownsampleResolution );
    long GetMonoResolution ( );
    void PutGrayResolution (
        long pnDownsampleResolution );
    long GetGrayResolution ( );
    void PutHyperlinks (
        VARIANT_BOOL pbIncludeHyperlinks );
    VARIANT_BOOL GetHyperlinks ( );
    void PutBookmarks (
        VARIANT_BOOL pbGenerateBookmarks );
    VARIANT_BOOL GetBookmarks ( );
    void PutThumbnails (
        VARIANT_BOOL pbGenerateThumbnails );
    VARIANT_BOOL GetThumbnails ( );
    void PutStartup (
        enum pdfDisplayOnStart pDisplayOnStart );
    enum pdfDisplayOnStart GetStartup ( );
    void PutComplexFillsAsBitmaps (
        VARIANT_BOOL pbComplexFillsAsBitmaps );
    VARIANT_BOOL GetComplexFillsAsBitmaps ( );
    void PutOverprints (
        VARIANT_BOOL pbPreserveOverprints );
    VARIANT_BOOL GetOverprints ( );
    void PutHalftones (
        VARIANT_BOOL pbPreserveHalftones );
    VARIANT_BOOL GetHalftones ( );
    void PutSpotColors (
        VARIANT_BOOL pbPreserveSpotColors );
    VARIANT_BOOL GetSpotColors ( );
    void PutMaintainOPILinks (
        VARIANT_BOOL pbMaintainOPILinks );
    VARIANT_BOOL GetMaintainOPILinks ( );
    void PutFountainSteps (
        long pnFountainSteps );
    long GetFountainSteps ( );
    void PutEPSAs (
        enum pdfEPSAs peEPSAs );
    enum pdfEPSAs GetEPSAs ( );
    void PutpdfVersion (
        enum pdfVersion pePDFVersion );
    enum pdfVersion GetpdfVersion ( );
    void PutIncludeBleed (
        VARIANT_BOOL pbIncludeBleed );
    VARIANT_BOOL GetIncludeBleed ( );
    void PutBleed (
        int pnBleed );
    int GetBleed ( );
    void PutLinearize (
        VARIANT_BOOL pbLinearize );
    VARIANT_BOOL GetLinearize ( );
    void PutCropMarks (
        VARIANT_BOOL pbCropMarks );
    VARIANT_BOOL GetCropMarks ( );
    void PutRegistrationMarks (
        VARIANT_BOOL pbRegistrationMarks );
    VARIANT_BOOL GetRegistrationMarks ( );
    void PutDensitometerScales (
        VARIANT_BOOL pbDensitometerScales );
    VARIANT_BOOL GetDensitometerScales ( );
    void PutFileInformation (
        VARIANT_BOOL pbFileInformation );
    VARIANT_BOOL GetFileInformation ( );
    void PutColorMode (
        enum pdfColorMode peColorSet );
    enum pdfColorMode GetColorMode ( );
    void PutUseColorProfile (
        VARIANT_BOOL pbUseColorProfile );
    VARIANT_BOOL GetUseColorProfile ( );
    void PutColorProfile (
        enum pdfColorProfile peColorProfile );
    enum pdfColorProfile GetColorProfile ( );
    void PutEmbedFilename (
        _bstr_t pszEmbedFilename );
    _bstr_t GetEmbedFilename ( );
    void PutEmbedFile (
        VARIANT_BOOL pbEmbedFile );
    VARIANT_BOOL GetEmbedFile ( );
    void PutJP2QualityFactor (
        int pnQuality );
    int GetJP2QualityFactor ( );
    void PutTextExportMode (
        enum pdfTextExportMode pExportMode );
    enum pdfTextExportMode GetTextExportMode ( );
    void PutPrintPermissions (
        enum pdfPrintPermissions pPrintPermission );
    enum pdfPrintPermissions GetPrintPermissions ( );
    void PutEditPermissions (
        enum pdfEditPermissions pEditPermission );
    enum pdfEditPermissions GetEditPermissions ( );
    void PutContentCopyingAllowed (
        VARIANT_BOOL pbEnable );
    VARIANT_BOOL GetContentCopyingAllowed ( );
    void PutOpenPassword (
        _bstr_t pszOpenPassword );
    _bstr_t GetOpenPassword ( );
    void PutPermissionPassword (
        _bstr_t pszPermissionPassword );
    _bstr_t GetPermissionPassword ( );
    void PutConvertSpotColors (
        VARIANT_BOOL pbConvertSpotColors );
    VARIANT_BOOL GetConvertSpotColors ( );
    void PutEncryptType (
        enum pdfEncryptionType peEncryptType );
    enum pdfEncryptionType GetEncryptType ( );
    void PutOutputSpotColorsAs (
        enum pdfSpotType pnConvertSpotColorsTo );
    enum pdfSpotType GetOutputSpotColorsAs ( );
    void PutOverprintBlackLimit (
        int pnOverprintBlackLimit );
    int GetOverprintBlackLimit ( );
    void PutProtectedTextAsCurves (
        VARIANT_BOOL pbProtectedTextAsCurves );
    VARIANT_BOOL GetProtectedTextAsCurves ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Reset ( ) = 0;
      virtual HRESULT __stdcall raw_Load (
        /*[in]*/ BSTR SettingName,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_Save (
        /*[in]*/ BSTR SettingName,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_ShowDialog (
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
      virtual HRESULT __stdcall raw_PublishToPDF (
        /*[in]*/ BSTR FileName ) = 0;
      virtual HRESULT __stdcall put_PublishRange (
        /*[in]*/ enum pdfExportRange pExportRange ) = 0;
      virtual HRESULT __stdcall get_PublishRange (
        /*[out,retval]*/ enum pdfExportRange * pExportRange ) = 0;
      virtual HRESULT __stdcall put_PageRange (
        /*[in]*/ BSTR pszExportPagesRange ) = 0;
      virtual HRESULT __stdcall get_PageRange (
        /*[out,retval]*/ BSTR * pszExportPagesRange ) = 0;
      virtual HRESULT __stdcall put_Author (
        /*[in]*/ BSTR pszAuthor ) = 0;
      virtual HRESULT __stdcall get_Author (
        /*[out,retval]*/ BSTR * pszAuthor ) = 0;
      virtual HRESULT __stdcall put_Subject (
        /*[in]*/ BSTR pszSubject ) = 0;
      virtual HRESULT __stdcall get_Subject (
        /*[out,retval]*/ BSTR * pszSubject ) = 0;
      virtual HRESULT __stdcall put_Keywords (
        /*[in]*/ BSTR pszKeywords ) = 0;
      virtual HRESULT __stdcall get_Keywords (
        /*[out,retval]*/ BSTR * pszKeywords ) = 0;
      virtual HRESULT __stdcall put_BitmapCompression (
        /*[in]*/ enum pdfBitmapCompressionType pBitmapCompressionType ) = 0;
      virtual HRESULT __stdcall get_BitmapCompression (
        /*[out,retval]*/ enum pdfBitmapCompressionType * pBitmapCompressionType ) = 0;
      virtual HRESULT __stdcall put_JPEGQualityFactor (
        /*[in]*/ int pnQuality ) = 0;
      virtual HRESULT __stdcall get_JPEGQualityFactor (
        /*[out,retval]*/ int * pnQuality ) = 0;
      virtual HRESULT __stdcall put_TextAsCurves (
        /*[in]*/ VARIANT_BOOL pbTextAsCurves ) = 0;
      virtual HRESULT __stdcall get_TextAsCurves (
        /*[out,retval]*/ VARIANT_BOOL * pbTextAsCurves ) = 0;
      virtual HRESULT __stdcall put_EmbedFonts (
        /*[in]*/ VARIANT_BOOL pbEmbedFonts ) = 0;
      virtual HRESULT __stdcall get_EmbedFonts (
        /*[out,retval]*/ VARIANT_BOOL * pbEmbedFonts ) = 0;
      virtual HRESULT __stdcall put_EmbedBaseFonts (
        /*[in]*/ VARIANT_BOOL pbEmbedBaseFonts ) = 0;
      virtual HRESULT __stdcall get_EmbedBaseFonts (
        /*[out,retval]*/ VARIANT_BOOL * pbEmbedBaseFonts ) = 0;
      virtual HRESULT __stdcall put_TrueTypeToType1 (
        /*[in]*/ VARIANT_BOOL pbTrueTypeToType1 ) = 0;
      virtual HRESULT __stdcall get_TrueTypeToType1 (
        /*[out,retval]*/ VARIANT_BOOL * pbTrueTypeToType1 ) = 0;
      virtual HRESULT __stdcall put_SubsetFonts (
        /*[in]*/ VARIANT_BOOL pbSubsetType1Fonts ) = 0;
      virtual HRESULT __stdcall get_SubsetFonts (
        /*[out,retval]*/ VARIANT_BOOL * pbSubsetType1Fonts ) = 0;
      virtual HRESULT __stdcall put_SubsetPct (
        /*[in]*/ long pnLevel ) = 0;
      virtual HRESULT __stdcall get_SubsetPct (
        /*[out,retval]*/ long * pnLevel ) = 0;
      virtual HRESULT __stdcall put_CompressText (
        /*[in]*/ VARIANT_BOOL pbCompressText ) = 0;
      virtual HRESULT __stdcall get_CompressText (
        /*[out,retval]*/ VARIANT_BOOL * pbCompressText ) = 0;
      virtual HRESULT __stdcall put_Encoding (
        /*[in]*/ enum pdfEncodingType pEncoding ) = 0;
      virtual HRESULT __stdcall get_Encoding (
        /*[out,retval]*/ enum pdfEncodingType * pEncoding ) = 0;
      virtual HRESULT __stdcall put_DownsampleColor (
        /*[in]*/ VARIANT_BOOL pbDownsample ) = 0;
      virtual HRESULT __stdcall get_DownsampleColor (
        /*[out,retval]*/ VARIANT_BOOL * pbDownsample ) = 0;
      virtual HRESULT __stdcall put_DownsampleGray (
        /*[in]*/ VARIANT_BOOL pbDownsample ) = 0;
      virtual HRESULT __stdcall get_DownsampleGray (
        /*[out,retval]*/ VARIANT_BOOL * pbDownsample ) = 0;
      virtual HRESULT __stdcall put_DownsampleMono (
        /*[in]*/ VARIANT_BOOL pbDownsample ) = 0;
      virtual HRESULT __stdcall get_DownsampleMono (
        /*[out,retval]*/ VARIANT_BOOL * pbDownsample ) = 0;
      virtual HRESULT __stdcall put_ColorResolution (
        /*[in]*/ long pnDownsampleResolution ) = 0;
      virtual HRESULT __stdcall get_ColorResolution (
        /*[out,retval]*/ long * pnDownsampleResolution ) = 0;
      virtual HRESULT __stdcall put_MonoResolution (
        /*[in]*/ long pnDownsampleResolution ) = 0;
      virtual HRESULT __stdcall get_MonoResolution (
        /*[out,retval]*/ long * pnDownsampleResolution ) = 0;
      virtual HRESULT __stdcall put_GrayResolution (
        /*[in]*/ long pnDownsampleResolution ) = 0;
      virtual HRESULT __stdcall get_GrayResolution (
        /*[out,retval]*/ long * pnDownsampleResolution ) = 0;
      virtual HRESULT __stdcall put_Hyperlinks (
        /*[in]*/ VARIANT_BOOL pbIncludeHyperlinks ) = 0;
      virtual HRESULT __stdcall get_Hyperlinks (
        /*[out,retval]*/ VARIANT_BOOL * pbIncludeHyperlinks ) = 0;
      virtual HRESULT __stdcall put_Bookmarks (
        /*[in]*/ VARIANT_BOOL pbGenerateBookmarks ) = 0;
      virtual HRESULT __stdcall get_Bookmarks (
        /*[out,retval]*/ VARIANT_BOOL * pbGenerateBookmarks ) = 0;
      virtual HRESULT __stdcall put_Thumbnails (
        /*[in]*/ VARIANT_BOOL pbGenerateThumbnails ) = 0;
      virtual HRESULT __stdcall get_Thumbnails (
        /*[out,retval]*/ VARIANT_BOOL * pbGenerateThumbnails ) = 0;
      virtual HRESULT __stdcall put_Startup (
        /*[in]*/ enum pdfDisplayOnStart pDisplayOnStart ) = 0;
      virtual HRESULT __stdcall get_Startup (
        /*[out,retval]*/ enum pdfDisplayOnStart * pDisplayOnStart ) = 0;
      virtual HRESULT __stdcall put_ComplexFillsAsBitmaps (
        /*[in]*/ VARIANT_BOOL pbComplexFillsAsBitmaps ) = 0;
      virtual HRESULT __stdcall get_ComplexFillsAsBitmaps (
        /*[out,retval]*/ VARIANT_BOOL * pbComplexFillsAsBitmaps ) = 0;
      virtual HRESULT __stdcall put_Overprints (
        /*[in]*/ VARIANT_BOOL pbPreserveOverprints ) = 0;
      virtual HRESULT __stdcall get_Overprints (
        /*[out,retval]*/ VARIANT_BOOL * pbPreserveOverprints ) = 0;
      virtual HRESULT __stdcall put_Halftones (
        /*[in]*/ VARIANT_BOOL pbPreserveHalftones ) = 0;
      virtual HRESULT __stdcall get_Halftones (
        /*[out,retval]*/ VARIANT_BOOL * pbPreserveHalftones ) = 0;
      virtual HRESULT __stdcall put_SpotColors (
        /*[in]*/ VARIANT_BOOL pbPreserveSpotColors ) = 0;
      virtual HRESULT __stdcall get_SpotColors (
        /*[out,retval]*/ VARIANT_BOOL * pbPreserveSpotColors ) = 0;
      virtual HRESULT __stdcall put_MaintainOPILinks (
        /*[in]*/ VARIANT_BOOL pbMaintainOPILinks ) = 0;
      virtual HRESULT __stdcall get_MaintainOPILinks (
        /*[out,retval]*/ VARIANT_BOOL * pbMaintainOPILinks ) = 0;
      virtual HRESULT __stdcall put_FountainSteps (
        /*[in]*/ long pnFountainSteps ) = 0;
      virtual HRESULT __stdcall get_FountainSteps (
        /*[out,retval]*/ long * pnFountainSteps ) = 0;
      virtual HRESULT __stdcall put_EPSAs (
        /*[in]*/ enum pdfEPSAs peEPSAs ) = 0;
      virtual HRESULT __stdcall get_EPSAs (
        /*[out,retval]*/ enum pdfEPSAs * peEPSAs ) = 0;
      virtual HRESULT __stdcall put_pdfVersion (
        /*[in]*/ enum pdfVersion pePDFVersion ) = 0;
      virtual HRESULT __stdcall get_pdfVersion (
        /*[out,retval]*/ enum pdfVersion * pePDFVersion ) = 0;
      virtual HRESULT __stdcall put_IncludeBleed (
        /*[in]*/ VARIANT_BOOL pbIncludeBleed ) = 0;
      virtual HRESULT __stdcall get_IncludeBleed (
        /*[out,retval]*/ VARIANT_BOOL * pbIncludeBleed ) = 0;
      virtual HRESULT __stdcall put_Bleed (
        /*[in]*/ int pnBleed ) = 0;
      virtual HRESULT __stdcall get_Bleed (
        /*[out,retval]*/ int * pnBleed ) = 0;
      virtual HRESULT __stdcall put_Linearize (
        /*[in]*/ VARIANT_BOOL pbLinearize ) = 0;
      virtual HRESULT __stdcall get_Linearize (
        /*[out,retval]*/ VARIANT_BOOL * pbLinearize ) = 0;
      virtual HRESULT __stdcall put_CropMarks (
        /*[in]*/ VARIANT_BOOL pbCropMarks ) = 0;
      virtual HRESULT __stdcall get_CropMarks (
        /*[out,retval]*/ VARIANT_BOOL * pbCropMarks ) = 0;
      virtual HRESULT __stdcall put_RegistrationMarks (
        /*[in]*/ VARIANT_BOOL pbRegistrationMarks ) = 0;
      virtual HRESULT __stdcall get_RegistrationMarks (
        /*[out,retval]*/ VARIANT_BOOL * pbRegistrationMarks ) = 0;
      virtual HRESULT __stdcall put_DensitometerScales (
        /*[in]*/ VARIANT_BOOL pbDensitometerScales ) = 0;
      virtual HRESULT __stdcall get_DensitometerScales (
        /*[out,retval]*/ VARIANT_BOOL * pbDensitometerScales ) = 0;
      virtual HRESULT __stdcall put_FileInformation (
        /*[in]*/ VARIANT_BOOL pbFileInformation ) = 0;
      virtual HRESULT __stdcall get_FileInformation (
        /*[out,retval]*/ VARIANT_BOOL * pbFileInformation ) = 0;
      virtual HRESULT __stdcall put_ColorMode (
        /*[in]*/ enum pdfColorMode peColorSet ) = 0;
      virtual HRESULT __stdcall get_ColorMode (
        /*[out,retval]*/ enum pdfColorMode * peColorSet ) = 0;
      virtual HRESULT __stdcall put_UseColorProfile (
        /*[in]*/ VARIANT_BOOL pbUseColorProfile ) = 0;
      virtual HRESULT __stdcall get_UseColorProfile (
        /*[out,retval]*/ VARIANT_BOOL * pbUseColorProfile ) = 0;
      virtual HRESULT __stdcall put_ColorProfile (
        /*[in]*/ enum pdfColorProfile peColorProfile ) = 0;
      virtual HRESULT __stdcall get_ColorProfile (
        /*[out,retval]*/ enum pdfColorProfile * peColorProfile ) = 0;
      virtual HRESULT __stdcall put_EmbedFilename (
        /*[in]*/ BSTR pszEmbedFilename ) = 0;
      virtual HRESULT __stdcall get_EmbedFilename (
        /*[out,retval]*/ BSTR * pszEmbedFilename ) = 0;
      virtual HRESULT __stdcall put_EmbedFile (
        /*[in]*/ VARIANT_BOOL pbEmbedFile ) = 0;
      virtual HRESULT __stdcall get_EmbedFile (
        /*[out,retval]*/ VARIANT_BOOL * pbEmbedFile ) = 0;
      virtual HRESULT __stdcall put_JP2QualityFactor (
        /*[in]*/ int pnQuality ) = 0;
      virtual HRESULT __stdcall get_JP2QualityFactor (
        /*[out,retval]*/ int * pnQuality ) = 0;
      virtual HRESULT __stdcall put_TextExportMode (
        /*[in]*/ enum pdfTextExportMode pExportMode ) = 0;
      virtual HRESULT __stdcall get_TextExportMode (
        /*[out,retval]*/ enum pdfTextExportMode * pExportMode ) = 0;
      virtual HRESULT __stdcall put_PrintPermissions (
        /*[in]*/ enum pdfPrintPermissions pPrintPermission ) = 0;
      virtual HRESULT __stdcall get_PrintPermissions (
        /*[out,retval]*/ enum pdfPrintPermissions * pPrintPermission ) = 0;
      virtual HRESULT __stdcall put_EditPermissions (
        /*[in]*/ enum pdfEditPermissions pEditPermission ) = 0;
      virtual HRESULT __stdcall get_EditPermissions (
        /*[out,retval]*/ enum pdfEditPermissions * pEditPermission ) = 0;
      virtual HRESULT __stdcall put_ContentCopyingAllowed (
        /*[in]*/ VARIANT_BOOL pbEnable ) = 0;
      virtual HRESULT __stdcall get_ContentCopyingAllowed (
        /*[out,retval]*/ VARIANT_BOOL * pbEnable ) = 0;
      virtual HRESULT __stdcall put_OpenPassword (
        /*[in]*/ BSTR pszOpenPassword ) = 0;
      virtual HRESULT __stdcall get_OpenPassword (
        /*[out,retval]*/ BSTR * pszOpenPassword ) = 0;
      virtual HRESULT __stdcall put_PermissionPassword (
        /*[in]*/ BSTR pszPermissionPassword ) = 0;
      virtual HRESULT __stdcall get_PermissionPassword (
        /*[out,retval]*/ BSTR * pszPermissionPassword ) = 0;
      virtual HRESULT __stdcall put_ConvertSpotColors (
        /*[in]*/ VARIANT_BOOL pbConvertSpotColors ) = 0;
      virtual HRESULT __stdcall get_ConvertSpotColors (
        /*[out,retval]*/ VARIANT_BOOL * pbConvertSpotColors ) = 0;
      virtual HRESULT __stdcall put_EncryptType (
        /*[in]*/ enum pdfEncryptionType peEncryptType ) = 0;
      virtual HRESULT __stdcall get_EncryptType (
        /*[out,retval]*/ enum pdfEncryptionType * peEncryptType ) = 0;
      virtual HRESULT __stdcall put_OutputSpotColorsAs (
        /*[in]*/ enum pdfSpotType pnConvertSpotColorsTo ) = 0;
      virtual HRESULT __stdcall get_OutputSpotColorsAs (
        /*[out,retval]*/ enum pdfSpotType * pnConvertSpotColorsTo ) = 0;
      virtual HRESULT __stdcall put_OverprintBlackLimit (
        /*[in]*/ int pnOverprintBlackLimit ) = 0;
      virtual HRESULT __stdcall get_OverprintBlackLimit (
        /*[out,retval]*/ int * pnOverprintBlackLimit ) = 0;
      virtual HRESULT __stdcall put_ProtectedTextAsCurves (
        /*[in]*/ VARIANT_BOOL pbProtectedTextAsCurves ) = 0;
      virtual HRESULT __stdcall get_ProtectedTextAsCurves (
        /*[out,retval]*/ VARIANT_BOOL * pbProtectedTextAsCurves ) = 0;
};

struct __declspec(uuid("b0580057-9aa4-44fd-9547-4f91eb757ac4"))
IVGRectangle : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCornerUpperLeft,put=PutCornerUpperLeft))
    long CornerUpperLeft;
    __declspec(property(get=GetCornerUpperRight,put=PutCornerUpperRight))
    long CornerUpperRight;
    __declspec(property(get=GetCornerLowerLeft,put=PutCornerLowerLeft))
    long CornerLowerLeft;
    __declspec(property(get=GetCornerLowerRight,put=PutCornerLowerRight))
    long CornerLowerRight;
    __declspec(property(get=GetEqualCorners))
    VARIANT_BOOL EqualCorners;
    __declspec(property(get=GetMaxRadius))
    double MaxRadius;
    __declspec(property(get=GetRadiusUpperLeft,put=PutRadiusUpperLeft))
    double RadiusUpperLeft;
    __declspec(property(get=GetRadiusUpperRight,put=PutRadiusUpperRight))
    double RadiusUpperRight;
    __declspec(property(get=GetRadiusLowerLeft,put=PutRadiusLowerLeft))
    double RadiusLowerLeft;
    __declspec(property(get=GetRadiusLowerRight,put=PutRadiusLowerRight))
    double RadiusLowerRight;
    __declspec(property(get=GetCornerType,put=PutCornerType))
    enum cdrCornerType CornerType;
    __declspec(property(get=GetRelativeCornerScaling,put=PutRelativeCornerScaling))
    VARIANT_BOOL RelativeCornerScaling;

    //
    // Wrapper methods for error-handling
    //

    long GetCornerUpperLeft ( );
    void PutCornerUpperLeft (
        long pVal );
    long GetCornerUpperRight ( );
    void PutCornerUpperRight (
        long pVal );
    long GetCornerLowerLeft ( );
    void PutCornerLowerLeft (
        long pVal );
    long GetCornerLowerRight ( );
    void PutCornerLowerRight (
        long pVal );
    VARIANT_BOOL GetEqualCorners ( );
    double GetMaxRadius ( );
    HRESULT SetRoundness (
        long Roundness );
    HRESULT SetRadius (
        double Radius );
    double GetRadiusUpperLeft ( );
    void PutRadiusUpperLeft (
        double pVal );
    double GetRadiusUpperRight ( );
    void PutRadiusUpperRight (
        double pVal );
    double GetRadiusLowerLeft ( );
    void PutRadiusLowerLeft (
        double pVal );
    double GetRadiusLowerRight ( );
    void PutRadiusLowerRight (
        double pVal );
    enum cdrCornerType GetCornerType ( );
    void PutCornerType (
        enum cdrCornerType pVal );
    VARIANT_BOOL GetRelativeCornerScaling ( );
    void PutRelativeCornerScaling (
        VARIANT_BOOL pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_CornerUpperLeft (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_CornerUpperLeft (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_CornerUpperRight (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_CornerUpperRight (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_CornerLowerLeft (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_CornerLowerLeft (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_CornerLowerRight (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_CornerLowerRight (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_EqualCorners (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_MaxRadius (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetRoundness (
        /*[in]*/ long Roundness ) = 0;
      virtual HRESULT __stdcall raw_SetRadius (
        /*[in]*/ double Radius ) = 0;
      virtual HRESULT __stdcall get_RadiusUpperLeft (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_RadiusUpperLeft (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_RadiusUpperRight (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_RadiusUpperRight (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_RadiusLowerLeft (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_RadiusLowerLeft (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_RadiusLowerRight (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_RadiusLowerRight (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_CornerType (
        /*[out,retval]*/ enum cdrCornerType * pVal ) = 0;
      virtual HRESULT __stdcall put_CornerType (
        /*[in]*/ enum cdrCornerType pVal ) = 0;
      virtual HRESULT __stdcall get_RelativeCornerScaling (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_RelativeCornerScaling (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
};

struct __declspec(uuid("b0580037-9aa4-44fd-9547-4f91eb757ac4"))
IVGEllipse : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetType,put=PutType))
    enum cdrEllipseType Type;
    __declspec(property(get=GetStartAngle,put=PutStartAngle))
    double StartAngle;
    __declspec(property(get=GetEndAngle,put=PutEndAngle))
    double EndAngle;
    __declspec(property(get=GetClockwise,put=PutClockwise))
    VARIANT_BOOL Clockwise;
    __declspec(property(get=GetCenterX,put=PutCenterX))
    double CenterX;
    __declspec(property(get=GetCenterY,put=PutCenterY))
    double CenterY;
    __declspec(property(get=GetHRadius,put=PutHRadius))
    double HRadius;
    __declspec(property(get=GetVRadius,put=PutVRadius))
    double VRadius;

    //
    // Wrapper methods for error-handling
    //

    enum cdrEllipseType GetType ( );
    void PutType (
        enum cdrEllipseType pVal );
    double GetStartAngle ( );
    void PutStartAngle (
        double pVal );
    double GetEndAngle ( );
    void PutEndAngle (
        double pVal );
    VARIANT_BOOL GetClockwise ( );
    void PutClockwise (
        VARIANT_BOOL pVal );
    double GetCenterX ( );
    void PutCenterX (
        double pVal );
    double GetCenterY ( );
    void PutCenterY (
        double pVal );
    double GetHRadius ( );
    void PutHRadius (
        double pVal );
    double GetVRadius ( );
    void PutVRadius (
        double pVal );
    HRESULT SetCenterPosition (
        double PositionX,
        double PositionY );
    HRESULT GetCenterPosition (
        double * PositionX,
        double * PositionY );
    HRESULT SetRadius (
        double HRadius,
        double VRadius );
    HRESULT GetRadius (
        double * HRadius,
        double * VRadius );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum cdrEllipseType * pVal ) = 0;
      virtual HRESULT __stdcall put_Type (
        /*[in]*/ enum cdrEllipseType pVal ) = 0;
      virtual HRESULT __stdcall get_StartAngle (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_StartAngle (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_EndAngle (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_EndAngle (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Clockwise (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_Clockwise (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_CenterX (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_CenterX (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_CenterY (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_CenterY (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_HRadius (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_HRadius (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_VRadius (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_VRadius (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall raw_SetCenterPosition (
        /*[in]*/ double PositionX,
        /*[in]*/ double PositionY ) = 0;
      virtual HRESULT __stdcall raw_GetCenterPosition (
        /*[out]*/ double * PositionX,
        /*[out]*/ double * PositionY ) = 0;
      virtual HRESULT __stdcall raw_SetRadius (
        /*[in]*/ double HRadius,
        /*[in]*/ double VRadius ) = 0;
      virtual HRESULT __stdcall raw_GetRadius (
        /*[out]*/ double * HRadius,
        /*[out]*/ double * VRadius ) = 0;
};

struct __declspec(uuid("b0580051-9aa4-44fd-9547-4f91eb757ac4"))
IVGPolygon : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetType,put=PutType))
    enum cdrPolygonType Type;
    __declspec(property(get=GetSides,put=PutSides))
    long Sides;
    __declspec(property(get=GetSharpness,put=PutSharpness))
    long Sharpness;

    //
    // Wrapper methods for error-handling
    //

    enum cdrPolygonType GetType ( );
    void PutType (
        enum cdrPolygonType pVal );
    long GetSides ( );
    void PutSides (
        long pVal );
    long GetSharpness ( );
    void PutSharpness (
        long pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum cdrPolygonType * pVal ) = 0;
      virtual HRESULT __stdcall put_Type (
        /*[in]*/ enum cdrPolygonType pVal ) = 0;
      virtual HRESULT __stdcall get_Sides (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_Sides (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_Sharpness (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_Sharpness (
        /*[in]*/ long pVal ) = 0;
};

struct __declspec(uuid("b0580017-9aa4-44fd-9547-4f91eb757ac4"))
IVGCrossPoint : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetPositionX))
    double PositionX;
    __declspec(property(get=GetPositionY))
    double PositionY;
    __declspec(property(get=GetOffset))
    double Offset;
    __declspec(property(get=GetOffset2))
    double Offset2;

    //
    // Wrapper methods for error-handling
    //

    double GetPositionX ( );
    double GetPositionY ( );
    double GetOffset ( );
    double GetOffset2 ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_PositionX (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_PositionY (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_Offset (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_Offset2 (
        /*[out,retval]*/ double * pVal ) = 0;
};

struct __declspec(uuid("b0580018-9aa4-44fd-9547-4f91eb757ac4"))
IVGCrossPoints : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IVGCrossPointPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IVGCrossPointPtr GetItem (
        long Index );
    IUnknownPtr Get_NewEnum ( );
    long GetCount ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IVGCrossPoint * * ppVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * pVal ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pVal ) = 0;
};

struct __declspec(uuid("b0580067-9aa4-44fd-9547-4f91eb757ac4"))
IVGStructPaletteOptions : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetNumColors,put=PutNumColors))
    long NumColors;
    __declspec(property(get=GetDitherIntensity,put=PutDitherIntensity))
    long DitherIntensity;
    __declspec(property(get=GetSmoothing,put=PutSmoothing))
    long Smoothing;
    __declspec(property(get=GetDitherType,put=PutDitherType))
    enum cdrDitherType DitherType;
    __declspec(property(get=GetPaletteType,put=PutPaletteType))
    enum cdrImagePaletteType PaletteType;
    __declspec(property(get=GetImportance,put=PutImportance))
    long Importance;
    __declspec(property(get=GetLightness,put=PutLightness))
    long Lightness;
    __declspec(property(get=GetToleranceA,put=PutToleranceA))
    long ToleranceA;
    __declspec(property(get=GetToleranceB,put=PutToleranceB))
    long ToleranceB;
    __declspec(property(get=GetColorSensitive,put=PutColorSensitive))
    VARIANT_BOOL ColorSensitive;
    __declspec(property(get=GetTargetColor,put=PutTargetColor))
    long TargetColor;
    __declspec(property(get=GetPalette,put=PutPalette))
    _variant_t Palette;

    //
    // Wrapper methods for error-handling
    //

    void PutNumColors (
        long pVal );
    long GetNumColors ( );
    void PutDitherIntensity (
        long pVal );
    long GetDitherIntensity ( );
    void PutSmoothing (
        long pVal );
    long GetSmoothing ( );
    void PutDitherType (
        enum cdrDitherType pVal );
    enum cdrDitherType GetDitherType ( );
    void PutPaletteType (
        enum cdrImagePaletteType pVal );
    enum cdrImagePaletteType GetPaletteType ( );
    void PutImportance (
        long pVal );
    long GetImportance ( );
    void PutLightness (
        long pVal );
    long GetLightness ( );
    void PutToleranceA (
        long pVal );
    long GetToleranceA ( );
    void PutToleranceB (
        long pVal );
    long GetToleranceB ( );
    void PutColorSensitive (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetColorSensitive ( );
    void PutTargetColor (
        long pVal );
    long GetTargetColor ( );
    void PutPalette (
        const _variant_t & pVal );
    _variant_t GetPalette ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_NumColors (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_NumColors (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_DitherIntensity (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_DitherIntensity (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_Smoothing (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_Smoothing (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_DitherType (
        /*[in]*/ enum cdrDitherType pVal ) = 0;
      virtual HRESULT __stdcall get_DitherType (
        /*[out,retval]*/ enum cdrDitherType * pVal ) = 0;
      virtual HRESULT __stdcall put_PaletteType (
        /*[in]*/ enum cdrImagePaletteType pVal ) = 0;
      virtual HRESULT __stdcall get_PaletteType (
        /*[out,retval]*/ enum cdrImagePaletteType * pVal ) = 0;
      virtual HRESULT __stdcall put_Importance (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_Importance (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_Lightness (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_Lightness (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_ToleranceA (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_ToleranceA (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_ToleranceB (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_ToleranceB (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_ColorSensitive (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_ColorSensitive (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_TargetColor (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_TargetColor (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_Palette (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_Palette (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
};

struct __declspec(uuid("b0580046-9aa4-44fd-9547-4f91eb757ac4"))
IVGOutlineStyle : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetDashCount,put=PutDashCount))
    long DashCount;
    __declspec(property(get=GetDashLength,put=PutDashLength))
    long DashLength[];
    __declspec(property(get=GetGapLength,put=PutGapLength))
    long GapLength[];
    __declspec(property(get=GetEnhanced))
    VARIANT_BOOL Enhanced;

    //
    // Wrapper methods for error-handling
    //

    long GetIndex ( );
    long GetDashCount ( );
    void PutDashCount (
        long pVal );
    long GetDashLength (
        long Index );
    void PutDashLength (
        long Index,
        long pVal );
    long GetGapLength (
        long Index );
    void PutGapLength (
        long Index,
        long pVal );
    VARIANT_BOOL GetEnhanced ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Index (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_DashCount (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_DashCount (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_DashLength (
        /*[in]*/ long Index,
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_DashLength (
        /*[in]*/ long Index,
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_GapLength (
        /*[in]*/ long Index,
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_GapLength (
        /*[in]*/ long Index,
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_Enhanced (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
};

struct __declspec(uuid("b058004e-9aa4-44fd-9547-4f91eb757ac4"))
IVGPatternCanvas : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetSize,put=PutSize))
    enum cdrPatternCanvasSize Size;
    __declspec(property(get=GetData,put=PutData))
    _bstr_t Data;
    __declspec(property(get=GetPixel,put=PutPixel))
    VARIANT_BOOL Pixel[][];
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetWidth,put=PutWidth))
    long Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    long Height;

    //
    // Wrapper methods for error-handling
    //

    enum cdrPatternCanvasSize GetSize ( );
    void PutSize (
        enum cdrPatternCanvasSize pVal );
    VARIANT_BOOL GetPixel (
        long x,
        long y );
    void PutPixel (
        long x,
        long y,
        VARIANT_BOOL pVal );
    long GetIndex ( );
    HRESULT FillArea (
        long x1,
        long y1,
        long x2,
        long y2,
        VARIANT_BOOL State );
    HRESULT CopyArea (
        long x1,
        long y1,
        long x2,
        long y2,
        long x,
        long y );
    HRESULT FlipArea (
        long x1,
        long y1,
        long x2,
        long y2,
        enum cdrFlipAxes Axes );
    HRESULT RotateArea (
        long x1,
        long y1,
        long x2,
        long y2,
        double Angle );
    HRESULT Select (
        long Index );
    HRESULT Clear ( );
    HRESULT PutCopy (
        struct IVGPatternCanvas * PatternCanvas );
    long GetWidth ( );
    void PutWidth (
        long pVal );
    long GetHeight ( );
    void PutHeight (
        long pVal );
    _bstr_t GetData ( );
    void PutData (
        _bstr_t pVal );
    HRESULT PSet (
        short Step,
        long x,
        long y,
        VARIANT_BOOL Color );
    HRESULT Line (
        short Flags,
        long x1,
        long y1,
        long x2,
        long y2,
        VARIANT_BOOL Color );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Size (
        /*[out,retval]*/ enum cdrPatternCanvasSize * pVal ) = 0;
      virtual HRESULT __stdcall put_Size (
        /*[in]*/ enum cdrPatternCanvasSize pVal ) = 0;
      virtual HRESULT __stdcall get_Pixel (
        /*[in]*/ long x,
        /*[in]*/ long y,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_Pixel (
        /*[in]*/ long x,
        /*[in]*/ long y,
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Index (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_FillArea (
        /*[in]*/ long x1,
        /*[in]*/ long y1,
        /*[in]*/ long x2,
        /*[in]*/ long y2,
        /*[in]*/ VARIANT_BOOL State ) = 0;
      virtual HRESULT __stdcall raw_CopyArea (
        /*[in]*/ long x1,
        /*[in]*/ long y1,
        /*[in]*/ long x2,
        /*[in]*/ long y2,
        /*[in]*/ long x,
        /*[in]*/ long y ) = 0;
      virtual HRESULT __stdcall raw_FlipArea (
        /*[in]*/ long x1,
        /*[in]*/ long y1,
        /*[in]*/ long x2,
        /*[in]*/ long y2,
        /*[in]*/ enum cdrFlipAxes Axes ) = 0;
      virtual HRESULT __stdcall raw_RotateArea (
        /*[in]*/ long x1,
        /*[in]*/ long y1,
        /*[in]*/ long x2,
        /*[in]*/ long y2,
        /*[in]*/ double Angle ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[in]*/ long Index ) = 0;
      virtual HRESULT __stdcall raw_Clear ( ) = 0;
      virtual HRESULT __stdcall raw_PutCopy (
        /*[in]*/ struct IVGPatternCanvas * PatternCanvas ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_Data (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Data (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall raw_PSet (
        /*[in]*/ short Step,
        /*[in]*/ long x,
        /*[in]*/ long y,
        /*[in]*/ VARIANT_BOOL Color ) = 0;
      virtual HRESULT __stdcall raw_Line (
        /*[in]*/ short Flags,
        /*[in]*/ long x1,
        /*[in]*/ long y1,
        /*[in]*/ long x2,
        /*[in]*/ long y2,
        /*[in]*/ VARIANT_BOOL Color ) = 0;
};

struct __declspec(uuid("b058007b-9aa4-44fd-9547-4f91eb757ac4"))
IVGTextureFillProperty : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetType))
    enum cdrTexturePropertyType Type;
    __declspec(property(get=GetValue,put=PutValue))
    _variant_t Value;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetName ( );
    enum cdrTexturePropertyType GetType ( );
    _variant_t GetValue ( );
    void PutValue (
        const _variant_t & pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum cdrTexturePropertyType * pVal ) = 0;
      virtual HRESULT __stdcall get_Value (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_Value (
        /*[in]*/ VARIANT pVal ) = 0;
};

struct __declspec(uuid("b058007a-9aa4-44fd-9547-4f91eb757ac4"))
IVGTextureFillProperties : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetItem))
    IVGTextureFillPropertyPtr Item[];
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    IVGTextureFillPropertyPtr GetItem (
        const _variant_t & IndexOrName );
    IUnknownPtr Get_NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT IndexOrName,
        /*[out,retval]*/ struct IVGTextureFillProperty * * ppVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * pVal ) = 0;
};

struct __declspec(uuid("b0580079-9aa4-44fd-9547-4f91eb757ac4"))
IVGTextureFill : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetOriginX,put=PutOriginX))
    double OriginX;
    __declspec(property(get=GetMirrorFillY,put=PutMirrorFillY))
    VARIANT_BOOL MirrorFillY;
    __declspec(property(get=GetOriginY,put=PutOriginY))
    double OriginY;
    __declspec(property(get=GetTileWidth,put=PutTileWidth))
    double TileWidth;
    __declspec(property(get=GetTileHeight,put=PutTileHeight))
    double TileHeight;
    __declspec(property(get=GetTileOffsetType,put=PutTileOffsetType))
    enum cdrTileOffsetType TileOffsetType;
    __declspec(property(get=GetTileOffset,put=PutTileOffset))
    long TileOffset;
    __declspec(property(get=GetSkewAngle,put=PutSkewAngle))
    double SkewAngle;
    __declspec(property(get=GetRotationAngle,put=PutRotationAngle))
    double RotationAngle;
    __declspec(property(get=GetTransformWithShape,put=PutTransformWithShape))
    VARIANT_BOOL TransformWithShape;
    __declspec(property(get=GetResolution,put=PutResolution))
    long Resolution;
    __declspec(property(get=GetMaximumTileWidth,put=PutMaximumTileWidth))
    long MaximumTileWidth;
    __declspec(property(get=GetLibraryName))
    _bstr_t LibraryName;
    __declspec(property(get=GetTextureName))
    _bstr_t TextureName;
    __declspec(property(get=GetStyleName))
    _bstr_t StyleName;
    __declspec(property(get=GetMirrorFill,put=PutMirrorFill))
    VARIANT_BOOL MirrorFill;
    __declspec(property(get=GetProperties))
    IVGTextureFillPropertiesPtr Properties;
    __declspec(property(get=GetMirrorFillX,put=PutMirrorFillX))
    VARIANT_BOOL MirrorFillX;

    //
    // Wrapper methods for error-handling
    //

    double GetOriginX ( );
    void PutOriginX (
        double pVal );
    double GetOriginY ( );
    void PutOriginY (
        double pVal );
    double GetTileWidth ( );
    void PutTileWidth (
        double pVal );
    double GetTileHeight ( );
    void PutTileHeight (
        double pVal );
    enum cdrTileOffsetType GetTileOffsetType ( );
    void PutTileOffsetType (
        enum cdrTileOffsetType pVal );
    long GetTileOffset ( );
    void PutTileOffset (
        long pVal );
    double GetSkewAngle ( );
    void PutSkewAngle (
        double pVal );
    double GetRotationAngle ( );
    void PutRotationAngle (
        double pVal );
    VARIANT_BOOL GetTransformWithShape ( );
    void PutTransformWithShape (
        VARIANT_BOOL pVal );
    long GetResolution ( );
    void PutResolution (
        long pVal );
    long GetMaximumTileWidth ( );
    void PutMaximumTileWidth (
        long pVal );
    _bstr_t GetLibraryName ( );
    _bstr_t GetTextureName ( );
    _bstr_t GetStyleName ( );
    HRESULT Select (
        _bstr_t Texture,
        _bstr_t Library );
    HRESULT SetProperties (
        SAFEARRAY * * SettingArray );
    VARIANT_BOOL GetMirrorFill ( );
    void PutMirrorFill (
        VARIANT_BOOL pVal );
    IVGTextureFillPropertiesPtr GetProperties ( );
    VARIANT_BOOL GetMirrorFillX ( );
    void PutMirrorFillX (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetMirrorFillY ( );
    void PutMirrorFillY (
        VARIANT_BOOL pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_OriginX (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_OriginX (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_OriginY (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_OriginY (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_TileWidth (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_TileWidth (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_TileHeight (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_TileHeight (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_TileOffsetType (
        /*[out,retval]*/ enum cdrTileOffsetType * pVal ) = 0;
      virtual HRESULT __stdcall put_TileOffsetType (
        /*[in]*/ enum cdrTileOffsetType pVal ) = 0;
      virtual HRESULT __stdcall get_TileOffset (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_TileOffset (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_SkewAngle (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_SkewAngle (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_RotationAngle (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_RotationAngle (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_TransformWithShape (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_TransformWithShape (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Resolution (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_Resolution (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_MaximumTileWidth (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_MaximumTileWidth (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_LibraryName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_TextureName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_StyleName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[in]*/ BSTR Texture,
        /*[in]*/ BSTR Library ) = 0;
      virtual HRESULT __stdcall raw_SetProperties (
        /*[in]*/ SAFEARRAY * * SettingArray ) = 0;
      virtual HRESULT __stdcall get_MirrorFill (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_MirrorFill (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Properties (
        /*[out,retval]*/ struct IVGTextureFillProperties * * ppVal ) = 0;
      virtual HRESULT __stdcall get_MirrorFillX (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_MirrorFillX (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_MirrorFillY (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_MirrorFillY (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
};

struct __declspec(uuid("b0580052-9aa4-44fd-9547-4f91eb757ac4"))
IVGPostScriptFill : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetProperties,put=PutProperties))
    long Properties[];

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetName ( );
    long GetIndex ( );
    long GetProperties (
        long Index );
    void PutProperties (
        long Index,
        long pVal );
    HRESULT Select (
        const _variant_t & IndexOrName );
    HRESULT SetProperties (
        long Param1,
        long Param2,
        long Param3,
        long Param4,
        long Param5 );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_Index (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_Properties (
        /*[in]*/ long Index,
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_Properties (
        /*[in]*/ long Index,
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[in]*/ VARIANT IndexOrName ) = 0;
      virtual HRESULT __stdcall raw_SetProperties (
        /*[in]*/ long Param1,
        /*[in]*/ long Param2,
        /*[in]*/ long Param3,
        /*[in]*/ long Param4,
        /*[in]*/ long Param5 ) = 0;
};

struct __declspec(uuid("b0580096-9aa4-44fd-9547-4f91eb757ac4"))
IVGPSScreenOptions : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetAngle,put=PutAngle))
    double Angle;
    __declspec(property(get=GetFrequency,put=PutFrequency))
    long Frequency;

    //
    // Wrapper methods for error-handling
    //

    long GetIndex ( );
    _bstr_t GetName ( );
    double GetAngle ( );
    void PutAngle (
        double pVal );
    long GetFrequency ( );
    void PutFrequency (
        long pVal );
    VARIANT_BOOL Select (
        _bstr_t Name );
    VARIANT_BOOL SetProperties (
        const _variant_t & IndexOrName,
        double Angle,
        long Frequency );
    _bstr_t NameByIndex (
        long Index );
    HRESULT Reset ( );
    VARIANT_BOOL UserAssign (
        long ParentWindowHandle );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Index (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_Angle (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Angle (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Frequency (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_Frequency (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetProperties (
        /*[in]*/ VARIANT IndexOrName,
        /*[in]*/ double Angle,
        /*[in]*/ long Frequency,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_NameByIndex (
        /*[in]*/ long Index,
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall raw_Reset ( ) = 0;
      virtual HRESULT __stdcall raw_UserAssign (
        /*[in]*/ long ParentWindowHandle,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
};

struct __declspec(uuid("b05800a7-9aa4-44fd-9547-4f91eb757ac4"))
IVGArrowHeadOptions : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetLength,put=PutLength))
    double Length;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetOffsetX,put=PutOffsetX))
    double OffsetX;
    __declspec(property(get=GetOffsetY,put=PutOffsetY))
    double OffsetY;
    __declspec(property(get=GetFlipHorizontal,put=PutFlipHorizontal))
    VARIANT_BOOL FlipHorizontal;
    __declspec(property(get=GetFlipVertical,put=PutFlipVertical))
    VARIANT_BOOL FlipVertical;
    __declspec(property(get=GetRotationAngle,put=PutRotationAngle))
    double RotationAngle;
    __declspec(property(get=GetFlipVerical,put=PutFlipVerical))
    VARIANT_BOOL FlipVerical;

    //
    // Wrapper methods for error-handling
    //

    double GetLength ( );
    void PutLength (
        double pVal );
    double GetWidth ( );
    void PutWidth (
        double pVal );
    double GetOffsetX ( );
    void PutOffsetX (
        double pVal );
    double GetOffsetY ( );
    void PutOffsetY (
        double pVal );
    VARIANT_BOOL GetFlipHorizontal ( );
    void PutFlipHorizontal (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetFlipVertical ( );
    void PutFlipVertical (
        VARIANT_BOOL pVal );
    HRESULT Flip (
        enum cdrFlipAxes Axes );
    double GetRotationAngle ( );
    void PutRotationAngle (
        double pVal );
    HRESULT CopyAssign (
        struct IVGArrowHeadOptions * Source );
    IVGArrowHeadOptionsPtr GetCopy ( );
    VARIANT_BOOL GetFlipVerical ( );
    void PutFlipVerical (
        VARIANT_BOOL pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Length (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Length (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_OffsetX (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_OffsetX (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_OffsetY (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_OffsetY (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_FlipHorizontal (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_FlipHorizontal (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_FlipVertical (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_FlipVertical (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall raw_Flip (
        /*[in]*/ enum cdrFlipAxes Axes ) = 0;
      virtual HRESULT __stdcall get_RotationAngle (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_RotationAngle (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall raw_CopyAssign (
        /*[in]*/ struct IVGArrowHeadOptions * Source ) = 0;
      virtual HRESULT __stdcall raw_GetCopy (
        /*[out,retval]*/ struct IVGArrowHeadOptions * * ppVal ) = 0;
      virtual HRESULT __stdcall get_FlipVerical (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_FlipVerical (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
};

struct __declspec(uuid("b05800da-9aa4-44fd-9547-4f91eb757ac4"))
IVGImageTile : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetLeft))
    long Left;
    __declspec(property(get=GetTop))
    long Top;
    __declspec(property(get=GetRight))
    long Right;
    __declspec(property(get=GetBottom))
    long Bottom;
    __declspec(property(get=GetWidth))
    long Width;
    __declspec(property(get=GetHeight))
    long Height;
    __declspec(property(get=GetBytesPerTile))
    long BytesPerTile;
    __declspec(property(get=GetBytesPerLine))
    long BytesPerLine;
    __declspec(property(get=GetBytesPerPixel))
    long BytesPerPixel;
    __declspec(property(get=GetReadOnly))
    VARIANT_BOOL ReadOnly;

    //
    // Wrapper methods for error-handling
    //

    long GetLeft ( );
    long GetTop ( );
    long GetRight ( );
    long GetBottom ( );
    long GetWidth ( );
    long GetHeight ( );
    long GetBytesPerTile ( );
    long GetBytesPerLine ( );
    long GetBytesPerPixel ( );
    SAFEARRAY * GetPixelData ( );
    void PutPixelData (
        SAFEARRAY * * pVal );
    VARIANT_BOOL GetReadOnly ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_Right (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_Bottom (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_BytesPerTile (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_BytesPerLine (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_BytesPerPixel (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_PixelData (
        /*[out,retval]*/ SAFEARRAY * * pVal ) = 0;
      virtual HRESULT __stdcall put_PixelData (
        /*[in]*/ SAFEARRAY * * pVal ) = 0;
      virtual HRESULT __stdcall get_ReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * ppVal ) = 0;
};

struct __declspec(uuid("b05800d9-9aa4-44fd-9547-4f91eb757ac4"))
IVGImageTiles : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetItem))
    IVGImageTilePtr Item[];
    __declspec(property(get=GetFirst))
    IVGImageTilePtr First;
    __declspec(property(get=GetLast))
    IVGImageTilePtr Last;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    IVGImageTilePtr GetItem (
        long Index );
    IUnknownPtr Get_NewEnum ( );
    IVGImageTilePtr GetFirst ( );
    IVGImageTilePtr GetLast ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IVGImageTile * * ppVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * pVal ) = 0;
      virtual HRESULT __stdcall get_First (
        /*[out,retval]*/ struct IVGImageTile * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Last (
        /*[out,retval]*/ struct IVGImageTile * * ppVal ) = 0;
};

struct __declspec(uuid("b0580062-9aa4-44fd-9547-4f91eb757ac4"))
IVGStructAlignProperties : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetAlignment,put=PutAlignment))
    enum cdrAlignment Alignment;
    __declspec(property(get=GetFirstLineIndent,put=PutFirstLineIndent))
    double FirstLineIndent;
    __declspec(property(get=GetLeftIndent,put=PutLeftIndent))
    double LeftIndent;
    __declspec(property(get=GetRightIndent,put=PutRightIndent))
    double RightIndent;
    __declspec(property(get=GetMaxWordSpacing,put=PutMaxWordSpacing))
    float MaxWordSpacing;
    __declspec(property(get=GetMinWordSpacing,put=PutMinWordSpacing))
    float MinWordSpacing;
    __declspec(property(get=GetMaxCharacterSpacing,put=PutMaxCharacterSpacing))
    float MaxCharacterSpacing;
    __declspec(property(get=GetHorizontalCharacterShift,put=PutHorizontalCharacterShift))
    long HorizontalCharacterShift;
    __declspec(property(get=GetVerticalCharacterShift,put=PutVerticalCharacterShift))
    long VerticalCharacterShift;
    __declspec(property(get=GetCharacterRotation,put=PutCharacterRotation))
    float CharacterRotation;

    //
    // Wrapper methods for error-handling
    //

    void PutAlignment (
        enum cdrAlignment pVal );
    enum cdrAlignment GetAlignment ( );
    void PutFirstLineIndent (
        double pVal );
    double GetFirstLineIndent ( );
    void PutLeftIndent (
        double pVal );
    double GetLeftIndent ( );
    void PutRightIndent (
        double pVal );
    double GetRightIndent ( );
    void PutMaxWordSpacing (
        float pVal );
    float GetMaxWordSpacing ( );
    void PutMinWordSpacing (
        float pVal );
    float GetMinWordSpacing ( );
    void PutMaxCharacterSpacing (
        float pVal );
    float GetMaxCharacterSpacing ( );
    void PutHorizontalCharacterShift (
        long pVal );
    long GetHorizontalCharacterShift ( );
    void PutVerticalCharacterShift (
        long pVal );
    long GetVerticalCharacterShift ( );
    void PutCharacterRotation (
        float pVal );
    float GetCharacterRotation ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_Alignment (
        /*[in]*/ enum cdrAlignment pVal ) = 0;
      virtual HRESULT __stdcall get_Alignment (
        /*[out,retval]*/ enum cdrAlignment * pVal ) = 0;
      virtual HRESULT __stdcall put_FirstLineIndent (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_FirstLineIndent (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LeftIndent (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_LeftIndent (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_RightIndent (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_RightIndent (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_MaxWordSpacing (
        /*[in]*/ float pVal ) = 0;
      virtual HRESULT __stdcall get_MaxWordSpacing (
        /*[out,retval]*/ float * pVal ) = 0;
      virtual HRESULT __stdcall put_MinWordSpacing (
        /*[in]*/ float pVal ) = 0;
      virtual HRESULT __stdcall get_MinWordSpacing (
        /*[out,retval]*/ float * pVal ) = 0;
      virtual HRESULT __stdcall put_MaxCharacterSpacing (
        /*[in]*/ float pVal ) = 0;
      virtual HRESULT __stdcall get_MaxCharacterSpacing (
        /*[out,retval]*/ float * pVal ) = 0;
      virtual HRESULT __stdcall put_HorizontalCharacterShift (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_HorizontalCharacterShift (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_VerticalCharacterShift (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_VerticalCharacterShift (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_CharacterRotation (
        /*[in]*/ float pVal ) = 0;
      virtual HRESULT __stdcall get_CharacterRotation (
        /*[out,retval]*/ float * pVal ) = 0;
};

struct __declspec(uuid("b0580069-9aa4-44fd-9547-4f91eb757ac4"))
IVGStructSpaceProperties : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCharacterSpacing,put=PutCharacterSpacing))
    float CharacterSpacing;
    __declspec(property(get=GetWordSpacing,put=PutWordSpacing))
    float WordSpacing;
    __declspec(property(get=GetLineSpacing,put=PutLineSpacing))
    float LineSpacing;
    __declspec(property(get=GetLineSpacingType,put=PutLineSpacingType))
    enum cdrLineSpacingType LineSpacingType;
    __declspec(property(get=GetBeforeParagraphSpacing,put=PutBeforeParagraphSpacing))
    float BeforeParagraphSpacing;
    __declspec(property(get=GetAfterParagraphSpacing,put=PutAfterParagraphSpacing))
    float AfterParagraphSpacing;

    //
    // Wrapper methods for error-handling
    //

    void PutCharacterSpacing (
        float pVal );
    float GetCharacterSpacing ( );
    void PutWordSpacing (
        float pVal );
    float GetWordSpacing ( );
    void PutLineSpacing (
        float pVal );
    float GetLineSpacing ( );
    void PutLineSpacingType (
        enum cdrLineSpacingType pVal );
    enum cdrLineSpacingType GetLineSpacingType ( );
    void PutBeforeParagraphSpacing (
        float pVal );
    float GetBeforeParagraphSpacing ( );
    void PutAfterParagraphSpacing (
        float pVal );
    float GetAfterParagraphSpacing ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_CharacterSpacing (
        /*[in]*/ float pVal ) = 0;
      virtual HRESULT __stdcall get_CharacterSpacing (
        /*[out,retval]*/ float * pVal ) = 0;
      virtual HRESULT __stdcall put_WordSpacing (
        /*[in]*/ float pVal ) = 0;
      virtual HRESULT __stdcall get_WordSpacing (
        /*[out,retval]*/ float * pVal ) = 0;
      virtual HRESULT __stdcall put_LineSpacing (
        /*[in]*/ float pVal ) = 0;
      virtual HRESULT __stdcall get_LineSpacing (
        /*[out,retval]*/ float * pVal ) = 0;
      virtual HRESULT __stdcall put_LineSpacingType (
        /*[in]*/ enum cdrLineSpacingType pVal ) = 0;
      virtual HRESULT __stdcall get_LineSpacingType (
        /*[out,retval]*/ enum cdrLineSpacingType * pVal ) = 0;
      virtual HRESULT __stdcall put_BeforeParagraphSpacing (
        /*[in]*/ float pVal ) = 0;
      virtual HRESULT __stdcall get_BeforeParagraphSpacing (
        /*[out,retval]*/ float * pVal ) = 0;
      virtual HRESULT __stdcall put_AfterParagraphSpacing (
        /*[in]*/ float pVal ) = 0;
      virtual HRESULT __stdcall get_AfterParagraphSpacing (
        /*[out,retval]*/ float * pVal ) = 0;
};

struct __declspec(uuid("b0580066-9aa4-44fd-9547-4f91eb757ac4"))
IVGStructHyphenationSettings : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetUseAutomaticHyphenation,put=PutUseAutomaticHyphenation))
    VARIANT_BOOL UseAutomaticHyphenation;
    __declspec(property(get=GetBreakCapitalized,put=PutBreakCapitalized))
    VARIANT_BOOL BreakCapitalized;
    __declspec(property(get=GetHotZone,put=PutHotZone))
    double HotZone;
    __declspec(property(get=GetMinWordLength,put=PutMinWordLength))
    long MinWordLength;
    __declspec(property(get=GetMinCharactersBefore,put=PutMinCharactersBefore))
    long MinCharactersBefore;
    __declspec(property(get=GetMinCharactersAfter,put=PutMinCharactersAfter))
    long MinCharactersAfter;
    __declspec(property(get=GetBreakAllCapWords,put=PutBreakAllCapWords))
    VARIANT_BOOL BreakAllCapWords;

    //
    // Wrapper methods for error-handling
    //

    void PutUseAutomaticHyphenation (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetUseAutomaticHyphenation ( );
    void PutBreakCapitalized (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetBreakCapitalized ( );
    void PutHotZone (
        double pVal );
    double GetHotZone ( );
    void PutMinWordLength (
        long pVal );
    long GetMinWordLength ( );
    void PutMinCharactersBefore (
        long pVal );
    long GetMinCharactersBefore ( );
    void PutMinCharactersAfter (
        long pVal );
    long GetMinCharactersAfter ( );
    void PutBreakAllCapWords (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetBreakAllCapWords ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_UseAutomaticHyphenation (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_UseAutomaticHyphenation (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_BreakCapitalized (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_BreakCapitalized (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_HotZone (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_HotZone (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_MinWordLength (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_MinWordLength (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_MinCharactersBefore (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_MinCharactersBefore (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_MinCharactersAfter (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_MinCharactersAfter (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_BreakAllCapWords (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_BreakAllCapWords (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
};

struct __declspec(uuid("b05800a8-9aa4-44fd-9547-4f91eb757ac4"))
IVGUserSnapPoint : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetID))
    _bstr_t ID;
    __declspec(property(get=GetAutoSnap,put=PutAutoSnap))
    VARIANT_BOOL AutoSnap;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetID ( );
    VARIANT_BOOL GetAutoSnap ( );
    void PutAutoSnap (
        VARIANT_BOOL pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ID (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_AutoSnap (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_AutoSnap (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
};

struct __declspec(uuid("b05800a9-9aa4-44fd-9547-4f91eb757ac4"))
IVGObjectSnapPoint : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetType))
    enum cdrObjectSnapPointType Type;

    //
    // Wrapper methods for error-handling
    //

    enum cdrObjectSnapPointType GetType ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum cdrObjectSnapPointType * pVal ) = 0;
};

struct __declspec(uuid("b05800aa-9aa4-44fd-9547-4f91eb757ac4"))
IVGBBoxSnapPoint : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetType))
    enum cdrReferencePoint Type;

    //
    // Wrapper methods for error-handling
    //

    enum cdrReferencePoint GetType ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum cdrReferencePoint * pVal ) = 0;
};

struct __declspec(uuid("b05800ac-9aa4-44fd-9547-4f91eb757ac4"))
IVGEdgeSnapPoint : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetSegmentIndex))
    long SegmentIndex;
    __declspec(property(get=GetSegmentOffset))
    double SegmentOffset;

    //
    // Wrapper methods for error-handling
    //

    long GetSegmentIndex ( );
    double GetSegmentOffset ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_SegmentIndex (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_SegmentOffset (
        /*[out,retval]*/ double * pVal ) = 0;
};

struct __declspec(uuid("b058001b-9aa4-44fd-9547-4f91eb757ac4"))
IVGEffectCustomDistortion : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetDistortionID))
    _bstr_t DistortionID;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetDistortionID ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_DistortionID (
        /*[out,retval]*/ BSTR * pVal ) = 0;
};

struct __declspec(uuid("b0580094-9aa4-44fd-9547-4f91eb757ac4"))
IVGTextTabPosition : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetPosition,put=PutPosition))
    double Position;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetAlignment,put=PutAlignment))
    enum cdrTextTabAlignment Alignment;
    __declspec(property(get=GetLeadered,put=PutLeadered))
    VARIANT_BOOL Leadered;

    //
    // Wrapper methods for error-handling
    //

    double GetPosition ( );
    void PutPosition (
        double pVal );
    long GetIndex ( );
    enum cdrTextTabAlignment GetAlignment ( );
    void PutAlignment (
        enum cdrTextTabAlignment pVal );
    VARIANT_BOOL GetLeadered ( );
    void PutLeadered (
        VARIANT_BOOL pVal );
    HRESULT Delete ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Position (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Position (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Index (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_Alignment (
        /*[out,retval]*/ enum cdrTextTabAlignment * pVal ) = 0;
      virtual HRESULT __stdcall put_Alignment (
        /*[in]*/ enum cdrTextTabAlignment pVal ) = 0;
      virtual HRESULT __stdcall get_Leadered (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_Leadered (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
};

struct __declspec(uuid("b0580095-9aa4-44fd-9547-4f91eb757ac4"))
IVGTextTabPositions : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IVGTextTabPositionPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetLeaderSpacing,put=PutLeaderSpacing))
    long LeaderSpacing;
    __declspec(property(get=GetLeaderCharacter,put=PutLeaderCharacter))
    _bstr_t LeaderCharacter;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IVGTextTabPositionPtr GetItem (
        long Index );
    long GetCount ( );
    IUnknownPtr Get_NewEnum ( );
    long GetLeaderSpacing ( );
    void PutLeaderSpacing (
        long pVal );
    _bstr_t GetLeaderCharacter ( );
    void PutLeaderCharacter (
        _bstr_t pVal );
    HRESULT Clear ( );
    IVGTextTabPositionPtr Add (
        double Position,
        enum cdrTextTabAlignment Alignment,
        VARIANT_BOOL Leadered );
    HRESULT AddEvery (
        double Position,
        enum cdrTextTabAlignment Alignment,
        VARIANT_BOOL Leadered );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IVGTextTabPosition * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * pVal ) = 0;
      virtual HRESULT __stdcall get_LeaderSpacing (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_LeaderSpacing (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_LeaderCharacter (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_LeaderCharacter (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall raw_Clear ( ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ double Position,
        /*[in]*/ enum cdrTextTabAlignment Alignment,
        /*[in]*/ VARIANT_BOOL Leadered,
        /*[out,retval]*/ struct IVGTextTabPosition * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_AddEvery (
        /*[in]*/ double Position,
        /*[in]*/ enum cdrTextTabAlignment Alignment,
        /*[in]*/ VARIANT_BOOL Leadered ) = 0;
};

struct __declspec(uuid("b05800c1-9aa4-44fd-9547-4f91eb757ac4"))
IVGLocalizableString : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetIsEmpty))
    VARIANT_BOOL IsEmpty;
    __declspec(property(get=GetHasDefaultLangString))
    VARIANT_BOOL HasDefaultLangString;
    __declspec(property(get=GetHasDefaultLangStringOnly))
    VARIANT_BOOL HasDefaultLangStringOnly;
    __declspec(property(get=GetHasNonDefaultLangStrings))
    VARIANT_BOOL HasNonDefaultLangStrings;
    __declspec(property(get=GetDefaultLangString,put=PutDefaultLangString))
    _bstr_t DefaultLangString;

    //
    // Wrapper methods for error-handling
    //

    HRESULT Clear ( );
    VARIANT_BOOL GetIsEmpty ( );
    _bstr_t GetLangString (
        _bstr_t Language );
    HRESULT SetLangString (
        _bstr_t Language,
        _bstr_t Value );
    VARIANT_BOOL HasLangString (
        _bstr_t Language );
    VARIANT_BOOL GetHasDefaultLangString ( );
    VARIANT_BOOL GetHasDefaultLangStringOnly ( );
    VARIANT_BOOL GetHasNonDefaultLangStrings ( );
    _bstr_t GetDefaultLangString ( );
    void PutDefaultLangString (
        _bstr_t pVal );
    SAFEARRAY * GetLanguages ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Clear ( ) = 0;
      virtual HRESULT __stdcall get_IsEmpty (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetLangString (
        /*[in]*/ BSTR Language,
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetLangString (
        /*[in]*/ BSTR Language,
        /*[in]*/ BSTR Value ) = 0;
      virtual HRESULT __stdcall raw_HasLangString (
        /*[in]*/ BSTR Language,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_HasDefaultLangString (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_HasDefaultLangStringOnly (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_HasNonDefaultLangStrings (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_DefaultLangString (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_DefaultLangString (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall raw_GetLanguages (
        /*[out,retval]*/ SAFEARRAY * * pVal ) = 0;
};

struct __declspec(uuid("b05800c0-9aa4-44fd-9547-4f91eb757ac4"))
IVGFillMetadata : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetTitle))
    IVGLocalizableStringPtr Title;
    __declspec(property(get=GetDescription))
    IVGLocalizableStringPtr Description;
    __declspec(property(get=GetKeywords))
    IVGLocalizableStringPtr Keywords;
    __declspec(property(get=GetSubject))
    IVGLocalizableStringPtr Subject;
    __declspec(property(get=GetCopyright))
    IVGLocalizableStringPtr Copyright;
    __declspec(property(get=GetCreatorTool))
    _bstr_t CreatorTool;
    __declspec(property(get=GetCreationDate))
    DATE CreationDate;
    __declspec(property(get=GetModificationDate))
    DATE ModificationDate;
    __declspec(property(get=GetDocumentID))
    _bstr_t DocumentID;
    __declspec(property(get=GetInstanceID))
    _bstr_t InstanceID;
    __declspec(property(get=GetDerivedFrom))
    SAFEARRAY * DerivedFrom;
    __declspec(property(get=GetCategory))
    IVGLocalizableStringPtr Category;

    //
    // Wrapper methods for error-handling
    //

    IVGLocalizableStringPtr GetTitle ( );
    IVGLocalizableStringPtr GetDescription ( );
    IVGLocalizableStringPtr GetKeywords ( );
    IVGLocalizableStringPtr GetSubject ( );
    IVGLocalizableStringPtr GetCopyright ( );
    _bstr_t GetCreatorTool ( );
    DATE GetCreationDate ( );
    DATE GetModificationDate ( );
    _bstr_t GetDocumentID ( );
    _bstr_t GetInstanceID ( );
    SAFEARRAY * GetDerivedFrom ( );
    IVGLocalizableStringPtr GetCategory ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Title (
        /*[out,retval]*/ struct IVGLocalizableString * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ struct IVGLocalizableString * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Keywords (
        /*[out,retval]*/ struct IVGLocalizableString * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Subject (
        /*[out,retval]*/ struct IVGLocalizableString * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Copyright (
        /*[out,retval]*/ struct IVGLocalizableString * * ppVal ) = 0;
      virtual HRESULT __stdcall get_CreatorTool (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_CreationDate (
        /*[out,retval]*/ DATE * pVal ) = 0;
      virtual HRESULT __stdcall get_ModificationDate (
        /*[out,retval]*/ DATE * pVal ) = 0;
      virtual HRESULT __stdcall get_DocumentID (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_InstanceID (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_DerivedFrom (
        /*[out,retval]*/ SAFEARRAY * * pVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ struct IVGLocalizableString * * ppVal ) = 0;
};

struct __declspec(uuid("b05800dd-9aa4-44fd-9547-4f91eb757ac4"))
IVGTextIndentLevelStyle : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetLevel))
    long Level;
    __declspec(property(get=GetFont,put=PutFont))
    _bstr_t Font;
    __declspec(property(get=GetUseParagraphFont,put=PutUseParagraphFont))
    VARIANT_BOOL UseParagraphFont;
    __declspec(property(get=GetSymbol,put=PutSymbol))
    _bstr_t Symbol;
    __declspec(property(get=GetSize,put=PutSize))
    float Size;
    __declspec(property(get=GetBaselineShift,put=PutBaselineShift))
    float BaselineShift;
    __declspec(property(get=GetHangingIndent,put=PutHangingIndent))
    VARIANT_BOOL HangingIndent;
    __declspec(property(get=GetFirstCharIndent,put=PutFirstCharIndent))
    double FirstCharIndent;
    __declspec(property(get=GetFirstCharIndentIncludesBullet,put=PutFirstCharIndentIncludesBullet))
    VARIANT_BOOL FirstCharIndentIncludesBullet;
    __declspec(property(get=GetFormat,put=PutFormat))
    _bstr_t Format;
    __declspec(property(get=GetNumberStyle,put=PutNumberStyle))
    enum cdrTextIndentLevelStyle NumberStyle;

    //
    // Wrapper methods for error-handling
    //

    long GetLevel ( );
    _bstr_t GetFont ( );
    void PutFont (
        _bstr_t pVal );
    VARIANT_BOOL GetUseParagraphFont ( );
    void PutUseParagraphFont (
        VARIANT_BOOL pVal );
    _bstr_t GetSymbol ( );
    void PutSymbol (
        _bstr_t pVal );
    float GetSize ( );
    void PutSize (
        float pVal );
    float GetBaselineShift ( );
    void PutBaselineShift (
        float pVal );
    VARIANT_BOOL GetHangingIndent ( );
    void PutHangingIndent (
        VARIANT_BOOL pVal );
    double GetFirstCharIndent ( );
    void PutFirstCharIndent (
        double pVal );
    VARIANT_BOOL GetFirstCharIndentIncludesBullet ( );
    void PutFirstCharIndentIncludesBullet (
        VARIANT_BOOL pVal );
    _bstr_t GetFormat ( );
    void PutFormat (
        _bstr_t pVal );
    enum cdrTextIndentLevelStyle GetNumberStyle ( );
    void PutNumberStyle (
        enum cdrTextIndentLevelStyle pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Level (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_Font (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Font (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_UseParagraphFont (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_UseParagraphFont (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Symbol (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Symbol (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Size (
        /*[out,retval]*/ float * pVal ) = 0;
      virtual HRESULT __stdcall put_Size (
        /*[in]*/ float pVal ) = 0;
      virtual HRESULT __stdcall get_BaselineShift (
        /*[out,retval]*/ float * pVal ) = 0;
      virtual HRESULT __stdcall put_BaselineShift (
        /*[in]*/ float pVal ) = 0;
      virtual HRESULT __stdcall get_HangingIndent (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_HangingIndent (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_FirstCharIndent (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_FirstCharIndent (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_FirstCharIndentIncludesBullet (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_FirstCharIndentIncludesBullet (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Format (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Format (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_NumberStyle (
        /*[out,retval]*/ enum cdrTextIndentLevelStyle * pVal ) = 0;
      virtual HRESULT __stdcall put_NumberStyle (
        /*[in]*/ enum cdrTextIndentLevelStyle pVal ) = 0;
};

struct __declspec(uuid("b05800dc-9aa4-44fd-9547-4f91eb757ac4"))
IVGTextIndentLevelStyles : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IVGTextIndentLevelStylePtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IUnknownPtr Get_NewEnum ( );
    IVGTextIndentLevelStylePtr GetItem (
        long Index );
    long GetCount ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * pVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IVGTextIndentLevelStyle * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pVal ) = 0;
};

struct __declspec(uuid("b05800df-9aa4-44fd-9547-4f91eb757ac4"))
IVGTextVariableAxis : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetTag))
    long Tag;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetValue,put=PutValue))
    double Value;
    __declspec(property(get=GetMinValue))
    double MinValue;
    __declspec(property(get=GetMaxValue))
    double MaxValue;
    __declspec(property(get=GetDefaultValue))
    double DefaultValue;

    //
    // Wrapper methods for error-handling
    //

    long GetTag ( );
    _bstr_t GetName ( );
    double GetValue ( );
    void PutValue (
        double pVal );
    double GetMinValue ( );
    double GetMaxValue ( );
    double GetDefaultValue ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Tag (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_Value (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Value (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_MinValue (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_MaxValue (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_DefaultValue (
        /*[out,retval]*/ double * pVal ) = 0;
};

struct __declspec(uuid("b05800de-9aa4-44fd-9547-4f91eb757ac4"))
IVGTextVariableAxes : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IVGTextVariableAxisPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IUnknownPtr Get_NewEnum ( );
    IVGTextVariableAxisPtr GetItem (
        long Index );
    long GetCount ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * pVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IVGTextVariableAxis * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pVal ) = 0;
};

struct __declspec(uuid("b058003f-9aa4-44fd-9547-4f91eb757ac4"))
IVGGuide : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetType))
    enum cdrGuideType Type;
    __declspec(property(get=GetPreset))
    VARIANT_BOOL Preset;
    __declspec(property(get=GetPoint1X))
    double Point1X;
    __declspec(property(get=GetPoint1Y))
    double Point1Y;
    __declspec(property(get=GetPoint2X))
    double Point2X;
    __declspec(property(get=GetPoint2Y))
    double Point2Y;
    __declspec(property(get=GetAngle))
    double Angle;
    __declspec(property(get=GetInterceptX))
    double InterceptX;
    __declspec(property(get=GetInterceptY))
    double InterceptY;
    __declspec(property(get=GetCenterX))
    double CenterX;
    __declspec(property(get=GetCenterY))
    double CenterY;

    //
    // Wrapper methods for error-handling
    //

    enum cdrGuideType GetType ( );
    VARIANT_BOOL GetPreset ( );
    HRESULT MakeEditable ( );
    double GetPoint1X ( );
    double GetPoint1Y ( );
    double GetPoint2X ( );
    double GetPoint2Y ( );
    double GetAngle ( );
    HRESULT GetPoints (
        double * Point1X,
        double * Point1Y,
        double * Point2X,
        double * Point2Y );
    HRESULT GetPointAndAngle (
        double * PointX,
        double * PointY,
        double * Angle );
    HRESULT SetPoints (
        double Point1X,
        double Point1Y,
        double Point2X,
        double Point2Y );
    HRESULT SetPointAndAngle (
        double PointX,
        double PointY,
        double Angle );
    double GetInterceptX ( );
    double GetInterceptY ( );
    double GetCenterX ( );
    double GetCenterY ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum cdrGuideType * pVal ) = 0;
      virtual HRESULT __stdcall get_Preset (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_MakeEditable ( ) = 0;
      virtual HRESULT __stdcall get_Point1X (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_Point1Y (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_Point2X (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_Point2Y (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_Angle (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetPoints (
        /*[out]*/ double * Point1X,
        /*[out]*/ double * Point1Y,
        /*[out]*/ double * Point2X,
        /*[out]*/ double * Point2Y ) = 0;
      virtual HRESULT __stdcall raw_GetPointAndAngle (
        /*[out]*/ double * PointX,
        /*[out]*/ double * PointY,
        /*[out]*/ double * Angle ) = 0;
      virtual HRESULT __stdcall raw_SetPoints (
        /*[in]*/ double Point1X,
        /*[in]*/ double Point1Y,
        /*[in]*/ double Point2X,
        /*[in]*/ double Point2Y ) = 0;
      virtual HRESULT __stdcall raw_SetPointAndAngle (
        /*[in]*/ double PointX,
        /*[in]*/ double PointY,
        /*[in]*/ double Angle ) = 0;
      virtual HRESULT __stdcall get_InterceptX (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_InterceptY (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_CenterX (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_CenterY (
        /*[out,retval]*/ double * pVal ) = 0;
};

struct __declspec(uuid("b058007e-9aa4-44fd-9547-4f91eb757ac4"))
IVGURL : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetAddress,put=PutAddress))
    _bstr_t Address;
    __declspec(property(get=GetTargetFrame,put=PutTargetFrame))
    _bstr_t TargetFrame;
    __declspec(property(get=GetAltComment,put=PutAltComment))
    _bstr_t AltComment;
    __declspec(property(get=GetBookMark,put=PutBookMark))
    _bstr_t BookMark;
    __declspec(property(get=GetRegion,put=PutRegion))
    enum cdrURLRegion Region;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetAddress ( );
    void PutAddress (
        _bstr_t pVal );
    _bstr_t GetTargetFrame ( );
    void PutTargetFrame (
        _bstr_t pVal );
    _bstr_t GetAltComment ( );
    void PutAltComment (
        _bstr_t pVal );
    _bstr_t GetBookMark ( );
    void PutBookMark (
        _bstr_t pVal );
    enum cdrURLRegion GetRegion ( );
    void PutRegion (
        enum cdrURLRegion pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Address (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Address (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TargetFrame (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TargetFrame (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_AltComment (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_AltComment (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_BookMark (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_BookMark (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Region (
        /*[out,retval]*/ enum cdrURLRegion * pVal ) = 0;
      virtual HRESULT __stdcall put_Region (
        /*[in]*/ enum cdrURLRegion pVal ) = 0;
};

struct __declspec(uuid("b058001c-9aa4-44fd-9547-4f91eb757ac4"))
IVGCustomShape : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetTypeID))
    _bstr_t TypeID;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetTypeID ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_TypeID (
        /*[out,retval]*/ BSTR * pVal ) = 0;
};

struct __declspec(uuid("b0580088-9aa4-44fd-9547-4f91eb757ac4"))
IVGOLE : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetClassID))
    _bstr_t ClassID;
    __declspec(property(get=GetProgID))
    _bstr_t ProgID;
    __declspec(property(get=GetType))
    enum cdrOLEType Type;
    __declspec(property(get=GetFullName))
    _bstr_t FullName;
    __declspec(property(get=GetShortName))
    _bstr_t ShortName;
    __declspec(property(get=GetServerName))
    _bstr_t ServerName;
    __declspec(property(get=GetModified))
    VARIANT_BOOL Modified;
    __declspec(property(get=GetIsInPlaceActive))
    VARIANT_BOOL IsInPlaceActive;
    __declspec(property(get=GetIsOpen))
    VARIANT_BOOL IsOpen;
    __declspec(property(get=GetIsServerRunning))
    VARIANT_BOOL IsServerRunning;
    __declspec(property(get=GetInPlaceWindowHandle))
    long InPlaceWindowHandle;
    __declspec(property(get=GetIsLinkUpToDate))
    VARIANT_BOOL IsLinkUpToDate;
    __declspec(property(get=GetLinkPath))
    _bstr_t LinkPath;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetClassID ( );
    _bstr_t GetProgID ( );
    enum cdrOLEType GetType ( );
    _bstr_t GetFullName ( );
    _bstr_t GetShortName ( );
    _bstr_t GetServerName ( );
    VARIANT_BOOL GetModified ( );
    VARIANT_BOOL GetIsInPlaceActive ( );
    VARIANT_BOOL GetIsOpen ( );
    VARIANT_BOOL GetIsServerRunning ( );
    long GetInPlaceWindowHandle ( );
    HRESULT Edit ( );
    HRESULT Open ( );
    HRESULT Activate ( );
    HRESULT Deactivate ( );
    HRESULT DoVerb (
        long VerbID );
    VARIANT_BOOL GetIsLinkUpToDate ( );
    _bstr_t GetLinkPath ( );
    HRESULT UpdateLink ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ClassID (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_ProgID (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum cdrOLEType * pVal ) = 0;
      virtual HRESULT __stdcall get_FullName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_ShortName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_ServerName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_Modified (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_IsInPlaceActive (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_IsOpen (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_IsServerRunning (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_InPlaceWindowHandle (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_Edit ( ) = 0;
      virtual HRESULT __stdcall raw_Open ( ) = 0;
      virtual HRESULT __stdcall raw_Activate ( ) = 0;
      virtual HRESULT __stdcall raw_Deactivate ( ) = 0;
      virtual HRESULT __stdcall raw_DoVerb (
        /*[in]*/ long VerbID ) = 0;
      virtual HRESULT __stdcall get_IsLinkUpToDate (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_LinkPath (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall raw_UpdateLink ( ) = 0;
};

struct __declspec(uuid("b05800ae-9aa4-44fd-9547-4f91eb757ac4"))
IVGBSplineControlPoint : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Getx,put=Putx))
    double x;
    __declspec(property(get=Gety,put=Puty))
    double y;
    __declspec(property(get=GetClamped,put=PutClamped))
    VARIANT_BOOL Clamped;
    __declspec(property(get=GetIndex))
    long Index;

    //
    // Wrapper methods for error-handling
    //

    double Getx ( );
    void Putx (
        double pVal );
    double Gety ( );
    void Puty (
        double pVal );
    VARIANT_BOOL GetClamped ( );
    void PutClamped (
        VARIANT_BOOL pVal );
    HRESULT Move (
        double x,
        double y );
    HRESULT Delete ( );
    HRESULT GetPosition (
        double * x,
        double * y );
    HRESULT SetPosition (
        double x,
        double y );
    HRESULT SetProperties (
        double x,
        double y,
        VARIANT_BOOL Clamped );
    long GetIndex ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_x (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_x (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_y (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_y (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Clamped (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_Clamped (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall raw_Move (
        /*[in]*/ double x,
        /*[in]*/ double y ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall raw_GetPosition (
        /*[out]*/ double * x,
        /*[out]*/ double * y ) = 0;
      virtual HRESULT __stdcall raw_SetPosition (
        /*[in]*/ double x,
        /*[in]*/ double y ) = 0;
      virtual HRESULT __stdcall raw_SetProperties (
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[in]*/ VARIANT_BOOL Clamped ) = 0;
      virtual HRESULT __stdcall get_Index (
        /*[out,retval]*/ long * pVal ) = 0;
};

struct __declspec(uuid("b05800af-9aa4-44fd-9547-4f91eb757ac4"))
IVGBSplineControlPoints : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetFirst))
    IVGBSplineControlPointPtr First;
    __declspec(property(get=GetLast))
    IVGBSplineControlPointPtr Last;
    __declspec(property(get=GetItem))
    IVGBSplineControlPointPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IVGBSplineControlPointPtr GetFirst ( );
    IVGBSplineControlPointPtr GetLast ( );
    IVGBSplineControlPointPtr GetItem (
        long Index );
    long GetCount ( );
    IUnknownPtr Get_NewEnum ( );
    HRESULT Resize (
        long HowMany );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_First (
        /*[out,retval]*/ struct IVGBSplineControlPoint * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Last (
        /*[out,retval]*/ struct IVGBSplineControlPoint * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IVGBSplineControlPoint * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * pVal ) = 0;
      virtual HRESULT __stdcall raw_Resize (
        /*[in]*/ long HowMany ) = 0;
};

struct __declspec(uuid("b05800ad-9aa4-44fd-9547-4f91eb757ac4"))
IVGBSpline : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetControlPoints))
    IVGBSplineControlPointsPtr ControlPoints;
    __declspec(property(get=GetClosed,put=PutClosed))
    VARIANT_BOOL Closed;

    //
    // Wrapper methods for error-handling
    //

    IVGBSplineControlPointsPtr GetControlPoints ( );
    VARIANT_BOOL GetClosed ( );
    void PutClosed (
        VARIANT_BOOL pVal );
    HRESULT InsertControlPoint (
        long Index,
        double x,
        double y,
        VARIANT_BOOL Clamped );
    HRESULT InsertControlPoints (
        long Index,
        long HowMany,
        double x,
        double y,
        VARIANT_BOOL Clamped );
    IVGBSplinePtr GetCopy ( );
    HRESULT CopyAssign (
        struct IVGBSpline * rhs );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ControlPoints (
        /*[out,retval]*/ struct IVGBSplineControlPoints * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Closed (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_Closed (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall raw_InsertControlPoint (
        /*[in]*/ long Index,
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[in]*/ VARIANT_BOOL Clamped ) = 0;
      virtual HRESULT __stdcall raw_InsertControlPoints (
        /*[in]*/ long Index,
        /*[in]*/ long HowMany,
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[in]*/ VARIANT_BOOL Clamped ) = 0;
      virtual HRESULT __stdcall raw_GetCopy (
        /*[out,retval]*/ struct IVGBSpline * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_CopyAssign (
        /*[in]*/ struct IVGBSpline * rhs ) = 0;
};

struct __declspec(uuid("b0580087-9aa4-44fd-9547-4f91eb757ac4"))
IStructImportCropOptions : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetFileName))
    _bstr_t FileName;
    __declspec(property(get=GetFilterID))
    long FilterID;
    __declspec(property(get=GetCustomData))
    long CustomData;
    __declspec(property(get=GetImageWidth))
    long ImageWidth;
    __declspec(property(get=GetImageHeight))
    long ImageHeight;
    __declspec(property(get=GetDpiX))
    long DpiX;
    __declspec(property(get=GetDpiY))
    long DpiY;
    __declspec(property(get=GetWidth,put=PutWidth))
    long Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    long Height;
    __declspec(property(get=GetLeft,put=PutLeft))
    long Left;
    __declspec(property(get=GetTop,put=PutTop))
    long Top;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetFileName ( );
    long GetFilterID ( );
    long GetCustomData ( );
    long GetImageWidth ( );
    long GetImageHeight ( );
    long GetDpiX ( );
    long GetDpiY ( );
    long GetWidth ( );
    void PutWidth (
        long pVal );
    long GetHeight ( );
    void PutHeight (
        long pVal );
    long GetLeft ( );
    void PutLeft (
        long pVal );
    long GetTop ( );
    void PutTop (
        long pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_FileName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_FilterID (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_CustomData (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_ImageWidth (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_ImageHeight (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_DpiX (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_DpiY (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ long pVal ) = 0;
};

struct __declspec(uuid("f5200005-8d23-0001-89e7-0000861ebbd6"))
IImportCropHandler : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL Crop (
        struct IStructImportCropOptions * Options );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Crop (
        /*[in]*/ struct IStructImportCropOptions * Options,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
};

struct __declspec(uuid("b0580086-9aa4-44fd-9547-4f91eb757ac4"))
IStructImportResampleOptions : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetFileName))
    _bstr_t FileName;
    __declspec(property(get=GetFilterID))
    long FilterID;
    __declspec(property(get=GetCustomData))
    long CustomData;
    __declspec(property(get=GetWidth,put=PutWidth))
    long Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    long Height;
    __declspec(property(get=GetDpiX,put=PutDpiX))
    long DpiX;
    __declspec(property(get=GetDpiY,put=PutDpiY))
    long DpiY;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetFileName ( );
    long GetFilterID ( );
    long GetCustomData ( );
    long GetWidth ( );
    void PutWidth (
        long pVal );
    long GetHeight ( );
    void PutHeight (
        long pVal );
    long GetDpiX ( );
    void PutDpiX (
        long pVal );
    long GetDpiY ( );
    void PutDpiY (
        long pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_FileName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_FilterID (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_CustomData (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_DpiX (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_DpiX (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_DpiY (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_DpiY (
        /*[in]*/ long pVal ) = 0;
};

struct __declspec(uuid("f5200004-8d23-0001-89e7-0000861ebbd6"))
IImportResampleHandler : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL Resample (
        struct IStructImportResampleOptions * Options );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Resample (
        /*[in]*/ struct IStructImportResampleOptions * Options,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
};

struct __declspec(uuid("b05800b1-9aa4-44fd-9547-4f91eb757ac4"))
IVGColorManagementPolicy : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetActionForRGB,put=PutActionForRGB))
    enum clrColorPolicyAction ActionForRGB;
    __declspec(property(get=GetActionForCMYK,put=PutActionForCMYK))
    enum clrColorPolicyAction ActionForCMYK;
    __declspec(property(get=GetActionForGrayscale,put=PutActionForGrayscale))
    enum clrColorPolicyAction ActionForGrayscale;
    __declspec(property(get=GetWarnOnMismatchedProfiles,put=PutWarnOnMismatchedProfiles))
    VARIANT_BOOL WarnOnMismatchedProfiles;
    __declspec(property(get=GetWarnOnMissingProfiles,put=PutWarnOnMissingProfiles))
    VARIANT_BOOL WarnOnMissingProfiles;

    //
    // Wrapper methods for error-handling
    //

    enum clrColorPolicyAction GetActionForRGB ( );
    void PutActionForRGB (
        enum clrColorPolicyAction pVal );
    enum clrColorPolicyAction GetActionForCMYK ( );
    void PutActionForCMYK (
        enum clrColorPolicyAction pVal );
    enum clrColorPolicyAction GetActionForGrayscale ( );
    void PutActionForGrayscale (
        enum clrColorPolicyAction pVal );
    VARIANT_BOOL GetWarnOnMismatchedProfiles ( );
    void PutWarnOnMismatchedProfiles (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetWarnOnMissingProfiles ( );
    void PutWarnOnMissingProfiles (
        VARIANT_BOOL pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ActionForRGB (
        /*[out,retval]*/ enum clrColorPolicyAction * pVal ) = 0;
      virtual HRESULT __stdcall put_ActionForRGB (
        /*[in]*/ enum clrColorPolicyAction pVal ) = 0;
      virtual HRESULT __stdcall get_ActionForCMYK (
        /*[out,retval]*/ enum clrColorPolicyAction * pVal ) = 0;
      virtual HRESULT __stdcall put_ActionForCMYK (
        /*[in]*/ enum clrColorPolicyAction pVal ) = 0;
      virtual HRESULT __stdcall get_ActionForGrayscale (
        /*[out,retval]*/ enum clrColorPolicyAction * pVal ) = 0;
      virtual HRESULT __stdcall put_ActionForGrayscale (
        /*[in]*/ enum clrColorPolicyAction pVal ) = 0;
      virtual HRESULT __stdcall get_WarnOnMismatchedProfiles (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_WarnOnMismatchedProfiles (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_WarnOnMissingProfiles (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_WarnOnMissingProfiles (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
};

struct __declspec(uuid("7cb12d17-eca6-0e87-46f7-e4d31c0d0500"))
IColorConversionHandler : IDispatch
{};

struct __declspec(uuid("b05800b2-9aa4-44fd-9547-4f91eb757ac4"))
IVGStructColorConversionOptions : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetColorPolicy))
    IVGColorManagementPolicyPtr ColorPolicy;
    __declspec(property(get=GetSourceColorProfileList,put=PutSourceColorProfileList))
    _bstr_t SourceColorProfileList;
    __declspec(property(get=GetTargetColorProfileList,put=PutTargetColorProfileList))
    _bstr_t TargetColorProfileList;

    //
    // Wrapper methods for error-handling
    //

    IVGColorManagementPolicyPtr GetColorPolicy ( );
    _bstr_t GetSourceColorProfileList ( );
    void PutSourceColorProfileList (
        _bstr_t pVal );
    _bstr_t GetTargetColorProfileList ( );
    void PutTargetColorProfileList (
        _bstr_t pVal );
    IColorConversionHandlerPtr GetColorConversionHandler ( );
    void PutRefColorConversionHandler (
        struct IColorConversionHandler * * ppVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ColorPolicy (
        /*[out,retval]*/ struct IVGColorManagementPolicy * * ppVal ) = 0;
      virtual HRESULT __stdcall get_SourceColorProfileList (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_SourceColorProfileList (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TargetColorProfileList (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TargetColorProfileList (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ColorConversionHandler (
        /*[out,retval]*/ struct IColorConversionHandler * * ppVal ) = 0;
      virtual HRESULT __stdcall putref_ColorConversionHandler (
        /*[in]*/ struct IColorConversionHandler * * ppVal ) = 0;
};

struct __declspec(uuid("b0580085-9aa4-44fd-9547-4f91eb757ac4"))
IVGStructImportOptions : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetLinkBitmapExternally,put=PutLinkBitmapExternally))
    VARIANT_BOOL LinkBitmapExternally;
    __declspec(property(get=GetResampleDpiY,put=PutResampleDpiY))
    long ResampleDpiY;
    __declspec(property(get=GetCombineMultilayerBitmaps,put=PutCombineMultilayerBitmaps))
    VARIANT_BOOL CombineMultilayerBitmaps;
    __declspec(property(get=GetForceCMYKBlackText,put=PutForceCMYKBlackText))
    VARIANT_BOOL ForceCMYKBlackText;
    __declspec(property(get=GetExtractICCProfile,put=PutExtractICCProfile))
    VARIANT_BOOL ExtractICCProfile;
    __declspec(property(get=GetConvertTablesToText,put=PutConvertTablesToText))
    VARIANT_BOOL ConvertTablesToText;
    __declspec(property(get=GetICCFileName,put=PutICCFileName))
    _bstr_t ICCFileName;
    __declspec(property(get=GetTableColumnDelimiter,put=PutTableColumnDelimiter))
    _bstr_t TableColumnDelimiter;
    __declspec(property(get=GetMaintainLayers,put=PutMaintainLayers))
    VARIANT_BOOL MaintainLayers;
    __declspec(property(get=GetColorConversionOptions))
    IVGStructColorConversionOptionsPtr ColorConversionOptions;
    __declspec(property(get=GetUseOPILinks,put=PutUseOPILinks))
    VARIANT_BOOL UseOPILinks;
    __declspec(property(get=GetDetectWatermark,put=PutDetectWatermark))
    VARIANT_BOOL DetectWatermark;
    __declspec(property(get=GetMode,put=PutMode))
    enum cdrImportMode Mode;
    __declspec(property(get=GetCustomData,put=PutCustomData))
    long CustomData;
    __declspec(property(get=GetImageIndex,put=PutImageIndex))
    long ImageIndex;
    __declspec(property(get=GetTextFormatting,put=PutTextFormatting))
    enum cdrImportTextFormatting TextFormatting;
    __declspec(property(get=GetTableOutline,put=PutTableOutline))
    enum cdrImportTableOutline TableOutline;
    __declspec(property(get=GetCodePage,put=PutCodePage))
    long CodePage;
    __declspec(property(get=GetResampleWidth,put=PutResampleWidth))
    long ResampleWidth;
    __declspec(property(get=GetResampleHeight,put=PutResampleHeight))
    long ResampleHeight;
    __declspec(property(get=GetCropLeft,put=PutCropLeft))
    long CropLeft;
    __declspec(property(get=GetCropTop,put=PutCropTop))
    long CropTop;
    __declspec(property(get=GetCropWidth,put=PutCropWidth))
    long CropWidth;
    __declspec(property(get=GetCropHeight,put=PutCropHeight))
    long CropHeight;
    __declspec(property(get=GetResampleDpiX,put=PutResampleDpiX))
    long ResampleDpiX;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetLinkBitmapExternally ( );
    void PutLinkBitmapExternally (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetCombineMultilayerBitmaps ( );
    void PutCombineMultilayerBitmaps (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetExtractICCProfile ( );
    void PutExtractICCProfile (
        VARIANT_BOOL pVal );
    _bstr_t GetICCFileName ( );
    void PutICCFileName (
        _bstr_t pVal );
    VARIANT_BOOL GetMaintainLayers ( );
    void PutMaintainLayers (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetUseOPILinks ( );
    void PutUseOPILinks (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetDetectWatermark ( );
    void PutDetectWatermark (
        VARIANT_BOOL pVal );
    enum cdrImportMode GetMode ( );
    void PutMode (
        enum cdrImportMode pVal );
    long GetCustomData ( );
    void PutCustomData (
        long pVal );
    long GetImageIndex ( );
    void PutImageIndex (
        long pVal );
    IImportCropHandlerPtr GetCropHandler ( );
    void PutRefCropHandler (
        struct IImportCropHandler * * ppVal );
    IImportResampleHandlerPtr GetResampleHandler ( );
    void PutRefResampleHandler (
        struct IImportResampleHandler * * ppVal );
    enum cdrImportTextFormatting GetTextFormatting ( );
    void PutTextFormatting (
        enum cdrImportTextFormatting pVal );
    enum cdrImportTableOutline GetTableOutline ( );
    void PutTableOutline (
        enum cdrImportTableOutline pVal );
    long GetCodePage ( );
    void PutCodePage (
        long pVal );
    long GetResampleWidth ( );
    void PutResampleWidth (
        long pVal );
    long GetResampleHeight ( );
    void PutResampleHeight (
        long pVal );
    long GetCropLeft ( );
    void PutCropLeft (
        long pVal );
    long GetCropTop ( );
    void PutCropTop (
        long pVal );
    long GetCropWidth ( );
    void PutCropWidth (
        long pVal );
    long GetCropHeight ( );
    void PutCropHeight (
        long pVal );
    long GetResampleDpiX ( );
    void PutResampleDpiX (
        long pVal );
    long GetResampleDpiY ( );
    void PutResampleDpiY (
        long pVal );
    VARIANT_BOOL GetForceCMYKBlackText ( );
    void PutForceCMYKBlackText (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetConvertTablesToText ( );
    void PutConvertTablesToText (
        VARIANT_BOOL pVal );
    _bstr_t GetTableColumnDelimiter ( );
    void PutTableColumnDelimiter (
        _bstr_t pVal );
    IVGStructColorConversionOptionsPtr GetColorConversionOptions ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_LinkBitmapExternally (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_LinkBitmapExternally (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_CombineMultilayerBitmaps (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_CombineMultilayerBitmaps (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_ExtractICCProfile (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_ExtractICCProfile (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_ICCFileName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ICCFileName (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_MaintainLayers (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_MaintainLayers (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_UseOPILinks (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_UseOPILinks (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_DetectWatermark (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_DetectWatermark (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Mode (
        /*[out,retval]*/ enum cdrImportMode * pVal ) = 0;
      virtual HRESULT __stdcall put_Mode (
        /*[in]*/ enum cdrImportMode pVal ) = 0;
      virtual HRESULT __stdcall get_CustomData (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_CustomData (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_ImageIndex (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_ImageIndex (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_CropHandler (
        /*[out,retval]*/ struct IImportCropHandler * * ppVal ) = 0;
      virtual HRESULT __stdcall putref_CropHandler (
        /*[in]*/ struct IImportCropHandler * * ppVal ) = 0;
      virtual HRESULT __stdcall get_ResampleHandler (
        /*[out,retval]*/ struct IImportResampleHandler * * ppVal ) = 0;
      virtual HRESULT __stdcall putref_ResampleHandler (
        /*[in]*/ struct IImportResampleHandler * * ppVal ) = 0;
      virtual HRESULT __stdcall get_TextFormatting (
        /*[out,retval]*/ enum cdrImportTextFormatting * pVal ) = 0;
      virtual HRESULT __stdcall put_TextFormatting (
        /*[in]*/ enum cdrImportTextFormatting pVal ) = 0;
      virtual HRESULT __stdcall get_TableOutline (
        /*[out,retval]*/ enum cdrImportTableOutline * pVal ) = 0;
      virtual HRESULT __stdcall put_TableOutline (
        /*[in]*/ enum cdrImportTableOutline pVal ) = 0;
      virtual HRESULT __stdcall get_CodePage (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_CodePage (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_ResampleWidth (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_ResampleWidth (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_ResampleHeight (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_ResampleHeight (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_CropLeft (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_CropLeft (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_CropTop (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_CropTop (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_CropWidth (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_CropWidth (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_CropHeight (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_CropHeight (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_ResampleDpiX (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_ResampleDpiX (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_ResampleDpiY (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_ResampleDpiY (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_ForceCMYKBlackText (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_ForceCMYKBlackText (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_ConvertTablesToText (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_ConvertTablesToText (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_TableColumnDelimiter (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TableColumnDelimiter (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ColorConversionOptions (
        /*[out,retval]*/ struct IVGStructColorConversionOptions * * ppVal ) = 0;
};

struct __declspec(uuid("b05800b5-9aa4-44fd-9547-4f91eb757ac4"))
IVGStructPasteOptions : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetColorConversionOptions))
    IVGStructColorConversionOptionsPtr ColorConversionOptions;

    //
    // Wrapper methods for error-handling
    //

    IVGStructColorConversionOptionsPtr GetColorConversionOptions ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ColorConversionOptions (
        /*[out,retval]*/ struct IVGStructColorConversionOptions * * ppVal ) = 0;
};

struct __declspec(uuid("b05800e1-9aa4-44fd-9547-4f91eb757ac4"))
IVGCommentAuthor : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetEmail))
    _bstr_t Email;
    __declspec(property(get=GetAvatar))
    _bstr_t Avatar;
    __declspec(property(get=GetAuthentication))
    enum cdrAuthorAuthentication Authentication;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetOnlineID,put=PutOnlineID))
    _bstr_t OnlineID;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetEmail ( );
    _bstr_t GetAvatar ( );
    enum cdrAuthorAuthentication GetAuthentication ( );
    _bstr_t GetName ( );
    _bstr_t GetOnlineID ( );
    void PutOnlineID (
        _bstr_t pRet );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Email (
        /*[out,retval]*/ BSTR * pRet ) = 0;
      virtual HRESULT __stdcall get_Avatar (
        /*[out,retval]*/ BSTR * pRet ) = 0;
      virtual HRESULT __stdcall get_Authentication (
        /*[out,retval]*/ enum cdrAuthorAuthentication * pRet ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pRet ) = 0;
      virtual HRESULT __stdcall get_OnlineID (
        /*[out,retval]*/ BSTR * pRet ) = 0;
      virtual HRESULT __stdcall put_OnlineID (
        /*[in]*/ BSTR pRet ) = 0;
};

struct __declspec(uuid("b0580000-9aa4-44fd-9547-4f91eb757ac4"))
ICorelScriptTools : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    double AngleConvert (
        long FromUnit,
        long ToUnit,
        double Value );
    double ASin (
        double Value );
    HRESULT BeginWaitCursor ( );
    HRESULT EndWaitCursor ( );
    DATE BuildDate (
        long Year,
        long Month,
        long Day );
    DATE BuildTime (
        long Hour,
        long Minute,
        long Second );
    long Dec (
        _bstr_t Hex );
    long FileAttr (
        _bstr_t FolderFile );
    _bstr_t FindFirstFolder (
        _bstr_t SearchCriteria,
        long Attributes );
    _bstr_t FindNextFolder ( );
    _bstr_t FormatTime (
        DATE Time,
        _bstr_t Format );
    double FromCentimeters (
        double Value );
    double FromCiceros (
        double Value );
    double FromDidots (
        double Value );
    double FromInches (
        double Value );
    double FromPicas (
        double Value );
    double FromPoints (
        double Value );
    long GetAppHandle ( );
    VARIANT_BOOL GetColor (
        long * Red,
        long * Green,
        long * Blue );
    _bstr_t GetCommandLine ( );
    _bstr_t GetCurrFolder ( );
    HRESULT GetDateInfo (
        DATE Date,
        long * Year,
        long * Month,
        long * Day,
        long * DayOfWeek );
    _bstr_t GetFileBox (
        _bstr_t Filter,
        _bstr_t Title,
        long Type,
        _bstr_t File,
        _bstr_t Extension,
        _bstr_t Folder,
        _bstr_t Button );
    _bstr_t GetFolder (
        _bstr_t InitFolder,
        _bstr_t Title,
        long ParentWindowHandle );
    VARIANT_BOOL GetFont (
        BSTR * FaceName,
        long * PointSize,
        long * Weight,
        VARIANT_BOOL * Italic,
        VARIANT_BOOL * Underline,
        VARIANT_BOOL * StrikeOut,
        long * Red,
        long * Green,
        long * Blue );
    long GetProcessInfo (
        long ProcessHandle );
    _bstr_t GetScriptFolder ( );
    _bstr_t GetTempFolder ( );
    HRESULT GetTimeInfo (
        DATE Time,
        long * Hour,
        long * Minute,
        long * Second );
    long GetType (
        const _variant_t & Expression );
    long GetVersion (
        long Option );
    long GetWinHandle ( );
    VARIANT_BOOL Kill (
        _bstr_t FileName );
    double LengthConvert (
        long FromUnit,
        long ToUnit,
        double Value );
    double Log (
        double Value );
    VARIANT_BOOL MkFolder (
        _bstr_t Folder );
    _variant_t RegistryQuery (
        long MainKey,
        _bstr_t SubKey,
        _bstr_t Value );
    VARIANT_BOOL Rename (
        _bstr_t Src,
        _bstr_t Dst,
        long Overwrite );
    VARIANT_BOOL RmFolder (
        _bstr_t Folder );
    double ToCentimeters (
        double Value );
    double ToCiceros (
        double Value );
    double ToDidots (
        double Value );
    double ToInches (
        double Value );
    double ToPicas (
        double Value );
    double ToPoints (
        double Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_AngleConvert (
        /*[in]*/ long FromUnit,
        /*[in]*/ long ToUnit,
        /*[in]*/ double Value,
        /*[out,retval]*/ double * Result ) = 0;
      virtual HRESULT __stdcall raw_ASin (
        /*[in]*/ double Value,
        /*[out,retval]*/ double * Result ) = 0;
      virtual HRESULT __stdcall raw_BeginWaitCursor ( ) = 0;
      virtual HRESULT __stdcall raw_EndWaitCursor ( ) = 0;
      virtual HRESULT __stdcall raw_BuildDate (
        /*[in]*/ long Year,
        /*[in]*/ long Month,
        /*[in]*/ long Day,
        /*[out,retval]*/ DATE * pVal ) = 0;
      virtual HRESULT __stdcall raw_BuildTime (
        /*[in]*/ long Hour,
        /*[in]*/ long Minute,
        /*[in]*/ long Second,
        /*[out,retval]*/ DATE * pVal ) = 0;
      virtual HRESULT __stdcall raw_Dec (
        /*[in]*/ BSTR Hex,
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_FileAttr (
        /*[in]*/ BSTR FolderFile,
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_FindFirstFolder (
        /*[in]*/ BSTR SearchCriteria,
        /*[in]*/ long Attributes,
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall raw_FindNextFolder (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall raw_FormatTime (
        /*[in]*/ DATE Time,
        /*[in]*/ BSTR Format,
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall raw_FromCentimeters (
        /*[in]*/ double Value,
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall raw_FromCiceros (
        /*[in]*/ double Value,
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall raw_FromDidots (
        /*[in]*/ double Value,
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall raw_FromInches (
        /*[in]*/ double Value,
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall raw_FromPicas (
        /*[in]*/ double Value,
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall raw_FromPoints (
        /*[in]*/ double Value,
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetAppHandle (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetColor (
        /*[in,out]*/ long * Red,
        /*[in,out]*/ long * Green,
        /*[in,out]*/ long * Blue,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetCommandLine (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetCurrFolder (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetDateInfo (
        /*[in]*/ DATE Date,
        /*[out]*/ long * Year,
        /*[out]*/ long * Month,
        /*[out]*/ long * Day,
        /*[out]*/ long * DayOfWeek ) = 0;
      virtual HRESULT __stdcall raw_GetFileBox (
        /*[in]*/ BSTR Filter,
        /*[in]*/ BSTR Title,
        /*[in]*/ long Type,
        /*[in]*/ BSTR File,
        /*[in]*/ BSTR Extension,
        /*[in]*/ BSTR Folder,
        /*[in]*/ BSTR Button,
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetFolder (
        /*[in]*/ BSTR InitFolder,
        /*[in]*/ BSTR Title,
        /*[in]*/ long ParentWindowHandle,
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetFont (
        /*[in,out]*/ BSTR * FaceName,
        /*[in,out]*/ long * PointSize,
        /*[in,out]*/ long * Weight,
        /*[in,out]*/ VARIANT_BOOL * Italic,
        /*[in,out]*/ VARIANT_BOOL * Underline,
        /*[in,out]*/ VARIANT_BOOL * StrikeOut,
        /*[in,out]*/ long * Red,
        /*[in,out]*/ long * Green,
        /*[in,out]*/ long * Blue,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetProcessInfo (
        /*[in]*/ long ProcessHandle,
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetScriptFolder (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetTempFolder (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetTimeInfo (
        /*[in]*/ DATE Time,
        /*[out]*/ long * Hour,
        /*[out]*/ long * Minute,
        /*[out]*/ long * Second ) = 0;
      virtual HRESULT __stdcall raw_GetType (
        /*[in]*/ VARIANT Expression,
        /*[out,retval]*/ long * Type ) = 0;
      virtual HRESULT __stdcall raw_GetVersion (
        /*[in]*/ long Option,
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetWinHandle (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_Kill (
        /*[in]*/ BSTR FileName,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_LengthConvert (
        /*[in]*/ long FromUnit,
        /*[in]*/ long ToUnit,
        /*[in]*/ double Value,
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall raw_Log (
        /*[in]*/ double Value,
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall raw_MkFolder (
        /*[in]*/ BSTR Folder,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_RegistryQuery (
        /*[in]*/ long MainKey,
        /*[in]*/ BSTR SubKey,
        /*[in]*/ BSTR Value,
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall raw_Rename (
        /*[in]*/ BSTR Src,
        /*[in]*/ BSTR Dst,
        /*[in]*/ long Overwrite,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_RmFolder (
        /*[in]*/ BSTR Folder,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_ToCentimeters (
        /*[in]*/ double Value,
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall raw_ToCiceros (
        /*[in]*/ double Value,
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall raw_ToDidots (
        /*[in]*/ double Value,
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall raw_ToInches (
        /*[in]*/ double Value,
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall raw_ToPicas (
        /*[in]*/ double Value,
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall raw_ToPoints (
        /*[in]*/ double Value,
        /*[out,retval]*/ double * pVal ) = 0;
};

struct __declspec(uuid("b0580039-9aa4-44fd-9547-4f91eb757ac4"))
IVGFontList : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    IDispatchPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetItem))
    _bstr_t Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetItem (
        long Index );
    IUnknownPtr Get_NewEnum ( );
    long GetCount ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ IDispatch * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * pVal ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pVal ) = 0;
};

struct __declspec(uuid("b058000c-9aa4-44fd-9547-4f91eb757ac4"))
IVGAppWindow : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    IDispatchPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetActive))
    VARIANT_BOOL Active;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetHeight,put=PutHeight))
    long Height;
    __declspec(property(get=GetWidth,put=PutWidth))
    long Width;
    __declspec(property(get=GetLeft,put=PutLeft))
    long Left;
    __declspec(property(get=GetTop,put=PutTop))
    long Top;
    __declspec(property(get=GetWindowState,put=PutWindowState))
    enum cdrWindowState WindowState;
    __declspec(property(get=GetClientWidth))
    long ClientWidth;
    __declspec(property(get=GetClientHeight))
    long ClientHeight;
    __declspec(property(get=GetHandle))
    long Handle;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    HRESULT Activate ( );
    VARIANT_BOOL GetActive ( );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t pVal );
    long GetHeight ( );
    void PutHeight (
        long pVal );
    long GetWidth ( );
    void PutWidth (
        long pVal );
    long GetLeft ( );
    void PutLeft (
        long pVal );
    long GetTop ( );
    void PutTop (
        long pVal );
    enum cdrWindowState GetWindowState ( );
    void PutWindowState (
        enum cdrWindowState pVal );
    long GetClientWidth ( );
    long GetClientHeight ( );
    long GetHandle ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ IDispatch * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_Activate ( ) = 0;
      virtual HRESULT __stdcall get_Active (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_Caption (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Caption (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_WindowState (
        /*[out,retval]*/ enum cdrWindowState * pVal ) = 0;
      virtual HRESULT __stdcall put_WindowState (
        /*[in]*/ enum cdrWindowState pVal ) = 0;
      virtual HRESULT __stdcall get_ClientWidth (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_ClientHeight (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_Handle (
        /*[out,retval]*/ long * pVal ) = 0;
};

struct __declspec(uuid("b058004f-9aa4-44fd-9547-4f91eb757ac4"))
IVGPatternCanvases : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem,put=PutItem))
    IVGPatternCanvasPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IVGPatternCanvasPtr GetItem (
        long Index );
    void PutItem (
        long Index,
        struct IVGPatternCanvas * ppVal );
    IUnknownPtr Get_NewEnum ( );
    long GetCount ( );
    long Add (
        struct IVGPatternCanvas * PatternCanvas );
    HRESULT Remove (
        long Index );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IVGPatternCanvas * * ppVal ) = 0;
      virtual HRESULT __stdcall put_Item (
        /*[in]*/ long Index,
        /*[in]*/ struct IVGPatternCanvas * ppVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * pVal ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ struct IVGPatternCanvas * PatternCanvas,
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_Remove (
        /*[in]*/ long Index ) = 0;
};

struct __declspec(uuid("b0580010-9aa4-44fd-9547-4f91eb757ac4"))
IVGClipboard : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    IDispatchPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetValid))
    VARIANT_BOOL Valid;
    __declspec(property(get=GetEmpty))
    VARIANT_BOOL Empty;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    VARIANT_BOOL GetValid ( );
    VARIANT_BOOL GetEmpty ( );
    HRESULT Clear ( );
    VARIANT_BOOL DataPresent (
        _bstr_t FormatName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ IDispatch * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Valid (
        /*[out,retval]*/ VARIANT_BOOL * pbValid ) = 0;
      virtual HRESULT __stdcall get_Empty (
        /*[out,retval]*/ VARIANT_BOOL * pbEmpty ) = 0;
      virtual HRESULT __stdcall raw_Clear ( ) = 0;
      virtual HRESULT __stdcall raw_DataPresent (
        /*[in]*/ BSTR FormatName,
        /*[out,retval]*/ VARIANT_BOOL * pRet ) = 0;
};

struct __declspec(uuid("b058008d-9aa4-44fd-9547-4f91eb757ac4"))
IVGGMSMacro : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetName))
    _bstr_t Name;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetName ( );
    HRESULT Run ( );
    HRESULT Edit ( );
    HRESULT Delete ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall raw_Run ( ) = 0;
      virtual HRESULT __stdcall raw_Edit ( ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
};

struct __declspec(uuid("b058008c-9aa4-44fd-9547-4f91eb757ac4"))
IVGGMSMacros : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IVGGMSMacroPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IUnknownPtr Get_NewEnum ( );
    IVGGMSMacroPtr GetItem (
        const _variant_t & IndexOrName );
    long GetCount ( );
    IVGGMSMacroPtr Create (
        _bstr_t Name );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * pVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT IndexOrName,
        /*[out,retval]*/ struct IVGGMSMacro * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_Create (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ struct IVGGMSMacro * * ppVal ) = 0;
};

struct __declspec(uuid("b058008b-9aa4-44fd-9547-4f91eb757ac4"))
IVGGMSProject : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetDisplayName))
    _bstr_t DisplayName;
    __declspec(property(get=GetMacros))
    IVGGMSMacrosPtr Macros;
    __declspec(property(get=GetFileName))
    _bstr_t FileName;
    __declspec(property(get=GetFilePath))
    _bstr_t FilePath;
    __declspec(property(get=GetFullFileName))
    _bstr_t FullFileName;
    __declspec(property(get=GetDirty,put=PutDirty))
    VARIANT_BOOL Dirty;
    __declspec(property(get=GetLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetPasswordProtected))
    VARIANT_BOOL PasswordProtected;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetName ( );
    void PutName (
        _bstr_t pVal );
    _bstr_t GetDisplayName ( );
    IVGGMSMacrosPtr GetMacros ( );
    HRESULT Unload ( );
    _bstr_t GetFileName ( );
    _bstr_t GetFilePath ( );
    _bstr_t GetFullFileName ( );
    VARIANT_BOOL GetDirty ( );
    void PutDirty (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetLocked ( );
    VARIANT_BOOL GetPasswordProtected ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_DisplayName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_Macros (
        /*[out,retval]*/ struct IVGGMSMacros * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_Unload ( ) = 0;
      virtual HRESULT __stdcall get_FileName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_FilePath (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_FullFileName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_Dirty (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_Dirty (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Locked (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_PasswordProtected (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
};

struct __declspec(uuid("b058008a-9aa4-44fd-9547-4f91eb757ac4"))
IVGGMSProjects : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IVGGMSProjectPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IUnknownPtr Get_NewEnum ( );
    IVGGMSProjectPtr GetItem (
        const _variant_t & IndexOrName );
    long GetCount ( );
    IVGGMSProjectPtr Load (
        _bstr_t FileName,
        VARIANT_BOOL CopyFile,
        VARIANT_BOOL ForAllUsers );
    IVGGMSProjectPtr Create (
        _bstr_t Name,
        VARIANT_BOOL ForAllUsers,
        _bstr_t FileName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * pVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT IndexOrName,
        /*[out,retval]*/ struct IVGGMSProject * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_Load (
        /*[in]*/ BSTR FileName,
        /*[in]*/ VARIANT_BOOL CopyFile,
        /*[in]*/ VARIANT_BOOL ForAllUsers,
        /*[out,retval]*/ struct IVGGMSProject * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_Create (
        /*[in]*/ BSTR Name,
        /*[in]*/ VARIANT_BOOL ForAllUsers,
        /*[in]*/ BSTR FileName,
        /*[out,retval]*/ struct IVGGMSProject * * ppVal ) = 0;
};

struct __declspec(uuid("b058003d-9aa4-44fd-9547-4f91eb757ac4"))
IVGGMSManager : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetGMSPath))
    _bstr_t GMSPath;
    __declspec(property(get=GetUserGMSPath))
    _bstr_t UserGMSPath;
    __declspec(property(get=GetProjects))
    IVGGMSProjectsPtr Projects;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetGMSPath ( );
    _variant_t RunMacro (
        _bstr_t ModuleName,
        _bstr_t MacroName,
        SAFEARRAY * * Parameters );
    _bstr_t GetUserGMSPath ( );
    IVGGMSProjectsPtr GetProjects ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_GMSPath (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall raw_RunMacro (
        /*[in]*/ BSTR ModuleName,
        /*[in]*/ BSTR MacroName,
        /*[in,out]*/ SAFEARRAY * * Parameters,
        /*[out,retval]*/ VARIANT * ppVal ) = 0;
      virtual HRESULT __stdcall get_UserGMSPath (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_Projects (
        /*[out,retval]*/ struct IVGGMSProjects * * ppVal ) = 0;
};

struct __declspec(uuid("b0580068-9aa4-44fd-9547-4f91eb757ac4"))
IVGStructSaveAsOptions : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetFilter,put=PutFilter))
    enum cdrFilter Filter;
    __declspec(property(get=GetVersion,put=PutVersion))
    enum cdrFileVersion Version;
    __declspec(property(get=GetThumbnailSize,put=PutThumbnailSize))
    enum cdrThumbnailSize ThumbnailSize;
    __declspec(property(get=GetRange,put=PutRange))
    enum cdrExportRange Range;
    __declspec(property(get=GetOverwrite,put=PutOverwrite))
    VARIANT_BOOL Overwrite;
    __declspec(property(get=GetEmbedICCProfile,put=PutEmbedICCProfile))
    VARIANT_BOOL EmbedICCProfile;
    __declspec(property(get=GetEmbedVBAProject,put=PutEmbedVBAProject))
    VARIANT_BOOL EmbedVBAProject;
    __declspec(property(get=GetIncludeCMXData,put=PutIncludeCMXData))
    VARIANT_BOOL IncludeCMXData;
    __declspec(property(get=GetKeepAppearance,put=PutKeepAppearance))
    VARIANT_BOOL KeepAppearance;

    //
    // Wrapper methods for error-handling
    //

    void PutFilter (
        enum cdrFilter pVal );
    enum cdrFilter GetFilter ( );
    void PutVersion (
        enum cdrFileVersion pVal );
    enum cdrFileVersion GetVersion ( );
    void PutThumbnailSize (
        enum cdrThumbnailSize pVal );
    enum cdrThumbnailSize GetThumbnailSize ( );
    void PutRange (
        enum cdrExportRange pVal );
    enum cdrExportRange GetRange ( );
    void PutOverwrite (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetOverwrite ( );
    void PutEmbedICCProfile (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetEmbedICCProfile ( );
    void PutEmbedVBAProject (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetEmbedVBAProject ( );
    void PutIncludeCMXData (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetIncludeCMXData ( );
    void PutKeepAppearance (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetKeepAppearance ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_Filter (
        /*[in]*/ enum cdrFilter pVal ) = 0;
      virtual HRESULT __stdcall get_Filter (
        /*[out,retval]*/ enum cdrFilter * pVal ) = 0;
      virtual HRESULT __stdcall put_Version (
        /*[in]*/ enum cdrFileVersion pVal ) = 0;
      virtual HRESULT __stdcall get_Version (
        /*[out,retval]*/ enum cdrFileVersion * pVal ) = 0;
      virtual HRESULT __stdcall put_ThumbnailSize (
        /*[in]*/ enum cdrThumbnailSize pVal ) = 0;
      virtual HRESULT __stdcall get_ThumbnailSize (
        /*[out,retval]*/ enum cdrThumbnailSize * pVal ) = 0;
      virtual HRESULT __stdcall put_Range (
        /*[in]*/ enum cdrExportRange pVal ) = 0;
      virtual HRESULT __stdcall get_Range (
        /*[out,retval]*/ enum cdrExportRange * pVal ) = 0;
      virtual HRESULT __stdcall put_Overwrite (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Overwrite (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_EmbedICCProfile (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_EmbedICCProfile (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_EmbedVBAProject (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_EmbedVBAProject (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IncludeCMXData (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_IncludeCMXData (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_KeepAppearance (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_KeepAppearance (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
};

struct __declspec(uuid("b0580014-9aa4-44fd-9547-4f91eb757ac4"))
IVGComponent : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetComponentID))
    _bstr_t ComponentID;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetComponentID ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ComponentID (
        /*[out,retval]*/ BSTR * pVal ) = 0;
};

struct __declspec(uuid("b0580015-9aa4-44fd-9547-4f91eb757ac4"))
IVGComponents : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IVGComponentPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IUnknownPtr Get_NewEnum ( );
    IVGComponentPtr GetItem (
        const _variant_t & IndexOrName );
    long GetCount ( );
    VARIANT_BOOL IsComponentInstalled (
        _bstr_t ComponentID );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * pVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT IndexOrName,
        /*[out,retval]*/ struct IVGComponent * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_IsComponentInstalled (
        /*[in]*/ BSTR ComponentID,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
};

struct __declspec(uuid("b0580089-9aa4-44fd-9547-4f91eb757ac4"))
IVGAppStatus : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetProgress,put=PutProgress))
    long Progress;
    __declspec(property(get=GetAborted))
    VARIANT_BOOL Aborted;

    //
    // Wrapper methods for error-handling
    //

    HRESULT BeginProgress (
        _bstr_t Message,
        VARIANT_BOOL CanAbort );
    HRESULT UpdateProgress (
        long Step );
    HRESULT SetProgressMessage (
        _bstr_t Message );
    HRESULT EndProgress ( );
    long GetProgress ( );
    void PutProgress (
        long pVal );
    VARIANT_BOOL GetAborted ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_BeginProgress (
        /*[in]*/ BSTR Message,
        /*[in]*/ VARIANT_BOOL CanAbort ) = 0;
      virtual HRESULT __stdcall raw_UpdateProgress (
        /*[in]*/ long Step ) = 0;
      virtual HRESULT __stdcall raw_SetProgressMessage (
        /*[in]*/ BSTR Message ) = 0;
      virtual HRESULT __stdcall raw_EndProgress ( ) = 0;
      virtual HRESULT __stdcall get_Progress (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_Progress (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_Aborted (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
};

struct __declspec(uuid("b05800b3-9aa4-44fd-9547-4f91eb757ac4"))
IVGStructOpenOptions : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCodePage,put=PutCodePage))
    long CodePage;
    __declspec(property(get=GetColorConversionOptions))
    IVGStructColorConversionOptionsPtr ColorConversionOptions;

    //
    // Wrapper methods for error-handling
    //

    long GetCodePage ( );
    void PutCodePage (
        long pVal );
    IVGStructColorConversionOptionsPtr GetColorConversionOptions ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_CodePage (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_CodePage (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_ColorConversionOptions (
        /*[out,retval]*/ struct IVGStructColorConversionOptions * * ppVal ) = 0;
};

struct __declspec(uuid("b05800cc-9aa4-44fd-9547-4f91eb757ac4"))
IVGOnScreenHandle : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetIsHotTracked))
    VARIANT_BOOL IsHotTracked;
    __declspec(property(get=GetIsOnHandle))
    VARIANT_BOOL IsOnHandle[][];

    //
    // Wrapper methods for error-handling
    //

    HRESULT Show ( );
    HRESULT Hide ( );
    HRESULT SetHandleColor (
        long Color );
    HRESULT SetPosition (
        double x,
        double y );
    HRESULT UpdateHotTracking (
        double MouseX,
        double MouseY );
    VARIANT_BOOL GetIsHotTracked ( );
    VARIANT_BOOL GetIsOnHandle (
        double MouseX,
        double MouseY );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Show ( ) = 0;
      virtual HRESULT __stdcall raw_Hide ( ) = 0;
      virtual HRESULT __stdcall raw_SetHandleColor (
        /*[in]*/ long Color ) = 0;
      virtual HRESULT __stdcall raw_SetPosition (
        /*[in]*/ double x,
        /*[in]*/ double y ) = 0;
      virtual HRESULT __stdcall raw_UpdateHotTracking (
        /*[in]*/ double MouseX,
        /*[in]*/ double MouseY ) = 0;
      virtual HRESULT __stdcall get_IsHotTracked (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_IsOnHandle (
        /*[in]*/ double MouseX,
        /*[in]*/ double MouseY,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
};

struct __declspec(uuid("b05800cd-9aa4-44fd-9547-4f91eb757ac4"))
IVGOnScreenText : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT Show ( );
    HRESULT Hide ( );
    HRESULT SetTextColor (
        long Color );
    HRESULT SetTextAndPosition (
        _bstr_t Text,
        double x,
        double y,
        enum cdrOnScreenTextAlign align,
        double xRef,
        double yRef );
    HRESULT SetText (
        _bstr_t Text );
    HRESULT SetPixelOffset (
        long x,
        long y );
    HRESULT UpdatePosition (
        double x,
        double y );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Show ( ) = 0;
      virtual HRESULT __stdcall raw_Hide ( ) = 0;
      virtual HRESULT __stdcall raw_SetTextColor (
        /*[in]*/ long Color ) = 0;
      virtual HRESULT __stdcall raw_SetTextAndPosition (
        /*[in]*/ BSTR Text,
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[in]*/ enum cdrOnScreenTextAlign align,
        /*[in]*/ double xRef,
        /*[in]*/ double yRef ) = 0;
      virtual HRESULT __stdcall raw_SetText (
        /*[in]*/ BSTR Text ) = 0;
      virtual HRESULT __stdcall raw_SetPixelOffset (
        /*[in]*/ long x,
        /*[in]*/ long y ) = 0;
      virtual HRESULT __stdcall raw_UpdatePosition (
        /*[in]*/ double x,
        /*[in]*/ double y ) = 0;
};

struct __declspec(uuid("b05800d5-9aa4-44fd-9547-4f91eb757ac4"))
IVGToolShapeAttributes : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT SetCanResize (
        VARIANT_BOOL val );
    HRESULT SetCanRotate (
        VARIANT_BOOL val );
    HRESULT SetCanSkew (
        VARIANT_BOOL val );
    HRESULT SetCanSizeDisproportionally (
        VARIANT_BOOL val );
    HRESULT SetCanApplyNonlinearTransforms (
        VARIANT_BOOL val );
    HRESULT SetRegenerateOnTransform (
        VARIANT_BOOL val );
    HRESULT SetRegenerateOnStyleChange (
        VARIANT_BOOL val );
    HRESULT SetPropertyBarGuid (
        _bstr_t val );
    HRESULT SetContextMenuGuid (
        _bstr_t val );
    HRESULT SetObjectManagerBitmapGuid (
        _bstr_t val );
    HRESULT SetEditStateGuid (
        _bstr_t val );
    HRESULT SetDefaultShapename (
        _bstr_t val );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_SetCanResize (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall raw_SetCanRotate (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall raw_SetCanSkew (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall raw_SetCanSizeDisproportionally (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall raw_SetCanApplyNonlinearTransforms (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall raw_SetRegenerateOnTransform (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall raw_SetRegenerateOnStyleChange (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall raw_SetPropertyBarGuid (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall raw_SetContextMenuGuid (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall raw_SetObjectManagerBitmapGuid (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall raw_SetEditStateGuid (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall raw_SetDefaultShapename (
        /*[in]*/ BSTR val ) = 0;
};

struct __declspec(uuid("b05800a2-9aa4-44fd-9547-4f91eb757ac4"))
IVGMetadata : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetKeywords,put=PutKeywords))
    _bstr_t Keywords;
    __declspec(property(get=GetNotes,put=PutNotes))
    _bstr_t Notes;
    __declspec(property(get=GetAuthor,put=PutAuthor))
    _bstr_t Author;
    __declspec(property(get=GetLastAuthor,put=PutLastAuthor))
    _bstr_t LastAuthor;
    __declspec(property(get=GetSubject,put=PutSubject))
    _bstr_t Subject;
    __declspec(property(get=GetCopyright,put=PutCopyright))
    _bstr_t Copyright;
    __declspec(property(get=GetRevision,put=PutRevision))
    long Revision;
    __declspec(property(get=GetTemplateSided,put=PutTemplateSided))
    _bstr_t TemplateSided;
    __declspec(property(get=GetTemplateFolds,put=PutTemplateFolds))
    _bstr_t TemplateFolds;
    __declspec(property(get=GetTemplateType,put=PutTemplateType))
    _bstr_t TemplateType;
    __declspec(property(get=GetTemplateIndustry,put=PutTemplateIndustry))
    _bstr_t TemplateIndustry;
    __declspec(property(get=GetTitle,put=PutTitle))
    _bstr_t Title;
    __declspec(property(get=GetDocID,put=PutDocID))
    _bstr_t DocID;
    __declspec(property(get=GetDocLanguage,put=PutDocLanguage))
    enum cdrTextLanguage DocLanguage;
    __declspec(property(get=GetTemplateDesignerNotes,put=PutTemplateDesignerNotes))
    _bstr_t TemplateDesignerNotes;
    __declspec(property(get=GetLocalizableKeywords))
    IVGLocalizableStringPtr LocalizableKeywords;
    __declspec(property(get=GetLocalizableNotes))
    IVGLocalizableStringPtr LocalizableNotes;
    __declspec(property(get=GetLocalizableTitle))
    IVGLocalizableStringPtr LocalizableTitle;
    __declspec(property(get=GetLocalizableSubject))
    IVGLocalizableStringPtr LocalizableSubject;
    __declspec(property(get=GetLocalizableCopyright))
    IVGLocalizableStringPtr LocalizableCopyright;
    __declspec(property(get=GetLocalizableTemplateDesignerNotes))
    IVGLocalizableStringPtr LocalizableTemplateDesignerNotes;
    __declspec(property(get=GetCategory))
    IVGLocalizableStringPtr Category;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetKeywords ( );
    void PutKeywords (
        _bstr_t pVal );
    _bstr_t GetNotes ( );
    void PutNotes (
        _bstr_t pVal );
    _bstr_t GetAuthor ( );
    void PutAuthor (
        _bstr_t pVal );
    _bstr_t GetLastAuthor ( );
    void PutLastAuthor (
        _bstr_t pVal );
    _bstr_t GetSubject ( );
    void PutSubject (
        _bstr_t pVal );
    _bstr_t GetCopyright ( );
    void PutCopyright (
        _bstr_t pVal );
    long GetRevision ( );
    void PutRevision (
        long pVal );
    _bstr_t GetTemplateSided ( );
    void PutTemplateSided (
        _bstr_t pVal );
    _bstr_t GetTemplateFolds ( );
    void PutTemplateFolds (
        _bstr_t pVal );
    _bstr_t GetTemplateType ( );
    void PutTemplateType (
        _bstr_t pVal );
    _bstr_t GetTemplateIndustry ( );
    void PutTemplateIndustry (
        _bstr_t pVal );
    _bstr_t GetTitle ( );
    void PutTitle (
        _bstr_t pVal );
    _bstr_t GetDocID ( );
    void PutDocID (
        _bstr_t pVal );
    enum cdrTextLanguage GetDocLanguage ( );
    void PutDocLanguage (
        enum cdrTextLanguage pVal );
    _bstr_t GetTemplateDesignerNotes ( );
    void PutTemplateDesignerNotes (
        _bstr_t pVal );
    IVGLocalizableStringPtr GetLocalizableKeywords ( );
    IVGLocalizableStringPtr GetLocalizableNotes ( );
    IVGLocalizableStringPtr GetLocalizableTitle ( );
    IVGLocalizableStringPtr GetLocalizableSubject ( );
    IVGLocalizableStringPtr GetLocalizableCopyright ( );
    IVGLocalizableStringPtr GetLocalizableTemplateDesignerNotes ( );
    IVGLocalizableStringPtr GetCategory ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Keywords (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Keywords (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Notes (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Notes (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Author (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Author (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_LastAuthor (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_LastAuthor (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Subject (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Subject (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Copyright (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Copyright (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Revision (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_Revision (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_TemplateSided (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TemplateSided (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TemplateFolds (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TemplateFolds (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TemplateType (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TemplateType (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TemplateIndustry (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TemplateIndustry (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Title (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Title (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_DocID (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_DocID (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_DocLanguage (
        /*[out,retval]*/ enum cdrTextLanguage * pVal ) = 0;
      virtual HRESULT __stdcall put_DocLanguage (
        /*[in]*/ enum cdrTextLanguage pVal ) = 0;
      virtual HRESULT __stdcall get_TemplateDesignerNotes (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TemplateDesignerNotes (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_LocalizableKeywords (
        /*[out,retval]*/ struct IVGLocalizableString * * ppVal ) = 0;
      virtual HRESULT __stdcall get_LocalizableNotes (
        /*[out,retval]*/ struct IVGLocalizableString * * ppVal ) = 0;
      virtual HRESULT __stdcall get_LocalizableTitle (
        /*[out,retval]*/ struct IVGLocalizableString * * ppVal ) = 0;
      virtual HRESULT __stdcall get_LocalizableSubject (
        /*[out,retval]*/ struct IVGLocalizableString * * ppVal ) = 0;
      virtual HRESULT __stdcall get_LocalizableCopyright (
        /*[out,retval]*/ struct IVGLocalizableString * * ppVal ) = 0;
      virtual HRESULT __stdcall get_LocalizableTemplateDesignerNotes (
        /*[out,retval]*/ struct IVGLocalizableString * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ struct IVGLocalizableString * * ppVal ) = 0;
};

struct __declspec(uuid("b05800c2-9aa4-44fd-9547-4f91eb757ac4"))
_IGlobalMacroStorage : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_CodeName,put=Put_CodeName))
    _bstr_t _CodeName;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t Get_CodeName ( );
    void Put_CodeName (
        _bstr_t pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get__CodeName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put__CodeName (
        /*[in]*/ BSTR pVal ) = 0;
};

struct __declspec(uuid("fcfd0026-7c8c-4859-bdb7-06f555c4aaf0"))
Document;
    // [ default ] interface IVGDocument
    // [ default, source ] dispinterface DIVGDocumentEvents
    // interface IPrnVBAPrintDocument

struct __declspec(uuid("b05800c6-9aa4-44fd-9547-4f91eb757ac4"))
DIVGDocumentEvents : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT QueryClose (
        VARIANT_BOOL * Cancel );
    HRESULT QuerySave (
        VARIANT_BOOL * Cancel );
    HRESULT QueryPrint (
        VARIANT_BOOL * Cancel );
    HRESULT QueryExport (
        VARIANT_BOOL * Cancel );
    HRESULT Open ( );
    HRESULT Close ( );
    HRESULT BeforeSave (
        VARIANT_BOOL SaveAs,
        _bstr_t FileName );
    HRESULT AfterSave (
        VARIANT_BOOL SaveAs,
        _bstr_t FileName );
    HRESULT BeforePrint ( );
    HRESULT AfterPrint ( );
    HRESULT BeforeExport (
        _bstr_t FileName,
        enum cdrFilter Filter,
        VARIANT_BOOL SaveBitmap );
    HRESULT AfterExport (
        _bstr_t FileName,
        enum cdrFilter Filter,
        VARIANT_BOOL SaveBitmap );
    HRESULT LayerCreate (
        struct IVGLayer * Layer );
    HRESULT LayerDelete (
        long Count );
    HRESULT LayerActivate (
        struct IVGLayer * Layer );
    HRESULT LayerChange (
        struct IVGLayer * Layer );
    HRESULT PageCreate (
        struct IVGPage * Page );
    HRESULT PageDelete (
        long Count );
    HRESULT PageActivate (
        struct IVGPage * Page );
    HRESULT PageChange (
        struct IVGPage * Page );
    HRESULT ShapeCreate (
        struct IVGShape * Shape );
    HRESULT ShapeDelete (
        long Count );
    HRESULT ShapeMove (
        struct IVGShape * Shape );
    HRESULT ShapeTransform (
        struct IVGShape * Shape );
    HRESULT ShapeDistort (
        struct IVGShape * Shape );
    HRESULT ShapeChange (
        struct IVGShape * Shape,
        enum cdrShapeChangeScope Scope );
    HRESULT SelectionChange ( );
};

struct __declspec(uuid("fcfd0051-7c8c-4859-bdb7-06f555c4aaf0"))
Layer;
    // [ default ] interface IVGLayer

struct __declspec(uuid("fcfd005d-7c8c-4859-bdb7-06f555c4aaf0"))
Page;
    // [ default ] interface IVGPage
    // interface IPrnVBAPrintPage

struct __declspec(uuid("fcfd0076-7c8c-4859-bdb7-06f555c4aaf0"))
Shape;
    // [ default ] interface IVGShape

struct __declspec(uuid("b05800c4-9aa4-44fd-9547-4f91eb757ac4"))
IVGDocumentEvents : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT QueryClose (
        VARIANT_BOOL * Cancel );
    HRESULT QuerySave (
        VARIANT_BOOL * Cancel );
    HRESULT QueryPrint (
        VARIANT_BOOL * Cancel );
    HRESULT QueryExport (
        VARIANT_BOOL * Cancel );
    HRESULT Open ( );
    HRESULT Close ( );
    HRESULT BeforeSave (
        VARIANT_BOOL SaveAs,
        _bstr_t FileName );
    HRESULT AfterSave (
        VARIANT_BOOL SaveAs,
        _bstr_t FileName );
    HRESULT BeforePrint ( );
    HRESULT AfterPrint ( );
    HRESULT BeforeExport (
        _bstr_t FileName,
        enum cdrFilter Filter,
        VARIANT_BOOL SaveBitmap );
    HRESULT AfterExport (
        _bstr_t FileName,
        enum cdrFilter Filter,
        VARIANT_BOOL SaveBitmap );
    HRESULT LayerCreate (
        struct IVGLayer * Layer );
    HRESULT LayerDelete (
        long Count );
    HRESULT LayerActivate (
        struct IVGLayer * Layer );
    HRESULT LayerChange (
        struct IVGLayer * Layer );
    HRESULT PageCreate (
        struct IVGPage * Page );
    HRESULT PageDelete (
        long Count );
    HRESULT PageActivate (
        struct IVGPage * Page );
    HRESULT PageChange (
        struct IVGPage * Page );
    HRESULT ShapeCreate (
        struct IVGShape * Shape );
    HRESULT ShapeDelete (
        long Count );
    HRESULT ShapeMove (
        struct IVGShape * Shape );
    HRESULT ShapeTransform (
        struct IVGShape * Shape );
    HRESULT ShapeDistort (
        struct IVGShape * Shape );
    HRESULT ShapeChange (
        struct IVGShape * Shape,
        enum cdrShapeChangeScope Scope );
    HRESULT SelectionChange ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_QueryClose (
        /*[in,out]*/ VARIANT_BOOL * Cancel ) = 0;
      virtual HRESULT __stdcall raw_QuerySave (
        /*[in,out]*/ VARIANT_BOOL * Cancel ) = 0;
      virtual HRESULT __stdcall raw_QueryPrint (
        /*[in,out]*/ VARIANT_BOOL * Cancel ) = 0;
      virtual HRESULT __stdcall raw_QueryExport (
        /*[in,out]*/ VARIANT_BOOL * Cancel ) = 0;
      virtual HRESULT __stdcall raw_Open ( ) = 0;
      virtual HRESULT __stdcall raw_Close ( ) = 0;
      virtual HRESULT __stdcall raw_BeforeSave (
        /*[in]*/ VARIANT_BOOL SaveAs,
        /*[in]*/ BSTR FileName ) = 0;
      virtual HRESULT __stdcall raw_AfterSave (
        /*[in]*/ VARIANT_BOOL SaveAs,
        /*[in]*/ BSTR FileName ) = 0;
      virtual HRESULT __stdcall raw_BeforePrint ( ) = 0;
      virtual HRESULT __stdcall raw_AfterPrint ( ) = 0;
      virtual HRESULT __stdcall raw_BeforeExport (
        /*[in]*/ BSTR FileName,
        /*[in]*/ enum cdrFilter Filter,
        /*[in]*/ VARIANT_BOOL SaveBitmap ) = 0;
      virtual HRESULT __stdcall raw_AfterExport (
        /*[in]*/ BSTR FileName,
        /*[in]*/ enum cdrFilter Filter,
        /*[in]*/ VARIANT_BOOL SaveBitmap ) = 0;
      virtual HRESULT __stdcall raw_LayerCreate (
        /*[in]*/ struct IVGLayer * Layer ) = 0;
      virtual HRESULT __stdcall raw_LayerDelete (
        /*[in]*/ long Count ) = 0;
      virtual HRESULT __stdcall raw_LayerActivate (
        /*[in]*/ struct IVGLayer * Layer ) = 0;
      virtual HRESULT __stdcall raw_LayerChange (
        /*[in]*/ struct IVGLayer * Layer ) = 0;
      virtual HRESULT __stdcall raw_PageCreate (
        /*[in]*/ struct IVGPage * Page ) = 0;
      virtual HRESULT __stdcall raw_PageDelete (
        /*[in]*/ long Count ) = 0;
      virtual HRESULT __stdcall raw_PageActivate (
        /*[in]*/ struct IVGPage * Page ) = 0;
      virtual HRESULT __stdcall raw_PageChange (
        /*[in]*/ struct IVGPage * Page ) = 0;
      virtual HRESULT __stdcall raw_ShapeCreate (
        /*[in]*/ struct IVGShape * Shape ) = 0;
      virtual HRESULT __stdcall raw_ShapeDelete (
        /*[in]*/ long Count ) = 0;
      virtual HRESULT __stdcall raw_ShapeMove (
        /*[in]*/ struct IVGShape * Shape ) = 0;
      virtual HRESULT __stdcall raw_ShapeTransform (
        /*[in]*/ struct IVGShape * Shape ) = 0;
      virtual HRESULT __stdcall raw_ShapeDistort (
        /*[in]*/ struct IVGShape * Shape ) = 0;
      virtual HRESULT __stdcall raw_ShapeChange (
        /*[in]*/ struct IVGShape * Shape,
        /*[in]*/ enum cdrShapeChangeScope Scope ) = 0;
      virtual HRESULT __stdcall raw_SelectionChange ( ) = 0;
};

struct __declspec(uuid("fcfd00b3-7c8c-4859-bdb7-06f555c4aaf0"))
Window;
    // [ default ] interface IVGWindow

struct __declspec(uuid("b05800c3-9aa4-44fd-9547-4f91eb757ac4"))
IVGApplicationEvents : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT QueryDocumentClose (
        struct IVGDocument * Doc,
        VARIANT_BOOL * Cancel );
    HRESULT QueryDocumentSave (
        struct IVGDocument * Doc,
        VARIANT_BOOL * Cancel );
    HRESULT QueryDocumentPrint (
        struct IVGDocument * Doc,
        VARIANT_BOOL * Cancel );
    HRESULT QueryDocumentExport (
        struct IVGDocument * Doc,
        VARIANT_BOOL * Cancel );
    HRESULT QueryQuit (
        VARIANT_BOOL * Cancel );
    HRESULT DocumentOpen (
        struct IVGDocument * Doc,
        _bstr_t FileName );
    HRESULT DocumentNew (
        struct IVGDocument * Doc,
        VARIANT_BOOL FromTemplate,
        _bstr_t Template,
        VARIANT_BOOL IncludeGraphics );
    HRESULT DocumentClose (
        struct IVGDocument * Doc );
    HRESULT DocumentBeforeSave (
        struct IVGDocument * Doc,
        VARIANT_BOOL SaveAs,
        _bstr_t FileName );
    HRESULT DocumentAfterSave (
        struct IVGDocument * Doc,
        VARIANT_BOOL SaveAs,
        _bstr_t FileName );
    HRESULT DocumentBeforePrint (
        struct IVGDocument * Doc );
    HRESULT DocumentAfterPrint (
        struct IVGDocument * Doc );
    HRESULT DocumentBeforeExport (
        struct IVGDocument * Doc,
        _bstr_t FileName,
        enum cdrFilter Filter,
        VARIANT_BOOL SaveBitmap );
    HRESULT DocumentAfterExport (
        struct IVGDocument * Doc,
        _bstr_t FileName,
        enum cdrFilter Filter,
        VARIANT_BOOL SaveBitmap );
    HRESULT WindowActivate (
        struct IVGDocument * Doc,
        struct IVGWindow * Window );
    HRESULT WindowDeactivate (
        struct IVGDocument * Doc,
        struct IVGWindow * Window );
    HRESULT SelectionChange ( );
    HRESULT Start ( );
    HRESULT Quit ( );
    HRESULT OnPluginCommand (
        _bstr_t CommandID );
    HRESULT OnUpdatePluginCommand (
        _bstr_t CommandID,
        VARIANT_BOOL * Enabled,
        enum cdrCommandCheckState * Checked );
    HRESULT OnApplicationEvent (
        _bstr_t EventName,
        SAFEARRAY * * Parameters );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_QueryDocumentClose (
        /*[in]*/ struct IVGDocument * Doc,
        /*[in,out]*/ VARIANT_BOOL * Cancel ) = 0;
      virtual HRESULT __stdcall raw_QueryDocumentSave (
        /*[in]*/ struct IVGDocument * Doc,
        /*[in,out]*/ VARIANT_BOOL * Cancel ) = 0;
      virtual HRESULT __stdcall raw_QueryDocumentPrint (
        /*[in]*/ struct IVGDocument * Doc,
        /*[in,out]*/ VARIANT_BOOL * Cancel ) = 0;
      virtual HRESULT __stdcall raw_QueryDocumentExport (
        /*[in]*/ struct IVGDocument * Doc,
        /*[in,out]*/ VARIANT_BOOL * Cancel ) = 0;
      virtual HRESULT __stdcall raw_QueryQuit (
        /*[in,out]*/ VARIANT_BOOL * Cancel ) = 0;
      virtual HRESULT __stdcall raw_DocumentOpen (
        /*[in]*/ struct IVGDocument * Doc,
        /*[in]*/ BSTR FileName ) = 0;
      virtual HRESULT __stdcall raw_DocumentNew (
        /*[in]*/ struct IVGDocument * Doc,
        /*[in]*/ VARIANT_BOOL FromTemplate,
        /*[in]*/ BSTR Template,
        /*[in]*/ VARIANT_BOOL IncludeGraphics ) = 0;
      virtual HRESULT __stdcall raw_DocumentClose (
        /*[in]*/ struct IVGDocument * Doc ) = 0;
      virtual HRESULT __stdcall raw_DocumentBeforeSave (
        /*[in]*/ struct IVGDocument * Doc,
        /*[in]*/ VARIANT_BOOL SaveAs,
        /*[in]*/ BSTR FileName ) = 0;
      virtual HRESULT __stdcall raw_DocumentAfterSave (
        /*[in]*/ struct IVGDocument * Doc,
        /*[in]*/ VARIANT_BOOL SaveAs,
        /*[in]*/ BSTR FileName ) = 0;
      virtual HRESULT __stdcall raw_DocumentBeforePrint (
        /*[in]*/ struct IVGDocument * Doc ) = 0;
      virtual HRESULT __stdcall raw_DocumentAfterPrint (
        /*[in]*/ struct IVGDocument * Doc ) = 0;
      virtual HRESULT __stdcall raw_DocumentBeforeExport (
        /*[in]*/ struct IVGDocument * Doc,
        /*[in]*/ BSTR FileName,
        /*[in]*/ enum cdrFilter Filter,
        /*[in]*/ VARIANT_BOOL SaveBitmap ) = 0;
      virtual HRESULT __stdcall raw_DocumentAfterExport (
        /*[in]*/ struct IVGDocument * Doc,
        /*[in]*/ BSTR FileName,
        /*[in]*/ enum cdrFilter Filter,
        /*[in]*/ VARIANT_BOOL SaveBitmap ) = 0;
      virtual HRESULT __stdcall raw_WindowActivate (
        /*[in]*/ struct IVGDocument * Doc,
        /*[in]*/ struct IVGWindow * Window ) = 0;
      virtual HRESULT __stdcall raw_WindowDeactivate (
        /*[in]*/ struct IVGDocument * Doc,
        /*[in]*/ struct IVGWindow * Window ) = 0;
      virtual HRESULT __stdcall raw_SelectionChange ( ) = 0;
      virtual HRESULT __stdcall raw_Start ( ) = 0;
      virtual HRESULT __stdcall raw_Quit ( ) = 0;
      virtual HRESULT __stdcall raw_OnPluginCommand (
        /*[in]*/ BSTR CommandID ) = 0;
      virtual HRESULT __stdcall raw_OnUpdatePluginCommand (
        /*[in]*/ BSTR CommandID,
        /*[in,out]*/ VARIANT_BOOL * Enabled,
        /*[in,out]*/ enum cdrCommandCheckState * Checked ) = 0;
      virtual HRESULT __stdcall raw_OnApplicationEvent (
        /*[in]*/ BSTR EventName,
        /*[in]*/ SAFEARRAY * * Parameters ) = 0;
};

struct __declspec(uuid("b05800c5-9aa4-44fd-9547-4f91eb757ac4"))
DIVGApplicationEvents : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT QueryDocumentClose (
        struct IVGDocument * Doc,
        VARIANT_BOOL * Cancel );
    HRESULT QueryDocumentSave (
        struct IVGDocument * Doc,
        VARIANT_BOOL * Cancel );
    HRESULT QueryDocumentPrint (
        struct IVGDocument * Doc,
        VARIANT_BOOL * Cancel );
    HRESULT QueryDocumentExport (
        struct IVGDocument * Doc,
        VARIANT_BOOL * Cancel );
    HRESULT QueryQuit (
        VARIANT_BOOL * Cancel );
    HRESULT DocumentOpen (
        struct IVGDocument * Doc,
        _bstr_t FileName );
    HRESULT DocumentNew (
        struct IVGDocument * Doc,
        VARIANT_BOOL FromTemplate,
        _bstr_t Template,
        VARIANT_BOOL IncludeGraphics );
    HRESULT DocumentClose (
        struct IVGDocument * Doc );
    HRESULT DocumentBeforeSave (
        struct IVGDocument * Doc,
        VARIANT_BOOL SaveAs,
        _bstr_t FileName );
    HRESULT DocumentAfterSave (
        struct IVGDocument * Doc,
        VARIANT_BOOL SaveAs,
        _bstr_t FileName );
    HRESULT DocumentBeforePrint (
        struct IVGDocument * Doc );
    HRESULT DocumentAfterPrint (
        struct IVGDocument * Doc );
    HRESULT DocumentBeforeExport (
        struct IVGDocument * Doc,
        _bstr_t FileName,
        enum cdrFilter Filter,
        VARIANT_BOOL SaveBitmap );
    HRESULT DocumentAfterExport (
        struct IVGDocument * Doc,
        _bstr_t FileName,
        enum cdrFilter Filter,
        VARIANT_BOOL SaveBitmap );
    HRESULT WindowActivate (
        struct IVGDocument * Doc,
        struct IVGWindow * Window );
    HRESULT WindowDeactivate (
        struct IVGDocument * Doc,
        struct IVGWindow * Window );
    HRESULT SelectionChange ( );
    HRESULT Start ( );
    HRESULT Quit ( );
    HRESULT OnPluginCommand (
        _bstr_t CommandID );
    HRESULT OnUpdatePluginCommand (
        _bstr_t CommandID,
        VARIANT_BOOL * Enabled,
        enum cdrCommandCheckState * Checked );
    HRESULT OnApplicationEvent (
        _bstr_t EventName,
        SAFEARRAY * * Parameters );
};

struct __declspec(uuid("fcfd0001-7c8c-4859-bdb7-06f555c4aaf0"))
ActiveView;
    // [ default ] interface IVGActiveView

struct __declspec(uuid("fcfd0002-7c8c-4859-bdb7-06f555c4aaf0"))
Application;
    // [ default ] interface IVGApplication
    // [ default, source ] dispinterface DIVGApplicationEvents
    // interface ICUIApplication

struct __declspec(uuid("fcfd0003-7c8c-4859-bdb7-06f555c4aaf0"))
AppStatus;
    // [ default ] interface IVGAppStatus

struct __declspec(uuid("fcfd0004-7c8c-4859-bdb7-06f555c4aaf0"))
AppWindow;
    // [ default ] interface IVGAppWindow

struct __declspec(uuid("fcfd0005-7c8c-4859-bdb7-06f555c4aaf0"))
ArrowHead;
    // [ default ] interface IVGArrowHead

struct __declspec(uuid("fcfd0006-7c8c-4859-bdb7-06f555c4aaf0"))
ArrowHeadOptions;
    // [ default ] interface IVGArrowHeadOptions

struct __declspec(uuid("fcfd0007-7c8c-4859-bdb7-06f555c4aaf0"))
ArrowHeads;
    // [ default ] interface IVGArrowHeads

struct __declspec(uuid("fcfd0008-7c8c-4859-bdb7-06f555c4aaf0"))
BBoxSnapPoint;
    // [ default ] interface IVGBBoxSnapPoint

struct __declspec(uuid("fcfd0009-7c8c-4859-bdb7-06f555c4aaf0"))
Bitmap;
    // [ default ] interface IVGBitmap

struct __declspec(uuid("fcfd000a-7c8c-4859-bdb7-06f555c4aaf0"))
BSpline;
    // [ default ] interface IVGBSpline

struct __declspec(uuid("fcfd000b-7c8c-4859-bdb7-06f555c4aaf0"))
BSplineControlPoint;
    // [ default ] interface IVGBSplineControlPoint

struct __declspec(uuid("fcfd000c-7c8c-4859-bdb7-06f555c4aaf0"))
BSplineControlPoints;
    // [ default ] interface IVGBSplineControlPoints

struct __declspec(uuid("fcfd000d-7c8c-4859-bdb7-06f555c4aaf0"))
Clipboard;
    // [ default ] interface IVGClipboard

struct __declspec(uuid("fcfd000e-7c8c-4859-bdb7-06f555c4aaf0"))
CloneLink;
    // [ default ] interface IVGCloneLink

struct __declspec(uuid("fcfd000f-7c8c-4859-bdb7-06f555c4aaf0"))
Color;
    // [ default ] interface IVGColor

struct __declspec(uuid("fcfd0010-7c8c-4859-bdb7-06f555c4aaf0"))
ColorContext;
    // [ default ] interface IVGColorContext

struct __declspec(uuid("fcfd0011-7c8c-4859-bdb7-06f555c4aaf0"))
ColorManagementPolicy;
    // [ default ] interface IVGColorManagementPolicy

struct __declspec(uuid("fcfd0012-7c8c-4859-bdb7-06f555c4aaf0"))
ColorManager;
    // [ default ] interface IVGColorManager

struct __declspec(uuid("fcfd0013-7c8c-4859-bdb7-06f555c4aaf0"))
ColorProfile;
    // [ default ] interface IVGColorProfile

struct __declspec(uuid("fcfd0014-7c8c-4859-bdb7-06f555c4aaf0"))
ColorProfiles;
    // [ default ] interface IVGColorProfiles

struct __declspec(uuid("fcfd0015-7c8c-4859-bdb7-06f555c4aaf0"))
Colors;
    // [ default ] interface IVGColors

struct __declspec(uuid("fcfd0016-7c8c-4859-bdb7-06f555c4aaf0"))
Component;
    // [ default ] interface IVGComponent

struct __declspec(uuid("fcfd0017-7c8c-4859-bdb7-06f555c4aaf0"))
Components;
    // [ default ] interface IVGComponents

struct __declspec(uuid("fcfd0018-7c8c-4859-bdb7-06f555c4aaf0"))
Connector;
    // [ default ] interface IVGConnector

struct __declspec(uuid("fcfd001a-7c8c-4859-bdb7-06f555c4aaf0"))
CrossPoint;
    // [ default ] interface IVGCrossPoint

struct __declspec(uuid("fcfd001b-7c8c-4859-bdb7-06f555c4aaf0"))
CrossPoints;
    // [ default ] interface IVGCrossPoints

struct __declspec(uuid("fcfd001c-7c8c-4859-bdb7-06f555c4aaf0"))
Curve;
    // [ default ] interface IVGCurve

struct __declspec(uuid("fcfd001d-7c8c-4859-bdb7-06f555c4aaf0"))
CustomEffect;
    // [ default ] interface IVGCustomEffect

struct __declspec(uuid("fcfd001e-7c8c-4859-bdb7-06f555c4aaf0"))
CustomShape;
    // [ default ] interface IVGCustomShape

struct __declspec(uuid("fcfd001f-7c8c-4859-bdb7-06f555c4aaf0"))
DataField;
    // [ default ] interface IVGDataField

struct __declspec(uuid("fcfd0020-7c8c-4859-bdb7-06f555c4aaf0"))
DataFields;
    // [ default ] interface IVGDataFields

struct __declspec(uuid("fcfd0021-7c8c-4859-bdb7-06f555c4aaf0"))
DataItem;
    // [ default ] interface IVGDataItem

struct __declspec(uuid("fcfd0022-7c8c-4859-bdb7-06f555c4aaf0"))
DataItems;
    // [ default ] interface IVGDataItems

struct __declspec(uuid("fcfd0023-7c8c-4859-bdb7-06f555c4aaf0"))
Dimension;
    // [ default ] interface IVGDimension

struct __declspec(uuid("fcfd0024-7c8c-4859-bdb7-06f555c4aaf0"))
DimensionAngular;
    // [ default ] interface IVGDimensionAngular

struct __declspec(uuid("fcfd0025-7c8c-4859-bdb7-06f555c4aaf0"))
DimensionLinear;
    // [ default ] interface IVGDimensionLinear

struct __declspec(uuid("fcfd0027-7c8c-4859-bdb7-06f555c4aaf0"))
Documents;
    // [ default ] interface IVGDocuments

struct __declspec(uuid("fcfd0028-7c8c-4859-bdb7-06f555c4aaf0"))
Duotone;
    // [ default ] interface IVGDuotone

struct __declspec(uuid("fcfd0029-7c8c-4859-bdb7-06f555c4aaf0"))
DuotoneInk;
    // [ default ] interface IVGDuotoneInk

struct __declspec(uuid("fcfd002a-7c8c-4859-bdb7-06f555c4aaf0"))
DuotoneOverprint;
    // [ default ] interface IVGDuotoneOverprint

struct __declspec(uuid("fcfd002b-7c8c-4859-bdb7-06f555c4aaf0"))
EdgeSnapPoint;
    // [ default ] interface IVGEdgeSnapPoint

struct __declspec(uuid("fcfd002c-7c8c-4859-bdb7-06f555c4aaf0"))
Effect;
    // [ default ] interface IVGEffect

struct __declspec(uuid("fcfd002d-7c8c-4859-bdb7-06f555c4aaf0"))
EffectBlend;
    // [ default ] interface IVGEffectBlend

struct __declspec(uuid("fcfd002e-7c8c-4859-bdb7-06f555c4aaf0"))
EffectContour;
    // [ default ] interface IVGEffectContour

struct __declspec(uuid("fcfd002f-7c8c-4859-bdb7-06f555c4aaf0"))
EffectControlPath;
    // [ default ] interface IVGEffectControlPath

struct __declspec(uuid("fcfd0030-7c8c-4859-bdb7-06f555c4aaf0"))
EffectCustomDistortion;
    // [ default ] interface IVGEffectCustomDistortion

struct __declspec(uuid("fcfd0031-7c8c-4859-bdb7-06f555c4aaf0"))
EffectDistortion;
    // [ default ] interface IVGEffectDistortion

struct __declspec(uuid("fcfd0032-7c8c-4859-bdb7-06f555c4aaf0"))
EffectDropShadow;
    // [ default ] interface IVGEffectDropShadow

struct __declspec(uuid("fcfd0033-7c8c-4859-bdb7-06f555c4aaf0"))
EffectEnvelope;
    // [ default ] interface IVGEffectEnvelope

struct __declspec(uuid("fcfd0034-7c8c-4859-bdb7-06f555c4aaf0"))
EffectExtrude;
    // [ default ] interface IVGEffectExtrude

struct __declspec(uuid("fcfd0035-7c8c-4859-bdb7-06f555c4aaf0"))
EffectLens;
    // [ default ] interface IVGEffectLens

struct __declspec(uuid("fcfd0036-7c8c-4859-bdb7-06f555c4aaf0"))
EffectPerspective;
    // [ default ] interface IVGEffectPerspective

struct __declspec(uuid("fcfd0037-7c8c-4859-bdb7-06f555c4aaf0"))
EffectPushPullDistortion;
    // [ default ] interface IVGEffectPushPullDistortion

struct __declspec(uuid("fcfd0038-7c8c-4859-bdb7-06f555c4aaf0"))
Effects;
    // [ default ] interface IVGEffects

struct __declspec(uuid("fcfd0039-7c8c-4859-bdb7-06f555c4aaf0"))
EffectTextOnPath;
    // [ default ] interface IVGEffectTextOnPath

struct __declspec(uuid("fcfd003a-7c8c-4859-bdb7-06f555c4aaf0"))
EffectTwisterDistortion;
    // [ default ] interface IVGEffectTwisterDistortion

struct __declspec(uuid("fcfd003b-7c8c-4859-bdb7-06f555c4aaf0"))
EffectZipperDistortion;
    // [ default ] interface IVGEffectZipperDistortion

struct __declspec(uuid("fcfd003c-7c8c-4859-bdb7-06f555c4aaf0"))
Ellipse;
    // [ default ] interface IVGEllipse

struct __declspec(uuid("fcfd003d-7c8c-4859-bdb7-06f555c4aaf0"))
EPS;
    // [ default ] interface IVGEPS

struct __declspec(uuid("fcfd003e-7c8c-4859-bdb7-06f555c4aaf0"))
ExportFilter;
    // [ default ] interface ICorelExportFilter

struct __declspec(uuid("fcfd003f-7c8c-4859-bdb7-06f555c4aaf0"))
ExtrudeVanishingPoint;
    // [ default ] interface IVGExtrudeVanishingPoint

struct __declspec(uuid("fcfd0040-7c8c-4859-bdb7-06f555c4aaf0"))
Fill;
    // [ default ] interface IVGFill

struct __declspec(uuid("fcfd0041-7c8c-4859-bdb7-06f555c4aaf0"))
FillMetadata;
    // [ default ] interface IVGFillMetadata

struct __declspec(uuid("fcfd0042-7c8c-4859-bdb7-06f555c4aaf0"))
FontList;
    // [ default ] interface IVGFontList

struct __declspec(uuid("fcfd0043-7c8c-4859-bdb7-06f555c4aaf0"))
FountainColor;
    // [ default ] interface IVGFountainColor

struct __declspec(uuid("fcfd0044-7c8c-4859-bdb7-06f555c4aaf0"))
FountainColors;
    // [ default ] interface IVGFountainColors

struct __declspec(uuid("fcfd0045-7c8c-4859-bdb7-06f555c4aaf0"))
FountainFill;
    // [ default ] interface IVGFountainFill

struct __declspec(uuid("fcfd0046-7c8c-4859-bdb7-06f555c4aaf0"))
GlobalMacroStorage;
    // [ default ] interface _IGlobalMacroStorage
    // [ default, source ] dispinterface DIVGApplicationEvents

struct __declspec(uuid("fcfd0047-7c8c-4859-bdb7-06f555c4aaf0"))
GMSManager;
    // [ default ] interface IVGGMSManager

struct __declspec(uuid("fcfd0048-7c8c-4859-bdb7-06f555c4aaf0"))
Grid;
    // [ default ] interface IVGGrid

struct __declspec(uuid("fcfd0049-7c8c-4859-bdb7-06f555c4aaf0"))
Guide;
    // [ default ] interface IVGGuide

struct __declspec(uuid("fcfd004a-7c8c-4859-bdb7-06f555c4aaf0"))
HatchFill;
    // [ default ] interface IVGHatchFill

struct __declspec(uuid("fcfd004b-7c8c-4859-bdb7-06f555c4aaf0"))
HatchFills;
    // [ default ] interface IVGHatchFills

struct __declspec(uuid("fcfd004c-7c8c-4859-bdb7-06f555c4aaf0"))
HatchLibraries;
    // [ default ] interface IVGHatchLibraries

struct __declspec(uuid("fcfd004d-7c8c-4859-bdb7-06f555c4aaf0"))
HatchLibrary;
    // [ default ] interface IVGHatchLibrary

struct __declspec(uuid("fcfd004e-7c8c-4859-bdb7-06f555c4aaf0"))
HatchPattern;
    // [ default ] interface IVGHatchPattern

struct __declspec(uuid("fcfd004f-7c8c-4859-bdb7-06f555c4aaf0"))
HatchPatterns;
    // [ default ] interface IVGHatchPatterns

struct __declspec(uuid("fcfd0050-7c8c-4859-bdb7-06f555c4aaf0"))
ImportFilter;
    // [ default ] interface ICorelImportFilter

struct __declspec(uuid("fcfd0052-7c8c-4859-bdb7-06f555c4aaf0"))
Layers;
    // [ default ] interface IVGLayers

struct __declspec(uuid("fcfd0053-7c8c-4859-bdb7-06f555c4aaf0"))
LocalizableString;
    // [ default ] interface IVGLocalizableString

struct __declspec(uuid("fcfd0054-7c8c-4859-bdb7-06f555c4aaf0"))
Metadata;
    // [ default ] interface IVGMetadata

struct __declspec(uuid("fcfd0055-7c8c-4859-bdb7-06f555c4aaf0"))
Node;
    // [ default ] interface IVGNode

struct __declspec(uuid("fcfd0056-7c8c-4859-bdb7-06f555c4aaf0"))
NodeRange;
    // [ default ] interface IVGNodeRange

struct __declspec(uuid("fcfd0057-7c8c-4859-bdb7-06f555c4aaf0"))
Nodes;
    // [ default ] interface IVGNodes

struct __declspec(uuid("fcfd0058-7c8c-4859-bdb7-06f555c4aaf0"))
ObjectSnapPoint;
    // [ default ] interface IVGObjectSnapPoint

struct __declspec(uuid("fcfd0059-7c8c-4859-bdb7-06f555c4aaf0"))
OLE;
    // [ default ] interface IVGOLE

struct __declspec(uuid("fcfd005a-7c8c-4859-bdb7-06f555c4aaf0"))
Outline;
    // [ default ] interface IVGOutline

struct __declspec(uuid("fcfd005b-7c8c-4859-bdb7-06f555c4aaf0"))
OutlineStyle;
    // [ default ] interface IVGOutlineStyle

struct __declspec(uuid("fcfd005c-7c8c-4859-bdb7-06f555c4aaf0"))
OutlineStyles;
    // [ default ] interface IVGOutlineStyles

struct __declspec(uuid("fcfd005e-7c8c-4859-bdb7-06f555c4aaf0"))
Pages;
    // [ default ] interface IVGPages

struct __declspec(uuid("fcfd005f-7c8c-4859-bdb7-06f555c4aaf0"))
PageSize;
    // [ default ] interface IVGPageSize

struct __declspec(uuid("fcfd0060-7c8c-4859-bdb7-06f555c4aaf0"))
PageSizes;
    // [ default ] interface IVGPageSizes

struct __declspec(uuid("fcfd0061-7c8c-4859-bdb7-06f555c4aaf0"))
Palette;
    // [ default ] interface IVGPalette

struct __declspec(uuid("fcfd0062-7c8c-4859-bdb7-06f555c4aaf0"))
PaletteManager;
    // [ default ] interface IVGPaletteManager

struct __declspec(uuid("fcfd0063-7c8c-4859-bdb7-06f555c4aaf0"))
Palettes;
    // [ default ] interface IVGPalettes

struct __declspec(uuid("fcfd0064-7c8c-4859-bdb7-06f555c4aaf0"))
PatternCanvas;
    // [ default ] interface IVGPatternCanvas

struct __declspec(uuid("fcfd0065-7c8c-4859-bdb7-06f555c4aaf0"))
PatternCanvases;
    // [ default ] interface IVGPatternCanvases

struct __declspec(uuid("fcfd0066-7c8c-4859-bdb7-06f555c4aaf0"))
PatternFill;
    // [ default ] interface IVGPatternFill

struct __declspec(uuid("fcfd0067-7c8c-4859-bdb7-06f555c4aaf0"))
Polygon;
    // [ default ] interface IVGPolygon

struct __declspec(uuid("fcfd0068-7c8c-4859-bdb7-06f555c4aaf0"))
PostScriptFill;
    // [ default ] interface IVGPostScriptFill

struct __declspec(uuid("fcfd0069-7c8c-4859-bdb7-06f555c4aaf0"))
PowerClip;
    // [ default ] interface IVGPowerClip

struct __declspec(uuid("fcfd006a-7c8c-4859-bdb7-06f555c4aaf0"))
ProofColorSettings;
    // [ default ] interface IVGProofColorSettings

struct __declspec(uuid("fcfd006b-7c8c-4859-bdb7-06f555c4aaf0"))
Properties;
    // [ default ] interface IVGProperties

struct __declspec(uuid("fcfd006c-7c8c-4859-bdb7-06f555c4aaf0"))
PSScreenOptions;
    // [ default ] interface IVGPSScreenOptions

struct __declspec(uuid("fcfd006d-7c8c-4859-bdb7-06f555c4aaf0"))
RecentFile;
    // [ default ] interface IVGRecentFile

struct __declspec(uuid("fcfd006e-7c8c-4859-bdb7-06f555c4aaf0"))
RecentFiles;
    // [ default ] interface IVGRecentFiles

struct __declspec(uuid("fcfd006f-7c8c-4859-bdb7-06f555c4aaf0"))
Rect;
    // [ default ] interface IVGRect

struct __declspec(uuid("fcfd0070-7c8c-4859-bdb7-06f555c4aaf0"))
Rectangle;
    // [ default ] interface IVGRectangle

struct __declspec(uuid("fcfd0071-7c8c-4859-bdb7-06f555c4aaf0"))
Rulers;
    // [ default ] interface IVGRulers

struct __declspec(uuid("fcfd0072-7c8c-4859-bdb7-06f555c4aaf0"))
Segment;
    // [ default ] interface IVGSegment

struct __declspec(uuid("fcfd0073-7c8c-4859-bdb7-06f555c4aaf0"))
SegmentRange;
    // [ default ] interface IVGSegmentRange

struct __declspec(uuid("fcfd0074-7c8c-4859-bdb7-06f555c4aaf0"))
Segments;
    // [ default ] interface IVGSegments

struct __declspec(uuid("fcfd0075-7c8c-4859-bdb7-06f555c4aaf0"))
SelectionInfo;
    // [ default ] interface IVGSelectionInformation

struct __declspec(uuid("fcfd0077-7c8c-4859-bdb7-06f555c4aaf0"))
ShapeRange;
    // [ default ] interface IVGShapeRange

struct __declspec(uuid("fcfd0078-7c8c-4859-bdb7-06f555c4aaf0"))
Shapes;
    // [ default ] interface IVGShapes

struct __declspec(uuid("fcfd0079-7c8c-4859-bdb7-06f555c4aaf0"))
SnapPoint;
    // [ default ] interface IVGSnapPoint

struct __declspec(uuid("fcfd007a-7c8c-4859-bdb7-06f555c4aaf0"))
SnapPointRange;
    // [ default ] interface IVGSnapPointRange

struct __declspec(uuid("fcfd007b-7c8c-4859-bdb7-06f555c4aaf0"))
SnapPoints;
    // [ default ] interface IVGSnapPoints

struct __declspec(uuid("fcfd007c-7c8c-4859-bdb7-06f555c4aaf0"))
Spread;
    // [ default ] interface IVGSpread

struct __declspec(uuid("fcfd007d-7c8c-4859-bdb7-06f555c4aaf0"))
Spreads;
    // [ default ] interface IVGSpreads

struct __declspec(uuid("fcfd007e-7c8c-4859-bdb7-06f555c4aaf0"))
StructAlignProperties;
    // [ default ] interface IVGStructAlignProperties

struct __declspec(uuid("fcfd007f-7c8c-4859-bdb7-06f555c4aaf0"))
StructColorConversionOptions;
    // [ default ] interface IVGStructColorConversionOptions

struct __declspec(uuid("fcfd0080-7c8c-4859-bdb7-06f555c4aaf0"))
StructCreateOptions;
    // [ default ] interface IVGStructCreateOptions

struct __declspec(uuid("fcfd0081-7c8c-4859-bdb7-06f555c4aaf0"))
StructExportOptions;
    // [ default ] interface IVGStructExportOptions

struct __declspec(uuid("fcfd0082-7c8c-4859-bdb7-06f555c4aaf0"))
StructFontProperties;
    // [ default ] interface IVGStructFontProperties

struct __declspec(uuid("fcfd0083-7c8c-4859-bdb7-06f555c4aaf0"))
StructHyphenationSettings;
    // [ default ] interface IVGStructHyphenationSettings

struct __declspec(uuid("fcfd0084-7c8c-4859-bdb7-06f555c4aaf0"))
StructImportCropOptions;
    // [ default ] interface IStructImportCropOptions

struct __declspec(uuid("fcfd0085-7c8c-4859-bdb7-06f555c4aaf0"))
StructImportOptions;
    // [ default ] interface IVGStructImportOptions

struct __declspec(uuid("fcfd0086-7c8c-4859-bdb7-06f555c4aaf0"))
StructImportResampleOptions;
    // [ default ] interface IStructImportResampleOptions

struct __declspec(uuid("fcfd0087-7c8c-4859-bdb7-06f555c4aaf0"))
StructOpenOptions;
    // [ default ] interface IVGStructOpenOptions

struct __declspec(uuid("fcfd0088-7c8c-4859-bdb7-06f555c4aaf0"))
StructPaletteOptions;
    // [ default ] interface IVGStructPaletteOptions

struct __declspec(uuid("fcfd0089-7c8c-4859-bdb7-06f555c4aaf0"))
StructPasteOptions;
    // [ default ] interface IVGStructPasteOptions

struct __declspec(uuid("fcfd008a-7c8c-4859-bdb7-06f555c4aaf0"))
StructSaveAsOptions;
    // [ default ] interface IVGStructSaveAsOptions

struct __declspec(uuid("fcfd008b-7c8c-4859-bdb7-06f555c4aaf0"))
StructSpaceProperties;
    // [ default ] interface IVGStructSpaceProperties

struct __declspec(uuid("fcfd008c-7c8c-4859-bdb7-06f555c4aaf0"))
Style;
    // [ default ] interface IVGStyle

struct __declspec(uuid("fcfd008d-7c8c-4859-bdb7-06f555c4aaf0"))
StyleCharacter;
    // [ default ] interface IVGStyleCharacter

struct __declspec(uuid("fcfd008e-7c8c-4859-bdb7-06f555c4aaf0"))
StyleFill;
    // [ default ] interface IVGStyleFill

struct __declspec(uuid("fcfd008f-7c8c-4859-bdb7-06f555c4aaf0"))
StyleFrame;
    // [ default ] interface IVGStyleFrame

struct __declspec(uuid("fcfd0090-7c8c-4859-bdb7-06f555c4aaf0"))
StyleOutline;
    // [ default ] interface IVGStyleOutline

struct __declspec(uuid("fcfd0091-7c8c-4859-bdb7-06f555c4aaf0"))
StyleParagraph;
    // [ default ] interface IVGStyleParagraph

struct __declspec(uuid("fcfd0092-7c8c-4859-bdb7-06f555c4aaf0"))
Styles;
    // [ default ] interface IVGStyles

struct __declspec(uuid("fcfd0093-7c8c-4859-bdb7-06f555c4aaf0"))
StyleSheet;
    // [ default ] interface IVGStyleSheet

struct __declspec(uuid("fcfd0094-7c8c-4859-bdb7-06f555c4aaf0"))
SubPath;
    // [ default ] interface IVGSubPath

struct __declspec(uuid("fcfd0095-7c8c-4859-bdb7-06f555c4aaf0"))
SubPaths;
    // [ default ] interface IVGSubPaths

struct __declspec(uuid("fcfd0096-7c8c-4859-bdb7-06f555c4aaf0"))
Symbol;
    // [ default ] interface IVGSymbol

struct __declspec(uuid("fcfd0097-7c8c-4859-bdb7-06f555c4aaf0"))
SymbolDefinition;
    // [ default ] interface IVGSymbolDefinition

struct __declspec(uuid("fcfd0098-7c8c-4859-bdb7-06f555c4aaf0"))
SymbolDefinitions;
    // [ default ] interface IVGSymbolDefinitions

struct __declspec(uuid("fcfd0099-7c8c-4859-bdb7-06f555c4aaf0"))
SymbolLibraries;
    // [ default ] interface IVGSymbolLibraries

struct __declspec(uuid("fcfd009a-7c8c-4859-bdb7-06f555c4aaf0"))
SymbolLibrary;
    // [ default ] interface IVGSymbolLibrary

struct __declspec(uuid("fcfd009b-7c8c-4859-bdb7-06f555c4aaf0"))
Text;
    // [ default ] interface IVGText

struct __declspec(uuid("fcfd009c-7c8c-4859-bdb7-06f555c4aaf0"))
TextCharacters;
    // [ default ] interface IVGTextCharacters

struct __declspec(uuid("fcfd009d-7c8c-4859-bdb7-06f555c4aaf0"))
TextColumns;
    // [ default ] interface IVGTextColumns

struct __declspec(uuid("fcfd009e-7c8c-4859-bdb7-06f555c4aaf0"))
TextFrame;
    // [ default ] interface IVGTextFrame

struct __declspec(uuid("fcfd009f-7c8c-4859-bdb7-06f555c4aaf0"))
TextFrames;
    // [ default ] interface IVGTextFrames

struct __declspec(uuid("fcfd00a0-7c8c-4859-bdb7-06f555c4aaf0"))
TextLines;
    // [ default ] interface IVGTextLines

struct __declspec(uuid("fcfd00a1-7c8c-4859-bdb7-06f555c4aaf0"))
TextParagraphs;
    // [ default ] interface IVGTextParagraphs

struct __declspec(uuid("fcfd00a2-7c8c-4859-bdb7-06f555c4aaf0"))
TextRange;
    // [ default ] interface IVGTextRange

struct __declspec(uuid("fcfd00a3-7c8c-4859-bdb7-06f555c4aaf0"))
TextRanges;
    // [ default ] interface IVGTextRanges

struct __declspec(uuid("fcfd00a4-7c8c-4859-bdb7-06f555c4aaf0"))
TextTabPosition;
    // [ default ] interface IVGTextTabPosition

struct __declspec(uuid("fcfd00a5-7c8c-4859-bdb7-06f555c4aaf0"))
TextTabPositions;
    // [ default ] interface IVGTextTabPositions

struct __declspec(uuid("fcfd00a6-7c8c-4859-bdb7-06f555c4aaf0"))
TextureFill;
    // [ default ] interface IVGTextureFill

struct __declspec(uuid("fcfd00a7-7c8c-4859-bdb7-06f555c4aaf0"))
TextureFillProperties;
    // [ default ] interface IVGTextureFillProperties

struct __declspec(uuid("fcfd00a8-7c8c-4859-bdb7-06f555c4aaf0"))
TextureFillProperty;
    // [ default ] interface IVGTextureFillProperty

struct __declspec(uuid("fcfd00a9-7c8c-4859-bdb7-06f555c4aaf0"))
TextWords;
    // [ default ] interface IVGTextWords

struct __declspec(uuid("fcfd00aa-7c8c-4859-bdb7-06f555c4aaf0"))
TraceSettings;
    // [ default ] interface IVGTraceSettings

struct __declspec(uuid("fcfd00ab-7c8c-4859-bdb7-06f555c4aaf0"))
Transparency;
    // [ default ] interface IVGTransparency

struct __declspec(uuid("fcfd00ac-7c8c-4859-bdb7-06f555c4aaf0"))
TreeManager;
    // [ default ] interface IVGTreeManager

struct __declspec(uuid("fcfd00ad-7c8c-4859-bdb7-06f555c4aaf0"))
TreeNode;
    // [ default ] interface IVGTreeNode

struct __declspec(uuid("fcfd00ae-7c8c-4859-bdb7-06f555c4aaf0"))
TreeNodes;
    // [ default ] interface IVGTreeNodes

struct __declspec(uuid("fcfd00af-7c8c-4859-bdb7-06f555c4aaf0"))
URL;
    // [ default ] interface IVGURL

struct __declspec(uuid("fcfd00b0-7c8c-4859-bdb7-06f555c4aaf0"))
UserSnapPoint;
    // [ default ] interface IVGUserSnapPoint

struct __declspec(uuid("fcfd00b1-7c8c-4859-bdb7-06f555c4aaf0"))
View;
    // [ default ] interface IVGView

struct __declspec(uuid("fcfd00b2-7c8c-4859-bdb7-06f555c4aaf0"))
Views;
    // [ default ] interface IVGViews

struct __declspec(uuid("fcfd00b4-7c8c-4859-bdb7-06f555c4aaf0"))
Windows;
    // [ default ] interface IVGWindows

struct __declspec(uuid("fcfd00b5-7c8c-4859-bdb7-06f555c4aaf0"))
Workspace;
    // [ default ] interface IVGWorkspace

struct __declspec(uuid("fcfd00b6-7c8c-4859-bdb7-06f555c4aaf0"))
Workspaces;
    // [ default ] interface IVGWorkspaces

struct __declspec(uuid("fcfd00b7-7c8c-4859-bdb7-06f555c4aaf0"))
CorelScriptTools;
    // [ default ] interface ICorelScriptTools

struct __declspec(uuid("fcfd00b8-7c8c-4859-bdb7-06f555c4aaf0"))
GMSMacro;
    // [ default ] interface IVGGMSMacro

struct __declspec(uuid("fcfd00b9-7c8c-4859-bdb7-06f555c4aaf0"))
GMSMacros;
    // [ default ] interface IVGGMSMacros

struct __declspec(uuid("fcfd00ba-7c8c-4859-bdb7-06f555c4aaf0"))
GMSProject;
    // [ default ] interface IVGGMSProject

struct __declspec(uuid("fcfd00bb-7c8c-4859-bdb7-06f555c4aaf0"))
GMSProjects;
    // [ default ] interface IVGGMSProjects

struct __declspec(uuid("fcfd00bc-7c8c-4859-bdb7-06f555c4aaf0"))
OnScreenCurve;
    // [ default ] interface IVGOnScreenCurve

struct __declspec(uuid("fcfd00bd-7c8c-4859-bdb7-06f555c4aaf0"))
OnScreenHandle;
    // [ default ] interface IVGOnScreenHandle

struct __declspec(uuid("fcfd00be-7c8c-4859-bdb7-06f555c4aaf0"))
OnScreenText;
    // [ default ] interface IVGOnScreenText

struct __declspec(uuid("fcfd00bf-7c8c-4859-bdb7-06f555c4aaf0"))
ToolStateAttributes;
    // [ default ] interface IVGToolStateAttributes

struct __declspec(uuid("fcfd00c0-7c8c-4859-bdb7-06f555c4aaf0"))
ToolState;
    // [ default ] interface IVGToolState

struct __declspec(uuid("fcfd00c1-7c8c-4859-bdb7-06f555c4aaf0"))
Point;
    // [ default ] interface IVGPoint

struct __declspec(uuid("fcfd00c2-7c8c-4859-bdb7-06f555c4aaf0"))
PointRange;
    // [ default ] interface IVGPointRange

struct __declspec(uuid("fcfd00c3-7c8c-4859-bdb7-06f555c4aaf0"))
Vector;
    // [ default ] interface IVGVector

struct __declspec(uuid("fcfd00c4-7c8c-4859-bdb7-06f555c4aaf0"))
TransformMatrix;
    // [ default ] interface IVGTransformMatrix

struct __declspec(uuid("fcfd00c5-7c8c-4859-bdb7-06f555c4aaf0"))
MathUtils;
    // [ default ] interface IVGMathUtils

struct __declspec(uuid("fcfd00c6-7c8c-4859-bdb7-06f555c4aaf0"))
ToolShapeAttributes;
    // [ default ] interface IVGToolShapeAttributes

struct __declspec(uuid("fcfd00c7-7c8c-4859-bdb7-06f555c4aaf0"))
ToolShape;
    // [ default ] interface IVGToolShape

struct __declspec(uuid("fcfd00c8-7c8c-4859-bdb7-06f555c4aaf0"))
StyleTransparency;
    // [ default ] interface IVGStyleTransparency

struct __declspec(uuid("fcfd00c9-7c8c-4859-bdb7-06f555c4aaf0"))
Image;
    // [ default ] interface IVGImage

struct __declspec(uuid("fcfd00ca-7c8c-4859-bdb7-06f555c4aaf0"))
ImageTiles;
    // [ default ] interface IVGImageTiles

struct __declspec(uuid("fcfd00cb-7c8c-4859-bdb7-06f555c4aaf0"))
ImageTile;
    // [ default ] interface IVGImageTile

struct __declspec(uuid("fcfd00cc-7c8c-4859-bdb7-06f555c4aaf0"))
EffectInnerShadow;
    // [ default ] interface IVGEffectInnerShadow

struct __declspec(uuid("fcfd00cd-7c8c-4859-bdb7-06f555c4aaf0"))
TextIndentLevelStyles;
    // [ default ] interface IVGTextIndentLevelStyles

struct __declspec(uuid("fcfd00ce-7c8c-4859-bdb7-06f555c4aaf0"))
TextIndentLevelStyle;
    // [ default ] interface IVGTextIndentLevelStyle

struct __declspec(uuid("fcfd00cf-7c8c-4859-bdb7-06f555c4aaf0"))
TextVariableAxes;
    // [ default ] interface IVGTextVariableAxes

struct __declspec(uuid("fcfd00d0-7c8c-4859-bdb7-06f555c4aaf0"))
TextVariableAxis;
    // [ default ] interface IVGTextVariableAxis

struct __declspec(uuid("fcfd1001-7c8c-4859-bdb7-06f555c4aaf0"))
FrameWork;
    // [ default ] interface ICUIFrameWork

struct __declspec(uuid("fcfd1002-7c8c-4859-bdb7-06f555c4aaf0"))
CommandBars;
    // [ default ] interface ICUICommandBars

struct __declspec(uuid("fcfd1003-7c8c-4859-bdb7-06f555c4aaf0"))
CommandBarModes;
    // [ default ] interface ICUICommandBarModes

struct __declspec(uuid("fcfd1004-7c8c-4859-bdb7-06f555c4aaf0"))
CommandBarMode;
    // [ default ] interface ICUICommandBarMode

struct __declspec(uuid("fcfd1005-7c8c-4859-bdb7-06f555c4aaf0"))
Controls;
    // [ default ] interface ICUIControls

struct __declspec(uuid("fcfd1006-7c8c-4859-bdb7-06f555c4aaf0"))
Control;
    // [ default ] interface ICUIControl

struct __declspec(uuid("fcfd1007-7c8c-4859-bdb7-06f555c4aaf0"))
CommandBar;
    // [ default ] interface ICUICommandBar

struct __declspec(uuid("fcfd1008-7c8c-4859-bdb7-06f555c4aaf0"))
DataContext;
    // [ default ] interface ICUIDataContext

struct __declspec(uuid("fcfd1009-7c8c-4859-bdb7-06f555c4aaf0"))
DataSourceProxy;
    // [ default ] interface ICUIDataSourceProxy

struct __declspec(uuid("fcfd100a-7c8c-4859-bdb7-06f555c4aaf0"))
ImageList;
    // [ default ] interface ICUIImageList

struct __declspec(uuid("fcfd100b-7c8c-4859-bdb7-06f555c4aaf0"))
FrameWindows;
    // [ default ] interface ICUIFrameWindows

struct __declspec(uuid("fcfd100c-7c8c-4859-bdb7-06f555c4aaf0"))
FrameWindow;
    // [ default ] interface ICUIFrameWindow

struct __declspec(uuid("fcfd100d-7c8c-4859-bdb7-06f555c4aaf0"))
ViewHosts;
    // [ default ] interface ICUIViewHosts

struct __declspec(uuid("fcfd100e-7c8c-4859-bdb7-06f555c4aaf0"))
ViewHost;
    // [ default ] interface ICUIViewHost

struct __declspec(uuid("fcfd100f-7c8c-4859-bdb7-06f555c4aaf0"))
DockHosts;
    // [ default ] interface ICUIDockHosts

struct __declspec(uuid("fcfd1010-7c8c-4859-bdb7-06f555c4aaf0"))
DockHost;
    // [ default ] interface ICUIDockHost

struct __declspec(uuid("fcfd1011-7c8c-4859-bdb7-06f555c4aaf0"))
ViewWindows;
    // [ default ] interface ICUIViewWindows

struct __declspec(uuid("fcfd1012-7c8c-4859-bdb7-06f555c4aaf0"))
ViewWindow;
    // [ default ] interface ICUIViewWindow

struct __declspec(uuid("fcfd1013-7c8c-4859-bdb7-06f555c4aaf0"))
DockItems;
    // [ default ] interface ICUIDockItems

struct __declspec(uuid("fcfd1014-7c8c-4859-bdb7-06f555c4aaf0"))
DockItem;
    // [ default ] interface ICUIDockItem

struct __declspec(uuid("fcfd1015-7c8c-4859-bdb7-06f555c4aaf0"))
ScreenRect;
    // [ default ] interface ICUIScreenRect

struct __declspec(uuid("fcfd1016-7c8c-4859-bdb7-06f555c4aaf0"))
BitmapImage;
    // [ default ] interface ICUIBitmapImage

struct __declspec(uuid("fcfd1017-7c8c-4859-bdb7-06f555c4aaf0"))
StatusText;
    // [ default ] interface ICUIStatusText

struct __declspec(uuid("1af50001-1359-11d7-93da-0090275861fc"))
PDFVBASettings;
    // [ default ] interface IPDFVBASettings

struct __declspec(uuid("0a9f0001-6a30-4fb2-b515-6e646d903999"))
SystemPrinters;
    // [ default ] interface IPrnVBAPrinters

struct __declspec(uuid("0a9f0002-6a30-4fb2-b515-6e646d903999"))
Printer;
    // [ default ] interface IPrnVBAPrinter

struct __declspec(uuid("0a9f0003-6a30-4fb2-b515-6e646d903999"))
PrintJob;
    // [ default ] interface IPrnVBAPrintJob

struct __declspec(uuid("0a9f0004-6a30-4fb2-b515-6e646d903999"))
PrintDocuments;
    // [ default ] interface IPrnVBAPrintDocuments

struct __declspec(uuid("0a9f0005-6a30-4fb2-b515-6e646d903999"))
PrintPages;
    // [ default ] interface IPrnVBAPrintPages

struct __declspec(uuid("0a9f0006-6a30-4fb2-b515-6e646d903999"))
PrintSettings;
    // [ default ] interface IPrnVBAPrintSettings

struct __declspec(uuid("0a9f0007-6a30-4fb2-b515-6e646d903999"))
PrintSeparations;
    // [ default ] interface IPrnVBAPrintSeparations

struct __declspec(uuid("0a9f0008-6a30-4fb2-b515-6e646d903999"))
SeparationPlates;
    // [ default ] interface IPrnVBASeparationPlates

struct __declspec(uuid("0a9f0009-6a30-4fb2-b515-6e646d903999"))
SeparationPlate;
    // [ default ] interface IPrnVBASeparationPlate

struct __declspec(uuid("0a9f000a-6a30-4fb2-b515-6e646d903999"))
PrintPrepress;
    // [ default ] interface IPrnVBAPrintPrepress

struct __declspec(uuid("0a9f000b-6a30-4fb2-b515-6e646d903999"))
PrintPostScript;
    // [ default ] interface IPrnVBAPrintPostScript

struct __declspec(uuid("0a9f000c-6a30-4fb2-b515-6e646d903999"))
PrintTrapping;
    // [ default ] interface IPrnVBAPrintTrapping

struct __declspec(uuid("0a9f000d-6a30-4fb2-b515-6e646d903999"))
TrapLayers;
    // [ default ] interface IPrnVBATrapLayers

struct __declspec(uuid("0a9f000e-6a30-4fb2-b515-6e646d903999"))
TrapLayer;
    // [ default ] interface IPrnVBATrapLayer

struct __declspec(uuid("0a9f000f-6a30-4fb2-b515-6e646d903999"))
PrintOptions;
    // [ default ] interface IPrnVBAPrintOptions

struct __declspec(uuid("0a9f0010-6a30-4fb2-b515-6e646d903999"))
PrintLayout;
    // [ default ] interface IPrnVBAPrintLayout

struct __declspec(uuid("9cee0003-42a0-5980-43a3-7aa71461482c"))
ICUIFrameWork : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCommandBars))
    ICUICommandBarsPtr CommandBars;
    __declspec(property(get=GetMainMenu))
    ICUICommandBarPtr MainMenu;
    __declspec(property(get=GetStatusBar))
    ICUICommandBarPtr StatusBar;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetAutomation))
    ICUIAutomationPtr Automation;
    __declspec(property(get=GetFrameWindows))
    ICUIFrameWindowsPtr FrameWindows;
    __declspec(property(get=GetMainFrameWindow))
    ICUIFrameWindowPtr MainFrameWindow;
    __declspec(property(get=GetApplication))
    ICUIApplicationPtr Application;
    __declspec(property(get=GetTaskManager))
    ICUITaskManagerPtr TaskManager;

    //
    // Wrapper methods for error-handling
    //

    ICUICommandBarsPtr GetCommandBars ( );
    ICUICommandBarPtr GetMainMenu ( );
    ICUICommandBarPtr GetStatusBar ( );
    _bstr_t GetName ( );
    HRESULT ImportWorkspace (
        _bstr_t FileName );
    ICUIAutomationPtr GetAutomation ( );
    HRESULT ShowDocker (
        _bstr_t Guid );
    HRESULT HideDocker (
        _bstr_t Guid );
    VARIANT_BOOL IsDockerVisible (
        _bstr_t Guid );
    HRESULT AddDocker (
        _bstr_t Guid,
        _bstr_t ClassName,
        _bstr_t AssemblyPath );
    HRESULT RemoveDocker (
        _bstr_t Guid );
    ICUIFrameWindowsPtr GetFrameWindows ( );
    ICUIFrameWindowPtr GetMainFrameWindow ( );
    ICUIApplicationPtr GetApplication ( );
    ICUIFrameWindowPtr CreateFrameWindowForViewHost (
        struct ICUIViewHost * ViewHostToInsert );
    ICUIFrameWindowPtr CreateFrameWindowForView (
        struct ICUIViewWindow * ViewToInsert );
    HRESULT ShowDialog (
        _bstr_t Guid );
    HRESULT HideDialog (
        _bstr_t Guid );
    long ShowMessageBox (
        _bstr_t szMessage,
        _bstr_t szMainInstruction,
        long unFlags,
        struct ICUIBitmapImage * pImage,
        _bstr_t szHelpGuid,
        _bstr_t szWarningName,
        enum cuiMessageBoxFlags eFlags,
        struct ICUIDataContext * pDataContext );
    ICUIWarningPtr GetWarning (
        _bstr_t szWarningID,
        VARIANT_BOOL bHidden );
    ICUITaskManagerPtr GetTaskManager ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_CommandBars (
        /*[out,retval]*/ struct ICUICommandBars * * pVal ) = 0;
      virtual HRESULT __stdcall get_MainMenu (
        /*[out,retval]*/ struct ICUICommandBar * * pVal ) = 0;
      virtual HRESULT __stdcall get_StatusBar (
        /*[out,retval]*/ struct ICUICommandBar * * pVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall raw_ImportWorkspace (
        /*[in]*/ BSTR FileName ) = 0;
      virtual HRESULT __stdcall get_Automation (
        /*[out,retval]*/ struct ICUIAutomation * * pVal ) = 0;
      virtual HRESULT __stdcall raw_ShowDocker (
        /*[in]*/ BSTR Guid ) = 0;
      virtual HRESULT __stdcall raw_HideDocker (
        /*[in]*/ BSTR Guid ) = 0;
      virtual HRESULT __stdcall raw_IsDockerVisible (
        /*[in]*/ BSTR Guid,
        /*[out,retval]*/ VARIANT_BOOL * IsVisible ) = 0;
      virtual HRESULT __stdcall raw_AddDocker (
        /*[in]*/ BSTR Guid,
        /*[in]*/ BSTR ClassName,
        /*[in]*/ BSTR AssemblyPath ) = 0;
      virtual HRESULT __stdcall raw_RemoveDocker (
        /*[in]*/ BSTR Guid ) = 0;
      virtual HRESULT __stdcall get_FrameWindows (
        /*[out,retval]*/ struct ICUIFrameWindows * * ppVal ) = 0;
      virtual HRESULT __stdcall get_MainFrameWindow (
        /*[out,retval]*/ struct ICUIFrameWindow * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct ICUIApplication * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_CreateFrameWindowForViewHost (
        /*[in]*/ struct ICUIViewHost * ViewHostToInsert,
        /*[out,retval]*/ struct ICUIFrameWindow * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_CreateFrameWindowForView (
        /*[in]*/ struct ICUIViewWindow * ViewToInsert,
        /*[out,retval]*/ struct ICUIFrameWindow * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_ShowDialog (
        /*[in]*/ BSTR Guid ) = 0;
      virtual HRESULT __stdcall raw_HideDialog (
        /*[in]*/ BSTR Guid ) = 0;
      virtual HRESULT __stdcall raw_ShowMessageBox (
        /*[in]*/ BSTR szMessage,
        /*[in]*/ BSTR szMainInstruction,
        /*[in]*/ long unFlags,
        /*[in]*/ struct ICUIBitmapImage * pImage,
        /*[in]*/ BSTR szHelpGuid,
        /*[in]*/ BSTR szWarningName,
        /*[in]*/ enum cuiMessageBoxFlags eFlags,
        /*[in]*/ struct ICUIDataContext * pDataContext,
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetWarning (
        /*[in]*/ BSTR szWarningID,
        /*[in]*/ VARIANT_BOOL bHidden,
        /*[out,retval]*/ struct ICUIWarning * * __MIDL__ICUIFrameWork0000 ) = 0;
      virtual HRESULT __stdcall get_TaskManager (
        /*[out,retval]*/ struct ICUITaskManager * * ppVal ) = 0;
};

struct __declspec(uuid("9cee000f-42a0-5980-43a3-7aa71461482c"))
ICUIFrameWindows : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetItem))
    ICUIFrameWindowPtr Item[];
    __declspec(property(get=GetFirst))
    ICUIFrameWindowPtr First;
    __declspec(property(get=GetLast))
    ICUIFrameWindowPtr Last;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    ICUIFrameWindowPtr GetItem (
        long Index );
    IUnknownPtr Get_NewEnum ( );
    ICUIFrameWindowPtr Find (
        _bstr_t ID );
    ICUIFrameWindowPtr GetFirst ( );
    ICUIFrameWindowPtr GetLast ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct ICUIFrameWindow * * ppVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_Find (
        /*[in]*/ BSTR ID,
        /*[out,retval]*/ struct ICUIFrameWindow * * ppVal ) = 0;
      virtual HRESULT __stdcall get_First (
        /*[out,retval]*/ struct ICUIFrameWindow * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Last (
        /*[out,retval]*/ struct ICUIFrameWindow * * ppVal ) = 0;
};

struct __declspec(uuid("9cee0010-42a0-5980-43a3-7aa71461482c"))
ICUIFrameWindow : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetID))
    _bstr_t ID;
    __declspec(property(get=GetCaption))
    _bstr_t Caption;
    __declspec(property(get=GetState))
    enum cuiWindowState State;
    __declspec(property(get=GetIsMainFrame))
    VARIANT_BOOL IsMainFrame;
    __declspec(property(get=GetIsActive))
    VARIANT_BOOL IsActive;
    __declspec(property(get=GetHandle))
    long Handle;
    __declspec(property(get=GetViewHosts))
    ICUIViewHostsPtr ViewHosts;
    __declspec(property(get=GetDockHosts))
    ICUIDockHostsPtr DockHosts;
    __declspec(property(get=GetRootDockHost))
    ICUIDockHostPtr RootDockHost;
    __declspec(property(get=GetPosition))
    ICUIScreenRectPtr Position;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetID ( );
    _bstr_t GetCaption ( );
    HRESULT Minimize ( );
    HRESULT Maximize ( );
    HRESULT Restore ( );
    enum cuiWindowState GetState ( );
    VARIANT_BOOL GetIsMainFrame ( );
    HRESULT Close ( );
    HRESULT Activate ( );
    VARIANT_BOOL GetIsActive ( );
    long GetHandle ( );
    HRESULT TileViews (
        VARIANT_BOOL TileHorizontally );
    HRESULT CombineViews ( );
    ICUIViewHostsPtr GetViewHosts ( );
    ICUIDockHostsPtr GetDockHosts ( );
    ICUIDockHostPtr GetRootDockHost ( );
    ICUIScreenRectPtr GetPosition ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ID (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_Caption (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall raw_Minimize ( ) = 0;
      virtual HRESULT __stdcall raw_Maximize ( ) = 0;
      virtual HRESULT __stdcall raw_Restore ( ) = 0;
      virtual HRESULT __stdcall get_State (
        /*[out,retval]*/ enum cuiWindowState * pVal ) = 0;
      virtual HRESULT __stdcall get_IsMainFrame (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_Close ( ) = 0;
      virtual HRESULT __stdcall raw_Activate ( ) = 0;
      virtual HRESULT __stdcall get_IsActive (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_Handle (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_TileViews (
        /*[in]*/ VARIANT_BOOL TileHorizontally ) = 0;
      virtual HRESULT __stdcall raw_CombineViews ( ) = 0;
      virtual HRESULT __stdcall get_ViewHosts (
        /*[out,retval]*/ struct ICUIViewHosts * * ppVal ) = 0;
      virtual HRESULT __stdcall get_DockHosts (
        /*[out,retval]*/ struct ICUIDockHosts * * ppVal ) = 0;
      virtual HRESULT __stdcall get_RootDockHost (
        /*[out,retval]*/ struct ICUIDockHost * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Position (
        /*[out,retval]*/ struct ICUIScreenRect * * ppVal ) = 0;
};

struct __declspec(uuid("9cee0011-42a0-5980-43a3-7aa71461482c"))
ICUIViewHosts : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetItem))
    ICUIViewHostPtr Item[];
    __declspec(property(get=GetFirst))
    ICUIViewHostPtr First;
    __declspec(property(get=GetLast))
    ICUIViewHostPtr Last;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    ICUIViewHostPtr GetItem (
        long Index );
    IUnknownPtr Get_NewEnum ( );
    ICUIViewHostPtr Find (
        _bstr_t ID );
    ICUIViewHostPtr GetFirst ( );
    ICUIViewHostPtr GetLast ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct ICUIViewHost * * ppVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_Find (
        /*[in]*/ BSTR ID,
        /*[out,retval]*/ struct ICUIViewHost * * ppVal ) = 0;
      virtual HRESULT __stdcall get_First (
        /*[out,retval]*/ struct ICUIViewHost * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Last (
        /*[out,retval]*/ struct ICUIViewHost * * ppVal ) = 0;
};

struct __declspec(uuid("9cee0012-42a0-5980-43a3-7aa71461482c"))
ICUIViewHost : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetID))
    _bstr_t ID;
    __declspec(property(get=GetDockHost))
    ICUIDockHostPtr DockHost;
    __declspec(property(get=GetViews))
    ICUIViewWindowsPtr Views;
    __declspec(property(get=GetDockItem))
    ICUIDockItemPtr DockItem;
    __declspec(property(get=GetPosition))
    ICUIScreenRectPtr Position;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetID ( );
    ICUIDockHostPtr GetDockHost ( );
    ICUIViewWindowsPtr GetViews ( );
    ICUIDockItemPtr GetDockItem ( );
    ICUIScreenRectPtr GetPosition ( );
    HRESULT InsertView (
        struct ICUIViewWindow * ViewToInsert,
        long Index );
    HRESULT InsertViewHost (
        struct ICUIViewHost * ViewHostToInsert,
        long Index );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ID (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_DockHost (
        /*[out,retval]*/ struct ICUIDockHost * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Views (
        /*[out,retval]*/ struct ICUIViewWindows * * ppVal ) = 0;
      virtual HRESULT __stdcall get_DockItem (
        /*[out,retval]*/ struct ICUIDockItem * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Position (
        /*[out,retval]*/ struct ICUIScreenRect * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_InsertView (
        /*[in]*/ struct ICUIViewWindow * ViewToInsert,
        /*[in]*/ long Index ) = 0;
      virtual HRESULT __stdcall raw_InsertViewHost (
        /*[in]*/ struct ICUIViewHost * ViewHostToInsert,
        /*[in]*/ long Index ) = 0;
};

struct __declspec(uuid("9cee0016-42a0-5980-43a3-7aa71461482c"))
ICUIViewWindow : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetID))
    _bstr_t ID;
    __declspec(property(get=GetViewHost))
    ICUIViewHostPtr ViewHost;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetKind))
    _bstr_t Kind;
    __declspec(property(get=GetTitle))
    _bstr_t Title;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPosition))
    ICUIScreenRectPtr Position;
    __declspec(property(get=GetAppView))
    IDispatchPtr AppView;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetID ( );
    ICUIViewHostPtr GetViewHost ( );
    long GetIndex ( );
    _bstr_t GetKind ( );
    _bstr_t GetTitle ( );
    _bstr_t GetDescription ( );
    ICUIScreenRectPtr GetPosition ( );
    HRESULT Activate ( );
    HRESULT Close ( );
    IDispatchPtr GetAppView ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ID (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_ViewHost (
        /*[out,retval]*/ struct ICUIViewHost * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Index (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_Title (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_Position (
        /*[out,retval]*/ struct ICUIScreenRect * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_Activate ( ) = 0;
      virtual HRESULT __stdcall raw_Close ( ) = 0;
      virtual HRESULT __stdcall get_AppView (
        /*[out,retval]*/ IDispatch * * ppVal ) = 0;
};

struct __declspec(uuid("9cee0015-42a0-5980-43a3-7aa71461482c"))
ICUIViewWindows : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetItem))
    ICUIViewWindowPtr Item[];
    __declspec(property(get=GetFirst))
    ICUIViewWindowPtr First;
    __declspec(property(get=GetLast))
    ICUIViewWindowPtr Last;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    ICUIViewWindowPtr GetItem (
        long Index );
    IUnknownPtr Get_NewEnum ( );
    ICUIViewWindowPtr Find (
        _bstr_t ID );
    ICUIViewWindowPtr GetFirst ( );
    ICUIViewWindowPtr GetLast ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct ICUIViewWindow * * ppVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_Find (
        /*[in]*/ BSTR ID,
        /*[out,retval]*/ struct ICUIViewWindow * * ppVal ) = 0;
      virtual HRESULT __stdcall get_First (
        /*[out,retval]*/ struct ICUIViewWindow * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Last (
        /*[out,retval]*/ struct ICUIViewWindow * * ppVal ) = 0;
};

struct __declspec(uuid("9cee0014-42a0-5980-43a3-7aa71461482c"))
ICUIDockHost : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetID))
    _bstr_t ID;
    __declspec(property(get=GetOrientation))
    enum cuiDockHostOrientation Orientation;
    __declspec(property(get=GetParentDockHost))
    ICUIDockHostPtr ParentDockHost;
    __declspec(property(get=GetDockItem))
    ICUIDockItemPtr DockItem;
    __declspec(property(get=GetChildren))
    ICUIDockItemsPtr Children;
    __declspec(property(get=GetPosition))
    ICUIScreenRectPtr Position;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetID ( );
    enum cuiDockHostOrientation GetOrientation ( );
    ICUIDockHostPtr GetParentDockHost ( );
    ICUIDockItemPtr GetDockItem ( );
    ICUIDockItemsPtr GetChildren ( );
    HRESULT InsertViewHost (
        struct ICUIViewHost * ViewHostToInsert,
        long Index,
        enum cuiDockOperation Operation );
    ICUIViewHostPtr InsertView (
        struct ICUIViewWindow * ViewToInsert,
        long Index,
        enum cuiDockOperation Operation );
    ICUIScreenRectPtr GetPosition ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ID (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_Orientation (
        /*[out,retval]*/ enum cuiDockHostOrientation * pVal ) = 0;
      virtual HRESULT __stdcall get_ParentDockHost (
        /*[out,retval]*/ struct ICUIDockHost * * ppVal ) = 0;
      virtual HRESULT __stdcall get_DockItem (
        /*[out,retval]*/ struct ICUIDockItem * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Children (
        /*[out,retval]*/ struct ICUIDockItems * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_InsertViewHost (
        /*[in]*/ struct ICUIViewHost * ViewHostToInsert,
        /*[in]*/ long Index,
        /*[in]*/ enum cuiDockOperation Operation ) = 0;
      virtual HRESULT __stdcall raw_InsertView (
        /*[in]*/ struct ICUIViewWindow * ViewToInsert,
        /*[in]*/ long Index,
        /*[in]*/ enum cuiDockOperation Operation,
        /*[out,retval]*/ struct ICUIViewHost * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Position (
        /*[out,retval]*/ struct ICUIScreenRect * * ppVal ) = 0;
};

struct __declspec(uuid("9cee0018-42a0-5980-43a3-7aa71461482c"))
ICUIDockItem : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetID))
    _bstr_t ID;
    __declspec(property(get=GetType))
    enum cuiDockItemType Type;
    __declspec(property(get=GetViewHost))
    ICUIViewHostPtr ViewHost;
    __declspec(property(get=GetDockHost))
    ICUIDockHostPtr DockHost;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetRelativeSize,put=PutRelativeSize))
    long RelativeSize;
    __declspec(property(get=GetPosition))
    ICUIScreenRectPtr Position;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetID ( );
    enum cuiDockItemType GetType ( );
    ICUIViewHostPtr GetViewHost ( );
    ICUIDockHostPtr GetDockHost ( );
    long GetIndex ( );
    long GetRelativeSize ( );
    void PutRelativeSize (
        long pVal );
    ICUIScreenRectPtr GetPosition ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ID (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum cuiDockItemType * pVal ) = 0;
      virtual HRESULT __stdcall get_ViewHost (
        /*[out,retval]*/ struct ICUIViewHost * * ppVal ) = 0;
      virtual HRESULT __stdcall get_DockHost (
        /*[out,retval]*/ struct ICUIDockHost * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Index (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_RelativeSize (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_RelativeSize (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_Position (
        /*[out,retval]*/ struct ICUIScreenRect * * ppVal ) = 0;
};

struct __declspec(uuid("9cee0017-42a0-5980-43a3-7aa71461482c"))
ICUIDockItems : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetItem))
    ICUIDockItemPtr Item[];
    __declspec(property(get=GetFirst))
    ICUIDockItemPtr First;
    __declspec(property(get=GetLast))
    ICUIDockItemPtr Last;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    ICUIDockItemPtr GetItem (
        long Index );
    IUnknownPtr Get_NewEnum ( );
    ICUIDockItemPtr Find (
        _bstr_t ID );
    ICUIDockItemPtr GetFirst ( );
    ICUIDockItemPtr GetLast ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct ICUIDockItem * * ppVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_Find (
        /*[in]*/ BSTR ID,
        /*[out,retval]*/ struct ICUIDockItem * * ppVal ) = 0;
      virtual HRESULT __stdcall get_First (
        /*[out,retval]*/ struct ICUIDockItem * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Last (
        /*[out,retval]*/ struct ICUIDockItem * * ppVal ) = 0;
};

struct __declspec(uuid("9cee0013-42a0-5980-43a3-7aa71461482c"))
ICUIDockHosts : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetItem))
    ICUIDockHostPtr Item[];
    __declspec(property(get=GetFirst))
    ICUIDockHostPtr First;
    __declspec(property(get=GetLast))
    ICUIDockHostPtr Last;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    ICUIDockHostPtr GetItem (
        long Index );
    IUnknownPtr Get_NewEnum ( );
    ICUIDockHostPtr Find (
        _bstr_t ID );
    ICUIDockHostPtr GetFirst ( );
    ICUIDockHostPtr GetLast ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct ICUIDockHost * * ppVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_Find (
        /*[in]*/ BSTR ID,
        /*[out,retval]*/ struct ICUIDockHost * * ppVal ) = 0;
      virtual HRESULT __stdcall get_First (
        /*[out,retval]*/ struct ICUIDockHost * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Last (
        /*[out,retval]*/ struct ICUIDockHost * * ppVal ) = 0;
};

struct __declspec(uuid("9cee000a-42a0-5980-43a3-7aa71461482c"))
ICUIApplication : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetDataContext))
    ICUIDataContextPtr DataContext;
    __declspec(property(get=GetFrameWork))
    ICUIFrameWorkPtr FrameWork;

    //
    // Wrapper methods for error-handling
    //

    ICUIDataContextPtr GetDataContext ( );
    VARIANT_BOOL RegisterDataSource (
        _bstr_t DataSourceName,
        struct ICUIDataSourceFactory * Factory,
        _bstr_t CategoryList,
        VARIANT_BOOL AutoCreateInstance );
    VARIANT_BOOL UnregisterDataSource (
        _bstr_t DataSourceName );
    ICUIImageListPtr CreateImageList ( );
    ICUIFrameWorkPtr GetFrameWork ( );
    ICUIScreenRectPtr CreateScreenRect (
        long Left,
        long Top,
        long Width,
        long Height );
    ICUIBitmapImagePtr CreateBitmapImage (
        const _variant_t & ImageData,
        long MaxSize );
    ICUIStatusTextPtr CreateStatusText ( );
    _bstr_t LoadLocalizedString (
        _bstr_t Guid );
    ICUIDataSourceFactoryPtr CreateDataSourceFactory (
        IDispatch * DataSourceFactoryObject );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_DataContext (
        /*[out,retval]*/ struct ICUIDataContext * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_RegisterDataSource (
        /*[in]*/ BSTR DataSourceName,
        /*[in]*/ struct ICUIDataSourceFactory * Factory,
        /*[in]*/ BSTR CategoryList,
        /*[in]*/ VARIANT_BOOL AutoCreateInstance,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_UnregisterDataSource (
        /*[in]*/ BSTR DataSourceName,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_CreateImageList (
        /*[out,retval]*/ struct ICUIImageList * * ppVal ) = 0;
      virtual HRESULT __stdcall get_FrameWork (
        /*[out,retval]*/ struct ICUIFrameWork * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_CreateScreenRect (
        /*[in]*/ long Left,
        /*[in]*/ long Top,
        /*[in]*/ long Width,
        /*[in]*/ long Height,
        /*[out,retval]*/ struct ICUIScreenRect * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_CreateBitmapImage (
        /*[in]*/ VARIANT ImageData,
        /*[in]*/ long MaxSize,
        /*[out,retval]*/ struct ICUIBitmapImage * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_CreateStatusText (
        /*[out,retval]*/ struct ICUIStatusText * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_LoadLocalizedString (
        /*[in]*/ BSTR Guid,
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall raw_CreateDataSourceFactory (
        /*[in]*/ IDispatch * DataSourceFactoryObject,
        /*[out,retval]*/ struct ICUIDataSourceFactory * * ppVal ) = 0;
};

struct __declspec(uuid("9cee000c-42a0-5980-43a3-7aa71461482c"))
ICUIDataSourceProxy : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    ICUIApplicationPtr Application;
    __declspec(property(get=GetName))
    _bstr_t Name;

    //
    // Wrapper methods for error-handling
    //

    HRESULT UpdateListeners (
        _bstr_t ListenerNames );
    ICUIApplicationPtr GetApplication ( );
    _bstr_t GetName ( );
    HRESULT InvokeMethod (
        _bstr_t MethodName );
    _variant_t GetProperty (
        _bstr_t PropertyName );
    HRESULT SetProperty (
        _bstr_t PropertyName,
        const _variant_t & Value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_UpdateListeners (
        /*[in]*/ BSTR ListenerNames ) = 0;
      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct ICUIApplication * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall raw_InvokeMethod (
        /*[in]*/ BSTR MethodName ) = 0;
      virtual HRESULT __stdcall raw_GetProperty (
        /*[in]*/ BSTR PropertyName,
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetProperty (
        /*[in]*/ BSTR PropertyName,
        /*[in]*/ VARIANT Value ) = 0;
};

struct __declspec(uuid("9cee000b-42a0-5980-43a3-7aa71461482c"))
ICUIDataContext : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCategories))
    _bstr_t Categories;

    //
    // Wrapper methods for error-handling
    //

    ICUIDataContextPtr CreateChildDataContext (
        _bstr_t CategoryList );
    _bstr_t GetCategories ( );
    VARIANT_BOOL HasCategory (
        _bstr_t Category );
    ICUIDataSourceProxyPtr AddDataSource (
        _bstr_t DataSourceName,
        IDispatch * DataSourceObject );
    VARIANT_BOOL ShowDialog (
        _bstr_t dialogID );
    ICUIDataSourceProxyPtr GetDataSource (
        _bstr_t DataSourceName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_CreateChildDataContext (
        /*[in]*/ BSTR CategoryList,
        /*[out,retval]*/ struct ICUIDataContext * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Categories (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall raw_HasCategory (
        /*[in]*/ BSTR Category,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_AddDataSource (
        /*[in]*/ BSTR DataSourceName,
        /*[in]*/ IDispatch * DataSourceObject,
        /*[out,retval]*/ struct ICUIDataSourceProxy * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_ShowDialog (
        /*[in]*/ BSTR dialogID,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetDataSource (
        /*[in]*/ BSTR DataSourceName,
        /*[out,retval]*/ struct ICUIDataSourceProxy * * ppVal ) = 0;
};

struct __declspec(uuid("9cee000d-42a0-5980-43a3-7aa71461482c"))
ICUIDataSourceFactory : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr CreateDataSource (
        _bstr_t DataSourceName,
        struct ICUIDataSourceProxy * Proxy );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_CreateDataSource (
        /*[in]*/ BSTR DataSourceName,
        /*[in]*/ struct ICUIDataSourceProxy * Proxy,
        /*[out,retval]*/ IDispatch * * ppVal ) = 0;
};

struct __declspec(uuid("b0580024-9aa4-44fd-9547-4f91eb757ac4"))
IVGDocument : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    IVGApplicationPtr Application;
    __declspec(property(get=GetParent))
    IVGDocumentsPtr Parent;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=Get_CodeName,put=Put_CodeName))
    _bstr_t _CodeName;
    __declspec(property(get=GetHatchLibraries))
    IVGHatchLibrariesPtr HatchLibraries;
    __declspec(property(get=GetPages))
    IVGPagesPtr Pages;
    __declspec(property(get=GetReferencePoint,put=PutReferencePoint))
    enum cdrReferencePoint ReferencePoint;
    __declspec(property(get=GetSourcePlatformVersion,put=PutSourcePlatformVersion))
    double SourcePlatformVersion;
    __declspec(property(get=GetApplyToDuplicate,put=PutApplyToDuplicate))
    VARIANT_BOOL ApplyToDuplicate;
    __declspec(property(get=GetSourceFormat))
    enum cdrFilter SourceFormat;
    __declspec(property(get=GetActivePage))
    IVGPagePtr ActivePage;
    __declspec(property(get=GetActiveLayer))
    IVGLayerPtr ActiveLayer;
    __declspec(property(get=GetWindows))
    IVGWindowsPtr Windows;
    __declspec(property(get=GetActiveWindow))
    IVGWindowPtr ActiveWindow;
    __declspec(property(get=GetIsCurrentVersion))
    VARIANT_BOOL IsCurrentVersion;
    __declspec(property(get=GetSourceFileVersion,put=PutSourceFileVersion))
    enum cdrFileVersion SourceFileVersion;
    __declspec(property(get=GetMetadata))
    IVGMetadataPtr Metadata;
    __declspec(property(get=GetLayout,put=PutLayout))
    enum cdrDocLayout Layout;
    __declspec(property(get=GetFacingPages,put=PutFacingPages))
    VARIANT_BOOL FacingPages;
    __declspec(property(get=GetUnit,put=PutUnit))
    enum cdrUnit Unit;
    __declspec(property(get=GetFirstPageOnRightSide,put=PutFirstPageOnRightSide))
    VARIANT_BOOL FirstPageOnRightSide;
    __declspec(property(get=GetDrawingOriginX,put=PutDrawingOriginX))
    double DrawingOriginX;
    __declspec(property(get=GetSpreads))
    IVGSpreadsPtr Spreads;
    __declspec(property(get=GetDrawingOriginY,put=PutDrawingOriginY))
    double DrawingOriginY;
    __declspec(property(get=GetActiveSpread))
    IVGSpreadPtr ActiveSpread;
    __declspec(property(get=GetDirty,put=PutDirty))
    VARIANT_BOOL Dirty;
    __declspec(property(get=GetIsTemporary))
    VARIANT_BOOL IsTemporary;
    __declspec(property(get=GetColorContext))
    IVGColorContextPtr ColorContext;
    __declspec(property(get=GetFilePath))
    _bstr_t FilePath;
    __declspec(property(get=GetFileName))
    _bstr_t FileName;
    __declspec(property(get=GetFullFileName,put=PutFullFileName))
    _bstr_t FullFileName;
    __declspec(property(get=GetResolution,put=PutResolution))
    long Resolution;
    __declspec(property(get=GetPalette))
    IVGPalettePtr Palette;
    __declspec(property(get=GetShapeEnumDirection,put=PutShapeEnumDirection))
    enum cdrShapeEnumDirection ShapeEnumDirection;
    __declspec(property(get=GetTextFormatter,put=PutTextFormatter))
    long TextFormatter;
    __declspec(property(get=GetSelectionRange))
    IVGShapeRangePtr SelectionRange;
    __declspec(property(get=GetRulers))
    IVGRulersPtr Rulers;
    __declspec(property(get=GetGrid))
    IVGGridPtr Grid;
    __declspec(property(get=GetViews))
    IVGViewsPtr Views;
    __declspec(property(get=GetStyleSheet))
    IVGStyleSheetPtr StyleSheet;
    __declspec(property(get=GetActivePowerClip))
    IVGPowerClipPtr ActivePowerClip;
    __declspec(property(get=GetWorldScale,put=PutWorldScale))
    double WorldScale;
    __declspec(property(get=GetContentIdentifiers))
    SAFEARRAY * ContentIdentifiers;
    __declspec(property(get=GetActiveShape))
    IVGShapePtr ActiveShape;
    __declspec(property(get=GetCurvePrecision,put=PutCurvePrecision))
    long CurvePrecision;
    __declspec(property(get=GetMath))
    IVGMathUtilsPtr Math;
    __declspec(property(get=GetMarkup))
    IVGDocumentMarkupPtr Markup;
    __declspec(property(get=GetTitle))
    _bstr_t Title;
    __declspec(property(get=GetActive))
    VARIANT_BOOL Active;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetEditAcrossLayers,put=PutEditAcrossLayers))
    VARIANT_BOOL EditAcrossLayers;
    __declspec(property(get=GetProperties))
    IVGPropertiesPtr Properties;
    __declspec(property(get=GetPrintSettings))
    IPrnVBAPrintSettingsPtr PrintSettings;
    __declspec(property(get=GetKeywords,put=PutKeywords))
    _bstr_t Keywords;
    __declspec(property(get=GetNotes,put=PutNotes))
    _bstr_t Notes;
    __declspec(property(get=GetPreserveSelection,put=PutPreserveSelection))
    VARIANT_BOOL PreserveSelection;
    __declspec(property(get=GetDataFields))
    IVGDataFieldsPtr DataFields;
    __declspec(property(get=GetPDFSettings))
    IPDFVBASettingsPtr PDFSettings;
    __declspec(property(get=GetSelectionInfo))
    IVGSelectionInformationPtr SelectionInfo;
    __declspec(property(get=GetPageSizes))
    IVGPageSizesPtr PageSizes;
    __declspec(property(get=GetComponents))
    IVGComponentsPtr Components;
    __declspec(property(get=GetSymbolLibrary))
    IVGSymbolLibraryPtr SymbolLibrary;
    __declspec(property(get=GetSelectableShapes))
    IVGShapesPtr SelectableShapes;
    __declspec(property(get=GetResolutionX,put=PutResolutionX))
    long ResolutionX;
    __declspec(property(get=GetResolutionY,put=PutResolutionY))
    long ResolutionY;
    __declspec(property(get=GetMasterPage))
    IVGPagePtr MasterPage;
    __declspec(property(get=GetCodeName))
    _bstr_t CodeName;
    __declspec(property(get=GetTreeRoot))
    IVGTreeNodePtr TreeRoot;
    __declspec(property(get=GetTreeManager))
    IVGTreeManagerPtr TreeManager;

    //
    // Wrapper methods for error-handling
    //

    IVGApplicationPtr GetApplication ( );
    IVGDocumentsPtr GetParent ( );
    _bstr_t GetName ( );
    HRESULT SaveAs (
        _bstr_t FileName,
        struct IVGStructSaveAsOptions * Options );
    HRESULT Save ( );
    IVGPagesPtr GetPages ( );
    enum cdrReferencePoint GetReferencePoint ( );
    void PutReferencePoint (
        enum cdrReferencePoint pRefPoint );
    VARIANT_BOOL GetApplyToDuplicate ( );
    void PutApplyToDuplicate (
        VARIANT_BOOL ApplyToDuplicate );
    IVGPagePtr GetActivePage ( );
    IVGLayerPtr GetActiveLayer ( );
    IVGWindowsPtr GetWindows ( );
    IVGWindowPtr GetActiveWindow ( );
    HRESULT Close ( );
    HRESULT Undo (
        long Levels );
    HRESULT Redo (
        long Levels );
    HRESULT Repeat ( );
    HRESULT Activate ( );
    enum cdrUnit GetUnit ( );
    void PutUnit (
        enum cdrUnit pnUnit );
    double GetDrawingOriginX ( );
    void PutDrawingOriginX (
        double plX );
    double GetDrawingOriginY ( );
    void PutDrawingOriginY (
        double plY );
    IVGPagePtr AddPages (
        long NumberOfPages );
    IVGPagePtr InsertPages (
        long NumberOfPages,
        VARIANT_BOOL BeforePage,
        long Page );
    IVGShapePtr Selection ( );
    HRESULT ClearSelection ( );
    HRESULT Export (
        _bstr_t FileName,
        enum cdrFilter Filter,
        enum cdrExportRange Range,
        struct IVGStructExportOptions * Options,
        struct IVGStructPaletteOptions * PaletteOptions );
    HRESULT ResolveAllBitmapsLinks ( );
    VARIANT_BOOL GetDirty ( );
    void PutDirty (
        VARIANT_BOOL Dirty );
    long GetUserClick (
        double * x,
        double * y,
        long * ShiftState,
        long TimeOut,
        VARIANT_BOOL Snap,
        enum cdrCursorShape CursorShape );
    long GetUserArea (
        double * x1,
        double * y1,
        double * x2,
        double * y2,
        long * ShiftState,
        long TimeOut,
        VARIANT_BOOL Snap,
        enum cdrCursorShape CursorShape );
    HRESULT BeginCommandGroup (
        _bstr_t CommandName );
    HRESULT EndCommandGroup ( );
    _bstr_t GetFilePath ( );
    _bstr_t GetFileName ( );
    _bstr_t GetFullFileName ( );
    long GetResolution ( );
    void PutResolution (
        long pResolution );
    enum cdrShapeEnumDirection GetShapeEnumDirection ( );
    void PutShapeEnumDirection (
        enum cdrShapeEnumDirection peDirection );
    IVGShapeRangePtr GetSelectionRange ( );
    IVGRulersPtr GetRulers ( );
    IVGGridPtr GetGrid ( );
    IVGViewsPtr GetViews ( );
    IVGViewPtr CreateView (
        _bstr_t Name,
        double OriginX,
        double OriginY,
        long Zoom,
        struct IVGPage * Page );
    IVGPowerClipPtr GetActivePowerClip ( );
    long AdviseEvents (
        IDispatch * EventSink );
    HRESULT UnadviseEvents (
        long Cookie );
    double GetWorldScale ( );
    void PutWorldScale (
        double Scale );
    HRESULT PrintOut ( );
    IVGShapePtr GetActiveShape ( );
    long GetCurvePrecision ( );
    IVGPagePtr AddPagesEx (
        long NumberOfPages,
        double Width,
        double Height );
    IVGPagePtr InsertPagesEx (
        long NumberOfPages,
        VARIANT_BOOL BeforePage,
        long Page,
        double Width,
        double Height );
    _bstr_t GetTitle ( );
    HRESULT SaveSettings (
        _bstr_t Tag );
    HRESULT RestoreSettings (
        _bstr_t Tag );
    VARIANT_BOOL GetActive ( );
    long GetIndex ( );
    ICorelExportFilterPtr ExportEx (
        _bstr_t FileName,
        enum cdrFilter Filter,
        enum cdrExportRange Range,
        struct IVGStructExportOptions * Options,
        struct IVGStructPaletteOptions * PaletteOptions );
    ICorelExportFilterPtr ExportBitmap (
        _bstr_t FileName,
        enum cdrFilter Filter,
        enum cdrExportRange Range,
        enum cdrImageType ImageType,
        long Width,
        long Height,
        long ResolutionX,
        long ResolutionY,
        enum cdrAntiAliasingType AntiAliasingType,
        VARIANT_BOOL Dithered,
        VARIANT_BOOL Transparent,
        VARIANT_BOOL UseColorProfile,
        VARIANT_BOOL MaintainLayers,
        enum cdrCompressionType Compression,
        struct IVGStructPaletteOptions * PaletteOptions,
        struct IVGRect * ExportArea );
    VARIANT_BOOL GetEditAcrossLayers ( );
    void PutEditAcrossLayers (
        VARIANT_BOOL pVal );
    IVGPropertiesPtr GetProperties ( );
    void PutCurvePrecision (
        long lpPrec );
    IPrnVBAPrintSettingsPtr GetPrintSettings ( );
    _bstr_t GetKeywords ( );
    void PutKeywords (
        _bstr_t pVal );
    _bstr_t GetNotes ( );
    void PutNotes (
        _bstr_t pVal );
    VARIANT_BOOL GetPreserveSelection ( );
    void PutPreserveSelection (
        VARIANT_BOOL pVal );
    HRESULT ResetSettings ( );
    IVGDataFieldsPtr GetDataFields ( );
    IPDFVBASettingsPtr GetPDFSettings ( );
    HRESULT PublishToPDF (
        _bstr_t FileName );
    IVGSelectionInformationPtr GetSelectionInfo ( );
    IVGPageSizesPtr GetPageSizes ( );
    IVGComponentsPtr GetComponents ( );
    IVGSymbolLibraryPtr GetSymbolLibrary ( );
    IVGCurvePtr CreateCurve ( );
    IVGCurvePtr CreateCurveFromArray (
        SAFEARRAY * * Source,
        long NumElements );
    HRESULT LoadStyleSheet (
        _bstr_t FileName );
    HRESULT SaveStyleSheet (
        _bstr_t FileName );
    HRESULT SaveStyleSheetAsDefault ( );
    HRESULT CreateSelection (
        SAFEARRAY * * ShapeArray );
    HRESULT AddToSelection (
        SAFEARRAY * * ShapeArray );
    HRESULT RemoveFromSelection (
        SAFEARRAY * * ShapeArray );
    IVGShapesPtr GetSelectableShapes ( );
    double ToUnits (
        double Value,
        enum cdrUnit FromUnit );
    double FromUnits (
        double Value,
        enum cdrUnit ToUnit );
    long GetResolutionX ( );
    void PutResolutionX (
        long pResolution );
    long GetResolutionY ( );
    void PutResolutionY (
        long pResolution );
    IVGPagePtr GetMasterPage ( );
    VARIANT_BOOL Revert ( );
    _bstr_t GetCodeName ( );
    _bstr_t Get_CodeName ( );
    void Put_CodeName (
        _bstr_t pVal );
    void PutName (
        _bstr_t pbstrName );
    void PutFullFileName (
        _bstr_t pFullFileName );
    IVGTreeNodePtr GetTreeRoot ( );
    IVGTreeManagerPtr GetTreeManager ( );
    IVGShapePtr LogCreateShape (
        struct IVGShape * VirtualShape );
    IVGShapeRangePtr LogCreateShapeRange (
        struct IVGShapeRange * VirtualShapeRange );
    IVGFillPtr CreateFill (
        _bstr_t FillString );
    IVGOutlinePtr CreateOutline (
        _bstr_t OutlineString );
    IVGHatchLibrariesPtr GetHatchLibraries ( );
    IVGShapeRangePtr CreateShapeRangeFromArray (
        SAFEARRAY * * ShapeArray );
    HRESULT ClearUndoList ( );
    double GetSourcePlatformVersion ( );
    void PutSourcePlatformVersion (
        double pVal );
    enum cdrFilter GetSourceFormat ( );
    VARIANT_BOOL GetIsCurrentVersion ( );
    enum cdrFileVersion GetSourceFileVersion ( );
    void PutSourceFileVersion (
        enum cdrFileVersion pVal );
    IVGFillPtr CreateUniformFill (
        struct IVGColor * Color );
    IVGMetadataPtr GetMetadata ( );
    enum cdrDocLayout GetLayout ( );
    void PutLayout (
        enum cdrDocLayout pVal );
    VARIANT_BOOL GetFacingPages ( );
    void PutFacingPages (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetFirstPageOnRightSide ( );
    void PutFirstPageOnRightSide (
        VARIANT_BOOL pVal );
    HRESULT SetLayout (
        enum cdrDocLayout Layout,
        VARIANT_BOOL FacingPages,
        VARIANT_BOOL StartOnRightSide );
    IVGSpreadsPtr GetSpreads ( );
    IVGSpreadPtr GetActiveSpread ( );
    IVGArrowHeadPtr CreateArrowHead (
        struct IVGCurve * Curve );
    IVGArrowHeadPtr CreateArrowHeadEx (
        struct IVGCurve * Curve,
        double CenterX,
        double CenterY,
        double OutlineWidthScale,
        double LineOffset );
    VARIANT_BOOL DeletePages (
        long StartPage,
        long NumPages );
    IVGArrowHeadPtr CreateArrowHead2 (
        struct IVGCurve * Curve,
        _bstr_t Name );
    IVGArrowHeadPtr CreateArrowHeadEx2 (
        struct IVGCurve * Curve,
        _bstr_t Name,
        double CenterX,
        double CenterY,
        double OutlineWidthScale,
        double LineOffset );
    IVGArrowHeadOptionsPtr CreateArrowHeadOptions (
        double Length,
        double Width,
        double OffsetX,
        double OffsetY,
        double RotationAngle,
        VARIANT_BOOL FlipHorizontal,
        VARIANT_BOOL FlipVertical );
    HRESULT SaveAsCopy (
        _bstr_t FileName,
        struct IVGStructSaveAsOptions * Options );
    IVGSnapPointPtr CreateFreeSnapPoint (
        double PositionX,
        double PositionY );
    IVGBSplinePtr CreateBSpline (
        long NumControlPoints,
        VARIANT_BOOL Closed );
    IVGDocumentPtr Duplicate ( );
    IVGDocumentPtr Clone ( );
    VARIANT_BOOL GetIsTemporary ( );
    IVGColorContextPtr GetColorContext ( );
    HRESULT AssignColorContext (
        struct IVGColorContext * ColorContext );
    HRESULT ConvertToColorContext (
        struct IVGColorContext * ColorContext );
    HRESULT PrintColorProof (
        struct IVGProofColorSettings * ProofSettings );
    IVGPalettePtr GetPalette ( );
    long GetTextFormatter ( );
    void PutTextFormatter (
        long pVal );
    IVGStyleSheetPtr GetStyleSheet ( );
    HRESULT InteractiveImport (
        SAFEARRAY * * FileNames );
    VARIANT_BOOL AddColorsToDocPalette (
        VARIANT_BOOL SelectedOnly,
        long MaxColorsPerBitmap );
    long CreateColorStyles (
        VARIANT_BOOL UseFills,
        VARIANT_BOOL UseOutlines,
        VARIANT_BOOL SelectedOnly,
        long NumberOfColorHarmonies,
        enum cdrColorType ConvertColorsTo );
    IVGCurvePtr CreateCurveFitToPoints (
        struct IVGPointRange * Points,
        VARIANT_BOOL UseCurrentViewForTolerance,
        double tolerance );
    IVGCurvePtr CreateCurveFitToPointsAndCusps (
        struct IVGPointRange * Points,
        SAFEARRAY * * CuspIndexArray,
        VARIANT_BOOL UseCurrentViewForTolerance,
        double tolerance );
    IVGColorPtr SampleColorAtPoint (
        double x,
        double y,
        enum cdrColorType ColorType );
    IVGColorPtr SampleColorInArea (
        double x1,
        double y1,
        double x2,
        double y2,
        long XSamples,
        long YSamples,
        enum cdrColorType ColorType );
    HRESULT ShowAllHiddenObjects ( );
    HRESULT InteractiveImportWithContentIdentifier (
        SAFEARRAY * * FileNames,
        SAFEARRAY * * ContentIdentifiers );
    HRESULT ReplaceContentByIdentifier (
        SAFEARRAY * * ContentIdentifiers,
        SAFEARRAY * * FileNames );
    SAFEARRAY * GetContentIdentifiers ( );
    _variant_t CustomCommand (
        _bstr_t ComponentID,
        _bstr_t CommandID,
        SAFEARRAY * * Parameters );
    IVGMathUtilsPtr GetMath ( );
    IVGImagePtr CreateImage (
        enum cdrImageType ImageType,
        long Width,
        long Height,
        struct IVGColor * FillColor );
    IVGDocumentMarkupPtr GetMarkup ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct IVGApplication * * ppApplication ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ struct IVGDocuments * * ppParent ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pbstrName ) = 0;
      virtual HRESULT __stdcall raw_SaveAs (
        /*[in]*/ BSTR FileName,
        /*[in]*/ struct IVGStructSaveAsOptions * Options ) = 0;
      virtual HRESULT __stdcall raw_Save ( ) = 0;
      virtual HRESULT __stdcall get_Pages (
        /*[out,retval]*/ struct IVGPages * * ppPages ) = 0;
      virtual HRESULT __stdcall get_ReferencePoint (
        /*[out,retval]*/ enum cdrReferencePoint * pRefPoint ) = 0;
      virtual HRESULT __stdcall put_ReferencePoint (
        /*[in]*/ enum cdrReferencePoint pRefPoint ) = 0;
      virtual HRESULT __stdcall get_ApplyToDuplicate (
        /*[out,retval]*/ VARIANT_BOOL * ApplyToDuplicate ) = 0;
      virtual HRESULT __stdcall put_ApplyToDuplicate (
        /*[in]*/ VARIANT_BOOL ApplyToDuplicate ) = 0;
      virtual HRESULT __stdcall get_ActivePage (
        /*[out,retval]*/ struct IVGPage * * ppVal ) = 0;
      virtual HRESULT __stdcall get_ActiveLayer (
        /*[out,retval]*/ struct IVGLayer * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Windows (
        /*[out,retval]*/ struct IVGWindows * * ppVal ) = 0;
      virtual HRESULT __stdcall get_ActiveWindow (
        /*[out,retval]*/ struct IVGWindow * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_Close ( ) = 0;
      virtual HRESULT __stdcall raw_Undo (
        /*[in]*/ long Levels ) = 0;
      virtual HRESULT __stdcall raw_Redo (
        /*[in]*/ long Levels ) = 0;
      virtual HRESULT __stdcall raw_Repeat ( ) = 0;
      virtual HRESULT __stdcall raw_Activate ( ) = 0;
      virtual HRESULT __stdcall get_Unit (
        /*[out,retval]*/ enum cdrUnit * pnUnit ) = 0;
      virtual HRESULT __stdcall put_Unit (
        /*[in]*/ enum cdrUnit pnUnit ) = 0;
      virtual HRESULT __stdcall get_DrawingOriginX (
        /*[out,retval]*/ double * plX ) = 0;
      virtual HRESULT __stdcall put_DrawingOriginX (
        /*[in]*/ double plX ) = 0;
      virtual HRESULT __stdcall get_DrawingOriginY (
        /*[out,retval]*/ double * plY ) = 0;
      virtual HRESULT __stdcall put_DrawingOriginY (
        /*[in]*/ double plY ) = 0;
      virtual HRESULT __stdcall raw_AddPages (
        /*[in]*/ long NumberOfPages,
        /*[out,retval]*/ struct IVGPage * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_InsertPages (
        /*[in]*/ long NumberOfPages,
        /*[in]*/ VARIANT_BOOL BeforePage,
        /*[in]*/ long Page,
        /*[out,retval]*/ struct IVGPage * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_Selection (
        /*[out,retval]*/ struct IVGShape * * pVal ) = 0;
      virtual HRESULT __stdcall raw_ClearSelection ( ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR FileName,
        /*[in]*/ enum cdrFilter Filter,
        /*[in]*/ enum cdrExportRange Range,
        /*[in]*/ struct IVGStructExportOptions * Options,
        /*[in]*/ struct IVGStructPaletteOptions * PaletteOptions ) = 0;
      virtual HRESULT __stdcall raw_ResolveAllBitmapsLinks ( ) = 0;
      virtual HRESULT __stdcall get_Dirty (
        /*[out,retval]*/ VARIANT_BOOL * Dirty ) = 0;
      virtual HRESULT __stdcall put_Dirty (
        /*[in]*/ VARIANT_BOOL Dirty ) = 0;
      virtual HRESULT __stdcall raw_GetUserClick (
        /*[out]*/ double * x,
        /*[out]*/ double * y,
        /*[out]*/ long * ShiftState,
        /*[in]*/ long TimeOut,
        /*[in]*/ VARIANT_BOOL Snap,
        /*[in]*/ enum cdrCursorShape CursorShape,
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetUserArea (
        /*[out]*/ double * x1,
        /*[out]*/ double * y1,
        /*[out]*/ double * x2,
        /*[out]*/ double * y2,
        /*[out]*/ long * ShiftState,
        /*[in]*/ long TimeOut,
        /*[in]*/ VARIANT_BOOL Snap,
        /*[in]*/ enum cdrCursorShape CursorShape,
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_BeginCommandGroup (
        /*[in]*/ BSTR CommandName ) = 0;
      virtual HRESULT __stdcall raw_EndCommandGroup ( ) = 0;
      virtual HRESULT __stdcall get_FilePath (
        /*[out,retval]*/ BSTR * pFilePath ) = 0;
      virtual HRESULT __stdcall get_FileName (
        /*[out,retval]*/ BSTR * pFileName ) = 0;
      virtual HRESULT __stdcall get_FullFileName (
        /*[out,retval]*/ BSTR * pFullFileName ) = 0;
      virtual HRESULT __stdcall get_Resolution (
        /*[out,retval]*/ long * pResolution ) = 0;
      virtual HRESULT __stdcall put_Resolution (
        /*[in]*/ long pResolution ) = 0;
      virtual HRESULT __stdcall get_ShapeEnumDirection (
        /*[out,retval]*/ enum cdrShapeEnumDirection * peDirection ) = 0;
      virtual HRESULT __stdcall put_ShapeEnumDirection (
        /*[in]*/ enum cdrShapeEnumDirection peDirection ) = 0;
      virtual HRESULT __stdcall get_SelectionRange (
        /*[out,retval]*/ struct IVGShapeRange * * pVal ) = 0;
      virtual HRESULT __stdcall get_Rulers (
        /*[out,retval]*/ struct IVGRulers * * ppRules ) = 0;
      virtual HRESULT __stdcall get_Grid (
        /*[out,retval]*/ struct IVGGrid * * ppGrid ) = 0;
      virtual HRESULT __stdcall get_Views (
        /*[out,retval]*/ struct IVGViews * * ppViews ) = 0;
      virtual HRESULT __stdcall raw_CreateView (
        /*[in]*/ BSTR Name,
        /*[in]*/ double OriginX,
        /*[in]*/ double OriginY,
        /*[in]*/ long Zoom,
        /*[in]*/ struct IVGPage * Page,
        /*[out,retval]*/ struct IVGView * * ppView ) = 0;
      virtual HRESULT __stdcall get_ActivePowerClip (
        /*[out,retval]*/ struct IVGPowerClip * * ppPowerClip ) = 0;
      virtual HRESULT __stdcall raw_AdviseEvents (
        /*[in]*/ IDispatch * EventSink,
        /*[out,retval]*/ long * pCookie ) = 0;
      virtual HRESULT __stdcall raw_UnadviseEvents (
        /*[in]*/ long Cookie ) = 0;
      virtual HRESULT __stdcall get_WorldScale (
        /*[out,retval]*/ double * Scale ) = 0;
      virtual HRESULT __stdcall put_WorldScale (
        /*[in]*/ double Scale ) = 0;
      virtual HRESULT __stdcall raw_PrintOut ( ) = 0;
      virtual HRESULT __stdcall get_ActiveShape (
        /*[out,retval]*/ struct IVGShape * * pVal ) = 0;
      virtual HRESULT __stdcall get_CurvePrecision (
        /*[out,retval]*/ long * lpPrec ) = 0;
      virtual HRESULT __stdcall raw_AddPagesEx (
        /*[in]*/ long NumberOfPages,
        /*[in]*/ double Width,
        /*[in]*/ double Height,
        /*[out,retval]*/ struct IVGPage * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_InsertPagesEx (
        /*[in]*/ long NumberOfPages,
        /*[in]*/ VARIANT_BOOL BeforePage,
        /*[in]*/ long Page,
        /*[in]*/ double Width,
        /*[in]*/ double Height,
        /*[out,retval]*/ struct IVGPage * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Title (
        /*[out,retval]*/ BSTR * pbstrTitle ) = 0;
      virtual HRESULT __stdcall raw_SaveSettings (
        /*[in]*/ BSTR Tag ) = 0;
      virtual HRESULT __stdcall raw_RestoreSettings (
        /*[in]*/ BSTR Tag ) = 0;
      virtual HRESULT __stdcall get_Active (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_Index (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_ExportEx (
        /*[in]*/ BSTR FileName,
        /*[in]*/ enum cdrFilter Filter,
        /*[in]*/ enum cdrExportRange Range,
        /*[in]*/ struct IVGStructExportOptions * Options,
        /*[in]*/ struct IVGStructPaletteOptions * PaletteOptions,
        /*[out,retval]*/ struct ICorelExportFilter * * pRet ) = 0;
      virtual HRESULT __stdcall raw_ExportBitmap (
        /*[in]*/ BSTR FileName,
        /*[in]*/ enum cdrFilter Filter,
        /*[in]*/ enum cdrExportRange Range,
        /*[in]*/ enum cdrImageType ImageType,
        /*[in]*/ long Width,
        /*[in]*/ long Height,
        /*[in]*/ long ResolutionX,
        /*[in]*/ long ResolutionY,
        /*[in]*/ enum cdrAntiAliasingType AntiAliasingType,
        /*[in]*/ VARIANT_BOOL Dithered,
        /*[in]*/ VARIANT_BOOL Transparent,
        /*[in]*/ VARIANT_BOOL UseColorProfile,
        /*[in]*/ VARIANT_BOOL MaintainLayers,
        /*[in]*/ enum cdrCompressionType Compression,
        /*[in]*/ struct IVGStructPaletteOptions * PaletteOptions,
        /*[in]*/ struct IVGRect * ExportArea,
        /*[out,retval]*/ struct ICorelExportFilter * * pRet ) = 0;
      virtual HRESULT __stdcall get_EditAcrossLayers (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_EditAcrossLayers (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Properties (
        /*[out,retval]*/ struct IVGProperties * * ppVal ) = 0;
      virtual HRESULT __stdcall put_CurvePrecision (
        /*[in]*/ long lpPrec ) = 0;
      virtual HRESULT __stdcall get_PrintSettings (
        /*[out,retval]*/ struct IPrnVBAPrintSettings * * ppReturn ) = 0;
      virtual HRESULT __stdcall get_Keywords (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Keywords (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Notes (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Notes (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_PreserveSelection (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_PreserveSelection (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall raw_ResetSettings ( ) = 0;
      virtual HRESULT __stdcall get_DataFields (
        /*[out,retval]*/ struct IVGDataFields * * ppVal ) = 0;
      virtual HRESULT __stdcall get_PDFSettings (
        /*[out,retval]*/ struct IPDFVBASettings * * ppReturn ) = 0;
      virtual HRESULT __stdcall raw_PublishToPDF (
        /*[in]*/ BSTR FileName ) = 0;
      virtual HRESULT __stdcall get_SelectionInfo (
        /*[out,retval]*/ struct IVGSelectionInformation * * ppVal ) = 0;
      virtual HRESULT __stdcall get_PageSizes (
        /*[out,retval]*/ struct IVGPageSizes * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Components (
        /*[out,retval]*/ struct IVGComponents * * ppVal ) = 0;
      virtual HRESULT __stdcall get_SymbolLibrary (
        /*[out,retval]*/ struct IVGSymbolLibrary * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_CreateCurve (
        /*[out,retval]*/ struct IVGCurve * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_CreateCurveFromArray (
        /*[in]*/ SAFEARRAY * * Source,
        /*[in]*/ long NumElements,
        /*[out,retval]*/ struct IVGCurve * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_LoadStyleSheet (
        /*[in]*/ BSTR FileName ) = 0;
      virtual HRESULT __stdcall raw_SaveStyleSheet (
        /*[in]*/ BSTR FileName ) = 0;
      virtual HRESULT __stdcall raw_SaveStyleSheetAsDefault ( ) = 0;
      virtual HRESULT __stdcall raw_CreateSelection (
        /*[in]*/ SAFEARRAY * * ShapeArray ) = 0;
      virtual HRESULT __stdcall raw_AddToSelection (
        /*[in]*/ SAFEARRAY * * ShapeArray ) = 0;
      virtual HRESULT __stdcall raw_RemoveFromSelection (
        /*[in]*/ SAFEARRAY * * ShapeArray ) = 0;
      virtual HRESULT __stdcall get_SelectableShapes (
        /*[out,retval]*/ struct IVGShapes * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_ToUnits (
        /*[in]*/ double Value,
        /*[in]*/ enum cdrUnit FromUnit,
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall raw_FromUnits (
        /*[in]*/ double Value,
        /*[in]*/ enum cdrUnit ToUnit,
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_ResolutionX (
        /*[out,retval]*/ long * pResolution ) = 0;
      virtual HRESULT __stdcall put_ResolutionX (
        /*[in]*/ long pResolution ) = 0;
      virtual HRESULT __stdcall get_ResolutionY (
        /*[out,retval]*/ long * pResolution ) = 0;
      virtual HRESULT __stdcall put_ResolutionY (
        /*[in]*/ long pResolution ) = 0;
      virtual HRESULT __stdcall get_MasterPage (
        /*[out,retval]*/ struct IVGPage * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_Revert (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_CodeName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get__CodeName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put__CodeName (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR pbstrName ) = 0;
      virtual HRESULT __stdcall put_FullFileName (
        /*[in]*/ BSTR pFullFileName ) = 0;
      virtual HRESULT __stdcall get_TreeRoot (
        /*[out,retval]*/ struct IVGTreeNode * * ppVal ) = 0;
      virtual HRESULT __stdcall get_TreeManager (
        /*[out,retval]*/ struct IVGTreeManager * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_LogCreateShape (
        /*[in]*/ struct IVGShape * VirtualShape,
        /*[out,retval]*/ struct IVGShape * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_LogCreateShapeRange (
        /*[in]*/ struct IVGShapeRange * VirtualShapeRange,
        /*[out,retval]*/ struct IVGShapeRange * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_CreateFill (
        /*[in]*/ BSTR FillString,
        /*[out,retval]*/ struct IVGFill * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_CreateOutline (
        /*[in]*/ BSTR OutlineString,
        /*[out,retval]*/ struct IVGOutline * * ppVal ) = 0;
      virtual HRESULT __stdcall get_HatchLibraries (
        /*[out,retval]*/ struct IVGHatchLibraries * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_CreateShapeRangeFromArray (
        /*[in]*/ SAFEARRAY * * ShapeArray,
        /*[out,retval]*/ struct IVGShapeRange * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_ClearUndoList ( ) = 0;
      virtual HRESULT __stdcall get_SourcePlatformVersion (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_SourcePlatformVersion (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_SourceFormat (
        /*[out,retval]*/ enum cdrFilter * pVal ) = 0;
      virtual HRESULT __stdcall get_IsCurrentVersion (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_SourceFileVersion (
        /*[out,retval]*/ enum cdrFileVersion * pVal ) = 0;
      virtual HRESULT __stdcall put_SourceFileVersion (
        /*[in]*/ enum cdrFileVersion pVal ) = 0;
      virtual HRESULT __stdcall raw_CreateUniformFill (
        /*[in]*/ struct IVGColor * Color,
        /*[out,retval]*/ struct IVGFill * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Metadata (
        /*[out,retval]*/ struct IVGMetadata * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Layout (
        /*[out,retval]*/ enum cdrDocLayout * pVal ) = 0;
      virtual HRESULT __stdcall put_Layout (
        /*[in]*/ enum cdrDocLayout pVal ) = 0;
      virtual HRESULT __stdcall get_FacingPages (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_FacingPages (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_FirstPageOnRightSide (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_FirstPageOnRightSide (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall raw_SetLayout (
        /*[in]*/ enum cdrDocLayout Layout,
        /*[in]*/ VARIANT_BOOL FacingPages,
        /*[in]*/ VARIANT_BOOL StartOnRightSide ) = 0;
      virtual HRESULT __stdcall get_Spreads (
        /*[out,retval]*/ struct IVGSpreads * * ppVal ) = 0;
      virtual HRESULT __stdcall get_ActiveSpread (
        /*[out,retval]*/ struct IVGSpread * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_CreateArrowHead (
        /*[in]*/ struct IVGCurve * Curve,
        /*[out,retval]*/ struct IVGArrowHead * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_CreateArrowHeadEx (
        /*[in]*/ struct IVGCurve * Curve,
        /*[in]*/ double CenterX,
        /*[in]*/ double CenterY,
        /*[in]*/ double OutlineWidthScale,
        /*[in]*/ double LineOffset,
        /*[out,retval]*/ struct IVGArrowHead * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_DeletePages (
        /*[in]*/ long StartPage,
        /*[in]*/ long NumPages,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_CreateArrowHead2 (
        /*[in]*/ struct IVGCurve * Curve,
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ struct IVGArrowHead * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_CreateArrowHeadEx2 (
        /*[in]*/ struct IVGCurve * Curve,
        /*[in]*/ BSTR Name,
        /*[in]*/ double CenterX,
        /*[in]*/ double CenterY,
        /*[in]*/ double OutlineWidthScale,
        /*[in]*/ double LineOffset,
        /*[out,retval]*/ struct IVGArrowHead * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_CreateArrowHeadOptions (
        /*[in]*/ double Length,
        /*[in]*/ double Width,
        /*[in]*/ double OffsetX,
        /*[in]*/ double OffsetY,
        /*[in]*/ double RotationAngle,
        /*[in]*/ VARIANT_BOOL FlipHorizontal,
        /*[in]*/ VARIANT_BOOL FlipVertical,
        /*[out,retval]*/ struct IVGArrowHeadOptions * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_SaveAsCopy (
        /*[in]*/ BSTR FileName,
        /*[in]*/ struct IVGStructSaveAsOptions * Options ) = 0;
      virtual HRESULT __stdcall raw_CreateFreeSnapPoint (
        /*[in]*/ double PositionX,
        /*[in]*/ double PositionY,
        /*[out,retval]*/ struct IVGSnapPoint * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_CreateBSpline (
        /*[in]*/ long NumControlPoints,
        /*[in]*/ VARIANT_BOOL Closed,
        /*[out,retval]*/ struct IVGBSpline * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[out,retval]*/ struct IVGDocument * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_Clone (
        /*[out,retval]*/ struct IVGDocument * * ppVal ) = 0;
      virtual HRESULT __stdcall get_IsTemporary (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_ColorContext (
        /*[out,retval]*/ struct IVGColorContext * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_AssignColorContext (
        /*[in]*/ struct IVGColorContext * ColorContext ) = 0;
      virtual HRESULT __stdcall raw_ConvertToColorContext (
        /*[in]*/ struct IVGColorContext * ColorContext ) = 0;
      virtual HRESULT __stdcall raw_PrintColorProof (
        /*[in]*/ struct IVGProofColorSettings * ProofSettings ) = 0;
      virtual HRESULT __stdcall get_Palette (
        /*[out,retval]*/ struct IVGPalette * * ppVal ) = 0;
      virtual HRESULT __stdcall get_TextFormatter (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_TextFormatter (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_StyleSheet (
        /*[out,retval]*/ struct IVGStyleSheet * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_InteractiveImport (
        /*[in]*/ SAFEARRAY * * FileNames ) = 0;
      virtual HRESULT __stdcall raw_AddColorsToDocPalette (
        /*[in]*/ VARIANT_BOOL SelectedOnly,
        /*[in]*/ long MaxColorsPerBitmap,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_CreateColorStyles (
        /*[in]*/ VARIANT_BOOL UseFills,
        /*[in]*/ VARIANT_BOOL UseOutlines,
        /*[in]*/ VARIANT_BOOL SelectedOnly,
        /*[in]*/ long NumberOfColorHarmonies,
        /*[in]*/ enum cdrColorType ConvertColorsTo,
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_CreateCurveFitToPoints (
        /*[in]*/ struct IVGPointRange * Points,
        /*[in]*/ VARIANT_BOOL UseCurrentViewForTolerance,
        /*[in]*/ double tolerance,
        /*[out,retval]*/ struct IVGCurve * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_CreateCurveFitToPointsAndCusps (
        /*[in]*/ struct IVGPointRange * Points,
        /*[in]*/ SAFEARRAY * * CuspIndexArray,
        /*[in]*/ VARIANT_BOOL UseCurrentViewForTolerance,
        /*[in]*/ double tolerance,
        /*[out,retval]*/ struct IVGCurve * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_SampleColorAtPoint (
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[in]*/ enum cdrColorType ColorType,
        /*[out,retval]*/ struct IVGColor * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_SampleColorInArea (
        /*[in]*/ double x1,
        /*[in]*/ double y1,
        /*[in]*/ double x2,
        /*[in]*/ double y2,
        /*[in]*/ long XSamples,
        /*[in]*/ long YSamples,
        /*[in]*/ enum cdrColorType ColorType,
        /*[out,retval]*/ struct IVGColor * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_ShowAllHiddenObjects ( ) = 0;
      virtual HRESULT __stdcall raw_InteractiveImportWithContentIdentifier (
        /*[in]*/ SAFEARRAY * * FileNames,
        /*[in]*/ SAFEARRAY * * ContentIdentifiers ) = 0;
      virtual HRESULT __stdcall raw_ReplaceContentByIdentifier (
        /*[in]*/ SAFEARRAY * * ContentIdentifiers,
        /*[in]*/ SAFEARRAY * * FileNames ) = 0;
      virtual HRESULT __stdcall get_ContentIdentifiers (
        /*[out,retval]*/ SAFEARRAY * * ContentIdentifiers ) = 0;
      virtual HRESULT __stdcall raw_CustomCommand (
        /*[in]*/ BSTR ComponentID,
        /*[in]*/ BSTR CommandID,
        /*[in]*/ SAFEARRAY * * Parameters,
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall get_Math (
        /*[out,retval]*/ struct IVGMathUtils * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_CreateImage (
        /*[in]*/ enum cdrImageType ImageType,
        /*[in]*/ long Width,
        /*[in]*/ long Height,
        /*[in]*/ struct IVGColor * FillColor,
        /*[out,retval]*/ struct IVGImage * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Markup (
        /*[out,retval]*/ struct IVGDocumentMarkup * * ppVal ) = 0;
};

struct __declspec(uuid("b05800a3-9aa4-44fd-9547-4f91eb757ac4"))
IVGRect : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Getx,put=Putx))
    double x;
    __declspec(property(get=Gety,put=Puty))
    double y;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetIsEmpty))
    VARIANT_BOOL IsEmpty;
    __declspec(property(get=GetLeft))
    double Left;
    __declspec(property(get=GetRight))
    double Right;
    __declspec(property(get=GetTop))
    double Top;
    __declspec(property(get=GetBottom))
    double Bottom;
    __declspec(property(get=GetCenterX))
    double CenterX;
    __declspec(property(get=GetCenterY))
    double CenterY;

    //
    // Wrapper methods for error-handling
    //

    double Getx ( );
    void Putx (
        double pVal );
    double Gety ( );
    void Puty (
        double pVal );
    double GetWidth ( );
    void PutWidth (
        double pVal );
    double GetHeight ( );
    void PutHeight (
        double pVal );
    HRESULT SetRect (
        double x,
        double y,
        double Width,
        double Height );
    HRESULT GetRect (
        double * x,
        double * y,
        double * Width,
        double * Height );
    HRESULT CopyAssign (
        struct IVGRect * Source );
    IVGRectPtr GetCopy ( );
    IVGRectPtr Intersect (
        struct IVGRect * Rect );
    VARIANT_BOOL GetIsEmpty ( );
    IVGRectPtr Union (
        struct IVGRect * Rect );
    HRESULT Offset (
        double OffsetX,
        double OffsetY );
    VARIANT_BOOL Inflate (
        double Left,
        double Top,
        double Right,
        double Bottom );
    VARIANT_BOOL IsPointInside (
        double x,
        double y );
    HRESULT Clear ( );
    IVGRectPtr ChangeContext (
        struct IVGDocument * SrcDoc,
        struct IVGDocument * DestDoc );
    double GetLeft ( );
    double GetRight ( );
    double GetTop ( );
    double GetBottom ( );
    double GetCenterX ( );
    double GetCenterY ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_x (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_x (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_y (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_y (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall raw_SetRect (
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[in]*/ double Width,
        /*[in]*/ double Height ) = 0;
      virtual HRESULT __stdcall raw_GetRect (
        /*[out]*/ double * x,
        /*[out]*/ double * y,
        /*[out]*/ double * Width,
        /*[out]*/ double * Height ) = 0;
      virtual HRESULT __stdcall raw_CopyAssign (
        /*[in]*/ struct IVGRect * Source ) = 0;
      virtual HRESULT __stdcall raw_GetCopy (
        /*[out,retval]*/ struct IVGRect * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_Intersect (
        /*[in]*/ struct IVGRect * Rect,
        /*[out,retval]*/ struct IVGRect * * ppVal ) = 0;
      virtual HRESULT __stdcall get_IsEmpty (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_Union (
        /*[in]*/ struct IVGRect * Rect,
        /*[out,retval]*/ struct IVGRect * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_Offset (
        /*[in]*/ double OffsetX,
        /*[in]*/ double OffsetY ) = 0;
      virtual HRESULT __stdcall raw_Inflate (
        /*[in]*/ double Left,
        /*[in]*/ double Top,
        /*[in]*/ double Right,
        /*[in]*/ double Bottom,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_IsPointInside (
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_Clear ( ) = 0;
      virtual HRESULT __stdcall raw_ChangeContext (
        /*[in]*/ struct IVGDocument * SrcDoc,
        /*[in]*/ struct IVGDocument * DestDoc,
        /*[out,retval]*/ struct IVGRect * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_Right (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_Bottom (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_CenterX (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_CenterY (
        /*[out,retval]*/ double * pVal ) = 0;
};

struct __declspec(uuid("b058000b-9aa4-44fd-9547-4f91eb757ac4"))
IVGApplication : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    IVGApplicationPtr Application;
    __declspec(property(get=GetParent))
    IVGApplicationPtr Parent;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDocuments))
    IVGDocumentsPtr Documents;
    __declspec(property(get=GetActiveDocument))
    IVGDocumentPtr ActiveDocument;
    __declspec(property(get=GetActivePage))
    IVGPagePtr ActivePage;
    __declspec(property(get=GetActiveWindow))
    IVGWindowPtr ActiveWindow;
    __declspec(property(get=GetWindows))
    IVGWindowsPtr Windows;
    __declspec(property(get=GetActiveVirtualLayer))
    IVGLayerPtr ActiveVirtualLayer;
    __declspec(property(get=GetActiveWorkspace))
    IVGWorkspacePtr ActiveWorkspace;
    __declspec(property(get=GetWorkspaces))
    IVGWorkspacesPtr Workspaces;
    __declspec(property(get=GetActivePalette))
    IVGPalettePtr ActivePalette;
    __declspec(property(get=GetPalettes))
    IVGPalettesPtr Palettes;
    __declspec(property(get=GetColorManager))
    IVGColorManagerPtr ColorManager;
    __declspec(property(get=GetEnhancedOutlines))
    IVGOutlineStylesPtr EnhancedOutlines;
    __declspec(property(get=GetFontList))
    IVGFontListPtr FontList;
    __declspec(property(get=GetAppWindow))
    IVGAppWindowPtr AppWindow;
    __declspec(property(get=GetRecentFiles))
    IVGRecentFilesPtr RecentFiles;
    __declspec(property(get=GetVBE))
    IDispatchPtr VBE;
    __declspec(property(get=GetStartupMode,put=PutStartupMode))
    enum cdrAppStartupMode StartupMode;
    __declspec(property(get=GetGlobalUserData))
    IVGPropertiesPtr GlobalUserData;
    __declspec(property(get=GetSessionUserData))
    IVGPropertiesPtr SessionUserData;
    __declspec(property(get=GetEventsEnabled,put=PutEventsEnabled))
    VARIANT_BOOL EventsEnabled;
    __declspec(property(get=GetActiveSpread))
    IVGSpreadPtr ActiveSpread;
    __declspec(property(get=GetDefaultColorContext))
    IVGColorContextPtr DefaultColorContext;
    __declspec(property(get=GetPaletteManager))
    IVGPaletteManagerPtr PaletteManager;
    __declspec(property(get=GetArrowHeads))
    IVGArrowHeadsPtr ArrowHeads;
    __declspec(property(get=GetOutlineStyles))
    IVGOutlineStylesPtr OutlineStyles;
    __declspec(property(get=GetVersion))
    _bstr_t Version;
    __declspec(property(get=GetVersionMajor))
    long VersionMajor;
    __declspec(property(get=GetVersionMinor))
    long VersionMinor;
    __declspec(property(get=GetVersionBuild))
    long VersionBuild;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetConfigPath))
    _bstr_t ConfigPath;
    __declspec(property(get=GetSetupPath))
    _bstr_t SetupPath;
    __declspec(property(get=GetActiveLayer))
    IVGLayerPtr ActiveLayer;
    __declspec(property(get=GetActiveSelection))
    IVGShapePtr ActiveSelection;
    __declspec(property(get=GetPatternCanvases))
    IVGPatternCanvasesPtr PatternCanvases;
    __declspec(property(get=GetClipboard))
    IVGClipboardPtr Clipboard;
    __declspec(property(get=GetActiveSelectionRange))
    IVGShapeRangePtr ActiveSelectionRange;
    __declspec(property(get=GetActiveTool,put=PutActiveTool))
    enum cdrTools ActiveTool;
    __declspec(property(get=GetAddonPath))
    _bstr_t AddonPath;
    __declspec(property(get=GetActiveShape))
    IVGShapePtr ActiveShape;
    __declspec(property(get=GetOptimization,put=PutOptimization))
    VARIANT_BOOL Optimization;
    __declspec(property(get=GetProgramPath))
    _bstr_t ProgramPath;
    __declspec(property(get=GetPanoseMatching,put=PutPanoseMatching))
    enum cdrPanoseMatchingType PanoseMatching;
    __declspec(property(get=GetActiveToolStateGuid,put=PutActiveToolStateGuid))
    _bstr_t ActiveToolStateGuid;
    __declspec(property(get=GetAddIns))
    IDispatchPtr AddIns;
    __declspec(property(get=GetMath))
    IVGMathUtilsPtr Math;
    __declspec(property(get=GetUILanguageCode))
    _bstr_t UILanguageCode;
    __declspec(property(get=GetPrinters))
    IPrnVBAPrintersPtr Printers;
    __declspec(property(get=GetPrintJob))
    IPrnVBAPrintJobPtr PrintJob;
    __declspec(property(get=GetCommandBars))
    ICUICommandBarsPtr CommandBars;
    __declspec(property(get=GetStatusBar))
    ICUICommandBarPtr StatusBar;
    __declspec(property(get=GetMainMenu))
    ICUICommandBarPtr MainMenu;
    __declspec(property(get=GetGMSManager))
    IVGGMSManagerPtr GMSManager;
    __declspec(property(get=GetUserDataPath))
    _bstr_t UserDataPath;
    __declspec(property(get=GetHelpFile))
    _bstr_t HelpFile;
    __declspec(property(get=GetFrameWork))
    ICUIFrameWorkPtr FrameWork;
    __declspec(property(get=GetComponents))
    IVGComponentsPtr Components;
    __declspec(property(get=GetSymbolLibraries))
    IVGSymbolLibrariesPtr SymbolLibraries;
    __declspec(property(get=GetID))
    enum cdrApplicationID ID;
    __declspec(property(get=GetClass))
    enum cdrApplicationClass Class;
    __declspec(property(get=GetPlatformVersionMajor))
    long PlatformVersionMajor;
    __declspec(property(get=GetPlatformVersionMinor))
    long PlatformVersionMinor;
    __declspec(property(get=GetStatus))
    IVGAppStatusPtr Status;
    __declspec(property(get=GetUILanguage))
    enum cdrTextLanguage UILanguage;
    __declspec(property(get=GetPageSizes))
    IVGPageSizesPtr PageSizes;
    __declspec(property(get=GetUnit,put=PutUnit))
    enum cdrUnit Unit;
    __declspec(property(get=GetUserWorkspacePath))
    _bstr_t UserWorkspacePath;
    __declspec(property(get=GetLanguagePath))
    _bstr_t LanguagePath;
    __declspec(property(get=GetActiveTreeManager))
    IVGTreeManagerPtr ActiveTreeManager;

    //
    // Wrapper methods for error-handling
    //

    IVGApplicationPtr GetApplication ( );
    IVGApplicationPtr GetParent ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL pVal );
    IVGDocumentsPtr GetDocuments ( );
    IVGDocumentPtr GetActiveDocument ( );
    IVGPagePtr GetActivePage ( );
    IVGWindowPtr GetActiveWindow ( );
    IVGWindowsPtr GetWindows ( );
    ICorelScriptToolsPtr CorelScriptTools ( );
    IVGWorkspacePtr GetActiveWorkspace ( );
    IVGWorkspacesPtr GetWorkspaces ( );
    IVGPalettePtr GetActivePalette ( );
    IVGPalettesPtr GetPalettes ( );
    HRESULT Quit ( );
    IVGColorPtr CreateColor (
        _bstr_t ColorString );
    IVGFontListPtr GetFontList ( );
    IVGAppWindowPtr GetAppWindow ( );
    IVGRecentFilesPtr GetRecentFiles ( );
    IDispatchPtr GetVBE ( );
    double cdrMixedDouble ( );
    float cdrMixedSingle ( );
    long cdrMixedLong ( );
    VARIANT_BOOL GetEventsEnabled ( );
    void PutEventsEnabled (
        VARIANT_BOOL pVal );
    IVGDocumentPtr OpenDocument (
        _bstr_t FileName,
        long CodePage );
    IVGDocumentPtr CreateDocument ( );
    IVGColorPtr CreateColorEx (
        long ColorModel,
        long V1,
        long V2,
        long V3,
        long V4,
        long V5,
        long V6,
        long V7 );
    IVGArrowHeadsPtr GetArrowHeads ( );
    IVGOutlineStylesPtr GetOutlineStyles ( );
    _bstr_t GetVersion ( );
    long GetVersionMajor ( );
    long GetVersionMinor ( );
    long GetVersionBuild ( );
    _bstr_t GetPath ( );
    _bstr_t GetConfigPath ( );
    _bstr_t GetSetupPath ( );
    IVGLayerPtr GetActiveLayer ( );
    IVGShapePtr GetActiveSelection ( );
    IVGPatternCanvasesPtr GetPatternCanvases ( );
    IVGClipboardPtr GetClipboard ( );
    IVGShapeRangePtr GetActiveSelectionRange ( );
    enum cdrTools GetActiveTool ( );
    void PutActiveTool (
        enum cdrTools pTool );
    IVGShapePtr GetActiveShape ( );
    VARIANT_BOOL GetOptimization ( );
    void PutOptimization (
        VARIANT_BOOL pVal );
    enum cdrPanoseMatchingType GetPanoseMatching ( );
    void PutPanoseMatching (
        enum cdrPanoseMatchingType pVal );
    IDispatchPtr GetAddIns ( );
    IVGColorPtr CreateRGBColor (
        long Red,
        long Green,
        long Blue );
    IVGColorPtr CreateCMYColor (
        long Cyan,
        long Magenta,
        long Yellow );
    IVGColorPtr CreateCMYKColor (
        long Cyan,
        long Magenta,
        long Yellow,
        long Black );
    IVGColorPtr CreateGrayColor (
        long GrayValue );
    IVGColorPtr CreateHLSColor (
        long Hue,
        long Lightness,
        long Saturation );
    IVGColorPtr CreateHSBColor (
        long Hue,
        long Saturation,
        long Brightness );
    IVGColorPtr CreateBWColor (
        VARIANT_BOOL White );
    IVGColorPtr CreateYIQColor (
        long y,
        long I,
        long Q );
    IVGColorPtr CreateLabColor (
        long L,
        long A,
        long B );
    IVGColorPtr CreateFixedColor (
        enum cdrPaletteID PaletteID,
        long PaletteIndex,
        long Tint );
    IVGColorPtr CreateRegistrationColor ( );
    IVGSnapPointPtr CreateSnapPoint (
        double PositionX,
        double PositionY );
    IVGDocumentPtr CreateDocumentFromTemplate (
        _bstr_t Template,
        VARIANT_BOOL IncludeGraphics );
    IPrnVBAPrintersPtr GetPrinters ( );
    IPrnVBAPrintJobPtr GetPrintJob ( );
    ICUICommandBarsPtr GetCommandBars ( );
    ICUICommandBarPtr GetStatusBar ( );
    ICUICommandBarPtr GetMainMenu ( );
    IVGGMSManagerPtr GetGMSManager ( );
    HRESULT ImportWorkspace (
        _bstr_t FileName );
    HRESULT Refresh ( );
    IVGStructSaveAsOptionsPtr CreateStructSaveAsOptions ( );
    IVGStructExportOptionsPtr CreateStructExportOptions ( );
    IVGStructImportOptionsPtr CreateStructImportOptions ( );
    IVGStructPaletteOptionsPtr CreateStructPaletteOptions ( );
    IVGNodeRangePtr CreateNodeRange ( );
    IVGSegmentRangePtr CreateSegmentRange ( );
    IVGShapeRangePtr CreateShapeRange ( );
    IVGPatternCanvasPtr CreatePatternCanvas ( );
    IVGCurvePtr CreateCurve (
        struct IVGDocument * Document );
    _bstr_t GetUserDataPath ( );
    VARIANT_BOOL InitializeVBA ( );
    _bstr_t GetHelpFile ( );
    ICUIFrameWorkPtr GetFrameWork ( );
    IVGStructFontPropertiesPtr CreateStructFontProperties ( );
    IVGStructAlignPropertiesPtr CreateStructAlignProperties ( );
    IVGStructSpacePropertiesPtr CreateStructSpaceProperties ( );
    IVGStructHyphenationSettingsPtr CreateStructHyphenationSettings ( );
    IVGComponentsPtr GetComponents ( );
    IVGSymbolLibrariesPtr GetSymbolLibraries ( );
    long AdviseEvents (
        IDispatch * EventSink );
    HRESULT UnadviseEvents (
        long Cookie );
    enum cdrApplicationID GetID ( );
    _bstr_t GetName ( );
    enum cdrApplicationClass GetClass ( );
    long GetPlatformVersionMajor ( );
    long GetPlatformVersionMinor ( );
    long CheckPlatformVersion (
        long VersionMajor,
        long VersionMinor );
    IVGAppStatusPtr GetStatus ( );
    double ConvertUnits (
        double Value,
        enum cdrUnit FromUnit,
        enum cdrUnit ToUnit );
    enum cdrTextLanguage GetUILanguage ( );
    VARIANT_BOOL IsUILanguageAvailable (
        enum cdrTextLanguage Language );
    IVGPageSizesPtr GetPageSizes ( );
    enum cdrUnit GetUnit ( );
    void PutUnit (
        enum cdrUnit pVal );
    _bstr_t ConvertToUnicode (
        _bstr_t String,
        long CodePage );
    _bstr_t ConvertFromUnicode (
        _bstr_t String,
        long CodePage );
    _bstr_t GetUserWorkspacePath ( );
    _bstr_t GetLanguagePath ( );
    IVGTreeManagerPtr GetActiveTreeManager ( );
    IVGLayerPtr GetActiveVirtualLayer ( );
    IVGDuotonePtr CreateDuotone ( );
    IVGColorManagerPtr GetColorManager ( );
    IVGOutlineStylesPtr GetEnhancedOutlines ( );
    VARIANT_BOOL AddPluginCommand (
        _bstr_t CommandID,
        _bstr_t Caption,
        _bstr_t Tooltip );
    VARIANT_BOOL RemovePluginCommand (
        _bstr_t CommandID );
    IVGOutlineStylePtr CreateOutlineStyle (
        long DashDotCount,
        SAFEARRAY * * DashDotLengths );
    enum cdrAppStartupMode GetStartupMode ( );
    void PutStartupMode (
        enum cdrAppStartupMode pVal );
    IVGPropertiesPtr GetGlobalUserData ( );
    IVGPropertiesPtr GetSessionUserData ( );
    _variant_t Evaluate (
        _bstr_t Expression );
    IVGRectPtr CreateRect (
        double x,
        double y,
        double Width,
        double Height );
    HRESULT ForceUpdateFontTable ( );
    IVGSpreadPtr GetActiveSpread ( );
    IVGDocumentPtr OpenDocumentAsCopy (
        _bstr_t FileName,
        struct IVGStructOpenOptions * Options );
    IVGColorContextPtr GetDefaultColorContext ( );
    IVGColorContextPtr CreateColorContext (
        struct IVGColorProfile * RGBProfile,
        struct IVGColorProfile * CMYKProfile,
        struct IVGColorProfile * GrayscaleProfile,
        enum clrRenderingIntent RenderingIntent,
        enum clrColorModel BlendingColorModel );
    IVGColorContextPtr CreateColorContext2 (
        _bstr_t ColorProfileList,
        enum clrRenderingIntent RenderingIntent,
        enum clrColorModel BlendingColorModel );
    IVGDocumentPtr CreateDocumentEx (
        struct IVGStructCreateOptions * Options );
    IVGDocumentPtr OpenDocumentEx (
        _bstr_t FileName,
        struct IVGStructOpenOptions * Options );
    IVGStructOpenOptionsPtr CreateStructOpenOptions ( );
    IVGStructCreateOptionsPtr CreateStructCreateOptions ( );
    IVGStructPasteOptionsPtr CreateStructPasteOptions ( );
    IVGProofColorSettingsPtr CreateProofColorSettings (
        _bstr_t ProfileName,
        enum clrRenderingIntent RenderingIntent,
        VARIANT_BOOL PreserveColorValues );
    IVGPaletteManagerPtr GetPaletteManager ( );
    IVGColorPtr CreateSpotColor (
        _bstr_t PaletteIdentifier,
        long SpotColorID,
        long Tint );
    IVGColorPtr CreateSpotColorByName (
        _bstr_t PaletteIdentifier,
        _bstr_t SpotColorName,
        long Tint );
    IVGColorPtr CreatePaletteColor (
        _bstr_t PaletteIdentifier,
        long ColorIndex );
    SAFEARRAY * GetSupportedOpenTypeFeatures ( );
    IVGFillMetadataPtr CreateFillMetadata ( );
    _bstr_t GetAddonPath ( );
    _bstr_t GetProgramPath ( );
    _bstr_t GetActiveToolStateGuid ( );
    void PutActiveToolStateGuid (
        _bstr_t pTool );
    HRESULT RegisterToolState (
        _bstr_t ToolStateGuid,
        _bstr_t ToolStateName,
        struct IVGToolState * ToolState );
    VARIANT_BOOL UnregisterToolState (
        _bstr_t ToolStateGuid );
    IVGOnScreenCurvePtr CreateOnScreenCurve ( );
    IVGOnScreenHandlePtr CreateOnScreenHandle ( );
    IVGOnScreenTextPtr CreateOnScreenText ( );
    IVGMathUtilsPtr GetMath ( );
    HRESULT RegisterUserApplicationPreference (
        _bstr_t GroupName,
        _bstr_t KeyName,
        const _variant_t & DefaultVal );
    _variant_t GetApplicationPreferenceValue (
        _bstr_t GroupName,
        _bstr_t KeyName );
    HRESULT SetApplicationPreferenceValue (
        _bstr_t GroupName,
        _bstr_t KeyName,
        const _variant_t & newVal );
    IVGPropertiesPtr CreateProperties ( );
    HRESULT RegisterToolShape (
        _bstr_t ToolShapeGuid,
        struct IVGToolShapeAttributes * ToolShapeAttributes,
        struct IVGToolShape * ToolShape );
    IVGToolShapeAttributesPtr CreateToolShapeAttributes ( );
    _bstr_t GetUILanguageCode ( );
    HRESULT StartTemporaryToolState (
        _bstr_t StateGuid );
    HRESULT MarkupLogout ( );
    HRESULT MarkupLogin (
        struct IVGCommentAuthor * Author );
    IVGCommentAuthorPtr CreateMarkupAuthor (
        _bstr_t Name,
        _bstr_t Avatar,
        _bstr_t Email,
        enum cdrAuthorAuthentication Authentication );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct IVGApplication * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ struct IVGApplication * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Documents (
        /*[out,retval]*/ struct IVGDocuments * * Documents ) = 0;
      virtual HRESULT __stdcall get_ActiveDocument (
        /*[out,retval]*/ struct IVGDocument * * ppVal ) = 0;
      virtual HRESULT __stdcall get_ActivePage (
        /*[out,retval]*/ struct IVGPage * * ppVal ) = 0;
      virtual HRESULT __stdcall get_ActiveWindow (
        /*[out,retval]*/ struct IVGWindow * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Windows (
        /*[out,retval]*/ struct IVGWindows * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_CorelScriptTools (
        /*[out,retval]*/ struct ICorelScriptTools * * ppVal ) = 0;
      virtual HRESULT __stdcall get_ActiveWorkspace (
        /*[out,retval]*/ struct IVGWorkspace * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Workspaces (
        /*[out,retval]*/ struct IVGWorkspaces * * ppVal ) = 0;
      virtual HRESULT __stdcall get_ActivePalette (
        /*[out,retval]*/ struct IVGPalette * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Palettes (
        /*[out,retval]*/ struct IVGPalettes * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_Quit ( ) = 0;
      virtual HRESULT __stdcall raw_CreateColor (
        /*[in]*/ BSTR ColorString,
        /*[out,retval]*/ struct IVGColor * * ColorVariable ) = 0;
      virtual HRESULT __stdcall get_FontList (
        /*[out,retval]*/ struct IVGFontList * * ppVal ) = 0;
      virtual HRESULT __stdcall get_AppWindow (
        /*[out,retval]*/ struct IVGAppWindow * * ppVal ) = 0;
      virtual HRESULT __stdcall get_RecentFiles (
        /*[out,retval]*/ struct IVGRecentFiles * * ppVal ) = 0;
      virtual HRESULT __stdcall get_VBE (
        /*[out,retval]*/ IDispatch * * ppReturn ) = 0;
      virtual HRESULT __stdcall raw_cdrMixedDouble (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall raw_cdrMixedSingle (
        /*[out,retval]*/ float * pVal ) = 0;
      virtual HRESULT __stdcall raw_cdrMixedLong (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_EventsEnabled (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_EventsEnabled (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall raw_OpenDocument (
        /*[in]*/ BSTR FileName,
        /*[in]*/ long CodePage,
        /*[out,retval]*/ struct IVGDocument * * ppDocument ) = 0;
      virtual HRESULT __stdcall raw_CreateDocument (
        /*[out,retval]*/ struct IVGDocument * * ppDocument ) = 0;
      virtual HRESULT __stdcall raw_CreateColorEx (
        /*[in]*/ long ColorModel,
        /*[in]*/ long V1,
        /*[in]*/ long V2,
        /*[in]*/ long V3,
        /*[in]*/ long V4,
        /*[in]*/ long V5,
        /*[in]*/ long V6,
        /*[in]*/ long V7,
        /*[out,retval]*/ struct IVGColor * * ColorVariable ) = 0;
      virtual HRESULT __stdcall get_ArrowHeads (
        /*[out,retval]*/ struct IVGArrowHeads * * ppVal ) = 0;
      virtual HRESULT __stdcall get_OutlineStyles (
        /*[out,retval]*/ struct IVGOutlineStyles * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Version (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_VersionMajor (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_VersionMinor (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_VersionBuild (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_ConfigPath (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_SetupPath (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_ActiveLayer (
        /*[out,retval]*/ struct IVGLayer * * ppVal ) = 0;
      virtual HRESULT __stdcall get_ActiveSelection (
        /*[out,retval]*/ struct IVGShape * * ppVal ) = 0;
      virtual HRESULT __stdcall get_PatternCanvases (
        /*[out,retval]*/ struct IVGPatternCanvases * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Clipboard (
        /*[out,retval]*/ struct IVGClipboard * * ppVal ) = 0;
      virtual HRESULT __stdcall get_ActiveSelectionRange (
        /*[out,retval]*/ struct IVGShapeRange * * pVal ) = 0;
      virtual HRESULT __stdcall get_ActiveTool (
        /*[out,retval]*/ enum cdrTools * pTool ) = 0;
      virtual HRESULT __stdcall put_ActiveTool (
        /*[in]*/ enum cdrTools pTool ) = 0;
      virtual HRESULT __stdcall get_ActiveShape (
        /*[out,retval]*/ struct IVGShape * * pVal ) = 0;
      virtual HRESULT __stdcall get_Optimization (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_Optimization (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_PanoseMatching (
        /*[out,retval]*/ enum cdrPanoseMatchingType * pVal ) = 0;
      virtual HRESULT __stdcall put_PanoseMatching (
        /*[in]*/ enum cdrPanoseMatchingType pVal ) = 0;
      virtual HRESULT __stdcall get_AddIns (
        /*[out,retval]*/ IDispatch * * ppReturn ) = 0;
      virtual HRESULT __stdcall raw_CreateRGBColor (
        /*[in]*/ long Red,
        /*[in]*/ long Green,
        /*[in]*/ long Blue,
        /*[out,retval]*/ struct IVGColor * * pVal ) = 0;
      virtual HRESULT __stdcall raw_CreateCMYColor (
        /*[in]*/ long Cyan,
        /*[in]*/ long Magenta,
        /*[in]*/ long Yellow,
        /*[out,retval]*/ struct IVGColor * * pVal ) = 0;
      virtual HRESULT __stdcall raw_CreateCMYKColor (
        /*[in]*/ long Cyan,
        /*[in]*/ long Magenta,
        /*[in]*/ long Yellow,
        /*[in]*/ long Black,
        /*[out,retval]*/ struct IVGColor * * pVal ) = 0;
      virtual HRESULT __stdcall raw_CreateGrayColor (
        /*[in]*/ long GrayValue,
        /*[out,retval]*/ struct IVGColor * * pVal ) = 0;
      virtual HRESULT __stdcall raw_CreateHLSColor (
        /*[in]*/ long Hue,
        /*[in]*/ long Lightness,
        /*[in]*/ long Saturation,
        /*[out,retval]*/ struct IVGColor * * pVal ) = 0;
      virtual HRESULT __stdcall raw_CreateHSBColor (
        /*[in]*/ long Hue,
        /*[in]*/ long Saturation,
        /*[in]*/ long Brightness,
        /*[out,retval]*/ struct IVGColor * * pVal ) = 0;
      virtual HRESULT __stdcall raw_CreateBWColor (
        /*[in]*/ VARIANT_BOOL White,
        /*[out,retval]*/ struct IVGColor * * pVal ) = 0;
      virtual HRESULT __stdcall raw_CreateYIQColor (
        /*[in]*/ long y,
        /*[in]*/ long I,
        /*[in]*/ long Q,
        /*[out,retval]*/ struct IVGColor * * pVal ) = 0;
      virtual HRESULT __stdcall raw_CreateLabColor (
        /*[in]*/ long L,
        /*[in]*/ long A,
        /*[in]*/ long B,
        /*[out,retval]*/ struct IVGColor * * pVal ) = 0;
      virtual HRESULT __stdcall raw_CreateFixedColor (
        /*[in]*/ enum cdrPaletteID PaletteID,
        /*[in]*/ long PaletteIndex,
        /*[in]*/ long Tint,
        /*[out,retval]*/ struct IVGColor * * pVal ) = 0;
      virtual HRESULT __stdcall raw_CreateRegistrationColor (
        /*[out,retval]*/ struct IVGColor * * pVal ) = 0;
      virtual HRESULT __stdcall raw_CreateSnapPoint (
        /*[in]*/ double PositionX,
        /*[in]*/ double PositionY,
        /*[out,retval]*/ struct IVGSnapPoint * * pVal ) = 0;
      virtual HRESULT __stdcall raw_CreateDocumentFromTemplate (
        /*[in]*/ BSTR Template,
        /*[in]*/ VARIANT_BOOL IncludeGraphics,
        /*[out,retval]*/ struct IVGDocument * * ppDocument ) = 0;
      virtual HRESULT __stdcall get_Printers (
        /*[out,retval]*/ struct IPrnVBAPrinters * * ppReturn ) = 0;
      virtual HRESULT __stdcall get_PrintJob (
        /*[out,retval]*/ struct IPrnVBAPrintJob * * ppReturn ) = 0;
      virtual HRESULT __stdcall get_CommandBars (
        /*[out,retval]*/ struct ICUICommandBars * * ppReturn ) = 0;
      virtual HRESULT __stdcall get_StatusBar (
        /*[out,retval]*/ struct ICUICommandBar * * ppReturn ) = 0;
      virtual HRESULT __stdcall get_MainMenu (
        /*[out,retval]*/ struct ICUICommandBar * * ppReturn ) = 0;
      virtual HRESULT __stdcall get_GMSManager (
        /*[out,retval]*/ struct IVGGMSManager * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_ImportWorkspace (
        /*[in]*/ BSTR FileName ) = 0;
      virtual HRESULT __stdcall raw_Refresh ( ) = 0;
      virtual HRESULT __stdcall raw_CreateStructSaveAsOptions (
        /*[out,retval]*/ struct IVGStructSaveAsOptions * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_CreateStructExportOptions (
        /*[out,retval]*/ struct IVGStructExportOptions * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_CreateStructImportOptions (
        /*[out,retval]*/ struct IVGStructImportOptions * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_CreateStructPaletteOptions (
        /*[out,retval]*/ struct IVGStructPaletteOptions * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_CreateNodeRange (
        /*[out,retval]*/ struct IVGNodeRange * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_CreateSegmentRange (
        /*[out,retval]*/ struct IVGSegmentRange * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_CreateShapeRange (
        /*[out,retval]*/ struct IVGShapeRange * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_CreatePatternCanvas (
        /*[out,retval]*/ struct IVGPatternCanvas * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_CreateCurve (
        /*[in]*/ struct IVGDocument * Document,
        /*[out,retval]*/ struct IVGCurve * * ppVal ) = 0;
      virtual HRESULT __stdcall get_UserDataPath (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall raw_InitializeVBA (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_HelpFile (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_FrameWork (
        /*[out,retval]*/ struct ICUIFrameWork * * ppReturn ) = 0;
      virtual HRESULT __stdcall raw_CreateStructFontProperties (
        /*[out,retval]*/ struct IVGStructFontProperties * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_CreateStructAlignProperties (
        /*[out,retval]*/ struct IVGStructAlignProperties * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_CreateStructSpaceProperties (
        /*[out,retval]*/ struct IVGStructSpaceProperties * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_CreateStructHyphenationSettings (
        /*[out,retval]*/ struct IVGStructHyphenationSettings * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Components (
        /*[out,retval]*/ struct IVGComponents * * ppVal ) = 0;
      virtual HRESULT __stdcall get_SymbolLibraries (
        /*[out,retval]*/ struct IVGSymbolLibraries * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_AdviseEvents (
        /*[in]*/ IDispatch * EventSink,
        /*[out,retval]*/ long * pCookie ) = 0;
      virtual HRESULT __stdcall raw_UnadviseEvents (
        /*[in]*/ long Cookie ) = 0;
      virtual HRESULT __stdcall get_ID (
        /*[out,retval]*/ enum cdrApplicationID * pVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_Class (
        /*[out,retval]*/ enum cdrApplicationClass * pVal ) = 0;
      virtual HRESULT __stdcall get_PlatformVersionMajor (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_PlatformVersionMinor (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_CheckPlatformVersion (
        /*[in]*/ long VersionMajor,
        /*[in]*/ long VersionMinor,
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_Status (
        /*[out,retval]*/ struct IVGAppStatus * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_ConvertUnits (
        /*[in]*/ double Value,
        /*[in]*/ enum cdrUnit FromUnit,
        /*[in]*/ enum cdrUnit ToUnit,
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_UILanguage (
        /*[out,retval]*/ enum cdrTextLanguage * pVal ) = 0;
      virtual HRESULT __stdcall raw_IsUILanguageAvailable (
        /*[in]*/ enum cdrTextLanguage Language,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_PageSizes (
        /*[out,retval]*/ struct IVGPageSizes * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Unit (
        /*[out,retval]*/ enum cdrUnit * pVal ) = 0;
      virtual HRESULT __stdcall put_Unit (
        /*[in]*/ enum cdrUnit pVal ) = 0;
      virtual HRESULT __stdcall raw_ConvertToUnicode (
        /*[in]*/ BSTR String,
        /*[in]*/ long CodePage,
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall raw_ConvertFromUnicode (
        /*[in]*/ BSTR String,
        /*[in]*/ long CodePage,
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_UserWorkspacePath (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_LanguagePath (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_ActiveTreeManager (
        /*[out,retval]*/ struct IVGTreeManager * * ppVal ) = 0;
      virtual HRESULT __stdcall get_ActiveVirtualLayer (
        /*[out,retval]*/ struct IVGLayer * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_CreateDuotone (
        /*[out,retval]*/ struct IVGDuotone * * ppVal ) = 0;
      virtual HRESULT __stdcall get_ColorManager (
        /*[out,retval]*/ struct IVGColorManager * * ppVal ) = 0;
      virtual HRESULT __stdcall get_EnhancedOutlines (
        /*[out,retval]*/ struct IVGOutlineStyles * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_AddPluginCommand (
        /*[in]*/ BSTR CommandID,
        /*[in]*/ BSTR Caption,
        /*[in]*/ BSTR Tooltip,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_RemovePluginCommand (
        /*[in]*/ BSTR CommandID,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_CreateOutlineStyle (
        /*[in]*/ long DashDotCount,
        /*[in]*/ SAFEARRAY * * DashDotLengths,
        /*[out,retval]*/ struct IVGOutlineStyle * * ppVal ) = 0;
      virtual HRESULT __stdcall get_StartupMode (
        /*[out,retval]*/ enum cdrAppStartupMode * pVal ) = 0;
      virtual HRESULT __stdcall put_StartupMode (
        /*[in]*/ enum cdrAppStartupMode pVal ) = 0;
      virtual HRESULT __stdcall get_GlobalUserData (
        /*[out,retval]*/ struct IVGProperties * * ppVal ) = 0;
      virtual HRESULT __stdcall get_SessionUserData (
        /*[out,retval]*/ struct IVGProperties * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_Evaluate (
        /*[in]*/ BSTR Expression,
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall raw_CreateRect (
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[in]*/ double Width,
        /*[in]*/ double Height,
        /*[out,retval]*/ struct IVGRect * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_ForceUpdateFontTable ( ) = 0;
      virtual HRESULT __stdcall get_ActiveSpread (
        /*[out,retval]*/ struct IVGSpread * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_OpenDocumentAsCopy (
        /*[in]*/ BSTR FileName,
        /*[in]*/ struct IVGStructOpenOptions * Options,
        /*[out,retval]*/ struct IVGDocument * * ppVal ) = 0;
      virtual HRESULT __stdcall get_DefaultColorContext (
        /*[out,retval]*/ struct IVGColorContext * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_CreateColorContext (
        /*[in]*/ struct IVGColorProfile * RGBProfile,
        /*[in]*/ struct IVGColorProfile * CMYKProfile,
        /*[in]*/ struct IVGColorProfile * GrayscaleProfile,
        /*[in]*/ enum clrRenderingIntent RenderingIntent,
        /*[in]*/ enum clrColorModel BlendingColorModel,
        /*[out,retval]*/ struct IVGColorContext * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_CreateColorContext2 (
        /*[in]*/ BSTR ColorProfileList,
        /*[in]*/ enum clrRenderingIntent RenderingIntent,
        /*[in]*/ enum clrColorModel BlendingColorModel,
        /*[out,retval]*/ struct IVGColorContext * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_CreateDocumentEx (
        /*[in]*/ struct IVGStructCreateOptions * Options,
        /*[out,retval]*/ struct IVGDocument * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_OpenDocumentEx (
        /*[in]*/ BSTR FileName,
        /*[in]*/ struct IVGStructOpenOptions * Options,
        /*[out,retval]*/ struct IVGDocument * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_CreateStructOpenOptions (
        /*[out,retval]*/ struct IVGStructOpenOptions * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_CreateStructCreateOptions (
        /*[out,retval]*/ struct IVGStructCreateOptions * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_CreateStructPasteOptions (
        /*[out,retval]*/ struct IVGStructPasteOptions * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_CreateProofColorSettings (
        /*[in]*/ BSTR ProfileName,
        /*[in]*/ enum clrRenderingIntent RenderingIntent,
        /*[in]*/ VARIANT_BOOL PreserveColorValues,
        /*[out,retval]*/ struct IVGProofColorSettings * * ppVal ) = 0;
      virtual HRESULT __stdcall get_PaletteManager (
        /*[out,retval]*/ struct IVGPaletteManager * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_CreateSpotColor (
        /*[in]*/ BSTR PaletteIdentifier,
        /*[in]*/ long SpotColorID,
        /*[in]*/ long Tint,
        /*[out,retval]*/ struct IVGColor * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_CreateSpotColorByName (
        /*[in]*/ BSTR PaletteIdentifier,
        /*[in]*/ BSTR SpotColorName,
        /*[in]*/ long Tint,
        /*[out,retval]*/ struct IVGColor * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_CreatePaletteColor (
        /*[in]*/ BSTR PaletteIdentifier,
        /*[in]*/ long ColorIndex,
        /*[out,retval]*/ struct IVGColor * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_GetSupportedOpenTypeFeatures (
        /*[out,retval]*/ SAFEARRAY * * pVal ) = 0;
      virtual HRESULT __stdcall raw_CreateFillMetadata (
        /*[out,retval]*/ struct IVGFillMetadata * * ppVal ) = 0;
      virtual HRESULT __stdcall get_AddonPath (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_ProgramPath (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_ActiveToolStateGuid (
        /*[out,retval]*/ BSTR * pTool ) = 0;
      virtual HRESULT __stdcall put_ActiveToolStateGuid (
        /*[in]*/ BSTR pTool ) = 0;
      virtual HRESULT __stdcall raw_RegisterToolState (
        /*[in]*/ BSTR ToolStateGuid,
        /*[in]*/ BSTR ToolStateName,
        /*[in]*/ struct IVGToolState * ToolState ) = 0;
      virtual HRESULT __stdcall raw_UnregisterToolState (
        /*[in]*/ BSTR ToolStateGuid,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_CreateOnScreenCurve (
        /*[out,retval]*/ struct IVGOnScreenCurve * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_CreateOnScreenHandle (
        /*[out,retval]*/ struct IVGOnScreenHandle * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_CreateOnScreenText (
        /*[out,retval]*/ struct IVGOnScreenText * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Math (
        /*[out,retval]*/ struct IVGMathUtils * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_RegisterUserApplicationPreference (
        /*[in]*/ BSTR GroupName,
        /*[in]*/ BSTR KeyName,
        /*[in]*/ VARIANT DefaultVal ) = 0;
      virtual HRESULT __stdcall raw_GetApplicationPreferenceValue (
        /*[in]*/ BSTR GroupName,
        /*[in]*/ BSTR KeyName,
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetApplicationPreferenceValue (
        /*[in]*/ BSTR GroupName,
        /*[in]*/ BSTR KeyName,
        /*[in]*/ VARIANT newVal ) = 0;
      virtual HRESULT __stdcall raw_CreateProperties (
        /*[out,retval]*/ struct IVGProperties * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_RegisterToolShape (
        /*[in]*/ BSTR ToolShapeGuid,
        /*[in]*/ struct IVGToolShapeAttributes * ToolShapeAttributes,
        /*[in]*/ struct IVGToolShape * ToolShape ) = 0;
      virtual HRESULT __stdcall raw_CreateToolShapeAttributes (
        /*[out,retval]*/ struct IVGToolShapeAttributes * * ppVal ) = 0;
      virtual HRESULT __stdcall get_UILanguageCode (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall raw_StartTemporaryToolState (
        /*[in]*/ BSTR StateGuid ) = 0;
      virtual HRESULT __stdcall raw_MarkupLogout ( ) = 0;
      virtual HRESULT __stdcall raw_MarkupLogin (
        /*[in]*/ struct IVGCommentAuthor * Author ) = 0;
      virtual HRESULT __stdcall raw_CreateMarkupAuthor (
        BSTR Name,
        BSTR Avatar,
        /*[in]*/ BSTR Email,
        /*[in]*/ enum cdrAuthorAuthentication Authentication,
        /*[out,retval]*/ struct IVGCommentAuthor * * ppVal ) = 0;
};

struct __declspec(uuid("b0580025-9aa4-44fd-9547-4f91eb757ac4"))
IVGDocuments : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    IVGApplicationPtr Application;
    __declspec(property(get=GetParent))
    IVGApplicationPtr Parent;
    __declspec(property(get=GetItem))
    IVGDocumentPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IVGApplicationPtr GetApplication ( );
    IVGApplicationPtr GetParent ( );
    IVGDocumentPtr GetItem (
        long Index );
    IUnknownPtr Get_NewEnum ( );
    long GetCount ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct IVGApplication * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ struct IVGApplication * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IVGDocument * * ppVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * pVal ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pVal ) = 0;
};

struct __declspec(uuid("b0580047-9aa4-44fd-9547-4f91eb757ac4"))
IVGOutlineStyles : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    IVGApplicationPtr Application;
    __declspec(property(get=GetParent))
    IVGApplicationPtr Parent;
    __declspec(property(get=GetItem))
    IVGOutlineStylePtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IVGApplicationPtr GetApplication ( );
    IVGApplicationPtr GetParent ( );
    IVGOutlineStylePtr GetItem (
        long Index );
    IUnknownPtr Get_NewEnum ( );
    long GetCount ( );
    IVGOutlineStylePtr Add ( );
    HRESULT Remove (
        long Index );
    HRESULT Save ( );
    IVGOutlineStylePtr AddStyle (
        struct IVGOutlineStyle * Style );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct IVGApplication * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ struct IVGApplication * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IVGOutlineStyle * * ppVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * pVal ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[out,retval]*/ struct IVGOutlineStyle * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_Remove (
        /*[in]*/ long Index ) = 0;
      virtual HRESULT __stdcall raw_Save ( ) = 0;
      virtual HRESULT __stdcall raw_AddStyle (
        /*[in]*/ struct IVGOutlineStyle * Style,
        /*[out,retval]*/ struct IVGOutlineStyle * * ppVal ) = 0;
};

struct __declspec(uuid("b0580058-9aa4-44fd-9547-4f91eb757ac4"))
IVGRulers : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    IVGApplicationPtr Application;
    __declspec(property(get=GetParent))
    IVGDocumentPtr Parent;
    __declspec(property(get=GetVUnits,put=PutVUnits))
    enum cdrUnit VUnits;
    __declspec(property(get=GetHUnits,put=PutHUnits))
    enum cdrUnit HUnits;

    //
    // Wrapper methods for error-handling
    //

    IVGApplicationPtr GetApplication ( );
    IVGDocumentPtr GetParent ( );
    enum cdrUnit GetVUnits ( );
    void PutVUnits (
        enum cdrUnit pVal );
    enum cdrUnit GetHUnits ( );
    void PutHUnits (
        enum cdrUnit pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct IVGApplication * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ struct IVGDocument * * ppVal ) = 0;
      virtual HRESULT __stdcall get_VUnits (
        /*[out,retval]*/ enum cdrUnit * pVal ) = 0;
      virtual HRESULT __stdcall put_VUnits (
        /*[in]*/ enum cdrUnit pVal ) = 0;
      virtual HRESULT __stdcall get_HUnits (
        /*[out,retval]*/ enum cdrUnit * pVal ) = 0;
      virtual HRESULT __stdcall put_HUnits (
        /*[in]*/ enum cdrUnit pVal ) = 0;
};

struct __declspec(uuid("b058003e-9aa4-44fd-9547-4f91eb757ac4"))
IVGGrid : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    IVGApplicationPtr Application;
    __declspec(property(get=GetParent))
    IVGDocumentPtr Parent;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetType,put=PutType))
    enum cdrGridType Type;
    __declspec(property(get=GetSnap,put=PutSnap))
    VARIANT_BOOL Snap;
    __declspec(property(get=GetSpacingX,put=PutSpacingX))
    double SpacingX;
    __declspec(property(get=GetSpacingY,put=PutSpacingY))
    double SpacingY;

    //
    // Wrapper methods for error-handling
    //

    IVGApplicationPtr GetApplication ( );
    IVGDocumentPtr GetParent ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL pVal );
    enum cdrGridType GetType ( );
    void PutType (
        enum cdrGridType pVal );
    VARIANT_BOOL GetSnap ( );
    void PutSnap (
        VARIANT_BOOL pVal );
    HRESULT SetFrequency (
        double GridX,
        double GridY );
    double GetSpacingX ( );
    void PutSpacingX (
        double pVal );
    double GetSpacingY ( );
    void PutSpacingY (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct IVGApplication * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ struct IVGDocument * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum cdrGridType * pVal ) = 0;
      virtual HRESULT __stdcall put_Type (
        /*[in]*/ enum cdrGridType pVal ) = 0;
      virtual HRESULT __stdcall get_Snap (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_Snap (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall raw_SetFrequency (
        /*[in]*/ double GridX,
        /*[in]*/ double GridY ) = 0;
      virtual HRESULT __stdcall get_SpacingX (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_SpacingX (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_SpacingY (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_SpacingY (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("b0580005-9aa4-44fd-9547-4f91eb757ac4"))
IVGAppPlugin : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT OnLoad (
        struct IVGApplication * Application );
    HRESULT StartSession ( );
    HRESULT StopSession ( );
    HRESULT OnUnload ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_OnLoad (
        /*[in]*/ struct IVGApplication * Application ) = 0;
      virtual HRESULT __stdcall raw_StartSession ( ) = 0;
      virtual HRESULT __stdcall raw_StopSession ( ) = 0;
      virtual HRESULT __stdcall raw_OnUnload ( ) = 0;
};

struct __declspec(uuid("b0580048-9aa4-44fd-9547-4f91eb757ac4"))
IVGPage : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetApplication))
    IVGApplicationPtr Application;
    __declspec(property(get=GetParent))
    IVGPagesPtr Parent;
    __declspec(property(get=GetLayers))
    IVGLayersPtr Layers;
    __declspec(property(get=GetShapes))
    IVGShapesPtr Shapes;
    __declspec(property(get=GetActiveLayer))
    IVGLayerPtr ActiveLayer;
    __declspec(property(get=GetPaper))
    _bstr_t Paper;
    __declspec(property(get=GetSizeWidth,put=PutSizeWidth))
    double SizeWidth;
    __declspec(property(get=GetMarkup))
    IVGPageMarkupPtr Markup;
    __declspec(property(get=GetSizeHeight,put=PutSizeHeight))
    double SizeHeight;
    __declspec(property(get=GetResolution,put=PutResolution))
    long Resolution;
    __declspec(property(get=GetBleed,put=PutBleed))
    double Bleed;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    enum cdrPageOrientation Orientation;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetBackground,put=PutBackground))
    enum cdrPageBackground Background;
    __declspec(property(get=GetColor,put=PutColor))
    IVGColorPtr Color;
    __declspec(property(get=GetPrintExportBackground,put=PutPrintExportBackground))
    VARIANT_BOOL PrintExportBackground;
    __declspec(property(get=GetGuides))
    IVGShapeRangePtr Guides[];
    __declspec(property(get=GetProperties))
    IVGPropertiesPtr Properties;
    __declspec(property(get=GetCenterX))
    double CenterX;
    __declspec(property(get=GetCenterY))
    double CenterY;
    __declspec(property(get=GetPrevious))
    IVGPagePtr Previous;
    __declspec(property(get=GetNext))
    IVGPagePtr Next;
    __declspec(property(get=GetSelectableShapes))
    IVGShapesPtr SelectableShapes;
    __declspec(property(get=GetTreeNode))
    IVGTreeNodePtr TreeNode;
    __declspec(property(get=GetGuidesLayer))
    IVGLayerPtr GuidesLayer;
    __declspec(property(get=GetDesktopLayer))
    IVGLayerPtr DesktopLayer;
    __declspec(property(get=GetGridLayer))
    IVGLayerPtr GridLayer;
    __declspec(property(get=GetLeftX))
    double LeftX;
    __declspec(property(get=GetRightX))
    double RightX;
    __declspec(property(get=GetBottomY))
    double BottomY;
    __declspec(property(get=GetTopY))
    double TopY;
    __declspec(property(get=GetAllLayers))
    IVGLayersPtr AllLayers;
    __declspec(property(get=GetBoundingBox))
    IVGRectPtr BoundingBox;
    __declspec(property(get=GetSpread))
    IVGSpreadPtr Spread;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetName ( );
    void PutName (
        _bstr_t pVal );
    IVGApplicationPtr GetApplication ( );
    IVGPagesPtr GetParent ( );
    IVGLayersPtr GetLayers ( );
    IVGShapesPtr GetShapes ( );
    IVGLayerPtr GetActiveLayer ( );
    _bstr_t GetPaper ( );
    double GetSizeWidth ( );
    void PutSizeWidth (
        double pVal );
    double GetSizeHeight ( );
    void PutSizeHeight (
        double pVal );
    long GetResolution ( );
    void PutResolution (
        long pVal );
    double GetBleed ( );
    void PutBleed (
        double pVal );
    enum cdrPageOrientation GetOrientation ( );
    void PutOrientation (
        enum cdrPageOrientation pVal );
    long GetIndex ( );
    HRESULT Activate ( );
    HRESULT Delete ( );
    IVGLayerPtr CreateLayer (
        _bstr_t LayerName );
    IVGShapePtr TextFind (
        _bstr_t Text,
        VARIANT_BOOL CaseSensitive );
    HRESULT TextReplace (
        _bstr_t OldText,
        _bstr_t NewText,
        VARIANT_BOOL CaseSensitive,
        VARIANT_BOOL ReplaceSelectedOnly );
    IVGShapePtr SelectShapesAtPoint (
        double x,
        double y,
        VARIANT_BOOL SelectUnfilled,
        double HotArea );
    IVGShapePtr SelectShapesFromRectangle (
        double x1,
        double y1,
        double x2,
        double y2,
        VARIANT_BOOL Touch );
    enum cdrPageBackground GetBackground ( );
    void PutBackground (
        enum cdrPageBackground pVal );
    IVGColorPtr GetColor ( );
    void PutColor (
        struct IVGColor * pVal );
    VARIANT_BOOL GetPrintExportBackground ( );
    void PutPrintExportBackground (
        VARIANT_BOOL pVal );
    IVGShapeRangePtr GetGuides (
        enum cdrGuideType Type );
    IVGShapePtr FindShape (
        _bstr_t Name,
        enum cdrShapeType Type,
        long StaticID,
        VARIANT_BOOL Recursive );
    IVGShapeRangePtr FindShapes (
        _bstr_t Name,
        enum cdrShapeType Type,
        VARIANT_BOOL Recursive );
    HRESULT MoveTo (
        long Index );
    HRESULT UnlockAllShapes ( );
    IVGPropertiesPtr GetProperties ( );
    HRESULT GetSize (
        double * Width,
        double * Height );
    HRESULT SetSize (
        double Width,
        double Height );
    double GetCenterX ( );
    double GetCenterY ( );
    _variant_t CustomCommand (
        _bstr_t ComponentID,
        _bstr_t CommandID,
        SAFEARRAY * * Parameters );
    IVGPagePtr GetPrevious ( );
    IVGPagePtr GetNext ( );
    IVGShapesPtr GetSelectableShapes ( );
    IVGTreeNodePtr GetTreeNode ( );
    HRESULT GetCenterPosition (
        double * CenterX,
        double * CenterY );
    HRESULT SelectSize (
        _bstr_t PageSizeName,
        VARIANT_BOOL Landscape );
    IVGLayerPtr GetGuidesLayer ( );
    IVGLayerPtr GetDesktopLayer ( );
    IVGLayerPtr GetGridLayer ( );
    HRESULT GetBoundingBox (
        double * x,
        double * y,
        double * Width,
        double * Height );
    double GetLeftX ( );
    double GetRightX ( );
    double GetBottomY ( );
    double GetTopY ( );
    IVGLayersPtr GetAllLayers ( );
    IVGRectPtr GetBoundingBox ( );
    IVGSpreadPtr GetSpread ( );
    IVGSnapPointPtr FindClosestSnapPoint (
        enum cdrPointType TypeSet,
        double PositionX,
        double PositionY,
        double HotArea );
    IVGRectPtr GetObjectsBoundingBox (
        VARIANT_BOOL SelectedOnly,
        VARIANT_BOOL IncludeNonPrintable );
    IVGShapePtr FindShapeAtPoint (
        double x,
        double y,
        VARIANT_BOOL TreatAsFilled );
    IVGPageMarkupPtr GetMarkup ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct IVGApplication * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ struct IVGPages * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Layers (
        /*[out,retval]*/ struct IVGLayers * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Shapes (
        /*[out,retval]*/ struct IVGShapes * * ppVal ) = 0;
      virtual HRESULT __stdcall get_ActiveLayer (
        /*[out,retval]*/ struct IVGLayer * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Paper (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_SizeWidth (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_SizeWidth (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_SizeHeight (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_SizeHeight (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Resolution (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_Resolution (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_Bleed (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Bleed (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Orientation (
        /*[out,retval]*/ enum cdrPageOrientation * pVal ) = 0;
      virtual HRESULT __stdcall put_Orientation (
        /*[in]*/ enum cdrPageOrientation pVal ) = 0;
      virtual HRESULT __stdcall get_Index (
        /*[out,retval]*/ long * pIndex ) = 0;
      virtual HRESULT __stdcall raw_Activate ( ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall raw_CreateLayer (
        /*[in]*/ BSTR LayerName,
        /*[out,retval]*/ struct IVGLayer * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_TextFind (
        /*[in]*/ BSTR Text,
        /*[in]*/ VARIANT_BOOL CaseSensitive,
        /*[out,retval]*/ struct IVGShape * * ppFound ) = 0;
      virtual HRESULT __stdcall raw_TextReplace (
        /*[in]*/ BSTR OldText,
        /*[in]*/ BSTR NewText,
        /*[in]*/ VARIANT_BOOL CaseSensitive,
        /*[in]*/ VARIANT_BOOL ReplaceSelectedOnly ) = 0;
      virtual HRESULT __stdcall raw_SelectShapesAtPoint (
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[in]*/ VARIANT_BOOL SelectUnfilled,
        /*[in]*/ double HotArea,
        /*[out,retval]*/ struct IVGShape * * ppRet ) = 0;
      virtual HRESULT __stdcall raw_SelectShapesFromRectangle (
        /*[in]*/ double x1,
        /*[in]*/ double y1,
        /*[in]*/ double x2,
        /*[in]*/ double y2,
        /*[in]*/ VARIANT_BOOL Touch,
        /*[out,retval]*/ struct IVGShape * * ppRet ) = 0;
      virtual HRESULT __stdcall get_Background (
        /*[out,retval]*/ enum cdrPageBackground * pVal ) = 0;
      virtual HRESULT __stdcall put_Background (
        /*[in]*/ enum cdrPageBackground pVal ) = 0;
      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ struct IVGColor * * pVal ) = 0;
      virtual HRESULT __stdcall put_Color (
        /*[in]*/ struct IVGColor * pVal ) = 0;
      virtual HRESULT __stdcall get_PrintExportBackground (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_PrintExportBackground (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Guides (
        /*[in]*/ enum cdrGuideType Type,
        /*[out,retval]*/ struct IVGShapeRange * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_FindShape (
        /*[in]*/ BSTR Name,
        /*[in]*/ enum cdrShapeType Type,
        /*[in]*/ long StaticID,
        /*[in]*/ VARIANT_BOOL Recursive,
        /*[out,retval]*/ struct IVGShape * * ppRet ) = 0;
      virtual HRESULT __stdcall raw_FindShapes (
        /*[in]*/ BSTR Name,
        /*[in]*/ enum cdrShapeType Type,
        /*[in]*/ VARIANT_BOOL Recursive,
        /*[out,retval]*/ struct IVGShapeRange * * ppRet ) = 0;
      virtual HRESULT __stdcall raw_MoveTo (
        /*[in]*/ long Index ) = 0;
      virtual HRESULT __stdcall raw_UnlockAllShapes ( ) = 0;
      virtual HRESULT __stdcall get_Properties (
        /*[out,retval]*/ struct IVGProperties * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_GetSize (
        /*[out]*/ double * Width,
        /*[out]*/ double * Height ) = 0;
      virtual HRESULT __stdcall raw_SetSize (
        /*[in]*/ double Width,
        /*[in]*/ double Height ) = 0;
      virtual HRESULT __stdcall get_CenterX (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_CenterY (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall raw_CustomCommand (
        /*[in]*/ BSTR ComponentID,
        /*[in]*/ BSTR CommandID,
        /*[in]*/ SAFEARRAY * * Parameters,
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall get_Previous (
        /*[out,retval]*/ struct IVGPage * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Next (
        /*[out,retval]*/ struct IVGPage * * ppVal ) = 0;
      virtual HRESULT __stdcall get_SelectableShapes (
        /*[out,retval]*/ struct IVGShapes * * ppVal ) = 0;
      virtual HRESULT __stdcall get_TreeNode (
        /*[out,retval]*/ struct IVGTreeNode * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_GetCenterPosition (
        /*[out]*/ double * CenterX,
        /*[out]*/ double * CenterY ) = 0;
      virtual HRESULT __stdcall raw_SelectSize (
        /*[in]*/ BSTR PageSizeName,
        /*[in]*/ VARIANT_BOOL Landscape ) = 0;
      virtual HRESULT __stdcall get_GuidesLayer (
        /*[out,retval]*/ struct IVGLayer * * ppVal ) = 0;
      virtual HRESULT __stdcall get_DesktopLayer (
        /*[out,retval]*/ struct IVGLayer * * ppVal ) = 0;
      virtual HRESULT __stdcall get_GridLayer (
        /*[out,retval]*/ struct IVGLayer * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_GetBoundingBox (
        /*[out]*/ double * x,
        /*[out]*/ double * y,
        /*[out]*/ double * Width,
        /*[out]*/ double * Height ) = 0;
      virtual HRESULT __stdcall get_LeftX (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_RightX (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_BottomY (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_TopY (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_AllLayers (
        /*[out,retval]*/ struct IVGLayers * * ppVal ) = 0;
      virtual HRESULT __stdcall get_BoundingBox (
        /*[out,retval]*/ struct IVGRect * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Spread (
        /*[out,retval]*/ struct IVGSpread * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_FindClosestSnapPoint (
        /*[in]*/ enum cdrPointType TypeSet,
        /*[in]*/ double PositionX,
        /*[in]*/ double PositionY,
        /*[in]*/ double HotArea,
        /*[out,retval]*/ struct IVGSnapPoint * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_GetObjectsBoundingBox (
        /*[in]*/ VARIANT_BOOL SelectedOnly,
        /*[in]*/ VARIANT_BOOL IncludeNonPrintable,
        /*[out,retval]*/ struct IVGRect * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_FindShapeAtPoint (
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[in]*/ VARIANT_BOOL TreatAsFilled,
        /*[out,retval]*/ struct IVGShape * * ppRet ) = 0;
      virtual HRESULT __stdcall get_Markup (
        /*[out,retval]*/ struct IVGPageMarkup * * ppVal ) = 0;
};

struct __declspec(uuid("b0580049-9aa4-44fd-9547-4f91eb757ac4"))
IVGPages : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    IVGApplicationPtr Application;
    __declspec(property(get=GetParent))
    IVGDocumentPtr Parent;
    __declspec(property(get=GetItem))
    IVGPagePtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetFirst))
    IVGPagePtr First;
    __declspec(property(get=GetLast))
    IVGPagePtr Last;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IVGApplicationPtr GetApplication ( );
    IVGDocumentPtr GetParent ( );
    IVGPagePtr GetItem (
        long Index );
    IUnknownPtr Get_NewEnum ( );
    long GetCount ( );
    IVGPagePtr GetFirst ( );
    IVGPagePtr GetLast ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct IVGApplication * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ struct IVGDocument * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IVGPage * * ppVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * pVal ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_First (
        /*[out,retval]*/ struct IVGPage * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Last (
        /*[out,retval]*/ struct IVGPage * * ppVal ) = 0;
};

struct __declspec(uuid("b0580041-9aa4-44fd-9547-4f91eb757ac4"))
IVGLayers : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    IVGApplicationPtr Application;
    __declspec(property(get=GetParent))
    IVGPagePtr Parent;
    __declspec(property(get=GetItem))
    IVGLayerPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetTop))
    IVGLayerPtr Top;
    __declspec(property(get=GetBottom))
    IVGLayerPtr Bottom;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IVGApplicationPtr GetApplication ( );
    IVGPagePtr GetParent ( );
    IVGLayerPtr GetItem (
        const _variant_t & IndexOrName );
    IUnknownPtr Get_NewEnum ( );
    long GetCount ( );
    IVGLayerPtr Find (
        _bstr_t LayerName );
    IVGLayerPtr GetTop ( );
    IVGLayerPtr GetBottom ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct IVGApplication * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ struct IVGPage * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT IndexOrName,
        /*[out,retval]*/ struct IVGLayer * * ppVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * pVal ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_Find (
        /*[in]*/ BSTR LayerName,
        /*[out,retval]*/ struct IVGLayer * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ struct IVGLayer * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Bottom (
        /*[out,retval]*/ struct IVGLayer * * ppVal ) = 0;
};

struct __declspec(uuid("b0580040-9aa4-44fd-9547-4f91eb757ac4"))
IVGLayer : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    IVGApplicationPtr Application;
    __declspec(property(get=GetParent))
    IVGLayersPtr Parent;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetShapes))
    IVGShapesPtr Shapes;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetPrintable,put=PutPrintable))
    VARIANT_BOOL Printable;
    __declspec(property(get=GetEditable,put=PutEditable))
    VARIANT_BOOL Editable;
    __declspec(property(get=GetMaster,put=PutMaster))
    VARIANT_BOOL Master;
    __declspec(property(get=GetSelectableShapes))
    IVGShapesPtr SelectableShapes;
    __declspec(property(get=GetOverrideColor,put=PutOverrideColor))
    VARIANT_BOOL OverrideColor;
    __declspec(property(get=GetTreeNode))
    IVGTreeNodePtr TreeNode;
    __declspec(property(get=GetColor,put=PutColor))
    IVGColorPtr Color;
    __declspec(property(get=GetIsGuidesLayer))
    VARIANT_BOOL IsGuidesLayer;
    __declspec(property(get=GetIsDesktopLayer))
    VARIANT_BOOL IsDesktopLayer;
    __declspec(property(get=GetIsGridLayer))
    VARIANT_BOOL IsGridLayer;
    __declspec(property(get=GetAbsoluteIndex))
    long AbsoluteIndex;
    __declspec(property(get=GetPage))
    IVGPagePtr Page;
    __declspec(property(get=GetIsSpecialLayer))
    VARIANT_BOOL IsSpecialLayer;
    __declspec(property(get=GetMasterLayer))
    IVGLayerPtr MasterLayer;
    __declspec(property(get=GetAbove))
    IVGLayerPtr Above[];
    __declspec(property(get=GetBelow))
    IVGLayerPtr Below[];
    __declspec(property(get=GetProperties))
    IVGPropertiesPtr Properties;
    __declspec(property(get=GetMasterProperties))
    IVGPropertiesPtr MasterProperties;
    __declspec(property(get=GetIndex))
    long Index;

    //
    // Wrapper methods for error-handling
    //

    IVGApplicationPtr GetApplication ( );
    IVGLayersPtr GetParent ( );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t pVal );
    IVGShapesPtr GetShapes ( );
    HRESULT Activate ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetPrintable ( );
    void PutPrintable (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetEditable ( );
    void PutEditable (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetMaster ( );
    void PutMaster (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetOverrideColor ( );
    void PutOverrideColor (
        VARIANT_BOOL pVal );
    IVGColorPtr GetColor ( );
    void PutColor (
        struct IVGColor * pVal );
    HRESULT Delete ( );
    HRESULT MoveAbove (
        struct IVGLayer * Layer );
    HRESULT MoveBelow (
        struct IVGLayer * Layer );
    HRESULT Import (
        _bstr_t FileName,
        enum cdrFilter Filter,
        struct IVGStructImportOptions * Options );
    IVGShapePtr CreateRectangle (
        double Left,
        double Top,
        double Right,
        double Bottom,
        long CornerUL,
        long CornerUR,
        long CornerLR,
        long CornerLL );
    IVGShapePtr CreateEllipse (
        double Left,
        double Top,
        double Right,
        double Bottom,
        double StartAngle,
        double EndAngle,
        VARIANT_BOOL Pie );
    IVGShapePtr CreatePolygon (
        double Left,
        double Top,
        double Right,
        double Bottom,
        long Sides,
        long SubPaths,
        long Complexity,
        VARIANT_BOOL Star,
        long StarComplexity,
        long MaxComplexity );
    IVGShapePtr CreateGridBoxes (
        double Left,
        double Top,
        double Right,
        double Bottom,
        long Wide,
        long High );
    IVGShapePtr CreateSpiral (
        double Left,
        double Top,
        double Right,
        double Bottom,
        long NumRevolutions,
        enum cdrSpiralType SpiralType,
        long GrowthRate );
    IVGShapePtr CreateArtisticText (
        double Left,
        double Bottom,
        _bstr_t Text,
        enum cdrTextLanguage LanguageID,
        enum cdrTextCharSet CharSet,
        _bstr_t Font,
        float Size,
        enum cdrTriState Bold,
        enum cdrTriState Italic,
        enum cdrFontLine Underline,
        enum cdrAlignment Alignment );
    IVGShapePtr CreateParagraphText (
        double Left,
        double Top,
        double Right,
        double Bottom,
        _bstr_t Text,
        enum cdrTextLanguage LanguageID,
        enum cdrTextCharSet CharSet,
        _bstr_t Font,
        float Size,
        enum cdrTriState Bold,
        enum cdrTriState Italic,
        enum cdrFontLine Underline,
        enum cdrAlignment Alignment );
    IVGShapePtr CreateCurveSegment (
        double StartX,
        double StartY,
        double EndX,
        double EndY,
        double StartingControlPointLength,
        double StartingControlPointAngle,
        double EndingControlPointLength,
        double EndingControlPointAngle );
    IVGShapePtr CreateLineSegment (
        double StartX,
        double StartY,
        double EndX,
        double EndY );
    IVGShapePtr CreateConnector (
        struct IVGSnapPoint * Start,
        struct IVGSnapPoint * End );
    IVGShapePtr CreateCurve (
        struct IVGCurve * Source );
    IVGShapePtr Paste ( );
    IVGShapePtr CreateGuideAngle (
        double x,
        double y,
        double Angle );
    IVGShapePtr CreateGuide (
        double x1,
        double y1,
        double x2,
        double y2 );
    IVGShapePtr CreateEllipse2 (
        double CenterX,
        double CenterY,
        double Radius1,
        double Radius2,
        double StartAngle,
        double EndAngle,
        VARIANT_BOOL Pie );
    IVGShapePtr FindShape (
        _bstr_t Name,
        enum cdrShapeType Type,
        long StaticID,
        VARIANT_BOOL Recursive );
    IVGShapeRangePtr FindShapes (
        _bstr_t Name,
        enum cdrShapeType Type,
        VARIANT_BOOL Recursive );
    IVGShapePtr CreateRectangle2 (
        double x,
        double y,
        double Width,
        double Height,
        double RadiusUL,
        double RadiusUR,
        double RadiusLR,
        double RadiusLL );
    IVGShapePtr CreateFreeConnector (
        double x1,
        double y1,
        double x2,
        double y2 );
    IVGPropertiesPtr GetProperties ( );
    IVGPropertiesPtr GetMasterProperties ( );
    long GetIndex ( );
    IVGShapePtr CreateCurveSegment2 (
        double x1,
        double y1,
        double StartingControlPointX,
        double StartingControlPointY,
        double EndingControlPointX,
        double EndingControlPointY,
        double x2,
        double y2 );
    ICorelImportFilterPtr ImportEx (
        _bstr_t FileName,
        enum cdrFilter Filter,
        struct IVGStructImportOptions * Options );
    IVGShapePtr CreateArtisticTextWide (
        double Left,
        double Bottom,
        _bstr_t Text,
        enum cdrTextLanguage LanguageID,
        enum cdrTextCharSet CharSet,
        _bstr_t Font,
        float Size,
        enum cdrTriState Bold,
        enum cdrTriState Italic,
        enum cdrFontLine Underline,
        enum cdrAlignment Alignment );
    IVGShapePtr CreateParagraphTextWide (
        double Left,
        double Top,
        double Right,
        double Bottom,
        _bstr_t Text,
        enum cdrTextLanguage LanguageID,
        enum cdrTextCharSet CharSet,
        _bstr_t Font,
        float Size,
        enum cdrTriState Bold,
        enum cdrTriState Italic,
        enum cdrFontLine Underline,
        enum cdrAlignment Alignment );
    _variant_t CustomCommand (
        _bstr_t ComponentID,
        _bstr_t CommandID,
        SAFEARRAY * * Parameters );
    IVGShapePtr CreateCustomShape (
        _bstr_t TypeID,
        SAFEARRAY * * Parameters );
    IVGShapePtr CreateLinearDimension (
        enum cdrLinearDimensionType Type,
        struct IVGSnapPoint * Point1,
        struct IVGSnapPoint * Point2,
        VARIANT_BOOL TextCentered,
        double TextX,
        double TextY,
        enum cdrDimensionStyle Style,
        long Precision,
        VARIANT_BOOL ShowUnits,
        enum cdrDimensionLinearUnits Units,
        enum cdrDimensionPlacement Placement,
        VARIANT_BOOL HorizontalText,
        VARIANT_BOOL BoxedText,
        VARIANT_BOOL LeadingZero,
        _bstr_t Prefix,
        _bstr_t Suffix,
        double OutlineWidth,
        struct IVGArrowHead * Arrows,
        struct IVGColor * OutlineColor,
        _bstr_t TextFont,
        double TextSize,
        struct IVGColor * TextColor );
    IVGShapePtr CreateAngularDimension (
        struct IVGSnapPoint * Center,
        struct IVGSnapPoint * Point1,
        struct IVGSnapPoint * Point2,
        double TextX,
        double TextY,
        long Precision,
        VARIANT_BOOL ShowUnits,
        enum cdrDimensionAngularUnits Units,
        VARIANT_BOOL BoxedText,
        VARIANT_BOOL LeadingZero,
        _bstr_t Prefix,
        _bstr_t Suffix,
        double OutlineWidth,
        struct IVGArrowHead * Arrows,
        struct IVGColor * OutlineColor,
        _bstr_t TextFont,
        double TextSize,
        struct IVGColor * TextColor );
    IVGShapePtr CreateSymbol (
        double x,
        double y,
        _bstr_t SymbolName,
        struct IVGSymbolLibrary * Library );
    IVGShapePtr CreatePolygon2 (
        double CenterX,
        double CenterY,
        double Radius,
        long Sides,
        double Angle,
        double InnerRadius,
        VARIANT_BOOL Star,
        long Sharpness );
    VARIANT_BOOL PasteSpecial (
        _bstr_t FormatName,
        VARIANT_BOOL PasteLink,
        VARIANT_BOOL DisplayAsIcon,
        _bstr_t Caption,
        const _variant_t & Icon = vtMissing );
    IVGShapePtr CreateOLEObject (
        _bstr_t ObjectID,
        VARIANT_BOOL DisplayAsIcon,
        _bstr_t Caption,
        const _variant_t & Icon = vtMissing );
    IVGShapePtr CreateOLEObjectFromFile (
        _bstr_t FileName,
        VARIANT_BOOL Link,
        VARIANT_BOOL DisplayAsIcon,
        _bstr_t Caption,
        const _variant_t & Icon = vtMissing );
    IVGShapesPtr GetSelectableShapes ( );
    IVGTreeNodePtr GetTreeNode ( );
    VARIANT_BOOL GetIsGuidesLayer ( );
    VARIANT_BOOL GetIsDesktopLayer ( );
    VARIANT_BOOL GetIsGridLayer ( );
    VARIANT_BOOL GetIsSpecialLayer ( );
    IVGLayerPtr GetMasterLayer ( );
    long GetAbsoluteIndex ( );
    IVGPagePtr GetPage ( );
    IVGLayerPtr GetAbove (
        VARIANT_BOOL IgnoreMasters );
    IVGLayerPtr GetBelow (
        VARIANT_BOOL IgnoreMasters );
    IVGShapePtr CreateRectangleRect (
        struct IVGRect * Rect,
        double RadiusUL,
        double RadiusUR,
        double RadiusLR,
        double RadiusLL );
    IVGShapePtr CreateEllipseRect (
        struct IVGRect * Rect,
        double StartAngle,
        double EndAngle,
        VARIANT_BOOL Pie );
    IVGShapePtr CreateConnectorEx (
        enum cdrConnectorType Type,
        struct IVGSnapPoint * Start,
        struct IVGSnapPoint * End );
    IVGShapePtr CreateRightAngleConnector (
        struct IVGSnapPoint * Start,
        struct IVGSnapPoint * End,
        double CornerRadius );
    IVGShapePtr CreateBSpline (
        struct IVGBSpline * Source );
    IVGShapeRangePtr PasteEx (
        struct IVGStructPasteOptions * Options );
    IVGShapePtr CreateToolShape (
        _bstr_t ToolShapeGuid,
        struct IVGProperties * ShapeProperties );
    IVGShapePtr CreateBitmap (
        double Left,
        double Top,
        double Right,
        double Bottom,
        struct IVGImage * Image,
        struct IVGImage * ImageAlpha );
    IVGShapePtr CreateBitmap2 (
        double x,
        double y,
        double Width,
        double Height,
        struct IVGImage * Image,
        struct IVGImage * ImageAlpha );
    IVGShapePtr CreateBitmapRect (
        struct IVGRect * Rect,
        struct IVGImage * Image,
        struct IVGImage * ImageAlpha );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct IVGApplication * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ struct IVGLayers * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Shapes (
        /*[out,retval]*/ struct IVGShapes * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_Activate ( ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Printable (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_Printable (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Editable (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_Editable (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Master (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_Master (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_OverrideColor (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_OverrideColor (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ struct IVGColor * * pVal ) = 0;
      virtual HRESULT __stdcall put_Color (
        /*[in]*/ struct IVGColor * pVal ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall raw_MoveAbove (
        /*[in]*/ struct IVGLayer * Layer ) = 0;
      virtual HRESULT __stdcall raw_MoveBelow (
        /*[in]*/ struct IVGLayer * Layer ) = 0;
      virtual HRESULT __stdcall raw_Import (
        /*[in]*/ BSTR FileName,
        /*[in]*/ enum cdrFilter Filter,
        /*[in]*/ struct IVGStructImportOptions * Options ) = 0;
      virtual HRESULT __stdcall raw_CreateRectangle (
        /*[in]*/ double Left,
        /*[in]*/ double Top,
        /*[in]*/ double Right,
        /*[in]*/ double Bottom,
        /*[in]*/ long CornerUL,
        /*[in]*/ long CornerUR,
        /*[in]*/ long CornerLR,
        /*[in]*/ long CornerLL,
        /*[out,retval]*/ struct IVGShape * * ppRet ) = 0;
      virtual HRESULT __stdcall raw_CreateEllipse (
        /*[in]*/ double Left,
        /*[in]*/ double Top,
        /*[in]*/ double Right,
        /*[in]*/ double Bottom,
        /*[in]*/ double StartAngle,
        /*[in]*/ double EndAngle,
        /*[in]*/ VARIANT_BOOL Pie,
        /*[out,retval]*/ struct IVGShape * * ppRet ) = 0;
      virtual HRESULT __stdcall raw_CreatePolygon (
        /*[in]*/ double Left,
        /*[in]*/ double Top,
        /*[in]*/ double Right,
        /*[in]*/ double Bottom,
        /*[in]*/ long Sides,
        /*[in]*/ long SubPaths,
        /*[in]*/ long Complexity,
        /*[in]*/ VARIANT_BOOL Star,
        /*[in]*/ long StarComplexity,
        /*[in]*/ long MaxComplexity,
        /*[out,retval]*/ struct IVGShape * * ppRet ) = 0;
      virtual HRESULT __stdcall raw_CreateGridBoxes (
        /*[in]*/ double Left,
        /*[in]*/ double Top,
        /*[in]*/ double Right,
        /*[in]*/ double Bottom,
        /*[in]*/ long Wide,
        /*[in]*/ long High,
        /*[out,retval]*/ struct IVGShape * * ppRet ) = 0;
      virtual HRESULT __stdcall raw_CreateSpiral (
        /*[in]*/ double Left,
        /*[in]*/ double Top,
        /*[in]*/ double Right,
        /*[in]*/ double Bottom,
        /*[in]*/ long NumRevolutions,
        /*[in]*/ enum cdrSpiralType SpiralType,
        /*[in]*/ long GrowthRate,
        /*[out,retval]*/ struct IVGShape * * ppRet ) = 0;
      virtual HRESULT __stdcall raw_CreateArtisticText (
        /*[in]*/ double Left,
        /*[in]*/ double Bottom,
        /*[in]*/ BSTR Text,
        /*[in]*/ enum cdrTextLanguage LanguageID,
        /*[in]*/ enum cdrTextCharSet CharSet,
        /*[in]*/ BSTR Font,
        /*[in]*/ float Size,
        /*[in]*/ enum cdrTriState Bold,
        /*[in]*/ enum cdrTriState Italic,
        /*[in]*/ enum cdrFontLine Underline,
        /*[in]*/ enum cdrAlignment Alignment,
        /*[out,retval]*/ struct IVGShape * * ppRet ) = 0;
      virtual HRESULT __stdcall raw_CreateParagraphText (
        /*[in]*/ double Left,
        /*[in]*/ double Top,
        /*[in]*/ double Right,
        /*[in]*/ double Bottom,
        /*[in]*/ BSTR Text,
        /*[in]*/ enum cdrTextLanguage LanguageID,
        /*[in]*/ enum cdrTextCharSet CharSet,
        /*[in]*/ BSTR Font,
        /*[in]*/ float Size,
        /*[in]*/ enum cdrTriState Bold,
        /*[in]*/ enum cdrTriState Italic,
        /*[in]*/ enum cdrFontLine Underline,
        /*[in]*/ enum cdrAlignment Alignment,
        /*[out,retval]*/ struct IVGShape * * ppRet ) = 0;
      virtual HRESULT __stdcall raw_CreateCurveSegment (
        /*[in]*/ double StartX,
        /*[in]*/ double StartY,
        /*[in]*/ double EndX,
        /*[in]*/ double EndY,
        /*[in]*/ double StartingControlPointLength,
        /*[in]*/ double StartingControlPointAngle,
        /*[in]*/ double EndingControlPointLength,
        /*[in]*/ double EndingControlPointAngle,
        /*[out,retval]*/ struct IVGShape * * ppRet ) = 0;
      virtual HRESULT __stdcall raw_CreateLineSegment (
        /*[in]*/ double StartX,
        /*[in]*/ double StartY,
        /*[in]*/ double EndX,
        /*[in]*/ double EndY,
        /*[out,retval]*/ struct IVGShape * * ppRet ) = 0;
      virtual HRESULT __stdcall raw_CreateConnector (
        /*[in]*/ struct IVGSnapPoint * Start,
        /*[in]*/ struct IVGSnapPoint * End,
        /*[out,retval]*/ struct IVGShape * * ppRet ) = 0;
      virtual HRESULT __stdcall raw_CreateCurve (
        /*[in]*/ struct IVGCurve * Source,
        /*[out,retval]*/ struct IVGShape * * ppRet ) = 0;
      virtual HRESULT __stdcall raw_Paste (
        /*[out,retval]*/ struct IVGShape * * ppRet ) = 0;
      virtual HRESULT __stdcall raw_CreateGuideAngle (
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[in]*/ double Angle,
        /*[out,retval]*/ struct IVGShape * * ppRet ) = 0;
      virtual HRESULT __stdcall raw_CreateGuide (
        /*[in]*/ double x1,
        /*[in]*/ double y1,
        /*[in]*/ double x2,
        /*[in]*/ double y2,
        /*[out,retval]*/ struct IVGShape * * ppRet ) = 0;
      virtual HRESULT __stdcall raw_CreateEllipse2 (
        /*[in]*/ double CenterX,
        /*[in]*/ double CenterY,
        /*[in]*/ double Radius1,
        /*[in]*/ double Radius2,
        /*[in]*/ double StartAngle,
        /*[in]*/ double EndAngle,
        /*[in]*/ VARIANT_BOOL Pie,
        /*[out,retval]*/ struct IVGShape * * ppRet ) = 0;
      virtual HRESULT __stdcall raw_FindShape (
        /*[in]*/ BSTR Name,
        /*[in]*/ enum cdrShapeType Type,
        /*[in]*/ long StaticID,
        /*[in]*/ VARIANT_BOOL Recursive,
        /*[out,retval]*/ struct IVGShape * * ppRet ) = 0;
      virtual HRESULT __stdcall raw_FindShapes (
        /*[in]*/ BSTR Name,
        /*[in]*/ enum cdrShapeType Type,
        /*[in]*/ VARIANT_BOOL Recursive,
        /*[out,retval]*/ struct IVGShapeRange * * ppRet ) = 0;
      virtual HRESULT __stdcall raw_CreateRectangle2 (
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[in]*/ double Width,
        /*[in]*/ double Height,
        /*[in]*/ double RadiusUL,
        /*[in]*/ double RadiusUR,
        /*[in]*/ double RadiusLR,
        /*[in]*/ double RadiusLL,
        /*[out,retval]*/ struct IVGShape * * ppRet ) = 0;
      virtual HRESULT __stdcall raw_CreateFreeConnector (
        /*[in]*/ double x1,
        /*[in]*/ double y1,
        /*[in]*/ double x2,
        /*[in]*/ double y2,
        /*[out,retval]*/ struct IVGShape * * ppRet ) = 0;
      virtual HRESULT __stdcall get_Properties (
        /*[out,retval]*/ struct IVGProperties * * ppVal ) = 0;
      virtual HRESULT __stdcall get_MasterProperties (
        /*[out,retval]*/ struct IVGProperties * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Index (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_CreateCurveSegment2 (
        /*[in]*/ double x1,
        /*[in]*/ double y1,
        /*[in]*/ double StartingControlPointX,
        /*[in]*/ double StartingControlPointY,
        /*[in]*/ double EndingControlPointX,
        /*[in]*/ double EndingControlPointY,
        /*[in]*/ double x2,
        /*[in]*/ double y2,
        /*[out,retval]*/ struct IVGShape * * ppRet ) = 0;
      virtual HRESULT __stdcall raw_ImportEx (
        /*[in]*/ BSTR FileName,
        /*[in]*/ enum cdrFilter Filter,
        /*[in]*/ struct IVGStructImportOptions * Options,
        /*[out,retval]*/ struct ICorelImportFilter * * ppRet ) = 0;
      virtual HRESULT __stdcall raw_CreateArtisticTextWide (
        /*[in]*/ double Left,
        /*[in]*/ double Bottom,
        /*[in]*/ BSTR Text,
        /*[in]*/ enum cdrTextLanguage LanguageID,
        /*[in]*/ enum cdrTextCharSet CharSet,
        /*[in]*/ BSTR Font,
        /*[in]*/ float Size,
        /*[in]*/ enum cdrTriState Bold,
        /*[in]*/ enum cdrTriState Italic,
        /*[in]*/ enum cdrFontLine Underline,
        /*[in]*/ enum cdrAlignment Alignment,
        /*[out,retval]*/ struct IVGShape * * ppRet ) = 0;
      virtual HRESULT __stdcall raw_CreateParagraphTextWide (
        /*[in]*/ double Left,
        /*[in]*/ double Top,
        /*[in]*/ double Right,
        /*[in]*/ double Bottom,
        /*[in]*/ BSTR Text,
        /*[in]*/ enum cdrTextLanguage LanguageID,
        /*[in]*/ enum cdrTextCharSet CharSet,
        /*[in]*/ BSTR Font,
        /*[in]*/ float Size,
        /*[in]*/ enum cdrTriState Bold,
        /*[in]*/ enum cdrTriState Italic,
        /*[in]*/ enum cdrFontLine Underline,
        /*[in]*/ enum cdrAlignment Alignment,
        /*[out,retval]*/ struct IVGShape * * ppRet ) = 0;
      virtual HRESULT __stdcall raw_CustomCommand (
        /*[in]*/ BSTR ComponentID,
        /*[in]*/ BSTR CommandID,
        /*[in]*/ SAFEARRAY * * Parameters,
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall raw_CreateCustomShape (
        /*[in]*/ BSTR TypeID,
        /*[in]*/ SAFEARRAY * * Parameters,
        /*[out,retval]*/ struct IVGShape * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_CreateLinearDimension (
        /*[in]*/ enum cdrLinearDimensionType Type,
        /*[in]*/ struct IVGSnapPoint * Point1,
        /*[in]*/ struct IVGSnapPoint * Point2,
        /*[in]*/ VARIANT_BOOL TextCentered,
        /*[in]*/ double TextX,
        /*[in]*/ double TextY,
        /*[in]*/ enum cdrDimensionStyle Style,
        /*[in]*/ long Precision,
        /*[in]*/ VARIANT_BOOL ShowUnits,
        /*[in]*/ enum cdrDimensionLinearUnits Units,
        /*[in]*/ enum cdrDimensionPlacement Placement,
        /*[in]*/ VARIANT_BOOL HorizontalText,
        /*[in]*/ VARIANT_BOOL BoxedText,
        /*[in]*/ VARIANT_BOOL LeadingZero,
        /*[in]*/ BSTR Prefix,
        /*[in]*/ BSTR Suffix,
        /*[in]*/ double OutlineWidth,
        /*[in]*/ struct IVGArrowHead * Arrows,
        /*[in]*/ struct IVGColor * OutlineColor,
        /*[in]*/ BSTR TextFont,
        /*[in]*/ double TextSize,
        /*[in]*/ struct IVGColor * TextColor,
        /*[out,retval]*/ struct IVGShape * * ppRet ) = 0;
      virtual HRESULT __stdcall raw_CreateAngularDimension (
        /*[in]*/ struct IVGSnapPoint * Center,
        /*[in]*/ struct IVGSnapPoint * Point1,
        /*[in]*/ struct IVGSnapPoint * Point2,
        /*[in]*/ double TextX,
        /*[in]*/ double TextY,
        /*[in]*/ long Precision,
        /*[in]*/ VARIANT_BOOL ShowUnits,
        /*[in]*/ enum cdrDimensionAngularUnits Units,
        /*[in]*/ VARIANT_BOOL BoxedText,
        /*[in]*/ VARIANT_BOOL LeadingZero,
        /*[in]*/ BSTR Prefix,
        /*[in]*/ BSTR Suffix,
        /*[in]*/ double OutlineWidth,
        /*[in]*/ struct IVGArrowHead * Arrows,
        /*[in]*/ struct IVGColor * OutlineColor,
        /*[in]*/ BSTR TextFont,
        /*[in]*/ double TextSize,
        /*[in]*/ struct IVGColor * TextColor,
        /*[out,retval]*/ struct IVGShape * * ppRet ) = 0;
      virtual HRESULT __stdcall raw_CreateSymbol (
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[in]*/ BSTR SymbolName,
        /*[in]*/ struct IVGSymbolLibrary * Library,
        /*[out,retval]*/ struct IVGShape * * ppRet ) = 0;
      virtual HRESULT __stdcall raw_CreatePolygon2 (
        /*[in]*/ double CenterX,
        /*[in]*/ double CenterY,
        /*[in]*/ double Radius,
        /*[in]*/ long Sides,
        /*[in]*/ double Angle,
        /*[in]*/ double InnerRadius,
        /*[in]*/ VARIANT_BOOL Star,
        /*[in]*/ long Sharpness,
        /*[out,retval]*/ struct IVGShape * * ppRet ) = 0;
      virtual HRESULT __stdcall raw_PasteSpecial (
        /*[in]*/ BSTR FormatName,
        /*[in]*/ VARIANT_BOOL PasteLink,
        /*[in]*/ VARIANT_BOOL DisplayAsIcon,
        /*[in]*/ BSTR Caption,
        /*[in]*/ VARIANT Icon,
        /*[out,retval]*/ VARIANT_BOOL * pRet ) = 0;
      virtual HRESULT __stdcall raw_CreateOLEObject (
        /*[in]*/ BSTR ObjectID,
        /*[in]*/ VARIANT_BOOL DisplayAsIcon,
        /*[in]*/ BSTR Caption,
        /*[in]*/ VARIANT Icon,
        /*[out,retval]*/ struct IVGShape * * ppRet ) = 0;
      virtual HRESULT __stdcall raw_CreateOLEObjectFromFile (
        /*[in]*/ BSTR FileName,
        /*[in]*/ VARIANT_BOOL Link,
        /*[in]*/ VARIANT_BOOL DisplayAsIcon,
        /*[in]*/ BSTR Caption,
        /*[in]*/ VARIANT Icon,
        /*[out,retval]*/ struct IVGShape * * ppRet ) = 0;
      virtual HRESULT __stdcall get_SelectableShapes (
        /*[out,retval]*/ struct IVGShapes * * ppVal ) = 0;
      virtual HRESULT __stdcall get_TreeNode (
        /*[out,retval]*/ struct IVGTreeNode * * ppVal ) = 0;
      virtual HRESULT __stdcall get_IsGuidesLayer (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_IsDesktopLayer (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_IsGridLayer (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_IsSpecialLayer (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_MasterLayer (
        /*[out,retval]*/ struct IVGLayer * * ppVal ) = 0;
      virtual HRESULT __stdcall get_AbsoluteIndex (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_Page (
        /*[out,retval]*/ struct IVGPage * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Above (
        /*[in]*/ VARIANT_BOOL IgnoreMasters,
        /*[out,retval]*/ struct IVGLayer * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Below (
        /*[in]*/ VARIANT_BOOL IgnoreMasters,
        /*[out,retval]*/ struct IVGLayer * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_CreateRectangleRect (
        /*[in]*/ struct IVGRect * Rect,
        /*[in]*/ double RadiusUL,
        /*[in]*/ double RadiusUR,
        /*[in]*/ double RadiusLR,
        /*[in]*/ double RadiusLL,
        /*[out,retval]*/ struct IVGShape * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_CreateEllipseRect (
        /*[in]*/ struct IVGRect * Rect,
        /*[in]*/ double StartAngle,
        /*[in]*/ double EndAngle,
        /*[in]*/ VARIANT_BOOL Pie,
        /*[out,retval]*/ struct IVGShape * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_CreateConnectorEx (
        /*[in]*/ enum cdrConnectorType Type,
        /*[in]*/ struct IVGSnapPoint * Start,
        /*[in]*/ struct IVGSnapPoint * End,
        /*[out,retval]*/ struct IVGShape * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_CreateRightAngleConnector (
        /*[in]*/ struct IVGSnapPoint * Start,
        /*[in]*/ struct IVGSnapPoint * End,
        /*[in]*/ double CornerRadius,
        /*[out,retval]*/ struct IVGShape * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_CreateBSpline (
        /*[in]*/ struct IVGBSpline * Source,
        /*[out,retval]*/ struct IVGShape * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_PasteEx (
        /*[in]*/ struct IVGStructPasteOptions * Options,
        /*[out,retval]*/ struct IVGShapeRange * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_CreateToolShape (
        /*[in]*/ BSTR ToolShapeGuid,
        /*[in]*/ struct IVGProperties * ShapeProperties,
        /*[out,retval]*/ struct IVGShape * * pVal ) = 0;
      virtual HRESULT __stdcall raw_CreateBitmap (
        /*[in]*/ double Left,
        /*[in]*/ double Top,
        /*[in]*/ double Right,
        /*[in]*/ double Bottom,
        /*[in]*/ struct IVGImage * Image,
        /*[in]*/ struct IVGImage * ImageAlpha,
        /*[out,retval]*/ struct IVGShape * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_CreateBitmap2 (
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[in]*/ double Width,
        /*[in]*/ double Height,
        /*[in]*/ struct IVGImage * Image,
        /*[in]*/ struct IVGImage * ImageAlpha,
        /*[out,retval]*/ struct IVGShape * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_CreateBitmapRect (
        /*[in]*/ struct IVGRect * Rect,
        /*[in]*/ struct IVGImage * Image,
        /*[in]*/ struct IVGImage * ImageAlpha,
        /*[out,retval]*/ struct IVGShape * * ppVal ) = 0;
};

struct __declspec(uuid("b058005f-9aa4-44fd-9547-4f91eb757ac4"))
IVGShapes : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    IVGApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetItem))
    IVGShapePtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetFirst))
    IVGShapePtr First;
    __declspec(property(get=GetLast))
    IVGShapePtr Last;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IVGApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    IVGShapePtr GetItem (
        const _variant_t & IndexOrName );
    IUnknownPtr Get_NewEnum ( );
    long GetCount ( );
    IVGShapeRangePtr Range (
        SAFEARRAY * * IndexArray );
    IVGShapeRangePtr All ( );
    IVGShapeRangePtr AllExcluding (
        SAFEARRAY * * IndexArray );
    IVGShapePtr FindShape (
        _bstr_t Name,
        enum cdrShapeType Type,
        long StaticID,
        VARIANT_BOOL Recursive,
        _bstr_t Query );
    IVGShapeRangePtr FindShapes (
        _bstr_t Name,
        enum cdrShapeType Type,
        VARIANT_BOOL Recursive,
        _bstr_t Query );
    IVGShapePtr GetFirst ( );
    IVGShapePtr GetLast ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct IVGApplication * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT IndexOrName,
        /*[out,retval]*/ struct IVGShape * * ppVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * pVal ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_Range (
        /*[in]*/ SAFEARRAY * * IndexArray,
        /*[out,retval]*/ struct IVGShapeRange * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_All (
        /*[out,retval]*/ struct IVGShapeRange * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_AllExcluding (
        /*[in]*/ SAFEARRAY * * IndexArray,
        /*[out,retval]*/ struct IVGShapeRange * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_FindShape (
        /*[in]*/ BSTR Name,
        /*[in]*/ enum cdrShapeType Type,
        /*[in]*/ long StaticID,
        /*[in]*/ VARIANT_BOOL Recursive,
        /*[in]*/ BSTR Query,
        /*[out,retval]*/ struct IVGShape * * ppRet ) = 0;
      virtual HRESULT __stdcall raw_FindShapes (
        /*[in]*/ BSTR Name,
        /*[in]*/ enum cdrShapeType Type,
        /*[in]*/ VARIANT_BOOL Recursive,
        /*[in]*/ BSTR Query,
        /*[out,retval]*/ struct IVGShapeRange * * ppRet ) = 0;
      virtual HRESULT __stdcall get_First (
        /*[out,retval]*/ struct IVGShape * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Last (
        /*[out,retval]*/ struct IVGShape * * ppVal ) = 0;
};

struct __declspec(uuid("b058005d-9aa4-44fd-9547-4f91eb757ac4"))
IVGShape : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    IVGApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetStaticID))
    long StaticID;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetShapes))
    IVGShapesPtr Shapes;
    __declspec(property(get=GetRectangle))
    IVGRectanglePtr Rectangle;
    __declspec(property(get=GetPositionX,put=PutPositionX))
    double PositionX;
    __declspec(property(get=GetSelectable))
    VARIANT_BOOL Selectable;
    __declspec(property(get=GetPositionY,put=PutPositionY))
    double PositionY;
    __declspec(property(get=GetSizeWidth,put=PutSizeWidth))
    double SizeWidth;
    __declspec(property(get=GetSizeHeight,put=PutSizeHeight))
    double SizeHeight;
    __declspec(property(get=GetEllipse))
    IVGEllipsePtr Ellipse;
    __declspec(property(get=GetPolygon))
    IVGPolygonPtr Polygon;
    __declspec(property(get=GetCurve))
    IVGCurvePtr Curve;
    __declspec(property(get=GetBitmap))
    IVGBitmapPtr Bitmap;
    __declspec(property(get=GetType))
    enum cdrShapeType Type;
    __declspec(property(get=GetOutline))
    IVGOutlinePtr Outline;
    __declspec(property(get=GetFill,put=PutFill))
    IVGFillPtr Fill;
    __declspec(property(get=GetText))
    IVGTextPtr Text;
    __declspec(property(get=GetTreeNode))
    IVGTreeNodePtr TreeNode;
    __declspec(property(get=GetVirtual))
    VARIANT_BOOL Virtual;
    __declspec(property(get=GetCanHaveFill))
    VARIANT_BOOL CanHaveFill;
    __declspec(property(get=GetCanHaveOutline))
    VARIANT_BOOL CanHaveOutline;
    __declspec(property(get=GetRotationAngle,put=PutRotationAngle))
    double RotationAngle;
    __declspec(property(get=GetIsSimpleShape))
    VARIANT_BOOL IsSimpleShape;
    __declspec(property(get=GetRotationCenterX,put=PutRotationCenterX))
    double RotationCenterX;
    __declspec(property(get=GetFillMode,put=PutFillMode))
    enum cdrFillMode FillMode;
    __declspec(property(get=GetRotationCenterY,put=PutRotationCenterY))
    double RotationCenterY;
    __declspec(property(get=GetLeftX,put=PutLeftX))
    double LeftX;
    __declspec(property(get=GetRightX,put=PutRightX))
    double RightX;
    __declspec(property(get=GetTopY,put=PutTopY))
    double TopY;
    __declspec(property(get=GetBottomY,put=PutBottomY))
    double BottomY;
    __declspec(property(get=GetOverprintBitmap,put=PutOverprintBitmap))
    VARIANT_BOOL OverprintBitmap;
    __declspec(property(get=GetEPS))
    IVGEPSPtr EPS;
    __declspec(property(get=GetBoundingBox))
    IVGRectPtr BoundingBox;
    __declspec(property(get=GetCenterX,put=PutCenterX))
    double CenterX;
    __declspec(property(get=GetCenterY,put=PutCenterY))
    double CenterY;
    __declspec(property(get=GetLayer,put=PutLayer))
    IVGLayerPtr Layer;
    __declspec(property(get=GetSnapPoints))
    IVGSnapPointsPtr SnapPoints;
    __declspec(property(get=GetConnector))
    IVGConnectorPtr Connector;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetPage))
    IVGPagePtr Page;
    __declspec(property(get=GetSpread))
    IVGSpreadPtr Spread;
    __declspec(property(get=GetPixelAlignedRendering,put=PutPixelAlignedRendering))
    VARIANT_BOOL PixelAlignedRendering;
    __declspec(property(get=GetProperties))
    IVGPropertiesPtr Properties;
    __declspec(property(get=GetBSpline))
    IVGBSplinePtr BSpline;
    __declspec(property(get=GetStyle))
    IVGStylePtr Style;
    __declspec(property(get=GetEffects))
    IVGEffectsPtr Effects;
    __declspec(property(get=GetEffect))
    IVGEffectPtr Effect;
    __declspec(property(get=GetTransformationMatrix,put=PutTransformationMatrix))
    IVGTransformMatrixPtr TransformationMatrix;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetOriginalWidth))
    double OriginalWidth;
    __declspec(property(get=GetOriginalHeight))
    double OriginalHeight;
    __declspec(property(get=GetSelected,put=PutSelected))
    VARIANT_BOOL Selected;
    __declspec(property(get=GetGuide))
    IVGGuidePtr Guide;
    __declspec(property(get=GetPowerClip))
    IVGPowerClipPtr PowerClip;
    __declspec(property(get=GetPowerClipParent))
    IVGShapePtr PowerClipParent;
    __declspec(property(get=GetDrapeFill,put=PutDrapeFill))
    VARIANT_BOOL DrapeFill;
    __declspec(property(get=GetOverprintFill,put=PutOverprintFill))
    VARIANT_BOOL OverprintFill;
    __declspec(property(get=GetOverprintOutline,put=PutOverprintOutline))
    VARIANT_BOOL OverprintOutline;
    __declspec(property(get=GetURL))
    IVGURLPtr URL;
    __declspec(property(get=GetObjectData))
    IVGDataItemsPtr ObjectData;
    __declspec(property(get=GetCloneLink))
    IVGCloneLinkPtr CloneLink;
    __declspec(property(get=GetClones))
    IVGShapeRangePtr Clones;
    __declspec(property(get=GetAbsoluteHScale))
    double AbsoluteHScale;
    __declspec(property(get=GetAbsoluteVScale))
    double AbsoluteVScale;
    __declspec(property(get=GetAbsoluteSkew))
    double AbsoluteSkew;
    __declspec(property(get=GetTransparency))
    IVGTransparencyPtr Transparency;
    __declspec(property(get=GetParentGroup))
    IVGShapePtr ParentGroup;
    __declspec(property(get=GetNext))
    IVGShapePtr Next[][][];
    __declspec(property(get=GetPrevious))
    IVGShapePtr Previous[][][];
    __declspec(property(get=GetWrapText,put=PutWrapText))
    enum cdrWrapStyle WrapText;
    __declspec(property(get=GetTextWrapOffset,put=PutTextWrapOffset))
    double TextWrapOffset;
    __declspec(property(get=GetDisplayCurve))
    IVGCurvePtr DisplayCurve;
    __declspec(property(get=GetCustom))
    IVGCustomShapePtr Custom;
    __declspec(property(get=GetDimension))
    IVGDimensionPtr Dimension;
    __declspec(property(get=GetSymbol))
    IVGSymbolPtr Symbol;
    __declspec(property(get=GetOLE))
    IVGOLEPtr OLE;

    //
    // Wrapper methods for error-handling
    //

    IVGApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    long GetStaticID ( );
    HRESULT ConvertToCurves ( );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t pVal );
    IVGShapesPtr GetShapes ( );
    IVGRectanglePtr GetRectangle ( );
    double GetPositionX ( );
    void PutPositionX (
        double pVal );
    double GetPositionY ( );
    void PutPositionY (
        double pVal );
    double GetSizeWidth ( );
    void PutSizeWidth (
        double pVal );
    double GetSizeHeight ( );
    void PutSizeHeight (
        double pVal );
    IVGEllipsePtr GetEllipse ( );
    IVGPolygonPtr GetPolygon ( );
    IVGCurvePtr GetCurve ( );
    IVGBitmapPtr GetBitmap ( );
    enum cdrShapeType GetType ( );
    IVGOutlinePtr GetOutline ( );
    IVGFillPtr GetFill ( );
    IVGTextPtr GetText ( );
    HRESULT Delete ( );
    IVGShapePtr Duplicate (
        double OffsetX,
        double OffsetY );
    HRESULT Skew (
        double AngleX,
        double AngleY );
    HRESULT Move (
        double DeltaX,
        double DeltaY );
    double GetRotationAngle ( );
    void PutRotationAngle (
        double pVal );
    double GetRotationCenterX ( );
    void PutRotationCenterX (
        double pVal );
    double GetRotationCenterY ( );
    void PutRotationCenterY (
        double pVal );
    HRESULT Rotate (
        double Angle );
    IVGShapePtr ConvertToBitmap (
        long BitDepth,
        VARIANT_BOOL Grayscale,
        VARIANT_BOOL Dithered,
        VARIANT_BOOL TransparentBG,
        long Resolution,
        enum cdrAntiAliasingType AntiAliasing,
        VARIANT_BOOL UseColorProfile,
        VARIANT_BOOL MultiChannel,
        VARIANT_BOOL AlwaysOverprintBlack,
        long OverprintBlackLimit );
    IVGShapePtr Group ( );
    HRESULT Ungroup ( );
    HRESULT UngroupAll ( );
    HRESULT OrderToFront ( );
    HRESULT OrderToBack ( );
    HRESULT OrderForwardOne ( );
    HRESULT OrderBackOne ( );
    HRESULT OrderFrontOf (
        struct IVGShape * Shape );
    HRESULT OrderBackOf (
        struct IVGShape * Shape );
    VARIANT_BOOL OrderIsInFrontOf (
        struct IVGShape * Shape );
    HRESULT AddToSelection ( );
    HRESULT RemoveFromSelection ( );
    HRESULT Separate ( );
    IVGLayerPtr GetLayer ( );
    void PutLayer (
        struct IVGLayer * ppVal );
    IVGSnapPointsPtr GetSnapPoints ( );
    IVGConnectorPtr GetConnector ( );
    enum cdrPositionOfPointOverShape IsOnShape (
        double x,
        double y,
        double HotArea );
    IVGArrowHeadPtr CreateArrowHead ( );
    HRESULT Copy ( );
    HRESULT Cut ( );
    IVGShapePtr Clone (
        double OffsetX,
        double OffsetY );
    HRESULT Stretch (
        double StretchX,
        double StretchY,
        VARIANT_BOOL StretchCharactersSize );
    HRESULT SetPosition (
        double PositionX,
        double PositionY );
    HRESULT SetSize (
        double Width,
        double Height );
    HRESULT GetPosition (
        double * PositionX,
        double * PositionY );
    HRESULT GetSize (
        double * Width,
        double * Height );
    IVGPropertiesPtr GetProperties ( );
    HRESULT OrderReverse ( );
    IVGShapePtr Combine ( );
    HRESULT BreakApart ( );
    void PutFill (
        struct IVGFill * ppVal );
    IVGShapePtr Weld (
        struct IVGShape * TargetShape,
        VARIANT_BOOL LeaveSource,
        VARIANT_BOOL LeaveTarget );
    IVGShapePtr Trim (
        struct IVGShape * TargetShape,
        VARIANT_BOOL LeaveSource,
        VARIANT_BOOL LeaveTarget );
    IVGShapePtr Intersect (
        struct IVGShape * TargetShape,
        VARIANT_BOOL LeaveSource,
        VARIANT_BOOL LeaveTarget );
    IVGEffectsPtr GetEffects ( );
    IVGEffectPtr GetEffect ( );
    IVGEffectPtr CreateDropShadow (
        enum cdrDropShadowType Type,
        long Opacity,
        long Feather,
        double OffsetX,
        double OffsetY,
        struct IVGColor * Color,
        enum cdrFeatherType FeatherType,
        enum cdrEdgeType FeatherEdge,
        double PerspectiveAngle,
        double PerspectiveStretch,
        long Fade,
        enum cdrMergeMode MergeMode );
    IVGEffectPtr CreateBlend (
        struct IVGShape * Shape,
        int Steps,
        enum cdrFountainFillBlendType ColorBlendType,
        enum cdrBlendMode Mode,
        double Spacing,
        double Angle,
        VARIANT_BOOL Loop,
        struct IVGShape * Path,
        VARIANT_BOOL RotateShapes,
        long SpacingAccel,
        long ColorAccel,
        VARIANT_BOOL AccelSize );
    IVGEffectPtr CreateExtrude (
        enum cdrExtrudeType Type,
        enum cdrExtrudeVPType VPType,
        double VPX,
        double VPY,
        double Depth,
        enum cdrExtrudeShading Shading,
        struct IVGColor * BaseColor,
        struct IVGColor * ShadingColor,
        double BevelDepth,
        double BevelAngle,
        struct IVGColor * BevelColor,
        VARIANT_BOOL BevelOnly );
    IVGEffectPtr CreateEnvelope (
        long PresetIndex,
        enum cdrEnvelopeMode Mode,
        VARIANT_BOOL KeepLines );
    HRESULT Flip (
        enum cdrFlipAxes Axes );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL pVal );
    double GetOriginalWidth ( );
    double GetOriginalHeight ( );
    VARIANT_BOOL GetSelected ( );
    void PutSelected (
        VARIANT_BOOL pVal );
    IVGEffectPtr CreateLens (
        enum cdrLensType Type,
        double RateOrMagnification,
        struct IVGColor * Color1,
        struct IVGColor * Color2,
        enum cdrFountainFillBlendType ColorMapPalette );
    IVGEffectPtr CreatePerspective (
        const _variant_t & HorizVanishPointX = vtMissing,
        const _variant_t & HorizVanishPointY = vtMissing,
        const _variant_t & VertVanishPointX = vtMissing,
        const _variant_t & VertVanishPointY = vtMissing );
    IVGEffectPtr CreateContour (
        enum cdrContourDirection Direction,
        double Offset,
        long Steps,
        enum cdrFountainFillBlendType BlendType,
        struct IVGColor * OutlineColor,
        struct IVGColor * FillColor,
        struct IVGColor * FillColor2,
        long SpacingAccel,
        long ColorAccel,
        enum cdrContourEndCapType EndCapType,
        enum cdrContourCornerType CornerType,
        double MiterLimit );
    IVGEffectPtr CreatePushPullDistortion (
        double OriginX,
        double OriginY,
        long Amplitude );
    IVGEffectPtr CreateZipperDistortion (
        double OriginX,
        double OriginY,
        long Amplitude,
        long Frequency,
        VARIANT_BOOL Random,
        VARIANT_BOOL Smooth,
        VARIANT_BOOL Local );
    IVGEffectPtr CreateTwisterDistortion (
        double OriginX,
        double OriginY,
        double Angle );
    IVGGuidePtr GetGuide ( );
    HRESULT AddToPowerClip (
        struct IVGShape * Shape,
        enum cdrTriState CenterInContainer );
    HRESULT RemoveFromContainer (
        long Level );
    IVGPowerClipPtr GetPowerClip ( );
    IVGShapePtr GetPowerClipParent ( );
    VARIANT_BOOL GetDrapeFill ( );
    void PutDrapeFill (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetOverprintFill ( );
    void PutOverprintFill (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetOverprintOutline ( );
    void PutOverprintOutline (
        VARIANT_BOOL pVal );
    IVGURLPtr GetURL ( );
    IVGDataItemsPtr GetObjectData ( );
    IVGCloneLinkPtr GetCloneLink ( );
    IVGShapeRangePtr GetClones ( );
    double GetAbsoluteHScale ( );
    double GetAbsoluteVScale ( );
    double GetAbsoluteSkew ( );
    IVGTransparencyPtr GetTransparency ( );
    HRESULT GetMatrix (
        double * d11,
        double * d12,
        double * d21,
        double * d22,
        double * tx,
        double * ty );
    HRESULT SetMatrix (
        double d11,
        double d12,
        double d21,
        double d22,
        double tx,
        double ty );
    IVGShapePtr ConvertToBitmapEx (
        enum cdrImageType Mode,
        VARIANT_BOOL Dithered,
        VARIANT_BOOL Transparent,
        long Resolution,
        enum cdrAntiAliasingType AntiAliasing,
        VARIANT_BOOL UseColorProfile,
        VARIANT_BOOL AlwaysOverprintBlack,
        long OverprintBlackLimit );
    HRESULT SkewEx (
        double AngleX,
        double AngleY,
        double CenterX,
        double CenterY );
    HRESULT RotateEx (
        double Angle,
        double CenterX,
        double CenterY );
    IVGShapePtr GetParentGroup ( );
    HRESULT SetBoundingBox (
        double x,
        double y,
        double Width,
        double Height,
        VARIANT_BOOL KeepAspect,
        enum cdrReferencePoint ReferencePoint );
    HRESULT CreateSelection ( );
    HRESULT SetRotationCenter (
        double x,
        double y );
    HRESULT ClearEffect (
        enum cdrEffectType Type );
    IVGShapePtr GetNext (
        enum cdrShapeLevel Level,
        VARIANT_BOOL EnterGroups,
        VARIANT_BOOL Loop );
    IVGShapePtr GetPrevious (
        enum cdrShapeLevel Level,
        VARIANT_BOOL EnterGroups,
        VARIANT_BOOL Loop );
    HRESULT StretchEx (
        double CenterX,
        double CenterY,
        double StretchX,
        double StretchY,
        VARIANT_BOOL StretchCharactersSize );
    HRESULT SetSizeEx (
        double CenterX,
        double CenterY,
        double Width,
        double Height );
    HRESULT GetBoundingBox (
        double * x,
        double * y,
        double * Width,
        double * Height,
        VARIANT_BOOL UseOutline );
    IVGShapeRangePtr UngroupEx ( );
    IVGShapeRangePtr UngroupAllEx ( );
    IVGShapeRangePtr BreakApartEx ( );
    HRESULT ApplyStyle (
        _bstr_t StyleName );
    enum cdrWrapStyle GetWrapText ( );
    void PutWrapText (
        enum cdrWrapStyle pVal );
    double GetTextWrapOffset ( );
    void PutTextWrapOffset (
        double pVal );
    IVGShapePtr PlaceTextInside (
        struct IVGShape * TextShape );
    IVGCurvePtr GetDisplayCurve ( );
    _variant_t CustomCommand (
        _bstr_t ComponentID,
        _bstr_t CommandID,
        SAFEARRAY * * Parameters );
    IVGCustomShapePtr GetCustom ( );
    IVGEffectPtr CreateCustomEffect (
        _bstr_t EffectID,
        SAFEARRAY * * Parameters );
    IVGEffectPtr CreateCustomDistortion (
        _bstr_t DistortionID,
        SAFEARRAY * * Parameters );
    HRESULT AlignToShape (
        enum cdrAlignType Type,
        struct IVGShape * Shape,
        enum cdrTextAlignOrigin TextAlignOrigin );
    HRESULT AlignToShapeRange (
        enum cdrAlignType Type,
        struct IVGShapeRange * ShapeRange,
        enum cdrTextAlignOrigin TextAlignOrigin );
    HRESULT AlignToPage (
        enum cdrAlignType Type,
        enum cdrTextAlignOrigin TextAlignOrigin );
    HRESULT AlignToPageCenter (
        enum cdrAlignType Type,
        enum cdrTextAlignOrigin TextAlignOrigin );
    HRESULT AlignToGrid (
        enum cdrAlignType Type,
        enum cdrTextAlignOrigin TextAlignOrigin );
    HRESULT AlignToPoint (
        enum cdrAlignType Type,
        double x,
        double y,
        enum cdrTextAlignOrigin TextAlignOrigin );
    IVGDimensionPtr GetDimension ( );
    IVGSymbolPtr GetSymbol ( );
    IVGShapePtr ConvertToSymbol (
        _bstr_t Name );
    IVGOLEPtr GetOLE ( );
    IVGShapeRangePtr DuplicateAsRange (
        double OffsetX,
        double OffsetY );
    IVGShapeRangePtr CloneAsRange (
        double OffsetX,
        double OffsetY );
    HRESULT MoveToLayer (
        struct IVGLayer * Layer );
    IVGShapePtr CopyToLayer (
        struct IVGLayer * Layer );
    IVGShapeRangePtr CopyToLayerAsRange (
        struct IVGLayer * Layer );
    HRESULT ClearTransformations ( );
    HRESULT Distribute (
        enum cdrDistributeType Type,
        VARIANT_BOOL PageExtent );
    VARIANT_BOOL CompareTo (
        struct IVGShape * Shape,
        enum cdrCompareType CompareType,
        enum cdrCompareCondition Condition );
    VARIANT_BOOL GetSelectable ( );
    HRESULT ApplyEffectInvert ( );
    HRESULT ApplyEffectPosterize (
        long Level );
    HRESULT ApplyEffectBCI (
        long Brighness,
        long Contrast,
        long Intensity );
    HRESULT ApplyEffectColorBalance (
        long CyanRed,
        long MagentaGreen,
        long YellowBlue,
        VARIANT_BOOL ApplyToShadows,
        VARIANT_BOOL ApplyToMidtones,
        VARIANT_BOOL ApplyToHighlights,
        VARIANT_BOOL PreserveLuminance );
    HRESULT ApplyEffectGamma (
        double Gamma );
    HRESULT ApplyEffectHSL (
        const _variant_t & Hue,
        const _variant_t & Saturation,
        const _variant_t & Lightness );
    HRESULT TransformMatrix (
        double d11,
        double d12,
        double d21,
        double d22,
        double tx,
        double ty );
    HRESULT AffineTransform (
        double d11,
        double d12,
        double d21,
        double d22,
        double CenterX,
        double CenterY );
    IVGTreeNodePtr GetTreeNode ( );
    HRESULT ReplaceWith (
        struct IVGShape * VirtualShape );
    VARIANT_BOOL GetVirtual ( );
    VARIANT_BOOL GetCanHaveFill ( );
    VARIANT_BOOL GetCanHaveOutline ( );
    VARIANT_BOOL GetIsSimpleShape ( );
    HRESULT Fillet (
        double Radius,
        VARIANT_BOOL CombineSmoothSegments );
    HRESULT Chamfer (
        double DistanceA,
        double DistanceB,
        VARIANT_BOOL CombineSmoothSegments );
    HRESULT Scallop (
        double Radius,
        VARIANT_BOOL CombineSmoothSegments );
    enum cdrFillMode GetFillMode ( );
    void PutFillMode (
        enum cdrFillMode pVal );
    double GetLeftX ( );
    double GetRightX ( );
    double GetTopY ( );
    double GetBottomY ( );
    IVGShapeRangePtr StepAndRepeat (
        long NumCopies,
        double DistanceX,
        double DistanceY,
        enum cdrDistanceMode ModeX,
        enum cdrDirection DirectionX,
        enum cdrDistanceMode ModeY,
        enum cdrDirection DirectionY );
    VARIANT_BOOL GetOverprintBitmap ( );
    void PutOverprintBitmap (
        VARIANT_BOOL pVal );
    VARIANT_BOOL IsTypeAnyOf (
        SAFEARRAY * * TypeList );
    IVGShapeRangePtr GetLinkedShapes (
        enum cdrShapeLinkType LinkType );
    IVGEffectPtr CreateEnvelopeFromShape (
        struct IVGShape * Source,
        enum cdrEnvelopeMode Mode,
        VARIANT_BOOL KeepLines,
        enum cdrEnvelopeCopyMode CopyMode,
        const _variant_t & CornerIndices = vtMissing );
    IVGEffectPtr CreateEnvelopeFromCurve (
        struct IVGCurve * Source,
        enum cdrEnvelopeMode Mode,
        VARIANT_BOOL KeepLines,
        enum cdrEnvelopeCopyMode CopyMode,
        const _variant_t & CornerIndices = vtMissing );
    IVGEPSPtr GetEPS ( );
    _variant_t Evaluate (
        _bstr_t Expression );
    IVGRectPtr GetBoundingBox ( );
    HRESULT GetPositionEx (
        enum cdrReferencePoint ReferencePoint,
        double * x,
        double * y );
    HRESULT SetPositionEx (
        enum cdrReferencePoint ReferencePoint,
        double x,
        double y );
    double GetCenterX ( );
    void PutCenterX (
        double pVal );
    double GetCenterY ( );
    void PutCenterY (
        double pVal );
    void PutLeftX (
        double pVal );
    void PutRightX (
        double pVal );
    void PutTopY (
        double pVal );
    void PutBottomY (
        double pVal );
    long GetZOrder ( );
    VARIANT_BOOL CompareToEx (
        struct IVGShape * Shape2,
        _bstr_t Condition,
        const _variant_t & Data = vtMissing );
    VARIANT_BOOL CopyPropertiesFrom (
        struct IVGShape * Source,
        enum cdrCopyProperties Properties );
    enum cdrOverprintState GetOverprintFillState ( );
    enum cdrOverprintState GetOverprintOutlineState ( );
    IVGPagePtr GetPage ( );
    IVGSnapPointsPtr SnapPointsOfType (
        enum cdrPointType TypeSet );
    IVGSnapPointPtr FindSnapPoint (
        _bstr_t ReferenceData );
    IVGSpreadPtr GetSpread ( );
    VARIANT_BOOL GetPixelAlignedRendering ( );
    void PutPixelAlignedRendering (
        VARIANT_BOOL pVal );
    IVGBSplinePtr GetBSpline ( );
    IVGDocumentPtr CreateDocumentFrom (
        VARIANT_BOOL TemporaryDocument );
    HRESULT AlignAndDistribute (
        enum cdrAlignDistributeH MethodH,
        enum cdrAlignDistributeV MethodV,
        enum cdrAlignShapesTo AlignTo,
        enum cdrDistributeArea DistributeArea,
        VARIANT_BOOL UseOutline,
        enum cdrTextAlignOrigin TextAlignOrigin,
        double PointX,
        double PointY,
        struct IVGRect * DistributeRect );
    IVGStylePtr GetStyle ( );
    IVGShapePtr CreateBoundary (
        double x,
        double y,
        VARIANT_BOOL PlaceOnTop,
        VARIANT_BOOL DeleteSource );
    IVGShapeRangePtr EqualDivide (
        long Divisions,
        double Gap,
        VARIANT_BOOL Group,
        VARIANT_BOOL Combine,
        VARIANT_BOOL DeleteSource );
    IVGShapePtr Project (
        enum cdrProjectPlane Plane,
        enum cdrReferencePoint ReferencePoint,
        VARIANT_BOOL ApplyToDuplicate );
    IVGShapePtr Unproject (
        enum cdrProjectPlane Plane,
        enum cdrReferencePoint ReferencePoint,
        VARIANT_BOOL ApplyToDuplicate );
    IVGTransformMatrixPtr GetTransformationMatrix ( );
    void PutTransformationMatrix (
        struct IVGTransformMatrix * TransformMatrix );
    HRESULT ApplyTransformMatrix (
        struct IVGTransformMatrix * TransformMatrix );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL pVal );
    HRESULT ModifyToolShapeProperties (
        struct IVGProperties * ShapePropertiesToModify );
    _bstr_t GetToolShapeGuid ( );
    IVGShapeRangePtr CreateParallelCurves (
        long Count,
        double distanceBetweenCurves );
    IVGShapePtr FindShapeAtPoint (
        double x,
        double y,
        VARIANT_BOOL TreatAsFilled );
    SAFEARRAY * GetColorTypes ( );
    SAFEARRAY * GetColors (
        long MaxBitmapColors );
    HRESULT FlattenEffects ( );
    IVGEffectPtr CreateInnerShadow (
        long Opacity,
        long Feather,
        double OffsetX,
        double OffsetY,
        struct IVGColor * Color,
        enum cdrFeatherType FeatherType,
        enum cdrEdgeType FeatherEdge,
        enum cdrMergeMode MergeMode,
        double Depth );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct IVGApplication * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * ppVal ) = 0;
      virtual HRESULT __stdcall get_StaticID (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_ConvertToCurves ( ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Shapes (
        /*[out,retval]*/ struct IVGShapes * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Rectangle (
        /*[out,retval]*/ struct IVGRectangle * * ppVal ) = 0;
      virtual HRESULT __stdcall get_PositionX (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_PositionX (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_PositionY (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_PositionY (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_SizeWidth (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_SizeWidth (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_SizeHeight (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_SizeHeight (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Ellipse (
        /*[out,retval]*/ struct IVGEllipse * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Polygon (
        /*[out,retval]*/ struct IVGPolygon * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Curve (
        /*[out,retval]*/ struct IVGCurve * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Bitmap (
        /*[out,retval]*/ struct IVGBitmap * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum cdrShapeType * pVal ) = 0;
      virtual HRESULT __stdcall get_Outline (
        /*[out,retval]*/ struct IVGOutline * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Fill (
        /*[out,retval]*/ struct IVGFill * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ struct IVGText * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[in]*/ double OffsetX,
        /*[in]*/ double OffsetY,
        /*[out,retval]*/ struct IVGShape * * ppRet ) = 0;
      virtual HRESULT __stdcall raw_Skew (
        /*[in]*/ double AngleX,
        /*[in]*/ double AngleY ) = 0;
      virtual HRESULT __stdcall raw_Move (
        /*[in]*/ double DeltaX,
        /*[in]*/ double DeltaY ) = 0;
      virtual HRESULT __stdcall get_RotationAngle (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_RotationAngle (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_RotationCenterX (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_RotationCenterX (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_RotationCenterY (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_RotationCenterY (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall raw_Rotate (
        /*[in]*/ double Angle ) = 0;
      virtual HRESULT __stdcall raw_ConvertToBitmap (
        /*[in]*/ long BitDepth,
        /*[in]*/ VARIANT_BOOL Grayscale,
        /*[in]*/ VARIANT_BOOL Dithered,
        /*[in]*/ VARIANT_BOOL TransparentBG,
        /*[in]*/ long Resolution,
        /*[in]*/ enum cdrAntiAliasingType AntiAliasing,
        /*[in]*/ VARIANT_BOOL UseColorProfile,
        /*[in]*/ VARIANT_BOOL MultiChannel,
        /*[in]*/ VARIANT_BOOL AlwaysOverprintBlack,
        /*[in]*/ long OverprintBlackLimit,
        /*[out,retval]*/ struct IVGShape * * ppRet ) = 0;
      virtual HRESULT __stdcall raw_Group (
        /*[out,retval]*/ struct IVGShape * * ppRet ) = 0;
      virtual HRESULT __stdcall raw_Ungroup ( ) = 0;
      virtual HRESULT __stdcall raw_UngroupAll ( ) = 0;
      virtual HRESULT __stdcall raw_OrderToFront ( ) = 0;
      virtual HRESULT __stdcall raw_OrderToBack ( ) = 0;
      virtual HRESULT __stdcall raw_OrderForwardOne ( ) = 0;
      virtual HRESULT __stdcall raw_OrderBackOne ( ) = 0;
      virtual HRESULT __stdcall raw_OrderFrontOf (
        /*[in]*/ struct IVGShape * Shape ) = 0;
      virtual HRESULT __stdcall raw_OrderBackOf (
        /*[in]*/ struct IVGShape * Shape ) = 0;
      virtual HRESULT __stdcall raw_OrderIsInFrontOf (
        /*[in]*/ struct IVGShape * Shape,
        /*[out,retval]*/ VARIANT_BOOL * pbResult ) = 0;
      virtual HRESULT __stdcall raw_AddToSelection ( ) = 0;
      virtual HRESULT __stdcall raw_RemoveFromSelection ( ) = 0;
      virtual HRESULT __stdcall raw_Separate ( ) = 0;
      virtual HRESULT __stdcall get_Layer (
        /*[out,retval]*/ struct IVGLayer * * ppVal ) = 0;
      virtual HRESULT __stdcall put_Layer (
        /*[in]*/ struct IVGLayer * ppVal ) = 0;
      virtual HRESULT __stdcall get_SnapPoints (
        /*[out,retval]*/ struct IVGSnapPoints * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Connector (
        /*[out,retval]*/ struct IVGConnector * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_IsOnShape (
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[in]*/ double HotArea,
        /*[out,retval]*/ enum cdrPositionOfPointOverShape * pVal ) = 0;
      virtual HRESULT __stdcall raw_CreateArrowHead (
        /*[out,retval]*/ struct IVGArrowHead * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_Copy ( ) = 0;
      virtual HRESULT __stdcall raw_Cut ( ) = 0;
      virtual HRESULT __stdcall raw_Clone (
        /*[in]*/ double OffsetX,
        /*[in]*/ double OffsetY,
        /*[out,retval]*/ struct IVGShape * * ppRet ) = 0;
      virtual HRESULT __stdcall raw_Stretch (
        /*[in]*/ double StretchX,
        /*[in]*/ double StretchY,
        /*[in]*/ VARIANT_BOOL StretchCharactersSize ) = 0;
      virtual HRESULT __stdcall raw_SetPosition (
        /*[in]*/ double PositionX,
        /*[in]*/ double PositionY ) = 0;
      virtual HRESULT __stdcall raw_SetSize (
        /*[in]*/ double Width,
        /*[in]*/ double Height ) = 0;
      virtual HRESULT __stdcall raw_GetPosition (
        /*[out]*/ double * PositionX,
        /*[out]*/ double * PositionY ) = 0;
      virtual HRESULT __stdcall raw_GetSize (
        /*[out]*/ double * Width,
        /*[out]*/ double * Height ) = 0;
      virtual HRESULT __stdcall get_Properties (
        /*[out,retval]*/ struct IVGProperties * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_OrderReverse ( ) = 0;
      virtual HRESULT __stdcall raw_Combine (
        /*[out,retval]*/ struct IVGShape * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_BreakApart ( ) = 0;
      virtual HRESULT __stdcall put_Fill (
        /*[in]*/ struct IVGFill * ppVal ) = 0;
      virtual HRESULT __stdcall raw_Weld (
        /*[in]*/ struct IVGShape * TargetShape,
        /*[in]*/ VARIANT_BOOL LeaveSource,
        /*[in]*/ VARIANT_BOOL LeaveTarget,
        /*[out,retval]*/ struct IVGShape * * ppRet ) = 0;
      virtual HRESULT __stdcall raw_Trim (
        /*[in]*/ struct IVGShape * TargetShape,
        /*[in]*/ VARIANT_BOOL LeaveSource,
        /*[in]*/ VARIANT_BOOL LeaveTarget,
        /*[out,retval]*/ struct IVGShape * * ppRet ) = 0;
      virtual HRESULT __stdcall raw_Intersect (
        /*[in]*/ struct IVGShape * TargetShape,
        /*[in]*/ VARIANT_BOOL LeaveSource,
        /*[in]*/ VARIANT_BOOL LeaveTarget,
        /*[out,retval]*/ struct IVGShape * * ppRet ) = 0;
      virtual HRESULT __stdcall get_Effects (
        /*[out,retval]*/ struct IVGEffects * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Effect (
        /*[out,retval]*/ struct IVGEffect * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_CreateDropShadow (
        /*[in]*/ enum cdrDropShadowType Type,
        /*[in]*/ long Opacity,
        /*[in]*/ long Feather,
        /*[in]*/ double OffsetX,
        /*[in]*/ double OffsetY,
        /*[in]*/ struct IVGColor * Color,
        /*[in]*/ enum cdrFeatherType FeatherType,
        /*[in]*/ enum cdrEdgeType FeatherEdge,
        /*[in]*/ double PerspectiveAngle,
        /*[in]*/ double PerspectiveStretch,
        /*[in]*/ long Fade,
        /*[in]*/ enum cdrMergeMode MergeMode,
        /*[out,retval]*/ struct IVGEffect * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_CreateBlend (
        /*[in]*/ struct IVGShape * Shape,
        /*[in]*/ int Steps,
        /*[in]*/ enum cdrFountainFillBlendType ColorBlendType,
        /*[in]*/ enum cdrBlendMode Mode,
        /*[in]*/ double Spacing,
        /*[in]*/ double Angle,
        /*[in]*/ VARIANT_BOOL Loop,
        /*[in]*/ struct IVGShape * Path,
        /*[in]*/ VARIANT_BOOL RotateShapes,
        /*[in]*/ long SpacingAccel,
        /*[in]*/ long ColorAccel,
        /*[in]*/ VARIANT_BOOL AccelSize,
        /*[out,retval]*/ struct IVGEffect * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_CreateExtrude (
        /*[in]*/ enum cdrExtrudeType Type,
        /*[in]*/ enum cdrExtrudeVPType VPType,
        /*[in]*/ double VPX,
        /*[in]*/ double VPY,
        /*[in]*/ double Depth,
        /*[in]*/ enum cdrExtrudeShading Shading,
        /*[in]*/ struct IVGColor * BaseColor,
        /*[in]*/ struct IVGColor * ShadingColor,
        /*[in]*/ double BevelDepth,
        /*[in]*/ double BevelAngle,
        /*[in]*/ struct IVGColor * BevelColor,
        /*[in]*/ VARIANT_BOOL BevelOnly,
        /*[out,retval]*/ struct IVGEffect * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_CreateEnvelope (
        /*[in]*/ long PresetIndex,
        /*[in]*/ enum cdrEnvelopeMode Mode,
        /*[in]*/ VARIANT_BOOL KeepLines,
        /*[out,retval]*/ struct IVGEffect * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_Flip (
        /*[in]*/ enum cdrFlipAxes Axes ) = 0;
      virtual HRESULT __stdcall get_Locked (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_Locked (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_OriginalWidth (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_OriginalHeight (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_Selected (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_Selected (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall raw_CreateLens (
        /*[in]*/ enum cdrLensType Type,
        /*[in]*/ double RateOrMagnification,
        /*[in]*/ struct IVGColor * Color1,
        /*[in]*/ struct IVGColor * Color2,
        /*[in]*/ enum cdrFountainFillBlendType ColorMapPalette,
        /*[out,retval]*/ struct IVGEffect * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_CreatePerspective (
        /*[in]*/ VARIANT HorizVanishPointX,
        /*[in]*/ VARIANT HorizVanishPointY,
        /*[in]*/ VARIANT VertVanishPointX,
        /*[in]*/ VARIANT VertVanishPointY,
        /*[out,retval]*/ struct IVGEffect * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_CreateContour (
        /*[in]*/ enum cdrContourDirection Direction,
        /*[in]*/ double Offset,
        /*[in]*/ long Steps,
        /*[in]*/ enum cdrFountainFillBlendType BlendType,
        /*[in]*/ struct IVGColor * OutlineColor,
        /*[in]*/ struct IVGColor * FillColor,
        /*[in]*/ struct IVGColor * FillColor2,
        /*[in]*/ long SpacingAccel,
        /*[in]*/ long ColorAccel,
        /*[in]*/ enum cdrContourEndCapType EndCapType,
        /*[in]*/ enum cdrContourCornerType CornerType,
        /*[in]*/ double MiterLimit,
        /*[out,retval]*/ struct IVGEffect * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_CreatePushPullDistortion (
        /*[in]*/ double OriginX,
        /*[in]*/ double OriginY,
        /*[in]*/ long Amplitude,
        /*[out,retval]*/ struct IVGEffect * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_CreateZipperDistortion (
        /*[in]*/ double OriginX,
        /*[in]*/ double OriginY,
        /*[in]*/ long Amplitude,
        /*[in]*/ long Frequency,
        /*[in]*/ VARIANT_BOOL Random,
        /*[in]*/ VARIANT_BOOL Smooth,
        /*[in]*/ VARIANT_BOOL Local,
        /*[out,retval]*/ struct IVGEffect * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_CreateTwisterDistortion (
        /*[in]*/ double OriginX,
        /*[in]*/ double OriginY,
        /*[in]*/ double Angle,
        /*[out,retval]*/ struct IVGEffect * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Guide (
        /*[out,retval]*/ struct IVGGuide * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_AddToPowerClip (
        /*[in]*/ struct IVGShape * Shape,
        /*[in]*/ enum cdrTriState CenterInContainer ) = 0;
      virtual HRESULT __stdcall raw_RemoveFromContainer (
        /*[in]*/ long Level ) = 0;
      virtual HRESULT __stdcall get_PowerClip (
        /*[out,retval]*/ struct IVGPowerClip * * ppPowerClip ) = 0;
      virtual HRESULT __stdcall get_PowerClipParent (
        /*[out,retval]*/ struct IVGShape * * ppShape ) = 0;
      virtual HRESULT __stdcall get_DrapeFill (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_DrapeFill (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_OverprintFill (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_OverprintFill (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_OverprintOutline (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_OverprintOutline (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_URL (
        /*[out,retval]*/ struct IVGURL * * ppVal ) = 0;
      virtual HRESULT __stdcall get_ObjectData (
        /*[out,retval]*/ struct IVGDataItems * * ppDataItems ) = 0;
      virtual HRESULT __stdcall get_CloneLink (
        /*[out,retval]*/ struct IVGCloneLink * * ppCloneLink ) = 0;
      virtual HRESULT __stdcall get_Clones (
        /*[out,retval]*/ struct IVGShapeRange * * ppShapeRange ) = 0;
      virtual HRESULT __stdcall get_AbsoluteHScale (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_AbsoluteVScale (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_AbsoluteSkew (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_Transparency (
        /*[out,retval]*/ struct IVGTransparency * * ppTransparency ) = 0;
      virtual HRESULT __stdcall raw_GetMatrix (
        /*[out]*/ double * d11,
        /*[out]*/ double * d12,
        /*[out]*/ double * d21,
        /*[out]*/ double * d22,
        /*[out]*/ double * tx,
        /*[out]*/ double * ty ) = 0;
      virtual HRESULT __stdcall raw_SetMatrix (
        /*[in]*/ double d11,
        /*[in]*/ double d12,
        /*[in]*/ double d21,
        /*[in]*/ double d22,
        /*[in]*/ double tx,
        /*[in]*/ double ty ) = 0;
      virtual HRESULT __stdcall raw_ConvertToBitmapEx (
        /*[in]*/ enum cdrImageType Mode,
        /*[in]*/ VARIANT_BOOL Dithered,
        /*[in]*/ VARIANT_BOOL Transparent,
        /*[in]*/ long Resolution,
        /*[in]*/ enum cdrAntiAliasingType AntiAliasing,
        /*[in]*/ VARIANT_BOOL UseColorProfile,
        /*[in]*/ VARIANT_BOOL AlwaysOverprintBlack,
        /*[in]*/ long OverprintBlackLimit,
        /*[out,retval]*/ struct IVGShape * * ppRet ) = 0;
      virtual HRESULT __stdcall raw_SkewEx (
        /*[in]*/ double AngleX,
        /*[in]*/ double AngleY,
        /*[in]*/ double CenterX,
        /*[in]*/ double CenterY ) = 0;
      virtual HRESULT __stdcall raw_RotateEx (
        /*[in]*/ double Angle,
        /*[in]*/ double CenterX,
        /*[in]*/ double CenterY ) = 0;
      virtual HRESULT __stdcall get_ParentGroup (
        /*[out,retval]*/ struct IVGShape * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_SetBoundingBox (
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[in]*/ double Width,
        /*[in]*/ double Height,
        /*[in]*/ VARIANT_BOOL KeepAspect,
        /*[in]*/ enum cdrReferencePoint ReferencePoint ) = 0;
      virtual HRESULT __stdcall raw_CreateSelection ( ) = 0;
      virtual HRESULT __stdcall raw_SetRotationCenter (
        /*[in]*/ double x,
        /*[in]*/ double y ) = 0;
      virtual HRESULT __stdcall raw_ClearEffect (
        /*[in]*/ enum cdrEffectType Type ) = 0;
      virtual HRESULT __stdcall get_Next (
        /*[in]*/ enum cdrShapeLevel Level,
        /*[in]*/ VARIANT_BOOL EnterGroups,
        /*[in]*/ VARIANT_BOOL Loop,
        /*[out,retval]*/ struct IVGShape * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Previous (
        /*[in]*/ enum cdrShapeLevel Level,
        /*[in]*/ VARIANT_BOOL EnterGroups,
        /*[in]*/ VARIANT_BOOL Loop,
        /*[out,retval]*/ struct IVGShape * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_StretchEx (
        /*[in]*/ double CenterX,
        /*[in]*/ double CenterY,
        /*[in]*/ double StretchX,
        /*[in]*/ double StretchY,
        /*[in]*/ VARIANT_BOOL StretchCharactersSize ) = 0;
      virtual HRESULT __stdcall raw_SetSizeEx (
        /*[in]*/ double CenterX,
        /*[in]*/ double CenterY,
        /*[in]*/ double Width,
        /*[in]*/ double Height ) = 0;
      virtual HRESULT __stdcall raw_GetBoundingBox (
        /*[out]*/ double * x,
        /*[out]*/ double * y,
        /*[out]*/ double * Width,
        /*[out]*/ double * Height,
        /*[in]*/ VARIANT_BOOL UseOutline ) = 0;
      virtual HRESULT __stdcall raw_UngroupEx (
        /*[out,retval]*/ struct IVGShapeRange * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_UngroupAllEx (
        /*[out,retval]*/ struct IVGShapeRange * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_BreakApartEx (
        /*[out,retval]*/ struct IVGShapeRange * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_ApplyStyle (
        /*[in]*/ BSTR StyleName ) = 0;
      virtual HRESULT __stdcall get_WrapText (
        /*[out,retval]*/ enum cdrWrapStyle * pVal ) = 0;
      virtual HRESULT __stdcall put_WrapText (
        /*[in]*/ enum cdrWrapStyle pVal ) = 0;
      virtual HRESULT __stdcall get_TextWrapOffset (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_TextWrapOffset (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall raw_PlaceTextInside (
        /*[in]*/ struct IVGShape * TextShape,
        /*[out,retval]*/ struct IVGShape * * pVal ) = 0;
      virtual HRESULT __stdcall get_DisplayCurve (
        /*[out,retval]*/ struct IVGCurve * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_CustomCommand (
        /*[in]*/ BSTR ComponentID,
        /*[in]*/ BSTR CommandID,
        /*[in]*/ SAFEARRAY * * Parameters,
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall get_Custom (
        /*[out,retval]*/ struct IVGCustomShape * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_CreateCustomEffect (
        /*[in]*/ BSTR EffectID,
        /*[in]*/ SAFEARRAY * * Parameters,
        /*[out,retval]*/ struct IVGEffect * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_CreateCustomDistortion (
        /*[in]*/ BSTR DistortionID,
        /*[in]*/ SAFEARRAY * * Parameters,
        /*[out,retval]*/ struct IVGEffect * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_AlignToShape (
        /*[in]*/ enum cdrAlignType Type,
        /*[in]*/ struct IVGShape * Shape,
        /*[in]*/ enum cdrTextAlignOrigin TextAlignOrigin ) = 0;
      virtual HRESULT __stdcall raw_AlignToShapeRange (
        /*[in]*/ enum cdrAlignType Type,
        /*[in]*/ struct IVGShapeRange * ShapeRange,
        /*[in]*/ enum cdrTextAlignOrigin TextAlignOrigin ) = 0;
      virtual HRESULT __stdcall raw_AlignToPage (
        /*[in]*/ enum cdrAlignType Type,
        /*[in]*/ enum cdrTextAlignOrigin TextAlignOrigin ) = 0;
      virtual HRESULT __stdcall raw_AlignToPageCenter (
        /*[in]*/ enum cdrAlignType Type,
        /*[in]*/ enum cdrTextAlignOrigin TextAlignOrigin ) = 0;
      virtual HRESULT __stdcall raw_AlignToGrid (
        /*[in]*/ enum cdrAlignType Type,
        /*[in]*/ enum cdrTextAlignOrigin TextAlignOrigin ) = 0;
      virtual HRESULT __stdcall raw_AlignToPoint (
        /*[in]*/ enum cdrAlignType Type,
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[in]*/ enum cdrTextAlignOrigin TextAlignOrigin ) = 0;
      virtual HRESULT __stdcall get_Dimension (
        /*[out,retval]*/ struct IVGDimension * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Symbol (
        /*[out,retval]*/ struct IVGSymbol * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_ConvertToSymbol (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ struct IVGShape * * ppVal ) = 0;
      virtual HRESULT __stdcall get_OLE (
        /*[out,retval]*/ struct IVGOLE * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_DuplicateAsRange (
        /*[in]*/ double OffsetX,
        /*[in]*/ double OffsetY,
        /*[out,retval]*/ struct IVGShapeRange * * ppRet ) = 0;
      virtual HRESULT __stdcall raw_CloneAsRange (
        /*[in]*/ double OffsetX,
        /*[in]*/ double OffsetY,
        /*[out,retval]*/ struct IVGShapeRange * * ppRet ) = 0;
      virtual HRESULT __stdcall raw_MoveToLayer (
        /*[in]*/ struct IVGLayer * Layer ) = 0;
      virtual HRESULT __stdcall raw_CopyToLayer (
        /*[in]*/ struct IVGLayer * Layer,
        /*[out,retval]*/ struct IVGShape * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_CopyToLayerAsRange (
        /*[in]*/ struct IVGLayer * Layer,
        /*[out,retval]*/ struct IVGShapeRange * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_ClearTransformations ( ) = 0;
      virtual HRESULT __stdcall raw_Distribute (
        /*[in]*/ enum cdrDistributeType Type,
        /*[in]*/ VARIANT_BOOL PageExtent ) = 0;
      virtual HRESULT __stdcall raw_CompareTo (
        /*[in]*/ struct IVGShape * Shape,
        /*[in]*/ enum cdrCompareType CompareType,
        /*[in]*/ enum cdrCompareCondition Condition,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_Selectable (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_ApplyEffectInvert ( ) = 0;
      virtual HRESULT __stdcall raw_ApplyEffectPosterize (
        /*[in]*/ long Level ) = 0;
      virtual HRESULT __stdcall raw_ApplyEffectBCI (
        /*[in]*/ long Brighness,
        /*[in]*/ long Contrast,
        /*[in]*/ long Intensity ) = 0;
      virtual HRESULT __stdcall raw_ApplyEffectColorBalance (
        /*[in]*/ long CyanRed,
        /*[in]*/ long MagentaGreen,
        /*[in]*/ long YellowBlue,
        /*[in]*/ VARIANT_BOOL ApplyToShadows,
        /*[in]*/ VARIANT_BOOL ApplyToMidtones,
        /*[in]*/ VARIANT_BOOL ApplyToHighlights,
        /*[in]*/ VARIANT_BOOL PreserveLuminance ) = 0;
      virtual HRESULT __stdcall raw_ApplyEffectGamma (
        /*[in]*/ double Gamma ) = 0;
      virtual HRESULT __stdcall raw_ApplyEffectHSL (
        /*[in]*/ VARIANT Hue,
        /*[in]*/ VARIANT Saturation,
        /*[in]*/ VARIANT Lightness ) = 0;
      virtual HRESULT __stdcall raw_TransformMatrix (
        /*[in]*/ double d11,
        /*[in]*/ double d12,
        /*[in]*/ double d21,
        /*[in]*/ double d22,
        /*[in]*/ double tx,
        /*[in]*/ double ty ) = 0;
      virtual HRESULT __stdcall raw_AffineTransform (
        /*[in]*/ double d11,
        /*[in]*/ double d12,
        /*[in]*/ double d21,
        /*[in]*/ double d22,
        /*[in]*/ double CenterX,
        /*[in]*/ double CenterY ) = 0;
      virtual HRESULT __stdcall get_TreeNode (
        /*[out,retval]*/ struct IVGTreeNode * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_ReplaceWith (
        /*[in]*/ struct IVGShape * VirtualShape ) = 0;
      virtual HRESULT __stdcall get_Virtual (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_CanHaveFill (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_CanHaveOutline (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_IsSimpleShape (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_Fillet (
        /*[in]*/ double Radius,
        /*[in]*/ VARIANT_BOOL CombineSmoothSegments ) = 0;
      virtual HRESULT __stdcall raw_Chamfer (
        /*[in]*/ double DistanceA,
        /*[in]*/ double DistanceB,
        /*[in]*/ VARIANT_BOOL CombineSmoothSegments ) = 0;
      virtual HRESULT __stdcall raw_Scallop (
        /*[in]*/ double Radius,
        /*[in]*/ VARIANT_BOOL CombineSmoothSegments ) = 0;
      virtual HRESULT __stdcall get_FillMode (
        /*[out,retval]*/ enum cdrFillMode * pVal ) = 0;
      virtual HRESULT __stdcall put_FillMode (
        /*[in]*/ enum cdrFillMode pVal ) = 0;
      virtual HRESULT __stdcall get_LeftX (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_RightX (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_TopY (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_BottomY (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall raw_StepAndRepeat (
        /*[in]*/ long NumCopies,
        /*[in]*/ double DistanceX,
        /*[in]*/ double DistanceY,
        /*[in]*/ enum cdrDistanceMode ModeX,
        /*[in]*/ enum cdrDirection DirectionX,
        /*[in]*/ enum cdrDistanceMode ModeY,
        /*[in]*/ enum cdrDirection DirectionY,
        /*[out,retval]*/ struct IVGShapeRange * * ppVal ) = 0;
      virtual HRESULT __stdcall get_OverprintBitmap (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_OverprintBitmap (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall raw_IsTypeAnyOf (
        /*[in]*/ SAFEARRAY * * TypeList,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetLinkedShapes (
        /*[in]*/ enum cdrShapeLinkType LinkType,
        /*[out,retval]*/ struct IVGShapeRange * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_CreateEnvelopeFromShape (
        /*[in]*/ struct IVGShape * Source,
        /*[in]*/ enum cdrEnvelopeMode Mode,
        /*[in]*/ VARIANT_BOOL KeepLines,
        /*[in]*/ enum cdrEnvelopeCopyMode CopyMode,
        /*[in]*/ VARIANT CornerIndices,
        /*[out,retval]*/ struct IVGEffect * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_CreateEnvelopeFromCurve (
        /*[in]*/ struct IVGCurve * Source,
        /*[in]*/ enum cdrEnvelopeMode Mode,
        /*[in]*/ VARIANT_BOOL KeepLines,
        /*[in]*/ enum cdrEnvelopeCopyMode CopyMode,
        /*[in]*/ VARIANT CornerIndices,
        /*[out,retval]*/ struct IVGEffect * * ppVal ) = 0;
      virtual HRESULT __stdcall get_EPS (
        /*[out,retval]*/ struct IVGEPS * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_Evaluate (
        /*[in]*/ BSTR Expression,
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall get_BoundingBox (
        /*[out,retval]*/ struct IVGRect * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_GetPositionEx (
        /*[in]*/ enum cdrReferencePoint ReferencePoint,
        /*[out]*/ double * x,
        /*[out]*/ double * y ) = 0;
      virtual HRESULT __stdcall raw_SetPositionEx (
        /*[in]*/ enum cdrReferencePoint ReferencePoint,
        /*[in]*/ double x,
        /*[in]*/ double y ) = 0;
      virtual HRESULT __stdcall get_CenterX (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_CenterX (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_CenterY (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_CenterY (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall put_LeftX (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall put_RightX (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall put_TopY (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall put_BottomY (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ZOrder (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_CompareToEx (
        /*[in]*/ struct IVGShape * Shape2,
        /*[in]*/ BSTR Condition,
        /*[in]*/ VARIANT Data,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_CopyPropertiesFrom (
        /*[in]*/ struct IVGShape * Source,
        /*[in]*/ enum cdrCopyProperties Properties,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetOverprintFillState (
        /*[out,retval]*/ enum cdrOverprintState * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetOverprintOutlineState (
        /*[out,retval]*/ enum cdrOverprintState * pVal ) = 0;
      virtual HRESULT __stdcall get_Page (
        /*[out,retval]*/ struct IVGPage * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_SnapPointsOfType (
        /*[in]*/ enum cdrPointType TypeSet,
        /*[out,retval]*/ struct IVGSnapPoints * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_FindSnapPoint (
        /*[in]*/ BSTR ReferenceData,
        /*[out,retval]*/ struct IVGSnapPoint * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Spread (
        /*[out,retval]*/ struct IVGSpread * * ppVal ) = 0;
      virtual HRESULT __stdcall get_PixelAlignedRendering (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_PixelAlignedRendering (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_BSpline (
        /*[out,retval]*/ struct IVGBSpline * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_CreateDocumentFrom (
        /*[in]*/ VARIANT_BOOL TemporaryDocument,
        /*[out,retval]*/ struct IVGDocument * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_AlignAndDistribute (
        /*[in]*/ enum cdrAlignDistributeH MethodH,
        /*[in]*/ enum cdrAlignDistributeV MethodV,
        /*[in]*/ enum cdrAlignShapesTo AlignTo,
        /*[in]*/ enum cdrDistributeArea DistributeArea,
        /*[in]*/ VARIANT_BOOL UseOutline,
        /*[in]*/ enum cdrTextAlignOrigin TextAlignOrigin,
        /*[in]*/ double PointX,
        /*[in]*/ double PointY,
        /*[in]*/ struct IVGRect * DistributeRect ) = 0;
      virtual HRESULT __stdcall get_Style (
        /*[out,retval]*/ struct IVGStyle * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_CreateBoundary (
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[in]*/ VARIANT_BOOL PlaceOnTop,
        /*[in]*/ VARIANT_BOOL DeleteSource,
        /*[out,retval]*/ struct IVGShape * * pVal ) = 0;
      virtual HRESULT __stdcall raw_EqualDivide (
        /*[in]*/ long Divisions,
        /*[in]*/ double Gap,
        /*[in]*/ VARIANT_BOOL Group,
        /*[in]*/ VARIANT_BOOL Combine,
        /*[in]*/ VARIANT_BOOL DeleteSource,
        /*[out,retval]*/ struct IVGShapeRange * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_Project (
        /*[in]*/ enum cdrProjectPlane Plane,
        /*[in]*/ enum cdrReferencePoint ReferencePoint,
        /*[in]*/ VARIANT_BOOL ApplyToDuplicate,
        /*[out,retval]*/ struct IVGShape * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Unproject (
        /*[in]*/ enum cdrProjectPlane Plane,
        /*[in]*/ enum cdrReferencePoint ReferencePoint,
        /*[in]*/ VARIANT_BOOL ApplyToDuplicate,
        /*[out,retval]*/ struct IVGShape * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_TransformationMatrix (
        /*[out,retval]*/ struct IVGTransformMatrix * * TransformMatrix ) = 0;
      virtual HRESULT __stdcall put_TransformationMatrix (
        /*[in]*/ struct IVGTransformMatrix * TransformMatrix ) = 0;
      virtual HRESULT __stdcall raw_ApplyTransformMatrix (
        /*[in]*/ struct IVGTransformMatrix * TransformMatrix ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall raw_ModifyToolShapeProperties (
        /*[in]*/ struct IVGProperties * ShapePropertiesToModify ) = 0;
      virtual HRESULT __stdcall raw_GetToolShapeGuid (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall raw_CreateParallelCurves (
        /*[in]*/ long Count,
        /*[in]*/ double distanceBetweenCurves,
        /*[out,retval]*/ struct IVGShapeRange * * ppParallels ) = 0;
      virtual HRESULT __stdcall raw_FindShapeAtPoint (
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[in]*/ VARIANT_BOOL TreatAsFilled,
        /*[out,retval]*/ struct IVGShape * * ppRet ) = 0;
      virtual HRESULT __stdcall raw_GetColorTypes (
        /*[out,retval]*/ SAFEARRAY * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_GetColors (
        /*[in]*/ long MaxBitmapColors,
        /*[out,retval]*/ SAFEARRAY * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_FlattenEffects ( ) = 0;
      virtual HRESULT __stdcall raw_CreateInnerShadow (
        /*[in]*/ long Opacity,
        /*[in]*/ long Feather,
        /*[in]*/ double OffsetX,
        /*[in]*/ double OffsetY,
        /*[in]*/ struct IVGColor * Color,
        /*[in]*/ enum cdrFeatherType FeatherType,
        /*[in]*/ enum cdrEdgeType FeatherEdge,
        /*[in]*/ enum cdrMergeMode MergeMode,
        /*[in]*/ double Depth,
        /*[out,retval]*/ struct IVGEffect * * ppVal ) = 0;
};

struct __declspec(uuid("b058001a-9aa4-44fd-9547-4f91eb757ac4"))
IVGCustomEffect : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetEffectID))
    _bstr_t EffectID;
    __declspec(property(get=GetEffectGroup))
    IVGShapePtr EffectGroup;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetEffectID ( );
    IVGShapePtr GetEffectGroup ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_EffectID (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_EffectGroup (
        /*[out,retval]*/ struct IVGShape * * ppVal ) = 0;
};

struct __declspec(uuid("b0580011-9aa4-44fd-9547-4f91eb757ac4"))
IVGCloneLink : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    IVGApplicationPtr Application;
    __declspec(property(get=GetParent))
    IVGShapePtr Parent;
    __declspec(property(get=GetCloneParent))
    IVGShapePtr CloneParent;
    __declspec(property(get=GetFillLinked,put=PutFillLinked))
    VARIANT_BOOL FillLinked;
    __declspec(property(get=GetOutlineLinked,put=PutOutlineLinked))
    VARIANT_BOOL OutlineLinked;
    __declspec(property(get=GetShapeLinked,put=PutShapeLinked))
    VARIANT_BOOL ShapeLinked;
    __declspec(property(get=GetTransformLinked,put=PutTransformLinked))
    VARIANT_BOOL TransformLinked;
    __declspec(property(get=GetBitmapColorMaskLinked,put=PutBitmapColorMaskLinked))
    VARIANT_BOOL BitmapColorMaskLinked;

    //
    // Wrapper methods for error-handling
    //

    IVGApplicationPtr GetApplication ( );
    IVGShapePtr GetParent ( );
    IVGShapePtr GetCloneParent ( );
    VARIANT_BOOL GetFillLinked ( );
    void PutFillLinked (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetOutlineLinked ( );
    void PutOutlineLinked (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetShapeLinked ( );
    void PutShapeLinked (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetTransformLinked ( );
    void PutTransformLinked (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetBitmapColorMaskLinked ( );
    void PutBitmapColorMaskLinked (
        VARIANT_BOOL pVal );
    HRESULT RestoreAllLinks ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct IVGApplication * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ struct IVGShape * * ppVal ) = 0;
      virtual HRESULT __stdcall get_CloneParent (
        /*[out,retval]*/ struct IVGShape * * ppVal ) = 0;
      virtual HRESULT __stdcall get_FillLinked (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_FillLinked (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_OutlineLinked (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_OutlineLinked (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_ShapeLinked (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_ShapeLinked (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_TransformLinked (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_TransformLinked (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_BitmapColorMaskLinked (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_BitmapColorMaskLinked (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall raw_RestoreAllLinks ( ) = 0;
};

struct __declspec(uuid("b05800ed-9aa4-44fd-9547-4f91eb757ac4"))
IVGCommentTarget : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetGuid,put=PutGuid))
    _bstr_t Guid;

    //
    // Wrapper methods for error-handling
    //

    IVGShapePtr GetShape ( );
    void PutRefShape (
        struct IVGShape * * pRet );
    _bstr_t GetGuid ( );
    void PutGuid (
        _bstr_t pRet );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Shape (
        /*[out,retval]*/ struct IVGShape * * pRet ) = 0;
      virtual HRESULT __stdcall putref_Shape (
        /*[in]*/ struct IVGShape * * pRet ) = 0;
      virtual HRESULT __stdcall get_Guid (
        /*[out,retval]*/ BSTR * pRet ) = 0;
      virtual HRESULT __stdcall put_Guid (
        /*[in]*/ BSTR pRet ) = 0;
};

struct __declspec(uuid("b058005c-9aa4-44fd-9547-4f91eb757ac4"))
IVGSelectionInformation : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    IVGApplicationPtr Application;
    __declspec(property(get=GetParent))
    IVGDocumentPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetFirstShape))
    IVGShapePtr FirstShape;
    __declspec(property(get=GetSecondShape))
    IVGShapePtr SecondShape;
    __declspec(property(get=GetBlendTopShape))
    IVGShapePtr BlendTopShape;
    __declspec(property(get=GetBlendBottomShape))
    IVGShapePtr BlendBottomShape;
    __declspec(property(get=GetBlendPath))
    IVGShapePtr BlendPath;
    __declspec(property(get=GetCanCreateBlend))
    VARIANT_BOOL CanCreateBlend;
    __declspec(property(get=GetDistortionShape))
    IVGShapePtr DistortionShape;
    __declspec(property(get=GetDistortionType))
    enum cdrDistortionType DistortionType;
    __declspec(property(get=GetExtrudeFaceShape))
    IVGShapePtr ExtrudeFaceShape;
    __declspec(property(get=GetExtrudeGroup))
    IVGShapePtr ExtrudeGroup;
    __declspec(property(get=GetExtrudeBevelGroup))
    IVGShapePtr ExtrudeBevelGroup;
    __declspec(property(get=GetContourControlShape))
    IVGShapePtr ContourControlShape;
    __declspec(property(get=GetContourGroup))
    IVGShapePtr ContourGroup;
    __declspec(property(get=GetDropShadowControlShape))
    IVGShapePtr DropShadowControlShape;
    __declspec(property(get=GetDropShadowGroup))
    IVGShapePtr DropShadowGroup;
    __declspec(property(get=GetDimensionControlShape))
    IVGShapePtr DimensionControlShape;
    __declspec(property(get=GetDimensionGroup))
    IVGShapePtr DimensionGroup;
    __declspec(property(get=GetConnectorLines))
    IVGShapePtr ConnectorLines;
    __declspec(property(get=GetFittedTextControlShape))
    IVGShapePtr FittedTextControlShape;
    __declspec(property(get=GetFittedText))
    IVGShapePtr FittedText;
    __declspec(property(get=GetFirstShapeWithOutline))
    IVGShapePtr FirstShapeWithOutline;
    __declspec(property(get=GetFirstShapeWithFill))
    IVGShapePtr FirstShapeWithFill;
    __declspec(property(get=GetNaturalMediaControlShape))
    IVGShapePtr NaturalMediaControlShape;
    __declspec(property(get=GetNaturalMediaGroup))
    IVGShapePtr NaturalMediaGroup;
    __declspec(property(get=GetCanPrint))
    VARIANT_BOOL CanPrint;
    __declspec(property(get=GetIsEditingText))
    VARIANT_BOOL IsEditingText;
    __declspec(property(get=GetIsTextSelection))
    VARIANT_BOOL IsTextSelection;
    __declspec(property(get=GetIsOnPowerClipContents))
    VARIANT_BOOL IsOnPowerClipContents;
    __declspec(property(get=GetIsEditingRollOver))
    VARIANT_BOOL IsEditingRollOver;
    __declspec(property(get=GetCanApplyFillOutline))
    VARIANT_BOOL CanApplyFillOutline;
    __declspec(property(get=GetIsControlSelected))
    VARIANT_BOOL IsControlSelected;
    __declspec(property(get=GetCanDeleteControl))
    VARIANT_BOOL CanDeleteControl;
    __declspec(property(get=GetIsGroup))
    VARIANT_BOOL IsGroup;
    __declspec(property(get=GetIsRegularShape))
    VARIANT_BOOL IsRegularShape;
    __declspec(property(get=GetIsControlShape))
    VARIANT_BOOL IsControlShape;
    __declspec(property(get=GetIsBlendControl))
    VARIANT_BOOL IsBlendControl;
    __declspec(property(get=GetIsBlendGroup))
    VARIANT_BOOL IsBlendGroup;
    __declspec(property(get=GetIsCloneControl))
    VARIANT_BOOL IsCloneControl;
    __declspec(property(get=GetIsContourControl))
    VARIANT_BOOL IsContourControl;
    __declspec(property(get=GetIsContourGroup))
    VARIANT_BOOL IsContourGroup;
    __declspec(property(get=GetIsDropShadowControl))
    VARIANT_BOOL IsDropShadowControl;
    __declspec(property(get=GetIsDropShadowGroup))
    VARIANT_BOOL IsDropShadowGroup;
    __declspec(property(get=GetIsDimensionControl))
    VARIANT_BOOL IsDimensionControl;
    __declspec(property(get=GetIsExtrudeControl))
    VARIANT_BOOL IsExtrudeControl;
    __declspec(property(get=GetIsExtrudeGroup))
    VARIANT_BOOL IsExtrudeGroup;
    __declspec(property(get=GetIsBevelGroup))
    VARIANT_BOOL IsBevelGroup;
    __declspec(property(get=GetHasAutoLabelText))
    VARIANT_BOOL HasAutoLabelText;
    __declspec(property(get=GetIsEnvelope))
    VARIANT_BOOL IsEnvelope;
    __declspec(property(get=GetIsPerspective))
    VARIANT_BOOL IsPerspective;
    __declspec(property(get=GetIsDistortion))
    VARIANT_BOOL IsDistortion;
    __declspec(property(get=GetIsConnectorLine))
    VARIANT_BOOL IsConnectorLine;
    __declspec(property(get=GetIsConnector))
    VARIANT_BOOL IsConnector;
    __declspec(property(get=GetIsFittedText))
    VARIANT_BOOL IsFittedText;
    __declspec(property(get=GetIsFittedTextControl))
    VARIANT_BOOL IsFittedTextControl;
    __declspec(property(get=GetIsNaturalMediaControl))
    VARIANT_BOOL IsNaturalMediaControl;
    __declspec(property(get=GetIsNaturalMediaGroup))
    VARIANT_BOOL IsNaturalMediaGroup;
    __declspec(property(get=GetIsSecondExtrudeControl))
    VARIANT_BOOL IsSecondExtrudeControl;
    __declspec(property(get=GetIsSecondContourControl))
    VARIANT_BOOL IsSecondContourControl;
    __declspec(property(get=GetIsSecondDropShadowControl))
    VARIANT_BOOL IsSecondDropShadowControl;
    __declspec(property(get=GetIsSecondNaturalMediaControl))
    VARIANT_BOOL IsSecondNaturalMediaControl;
    __declspec(property(get=GetIsArtisticTextSelected))
    VARIANT_BOOL IsArtisticTextSelected;
    __declspec(property(get=GetIsParagraphTextSelected))
    VARIANT_BOOL IsParagraphTextSelected;
    __declspec(property(get=GetIsTextSelected))
    VARIANT_BOOL IsTextSelected;
    __declspec(property(get=GetIsOLESelected))
    VARIANT_BOOL IsOLESelected;
    __declspec(property(get=GetIsBitmapSelected))
    VARIANT_BOOL IsBitmapSelected;
    __declspec(property(get=GetIsBitmapPresent))
    VARIANT_BOOL IsBitmapPresent;
    __declspec(property(get=GetIsLensPresent))
    VARIANT_BOOL IsLensPresent;
    __declspec(property(get=GetIsMaskedBitmapPresent))
    VARIANT_BOOL IsMaskedBitmapPresent;
    __declspec(property(get=GetIsGroupSelected))
    VARIANT_BOOL IsGroupSelected;
    __declspec(property(get=GetCanUngroup))
    VARIANT_BOOL CanUngroup;
    __declspec(property(get=GetIsLinkGroupSelected))
    VARIANT_BOOL IsLinkGroupSelected;
    __declspec(property(get=GetIsLinkControlSelected))
    VARIANT_BOOL IsLinkControlSelected;
    __declspec(property(get=GetIsAttachedToDimension))
    VARIANT_BOOL IsAttachedToDimension;
    __declspec(property(get=GetIsFittedTextSelected))
    VARIANT_BOOL IsFittedTextSelected;
    __declspec(property(get=GetIsConnectorLineSelected))
    VARIANT_BOOL IsConnectorLineSelected;
    __declspec(property(get=GetIsConnectorSelected))
    VARIANT_BOOL IsConnectorSelected;
    __declspec(property(get=GetIsPerspectivePresent))
    VARIANT_BOOL IsPerspectivePresent;
    __declspec(property(get=GetIsEnvelopePresent))
    VARIANT_BOOL IsEnvelopePresent;
    __declspec(property(get=GetIsDistortionPresent))
    VARIANT_BOOL IsDistortionPresent;
    __declspec(property(get=GetIsGuidelineSelected))
    VARIANT_BOOL IsGuidelineSelected;
    __declspec(property(get=GetIsInternetObjectSelected))
    VARIANT_BOOL IsInternetObjectSelected;
    __declspec(property(get=GetIsSoundObjectSelected))
    VARIANT_BOOL IsSoundObjectSelected;
    __declspec(property(get=GetIsExternalBitmapSelected))
    VARIANT_BOOL IsExternalBitmapSelected;
    __declspec(property(get=GetIsNonExternalBitmapSelected))
    VARIANT_BOOL IsNonExternalBitmapSelected;
    __declspec(property(get=GetIsMeshFillSelected))
    VARIANT_BOOL IsMeshFillSelected;
    __declspec(property(get=GetIsMeshFillPresent))
    VARIANT_BOOL IsMeshFillPresent;
    __declspec(property(get=GetIsRollOverSelected))
    VARIANT_BOOL IsRollOverSelected;
    __declspec(property(get=GetContainsRollOverParent))
    VARIANT_BOOL ContainsRollOverParent;
    __declspec(property(get=GetCanClone))
    VARIANT_BOOL CanClone;
    __declspec(property(get=GetCanApplyBlend))
    VARIANT_BOOL CanApplyBlend;
    __declspec(property(get=GetCanApplyContour))
    VARIANT_BOOL CanApplyContour;
    __declspec(property(get=GetCanApplyFill))
    VARIANT_BOOL CanApplyFill;
    __declspec(property(get=GetCanApplyOutline))
    VARIANT_BOOL CanApplyOutline;
    __declspec(property(get=GetCanApplyTransparency))
    VARIANT_BOOL CanApplyTransparency;
    __declspec(property(get=GetCanAssignURL))
    VARIANT_BOOL CanAssignURL;
    __declspec(property(get=GetCanApplyDistortion))
    VARIANT_BOOL CanApplyDistortion;
    __declspec(property(get=GetCanApplyEnvelope))
    VARIANT_BOOL CanApplyEnvelope;
    __declspec(property(get=GetCanCopyBlend))
    VARIANT_BOOL CanCopyBlend;
    __declspec(property(get=GetCanCloneBlend))
    VARIANT_BOOL CanCloneBlend;
    __declspec(property(get=GetCanCopyExtrude))
    VARIANT_BOOL CanCopyExtrude;
    __declspec(property(get=GetCanCloneExtrude))
    VARIANT_BOOL CanCloneExtrude;
    __declspec(property(get=GetCanCopyContour))
    VARIANT_BOOL CanCopyContour;
    __declspec(property(get=GetCanCloneContour))
    VARIANT_BOOL CanCloneContour;
    __declspec(property(get=GetCanCopyDropShadow))
    VARIANT_BOOL CanCopyDropShadow;
    __declspec(property(get=GetCanCloneDropShadow))
    VARIANT_BOOL CanCloneDropShadow;
    __declspec(property(get=GetCanCopyLens))
    VARIANT_BOOL CanCopyLens;
    __declspec(property(get=GetCanCopyPerspective))
    VARIANT_BOOL CanCopyPerspective;
    __declspec(property(get=GetCanCopyEnvelope))
    VARIANT_BOOL CanCopyEnvelope;
    __declspec(property(get=GetCanCopyPowerclip))
    VARIANT_BOOL CanCopyPowerclip;
    __declspec(property(get=GetCanCopyDistortion))
    VARIANT_BOOL CanCopyDistortion;
    __declspec(property(get=GetCanLockShapes))
    VARIANT_BOOL CanLockShapes;
    __declspec(property(get=GetCanUnlockShapes))
    VARIANT_BOOL CanUnlockShapes;

    //
    // Wrapper methods for error-handling
    //

    IVGApplicationPtr GetApplication ( );
    IVGDocumentPtr GetParent ( );
    long GetCount ( );
    IVGShapePtr GetFirstShape ( );
    IVGShapePtr GetSecondShape ( );
    IVGShapePtr GetBlendTopShape ( );
    IVGShapePtr GetBlendBottomShape ( );
    IVGShapePtr GetBlendPath ( );
    VARIANT_BOOL GetCanCreateBlend ( );
    IVGShapePtr GetDistortionShape ( );
    enum cdrDistortionType GetDistortionType ( );
    IVGShapePtr GetExtrudeFaceShape ( );
    IVGShapePtr GetExtrudeGroup ( );
    IVGShapePtr GetExtrudeBevelGroup ( );
    IVGShapePtr GetContourControlShape ( );
    IVGShapePtr GetContourGroup ( );
    IVGShapePtr GetDropShadowControlShape ( );
    IVGShapePtr GetDropShadowGroup ( );
    IVGShapePtr GetDimensionControlShape ( );
    IVGShapePtr GetDimensionGroup ( );
    IVGShapePtr GetConnectorLines ( );
    IVGShapePtr GetFittedTextControlShape ( );
    IVGShapePtr GetFittedText ( );
    IVGShapePtr GetFirstShapeWithOutline ( );
    IVGShapePtr GetFirstShapeWithFill ( );
    IVGShapePtr GetNaturalMediaControlShape ( );
    IVGShapePtr GetNaturalMediaGroup ( );
    VARIANT_BOOL GetCanPrint ( );
    VARIANT_BOOL GetIsEditingText ( );
    VARIANT_BOOL GetIsTextSelection ( );
    VARIANT_BOOL GetIsOnPowerClipContents ( );
    VARIANT_BOOL GetIsEditingRollOver ( );
    VARIANT_BOOL GetCanApplyFillOutline ( );
    VARIANT_BOOL GetIsControlSelected ( );
    VARIANT_BOOL GetCanDeleteControl ( );
    VARIANT_BOOL GetIsGroup ( );
    VARIANT_BOOL GetIsRegularShape ( );
    VARIANT_BOOL GetIsControlShape ( );
    VARIANT_BOOL GetIsBlendControl ( );
    VARIANT_BOOL GetIsBlendGroup ( );
    VARIANT_BOOL GetIsCloneControl ( );
    VARIANT_BOOL GetIsContourControl ( );
    VARIANT_BOOL GetIsContourGroup ( );
    VARIANT_BOOL GetIsDropShadowControl ( );
    VARIANT_BOOL GetIsDropShadowGroup ( );
    VARIANT_BOOL GetIsDimensionControl ( );
    VARIANT_BOOL GetIsExtrudeControl ( );
    VARIANT_BOOL GetIsExtrudeGroup ( );
    VARIANT_BOOL GetIsBevelGroup ( );
    VARIANT_BOOL GetHasAutoLabelText ( );
    VARIANT_BOOL GetIsEnvelope ( );
    VARIANT_BOOL GetIsPerspective ( );
    VARIANT_BOOL GetIsDistortion ( );
    VARIANT_BOOL GetIsConnectorLine ( );
    VARIANT_BOOL GetIsConnector ( );
    VARIANT_BOOL GetIsFittedText ( );
    VARIANT_BOOL GetIsFittedTextControl ( );
    VARIANT_BOOL GetIsNaturalMediaControl ( );
    VARIANT_BOOL GetIsNaturalMediaGroup ( );
    VARIANT_BOOL GetIsSecondExtrudeControl ( );
    VARIANT_BOOL GetIsSecondContourControl ( );
    VARIANT_BOOL GetIsSecondDropShadowControl ( );
    VARIANT_BOOL GetIsSecondNaturalMediaControl ( );
    VARIANT_BOOL GetIsArtisticTextSelected ( );
    VARIANT_BOOL GetIsParagraphTextSelected ( );
    VARIANT_BOOL GetIsTextSelected ( );
    VARIANT_BOOL GetIsOLESelected ( );
    VARIANT_BOOL GetIsBitmapSelected ( );
    VARIANT_BOOL GetIsBitmapPresent ( );
    VARIANT_BOOL GetIsLensPresent ( );
    VARIANT_BOOL GetIsMaskedBitmapPresent ( );
    VARIANT_BOOL GetIsGroupSelected ( );
    VARIANT_BOOL GetCanUngroup ( );
    VARIANT_BOOL GetIsLinkGroupSelected ( );
    VARIANT_BOOL GetIsLinkControlSelected ( );
    VARIANT_BOOL GetIsAttachedToDimension ( );
    VARIANT_BOOL GetIsFittedTextSelected ( );
    VARIANT_BOOL GetIsConnectorLineSelected ( );
    VARIANT_BOOL GetIsConnectorSelected ( );
    VARIANT_BOOL GetIsPerspectivePresent ( );
    VARIANT_BOOL GetIsEnvelopePresent ( );
    VARIANT_BOOL GetIsDistortionPresent ( );
    VARIANT_BOOL GetIsGuidelineSelected ( );
    VARIANT_BOOL GetIsInternetObjectSelected ( );
    VARIANT_BOOL GetIsSoundObjectSelected ( );
    VARIANT_BOOL GetIsExternalBitmapSelected ( );
    VARIANT_BOOL GetIsNonExternalBitmapSelected ( );
    VARIANT_BOOL GetIsMeshFillSelected ( );
    VARIANT_BOOL GetIsMeshFillPresent ( );
    VARIANT_BOOL GetIsRollOverSelected ( );
    VARIANT_BOOL GetContainsRollOverParent ( );
    VARIANT_BOOL GetCanClone ( );
    VARIANT_BOOL GetCanApplyBlend ( );
    VARIANT_BOOL GetCanApplyContour ( );
    VARIANT_BOOL GetCanApplyFill ( );
    VARIANT_BOOL GetCanApplyOutline ( );
    VARIANT_BOOL GetCanApplyTransparency ( );
    VARIANT_BOOL GetCanAssignURL ( );
    VARIANT_BOOL GetCanApplyDistortion ( );
    VARIANT_BOOL GetCanApplyEnvelope ( );
    VARIANT_BOOL GetCanCopyBlend ( );
    VARIANT_BOOL GetCanCloneBlend ( );
    VARIANT_BOOL GetCanCopyExtrude ( );
    VARIANT_BOOL GetCanCloneExtrude ( );
    VARIANT_BOOL GetCanCopyContour ( );
    VARIANT_BOOL GetCanCloneContour ( );
    VARIANT_BOOL GetCanCopyDropShadow ( );
    VARIANT_BOOL GetCanCloneDropShadow ( );
    VARIANT_BOOL GetCanCopyLens ( );
    VARIANT_BOOL GetCanCopyPerspective ( );
    VARIANT_BOOL GetCanCopyEnvelope ( );
    VARIANT_BOOL GetCanCopyPowerclip ( );
    VARIANT_BOOL GetCanCopyDistortion ( );
    VARIANT_BOOL GetCanLockShapes ( );
    VARIANT_BOOL GetCanUnlockShapes ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct IVGApplication * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ struct IVGDocument * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_FirstShape (
        /*[out,retval]*/ struct IVGShape * * ppVal ) = 0;
      virtual HRESULT __stdcall get_SecondShape (
        /*[out,retval]*/ struct IVGShape * * ppVal ) = 0;
      virtual HRESULT __stdcall get_BlendTopShape (
        /*[out,retval]*/ struct IVGShape * * ppVal ) = 0;
      virtual HRESULT __stdcall get_BlendBottomShape (
        /*[out,retval]*/ struct IVGShape * * ppVal ) = 0;
      virtual HRESULT __stdcall get_BlendPath (
        /*[out,retval]*/ struct IVGShape * * ppVal ) = 0;
      virtual HRESULT __stdcall get_CanCreateBlend (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_DistortionShape (
        /*[out,retval]*/ struct IVGShape * * ppVal ) = 0;
      virtual HRESULT __stdcall get_DistortionType (
        /*[out,retval]*/ enum cdrDistortionType * pVal ) = 0;
      virtual HRESULT __stdcall get_ExtrudeFaceShape (
        /*[out,retval]*/ struct IVGShape * * ppVal ) = 0;
      virtual HRESULT __stdcall get_ExtrudeGroup (
        /*[out,retval]*/ struct IVGShape * * ppVal ) = 0;
      virtual HRESULT __stdcall get_ExtrudeBevelGroup (
        /*[out,retval]*/ struct IVGShape * * ppVal ) = 0;
      virtual HRESULT __stdcall get_ContourControlShape (
        /*[out,retval]*/ struct IVGShape * * ppVal ) = 0;
      virtual HRESULT __stdcall get_ContourGroup (
        /*[out,retval]*/ struct IVGShape * * ppVal ) = 0;
      virtual HRESULT __stdcall get_DropShadowControlShape (
        /*[out,retval]*/ struct IVGShape * * ppVal ) = 0;
      virtual HRESULT __stdcall get_DropShadowGroup (
        /*[out,retval]*/ struct IVGShape * * ppVal ) = 0;
      virtual HRESULT __stdcall get_DimensionControlShape (
        /*[out,retval]*/ struct IVGShape * * ppVal ) = 0;
      virtual HRESULT __stdcall get_DimensionGroup (
        /*[out,retval]*/ struct IVGShape * * ppVal ) = 0;
      virtual HRESULT __stdcall get_ConnectorLines (
        /*[out,retval]*/ struct IVGShape * * ppVal ) = 0;
      virtual HRESULT __stdcall get_FittedTextControlShape (
        /*[out,retval]*/ struct IVGShape * * ppVal ) = 0;
      virtual HRESULT __stdcall get_FittedText (
        /*[out,retval]*/ struct IVGShape * * ppVal ) = 0;
      virtual HRESULT __stdcall get_FirstShapeWithOutline (
        /*[out,retval]*/ struct IVGShape * * ppVal ) = 0;
      virtual HRESULT __stdcall get_FirstShapeWithFill (
        /*[out,retval]*/ struct IVGShape * * ppVal ) = 0;
      virtual HRESULT __stdcall get_NaturalMediaControlShape (
        /*[out,retval]*/ struct IVGShape * * ppVal ) = 0;
      virtual HRESULT __stdcall get_NaturalMediaGroup (
        /*[out,retval]*/ struct IVGShape * * ppVal ) = 0;
      virtual HRESULT __stdcall get_CanPrint (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_IsEditingText (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_IsTextSelection (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_IsOnPowerClipContents (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_IsEditingRollOver (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_CanApplyFillOutline (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_IsControlSelected (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_CanDeleteControl (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_IsGroup (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_IsRegularShape (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_IsControlShape (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_IsBlendControl (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_IsBlendGroup (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_IsCloneControl (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_IsContourControl (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_IsContourGroup (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_IsDropShadowControl (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_IsDropShadowGroup (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_IsDimensionControl (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_IsExtrudeControl (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_IsExtrudeGroup (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_IsBevelGroup (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_HasAutoLabelText (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_IsEnvelope (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_IsPerspective (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_IsDistortion (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_IsConnectorLine (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_IsConnector (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_IsFittedText (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_IsFittedTextControl (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_IsNaturalMediaControl (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_IsNaturalMediaGroup (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_IsSecondExtrudeControl (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_IsSecondContourControl (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_IsSecondDropShadowControl (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_IsSecondNaturalMediaControl (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_IsArtisticTextSelected (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_IsParagraphTextSelected (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_IsTextSelected (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_IsOLESelected (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_IsBitmapSelected (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_IsBitmapPresent (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_IsLensPresent (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_IsMaskedBitmapPresent (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_IsGroupSelected (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_CanUngroup (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_IsLinkGroupSelected (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_IsLinkControlSelected (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_IsAttachedToDimension (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_IsFittedTextSelected (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_IsConnectorLineSelected (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_IsConnectorSelected (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_IsPerspectivePresent (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_IsEnvelopePresent (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_IsDistortionPresent (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_IsGuidelineSelected (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_IsInternetObjectSelected (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_IsSoundObjectSelected (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_IsExternalBitmapSelected (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_IsNonExternalBitmapSelected (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_IsMeshFillSelected (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_IsMeshFillPresent (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_IsRollOverSelected (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_ContainsRollOverParent (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_CanClone (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_CanApplyBlend (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_CanApplyContour (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_CanApplyFill (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_CanApplyOutline (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_CanApplyTransparency (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_CanAssignURL (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_CanApplyDistortion (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_CanApplyEnvelope (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_CanCopyBlend (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_CanCloneBlend (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_CanCopyExtrude (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_CanCloneExtrude (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_CanCopyContour (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_CanCloneContour (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_CanCopyDropShadow (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_CanCloneDropShadow (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_CanCopyLens (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_CanCopyPerspective (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_CanCopyEnvelope (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_CanCopyPowerclip (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_CanCopyDistortion (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_CanLockShapes (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_CanUnlockShapes (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
};

struct __declspec(uuid("b0580019-9aa4-44fd-9547-4f91eb757ac4"))
IVGCurve : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetLength))
    double Length;
    __declspec(property(get=GetSubPaths))
    IVGSubPathsPtr SubPaths;
    __declspec(property(get=GetNodes))
    IVGNodesPtr Nodes;
    __declspec(property(get=GetSegments))
    IVGSegmentsPtr Segments;
    __declspec(property(get=GetClosed,put=PutClosed))
    VARIANT_BOOL Closed;
    __declspec(property(get=GetIsClockwise))
    VARIANT_BOOL IsClockwise;
    __declspec(property(get=GetArea))
    double Area;
    __declspec(property(get=GetBoundingBox))
    IVGRectPtr BoundingBox;

    //
    // Wrapper methods for error-handling
    //

    double GetLength ( );
    IVGSubPathsPtr GetSubPaths ( );
    IVGNodesPtr GetNodes ( );
    IVGSegmentsPtr GetSegments ( );
    VARIANT_BOOL GetClosed ( );
    void PutClosed (
        VARIANT_BOOL pVal );
    IVGNodeRangePtr Selection ( );
    IVGSubPathPtr CreateSubPath (
        double x,
        double y );
    HRESULT ReverseDirection ( );
    enum cdrPositionOfPointOverShape IsOnCurve (
        double x,
        double y,
        double HotArea );
    HRESULT BindToDocument (
        struct IVGDocument * Document );
    IVGCurvePtr GetCopy ( );
    HRESULT CopyAssign (
        struct IVGCurve * Source );
    IVGSubPathPtr CreateSubPathFromArray (
        SAFEARRAY * * Source,
        VARIANT_BOOL Closed,
        long NumElements );
    HRESULT AppendCurve (
        struct IVGCurve * Source );
    SAFEARRAY * GetCurveInfo ( );
    long PutCurveInfo (
        SAFEARRAY * * Source,
        long NumElements );
    HRESULT ClearSelection ( );
    IVGCurvePtr GetPolyline (
        long CurvePrecision );
    IVGCurvePtr RemoveOverlaps ( );
    IVGCurvePtr Contour (
        double Offset,
        enum cdrContourDirection Direction,
        enum cdrContourEndCapType EndCapType,
        enum cdrContourCornerType CornerType,
        double MiterLimit );
    VARIANT_BOOL IsPointInside (
        double x,
        double y );
    VARIANT_BOOL IsRectOnEdge (
        double x1,
        double y1,
        double x2,
        double y2 );
    IVGSegmentPtr FindClosestSegment (
        double x,
        double y,
        double * ParamOffset );
    IVGNodePtr FindNodeAtPoint (
        double x,
        double y,
        double HotArea );
    IVGSegmentPtr FindSegmentAtPoint (
        double x,
        double y,
        double * ParamOffset,
        double HotArea );
    IVGCurvePtr WeldWith (
        struct IVGCurve * Curve );
    VARIANT_BOOL GetIsClockwise ( );
    double GetArea ( );
    VARIANT_BOOL GetBoundingBox (
        double * x,
        double * y,
        double * Width,
        double * Height );
    IVGRectPtr GetBoundingBox ( );
    VARIANT_BOOL IntersectsWith (
        struct IVGCurve * Curve );
    HRESULT AppendSubpathFitToPoints (
        struct IVGPointRange * Points,
        VARIANT_BOOL UseCurrentViewForTolerance,
        double tolerance );
    HRESULT AppendSubpathFitToPointsAndCusps (
        struct IVGPointRange * Points,
        SAFEARRAY * * CuspIndexArray,
        VARIANT_BOOL UseCurrentViewForTolerance,
        double tolerance );
    HRESULT ApplyTransformMatrix (
        struct IVGTransformMatrix * TransformMatrix );
    HRESULT AppendSubpathFromPoints (
        struct IVGPointRange * Points,
        VARIANT_BOOL Close );
    IVGCurvePtr CreateCurveMappedToStroke (
        struct IVGSubPath * Stroke,
        double ScaleY,
        VARIANT_BOOL SelfWeld );
    IVGCurvePtr CreateCurveMappedToStrokeAndReferenceLine (
        struct IVGSubPath * Stroke,
        struct IVGPoint * Start,
        struct IVGPoint * End,
        double ScaleY,
        VARIANT_BOOL SelfWeld );
    HRESULT AutoReduceNodes (
        double AmountToReduce0To100,
        VARIANT_BOOL SelectedNodesOnly );
    HRESULT JoinTouchingSubpaths (
        VARIANT_BOOL AllowSubpathReversals,
        double tolerance );
    HRESULT AppendSubpathCircle (
        double CenterX,
        double CenterY,
        double Radius );
    HRESULT AppendSubpathRectangle (
        double Left,
        double Top,
        double Right,
        double Bottom );
    HRESULT AppendSubpathThreePointArc (
        double StartX,
        double StartY,
        double EndX,
        double EndY,
        double ThirdX,
        double ThirdY );
    HRESULT SelfWeldClosedSubpaths ( );
    HRESULT AppendSubpathEllipse (
        double CenterX,
        double CenterY,
        double RadiusH,
        double RadiusV );
    IVGCurvePtr WeldEx (
        struct IVGCurve * TargetCurve,
        enum cdrWeldMethod Method,
        VARIANT_BOOL WindingSource,
        VARIANT_BOOL WindingTarget,
        long Flags );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Length (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_SubPaths (
        /*[out,retval]*/ struct IVGSubPaths * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Nodes (
        /*[out,retval]*/ struct IVGNodes * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Segments (
        /*[out,retval]*/ struct IVGSegments * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Closed (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_Closed (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall raw_Selection (
        /*[out,retval]*/ struct IVGNodeRange * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_CreateSubPath (
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[out,retval]*/ struct IVGSubPath * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_ReverseDirection ( ) = 0;
      virtual HRESULT __stdcall raw_IsOnCurve (
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[in]*/ double HotArea,
        /*[out,retval]*/ enum cdrPositionOfPointOverShape * pVal ) = 0;
      virtual HRESULT __stdcall raw_BindToDocument (
        /*[in]*/ struct IVGDocument * Document ) = 0;
      virtual HRESULT __stdcall raw_GetCopy (
        /*[out,retval]*/ struct IVGCurve * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_CopyAssign (
        /*[in]*/ struct IVGCurve * Source ) = 0;
      virtual HRESULT __stdcall raw_CreateSubPathFromArray (
        /*[in]*/ SAFEARRAY * * Source,
        /*[in]*/ VARIANT_BOOL Closed,
        /*[in]*/ long NumElements,
        /*[out,retval]*/ struct IVGSubPath * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_AppendCurve (
        /*[in]*/ struct IVGCurve * Source ) = 0;
      virtual HRESULT __stdcall raw_GetCurveInfo (
        /*[out,retval]*/ SAFEARRAY * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_PutCurveInfo (
        /*[in]*/ SAFEARRAY * * Source,
        /*[in]*/ long NumElements,
        /*[out,retval]*/ long * pRet ) = 0;
      virtual HRESULT __stdcall raw_ClearSelection ( ) = 0;
      virtual HRESULT __stdcall raw_GetPolyline (
        /*[in]*/ long CurvePrecision,
        /*[out,retval]*/ struct IVGCurve * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_RemoveOverlaps (
        /*[out,retval]*/ struct IVGCurve * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_Contour (
        /*[in]*/ double Offset,
        /*[in]*/ enum cdrContourDirection Direction,
        /*[in]*/ enum cdrContourEndCapType EndCapType,
        /*[in]*/ enum cdrContourCornerType CornerType,
        /*[in]*/ double MiterLimit,
        /*[out,retval]*/ struct IVGCurve * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_IsPointInside (
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_IsRectOnEdge (
        /*[in]*/ double x1,
        /*[in]*/ double y1,
        /*[in]*/ double x2,
        /*[in]*/ double y2,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_FindClosestSegment (
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[out]*/ double * ParamOffset,
        /*[out,retval]*/ struct IVGSegment * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_FindNodeAtPoint (
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[in]*/ double HotArea,
        /*[out,retval]*/ struct IVGNode * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_FindSegmentAtPoint (
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[out]*/ double * ParamOffset,
        /*[in]*/ double HotArea,
        /*[out,retval]*/ struct IVGSegment * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_WeldWith (
        /*[in]*/ struct IVGCurve * Curve,
        /*[out,retval]*/ struct IVGCurve * * ppVal ) = 0;
      virtual HRESULT __stdcall get_IsClockwise (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_Area (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetBoundingBox (
        /*[out]*/ double * x,
        /*[out]*/ double * y,
        /*[out]*/ double * Width,
        /*[out]*/ double * Height,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_BoundingBox (
        /*[out,retval]*/ struct IVGRect * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_IntersectsWith (
        /*[in]*/ struct IVGCurve * Curve,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_AppendSubpathFitToPoints (
        /*[in]*/ struct IVGPointRange * Points,
        /*[in]*/ VARIANT_BOOL UseCurrentViewForTolerance,
        /*[in]*/ double tolerance ) = 0;
      virtual HRESULT __stdcall raw_AppendSubpathFitToPointsAndCusps (
        /*[in]*/ struct IVGPointRange * Points,
        /*[in]*/ SAFEARRAY * * CuspIndexArray,
        /*[in]*/ VARIANT_BOOL UseCurrentViewForTolerance,
        /*[in]*/ double tolerance ) = 0;
      virtual HRESULT __stdcall raw_ApplyTransformMatrix (
        /*[in]*/ struct IVGTransformMatrix * TransformMatrix ) = 0;
      virtual HRESULT __stdcall raw_AppendSubpathFromPoints (
        /*[in]*/ struct IVGPointRange * Points,
        /*[in]*/ VARIANT_BOOL Close ) = 0;
      virtual HRESULT __stdcall raw_CreateCurveMappedToStroke (
        /*[in]*/ struct IVGSubPath * Stroke,
        /*[in]*/ double ScaleY,
        /*[in]*/ VARIANT_BOOL SelfWeld,
        /*[out,retval]*/ struct IVGCurve * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_CreateCurveMappedToStrokeAndReferenceLine (
        /*[in]*/ struct IVGSubPath * Stroke,
        /*[in]*/ struct IVGPoint * Start,
        /*[in]*/ struct IVGPoint * End,
        /*[in]*/ double ScaleY,
        /*[in]*/ VARIANT_BOOL SelfWeld,
        /*[out,retval]*/ struct IVGCurve * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_AutoReduceNodes (
        /*[in]*/ double AmountToReduce0To100,
        /*[in]*/ VARIANT_BOOL SelectedNodesOnly ) = 0;
      virtual HRESULT __stdcall raw_JoinTouchingSubpaths (
        /*[in]*/ VARIANT_BOOL AllowSubpathReversals,
        /*[in]*/ double tolerance ) = 0;
      virtual HRESULT __stdcall raw_AppendSubpathCircle (
        /*[in]*/ double CenterX,
        /*[in]*/ double CenterY,
        /*[in]*/ double Radius ) = 0;
      virtual HRESULT __stdcall raw_AppendSubpathRectangle (
        /*[in]*/ double Left,
        /*[in]*/ double Top,
        /*[in]*/ double Right,
        /*[in]*/ double Bottom ) = 0;
      virtual HRESULT __stdcall raw_AppendSubpathThreePointArc (
        /*[in]*/ double StartX,
        /*[in]*/ double StartY,
        /*[in]*/ double EndX,
        /*[in]*/ double EndY,
        /*[in]*/ double ThirdX,
        /*[in]*/ double ThirdY ) = 0;
      virtual HRESULT __stdcall raw_SelfWeldClosedSubpaths ( ) = 0;
      virtual HRESULT __stdcall raw_AppendSubpathEllipse (
        /*[in]*/ double CenterX,
        /*[in]*/ double CenterY,
        /*[in]*/ double RadiusH,
        /*[in]*/ double RadiusV ) = 0;
      virtual HRESULT __stdcall raw_WeldEx (
        /*[in]*/ struct IVGCurve * TargetCurve,
        /*[in]*/ enum cdrWeldMethod Method,
        /*[in]*/ VARIANT_BOOL WindingSource,
        /*[in]*/ VARIANT_BOOL WindingTarget,
        /*[in]*/ long Flags,
        /*[out,retval]*/ struct IVGCurve * * pVal ) = 0;
};

struct __declspec(uuid("b058000d-9aa4-44fd-9547-4f91eb757ac4"))
IVGArrowHead : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetCurve))
    IVGCurvePtr Curve;
    __declspec(property(get=GetBaseOutlineScale))
    double BaseOutlineScale;
    __declspec(property(get=GetCenterX))
    double CenterX;
    __declspec(property(get=GetCenterY))
    double CenterY;
    __declspec(property(get=GetLineOffset))
    double LineOffset;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetDisplayName))
    _bstr_t DisplayName;

    //
    // Wrapper methods for error-handling
    //

    long GetIndex ( );
    IVGCurvePtr GetCurve ( );
    double GetBaseOutlineScale ( );
    double GetCenterX ( );
    double GetCenterY ( );
    double GetLineOffset ( );
    IVGArrowHeadPtr BindToDocument (
        struct IVGDocument * Document );
    VARIANT_BOOL CompareWith (
        struct IVGArrowHead * ArrowHead );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t pVal );
    _bstr_t GetDisplayName ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Index (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_Curve (
        /*[out,retval]*/ struct IVGCurve * * ppVal ) = 0;
      virtual HRESULT __stdcall get_BaseOutlineScale (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_CenterX (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_CenterY (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_LineOffset (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall raw_BindToDocument (
        /*[in]*/ struct IVGDocument * Document,
        /*[out,retval]*/ struct IVGArrowHead * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_CompareWith (
        /*[in]*/ struct IVGArrowHead * ArrowHead,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_DisplayName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
};

struct __declspec(uuid("b058000e-9aa4-44fd-9547-4f91eb757ac4"))
IVGArrowHeads : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    IVGApplicationPtr Application;
    __declspec(property(get=GetParent))
    IVGApplicationPtr Parent;
    __declspec(property(get=GetItem))
    IVGArrowHeadPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IVGApplicationPtr GetApplication ( );
    IVGApplicationPtr GetParent ( );
    IVGArrowHeadPtr GetItem (
        long Index );
    IUnknownPtr Get_NewEnum ( );
    long GetCount ( );
    HRESULT Remove (
        long Index );
    IVGArrowHeadPtr Add (
        struct IVGArrowHead * ArrowHead );
    IVGArrowHeadPtr Replace (
        long Index,
        struct IVGArrowHead * ArrowHead );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct IVGApplication * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ struct IVGApplication * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IVGArrowHead * * ppVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * pVal ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_Remove (
        /*[in]*/ long Index ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ struct IVGArrowHead * ArrowHead,
        /*[out,retval]*/ struct IVGArrowHead * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_Replace (
        /*[in]*/ long Index,
        /*[in]*/ struct IVGArrowHead * ArrowHead,
        /*[out,retval]*/ struct IVGArrowHead * * ppVal ) = 0;
};

struct __declspec(uuid("b058006b-9aa4-44fd-9547-4f91eb757ac4"))
IVGSubPaths : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    IVGApplicationPtr Application;
    __declspec(property(get=GetParent))
    IVGCurvePtr Parent;
    __declspec(property(get=GetItem))
    IVGSubPathPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetFirst))
    IVGSubPathPtr First;
    __declspec(property(get=GetLast))
    IVGSubPathPtr Last;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IVGApplicationPtr GetApplication ( );
    IVGCurvePtr GetParent ( );
    IVGSubPathPtr GetItem (
        long Index );
    IUnknownPtr Get_NewEnum ( );
    long GetCount ( );
    IVGSubPathPtr GetFirst ( );
    IVGSubPathPtr GetLast ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct IVGApplication * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ struct IVGCurve * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IVGSubPath * * ppVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * pVal ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_First (
        /*[out,retval]*/ struct IVGSubPath * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Last (
        /*[out,retval]*/ struct IVGSubPath * * ppVal ) = 0;
};

struct __declspec(uuid("b058006a-9aa4-44fd-9547-4f91eb757ac4"))
IVGSubPath : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    IVGApplicationPtr Application;
    __declspec(property(get=GetParent))
    IVGCurvePtr Parent;
    __declspec(property(get=GetNodes))
    IVGNodesPtr Nodes;
    __declspec(property(get=GetSegments))
    IVGSegmentsPtr Segments;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetLength))
    double Length;
    __declspec(property(get=GetClosed,put=PutClosed))
    VARIANT_BOOL Closed;
    __declspec(property(get=GetStartNode))
    IVGNodePtr StartNode;
    __declspec(property(get=GetPositionX,put=PutPositionX))
    double PositionX;
    __declspec(property(get=GetEndNode))
    IVGNodePtr EndNode;
    __declspec(property(get=GetPositionY,put=PutPositionY))
    double PositionY;
    __declspec(property(get=GetFirstSegment))
    IVGSegmentPtr FirstSegment;
    __declspec(property(get=GetSizeWidth))
    double SizeWidth;
    __declspec(property(get=GetSizeHeight))
    double SizeHeight;
    __declspec(property(get=GetLastSegment))
    IVGSegmentPtr LastSegment;
    __declspec(property(get=GetIsClockwise))
    VARIANT_BOOL IsClockwise;
    __declspec(property(get=GetArea))
    double Area;
    __declspec(property(get=GetBoundingBox))
    IVGRectPtr BoundingBox;

    //
    // Wrapper methods for error-handling
    //

    IVGApplicationPtr GetApplication ( );
    IVGCurvePtr GetParent ( );
    IVGNodesPtr GetNodes ( );
    IVGSegmentsPtr GetSegments ( );
    long GetIndex ( );
    double GetLength ( );
    VARIANT_BOOL GetClosed ( );
    void PutClosed (
        VARIANT_BOOL pVal );
    double GetPositionX ( );
    void PutPositionX (
        double pVal );
    double GetPositionY ( );
    void PutPositionY (
        double pVal );
    double GetSizeWidth ( );
    double GetSizeHeight ( );
    IVGNodeRangePtr Selection ( );
    HRESULT ReverseDirection ( );
    IVGShapePtr Extract (
        struct IVGShape * * OldCurve );
    HRESULT Delete ( );
    HRESULT GetPosition (
        double * PositionX,
        double * PositionY );
    HRESULT SetPosition (
        double PositionX,
        double PositionY );
    HRESULT Move (
        double DeltaX,
        double DeltaY );
    enum cdrPositionOfPointOverShape IsOnSubPath (
        double x,
        double y,
        double HotArea );
    IVGSegmentPtr AppendLineSegment (
        double x,
        double y,
        VARIANT_BOOL AppendAtBeginning );
    IVGSegmentPtr AppendCurveSegment (
        double x,
        double y,
        double StartingControlPointLength,
        double StartingControlPointAngle,
        double EndingControlPointLength,
        double EndingControlPointAngle,
        VARIANT_BOOL AppendAtBeginning );
    HRESULT GetPointPositionAt (
        double * x,
        double * y,
        double Offset,
        enum cdrSegmentOffsetType OffsetType );
    IVGNodePtr BreakApartAt (
        double Offset,
        enum cdrSegmentOffsetType OffsetType );
    IVGNodePtr AddNodeAt (
        double Offset,
        enum cdrSegmentOffsetType OffsetType );
    double GetPerpendicularAt (
        double Offset,
        enum cdrSegmentOffsetType OffsetType );
    double GetTangentAt (
        double Offset,
        enum cdrSegmentOffsetType OffsetType );
    IVGCrossPointsPtr GetIntersections (
        struct IVGSubPath * Target,
        enum cdrSegmentOffsetType OffsetType );
    IVGSegmentPtr GetSegmentAt (
        double Offset,
        enum cdrSegmentOffsetType OffsetType,
        double * SegmentOffset );
    IVGSubPathPtr Next ( );
    IVGSubPathPtr Previous ( );
    double GetCurvatureAt (
        double Offset,
        enum cdrSegmentOffsetType OffsetType );
    double GetCurveSpeedAt (
        double Offset,
        enum cdrSegmentOffsetType OffsetType );
    IVGNodePtr GetStartNode ( );
    IVGNodePtr GetEndNode ( );
    VARIANT_BOOL FindSegmentOffset (
        double AbsoluteOffset,
        struct IVGSegment * * Segment,
        double * ParamOffset,
        double * Remainder );
    IVGSegmentPtr GetFirstSegment ( );
    IVGSegmentPtr GetLastSegment ( );
    IVGSegmentPtr AppendCurveSegment2 (
        double x,
        double y,
        double StartingControlPointX,
        double StartingControlPointY,
        double EndingControlPointX,
        double EndingControlPointY,
        VARIANT_BOOL AppendAtBeginning );
    IVGCurvePtr GetCopy ( );
    SAFEARRAY * GetCurveInfo ( );
    long PutCurveInfo (
        SAFEARRAY * * Source,
        long NumElements );
    IVGCurvePtr GetPolyline (
        long CurvePrecision );
    VARIANT_BOOL IsPointInside (
        double x,
        double y );
    VARIANT_BOOL IsRectOnEdge (
        double x1,
        double y1,
        double x2,
        double y2 );
    IVGSegmentPtr FindClosestSegment (
        double x,
        double y,
        double * ParamOffset );
    IVGNodePtr FindNodeAtPoint (
        double x,
        double y,
        double HotArea );
    IVGSegmentPtr FindSegmentAtPoint (
        double x,
        double y,
        double * ParamOffset,
        double HotArea );
    VARIANT_BOOL GetIsClockwise ( );
    double GetArea ( );
    VARIANT_BOOL GetBoundingBox (
        double * x,
        double * y,
        double * Width,
        double * Height );
    IVGRectPtr GetBoundingBox ( );
    HRESULT EqualDivide (
        long Divisions,
        double Gap );
    IVGPointRangePtr GetEvenlySpacedPoints (
        double DistanceBetweenPointsAlongCurve,
        VARIANT_BOOL ScaleDistanceToFit );
    IVGVectorPtr GetPerpendicularVectorAt (
        double Offset,
        enum cdrSegmentOffsetType OffsetType,
        VARIANT_BOOL Normalize );
    IVGVectorPtr GetTangentVectorAt (
        double Offset,
        enum cdrSegmentOffsetType OffsetType,
        VARIANT_BOOL Normalize );
    IVGPointPtr GetPointAt (
        double Offset,
        enum cdrSegmentOffsetType OffsetType );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct IVGApplication * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ struct IVGCurve * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Nodes (
        /*[out,retval]*/ struct IVGNodes * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Segments (
        /*[out,retval]*/ struct IVGSegments * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Index (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_Length (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_Closed (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_Closed (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_PositionX (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_PositionX (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_PositionY (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_PositionY (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_SizeWidth (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_SizeHeight (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall raw_Selection (
        /*[out,retval]*/ struct IVGNodeRange * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_ReverseDirection ( ) = 0;
      virtual HRESULT __stdcall raw_Extract (
        /*[out]*/ struct IVGShape * * OldCurve,
        /*[out,retval]*/ struct IVGShape * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall raw_GetPosition (
        /*[out]*/ double * PositionX,
        /*[out]*/ double * PositionY ) = 0;
      virtual HRESULT __stdcall raw_SetPosition (
        /*[in]*/ double PositionX,
        /*[in]*/ double PositionY ) = 0;
      virtual HRESULT __stdcall raw_Move (
        /*[in]*/ double DeltaX,
        /*[in]*/ double DeltaY ) = 0;
      virtual HRESULT __stdcall raw_IsOnSubPath (
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[in]*/ double HotArea,
        /*[out,retval]*/ enum cdrPositionOfPointOverShape * pVal ) = 0;
      virtual HRESULT __stdcall raw_AppendLineSegment (
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[in]*/ VARIANT_BOOL AppendAtBeginning,
        /*[out,retval]*/ struct IVGSegment * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_AppendCurveSegment (
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[in]*/ double StartingControlPointLength,
        /*[in]*/ double StartingControlPointAngle,
        /*[in]*/ double EndingControlPointLength,
        /*[in]*/ double EndingControlPointAngle,
        /*[in]*/ VARIANT_BOOL AppendAtBeginning,
        /*[out,retval]*/ struct IVGSegment * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_GetPointPositionAt (
        /*[out]*/ double * x,
        /*[out]*/ double * y,
        /*[in]*/ double Offset,
        /*[in]*/ enum cdrSegmentOffsetType OffsetType ) = 0;
      virtual HRESULT __stdcall raw_BreakApartAt (
        /*[in]*/ double Offset,
        /*[in]*/ enum cdrSegmentOffsetType OffsetType,
        /*[out,retval]*/ struct IVGNode * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_AddNodeAt (
        /*[in]*/ double Offset,
        /*[in]*/ enum cdrSegmentOffsetType OffsetType,
        /*[out,retval]*/ struct IVGNode * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_GetPerpendicularAt (
        /*[in]*/ double Offset,
        /*[in]*/ enum cdrSegmentOffsetType OffsetType,
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetTangentAt (
        /*[in]*/ double Offset,
        /*[in]*/ enum cdrSegmentOffsetType OffsetType,
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetIntersections (
        /*[in]*/ struct IVGSubPath * Target,
        /*[in]*/ enum cdrSegmentOffsetType OffsetType,
        /*[out,retval]*/ struct IVGCrossPoints * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_GetSegmentAt (
        /*[in]*/ double Offset,
        /*[in]*/ enum cdrSegmentOffsetType OffsetType,
        /*[out]*/ double * SegmentOffset,
        /*[out,retval]*/ struct IVGSegment * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_Next (
        /*[out,retval]*/ struct IVGSubPath * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_Previous (
        /*[out,retval]*/ struct IVGSubPath * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_GetCurvatureAt (
        /*[in]*/ double Offset,
        /*[in]*/ enum cdrSegmentOffsetType OffsetType,
        /*[out,retval]*/ double * pdCurvature ) = 0;
      virtual HRESULT __stdcall raw_GetCurveSpeedAt (
        /*[in]*/ double Offset,
        /*[in]*/ enum cdrSegmentOffsetType OffsetType,
        /*[out,retval]*/ double * pdCurveSpeed ) = 0;
      virtual HRESULT __stdcall get_StartNode (
        /*[out,retval]*/ struct IVGNode * * ppVal ) = 0;
      virtual HRESULT __stdcall get_EndNode (
        /*[out,retval]*/ struct IVGNode * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_FindSegmentOffset (
        /*[in]*/ double AbsoluteOffset,
        /*[out]*/ struct IVGSegment * * Segment,
        /*[out]*/ double * ParamOffset,
        /*[out]*/ double * Remainder,
        /*[out,retval]*/ VARIANT_BOOL * pbRes ) = 0;
      virtual HRESULT __stdcall get_FirstSegment (
        /*[out,retval]*/ struct IVGSegment * * ppVal ) = 0;
      virtual HRESULT __stdcall get_LastSegment (
        /*[out,retval]*/ struct IVGSegment * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_AppendCurveSegment2 (
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[in]*/ double StartingControlPointX,
        /*[in]*/ double StartingControlPointY,
        /*[in]*/ double EndingControlPointX,
        /*[in]*/ double EndingControlPointY,
        /*[in]*/ VARIANT_BOOL AppendAtBeginning,
        /*[out,retval]*/ struct IVGSegment * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_GetCopy (
        /*[out,retval]*/ struct IVGCurve * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_GetCurveInfo (
        /*[out,retval]*/ SAFEARRAY * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_PutCurveInfo (
        /*[in]*/ SAFEARRAY * * Source,
        /*[in]*/ long NumElements,
        /*[out,retval]*/ long * pRet ) = 0;
      virtual HRESULT __stdcall raw_GetPolyline (
        /*[in]*/ long CurvePrecision,
        /*[out,retval]*/ struct IVGCurve * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_IsPointInside (
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_IsRectOnEdge (
        /*[in]*/ double x1,
        /*[in]*/ double y1,
        /*[in]*/ double x2,
        /*[in]*/ double y2,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_FindClosestSegment (
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[out]*/ double * ParamOffset,
        /*[out,retval]*/ struct IVGSegment * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_FindNodeAtPoint (
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[in]*/ double HotArea,
        /*[out,retval]*/ struct IVGNode * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_FindSegmentAtPoint (
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[out]*/ double * ParamOffset,
        /*[in]*/ double HotArea,
        /*[out,retval]*/ struct IVGSegment * * ppVal ) = 0;
      virtual HRESULT __stdcall get_IsClockwise (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_Area (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetBoundingBox (
        /*[out]*/ double * x,
        /*[out]*/ double * y,
        /*[out]*/ double * Width,
        /*[out]*/ double * Height,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_BoundingBox (
        /*[out,retval]*/ struct IVGRect * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_EqualDivide (
        /*[in]*/ long Divisions,
        /*[in]*/ double Gap ) = 0;
      virtual HRESULT __stdcall raw_GetEvenlySpacedPoints (
        /*[in]*/ double DistanceBetweenPointsAlongCurve,
        /*[in]*/ VARIANT_BOOL ScaleDistanceToFit,
        /*[out,retval]*/ struct IVGPointRange * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_GetPerpendicularVectorAt (
        /*[in]*/ double Offset,
        /*[in]*/ enum cdrSegmentOffsetType OffsetType,
        /*[in]*/ VARIANT_BOOL Normalize,
        /*[out,retval]*/ struct IVGVector * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_GetTangentVectorAt (
        /*[in]*/ double Offset,
        /*[in]*/ enum cdrSegmentOffsetType OffsetType,
        /*[in]*/ VARIANT_BOOL Normalize,
        /*[out,retval]*/ struct IVGVector * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_GetPointAt (
        /*[in]*/ double Offset,
        /*[in]*/ enum cdrSegmentOffsetType OffsetType,
        /*[out,retval]*/ struct IVGPoint * * ppVal ) = 0;
};

struct __declspec(uuid("b0580044-9aa4-44fd-9547-4f91eb757ac4"))
IVGNodes : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    IVGApplicationPtr Application;
    __declspec(property(get=GetParent))
    IVGCurvePtr Parent;
    __declspec(property(get=GetItem))
    IVGNodePtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetFirst))
    IVGNodePtr First;
    __declspec(property(get=GetLast))
    IVGNodePtr Last;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IVGApplicationPtr GetApplication ( );
    IVGCurvePtr GetParent ( );
    IVGNodePtr GetItem (
        long Index );
    IUnknownPtr Get_NewEnum ( );
    long GetCount ( );
    IVGNodeRangePtr Range (
        SAFEARRAY * * IndexArray );
    IVGNodeRangePtr All ( );
    IVGNodeRangePtr AllExcluding (
        SAFEARRAY * * IndexArray );
    IVGNodePtr GetFirst ( );
    IVGNodePtr GetLast ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct IVGApplication * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ struct IVGCurve * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IVGNode * * ppVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * pVal ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_Range (
        /*[in]*/ SAFEARRAY * * IndexArray,
        /*[out,retval]*/ struct IVGNodeRange * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_All (
        /*[out,retval]*/ struct IVGNodeRange * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_AllExcluding (
        /*[in]*/ SAFEARRAY * * IndexArray,
        /*[out,retval]*/ struct IVGNodeRange * * ppVal ) = 0;
      virtual HRESULT __stdcall get_First (
        /*[out,retval]*/ struct IVGNode * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Last (
        /*[out,retval]*/ struct IVGNode * * ppVal ) = 0;
};

struct __declspec(uuid("b0580042-9aa4-44fd-9547-4f91eb757ac4"))
IVGNode : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    IVGApplicationPtr Application;
    __declspec(property(get=GetParent))
    IVGCurvePtr Parent;
    __declspec(property(get=GetPositionX,put=PutPositionX))
    double PositionX;
    __declspec(property(get=GetPositionY,put=PutPositionY))
    double PositionY;
    __declspec(property(get=GetType,put=PutType))
    enum cdrNodeType Type;
    __declspec(property(get=GetSubPath))
    IVGSubPathPtr SubPath;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetSubPathIndex))
    long SubPathIndex;
    __declspec(property(get=GetAbsoluteIndex))
    long AbsoluteIndex;
    __declspec(property(get=GetIsEnding))
    VARIANT_BOOL IsEnding;
    __declspec(property(get=GetSegment))
    IVGSegmentPtr Segment;
    __declspec(property(get=GetPrevSegment))
    IVGSegmentPtr PrevSegment;
    __declspec(property(get=GetNextSegment))
    IVGSegmentPtr NextSegment;
    __declspec(property(get=GetSelected,put=PutSelected))
    VARIANT_BOOL Selected;

    //
    // Wrapper methods for error-handling
    //

    IVGApplicationPtr GetApplication ( );
    IVGCurvePtr GetParent ( );
    double GetPositionX ( );
    void PutPositionX (
        double pVal );
    double GetPositionY ( );
    void PutPositionY (
        double pVal );
    enum cdrNodeType GetType ( );
    void PutType (
        enum cdrNodeType pVal );
    IVGSubPathPtr GetSubPath ( );
    long GetIndex ( );
    long GetSubPathIndex ( );
    long GetAbsoluteIndex ( );
    VARIANT_BOOL GetIsEnding ( );
    HRESULT JoinWith (
        struct IVGNode * Target );
    HRESULT ConnectWith (
        struct IVGNode * Target );
    HRESULT BreakApart ( );
    HRESULT Delete ( );
    HRESULT GetPosition (
        double * PositionX,
        double * PositionY );
    HRESULT SetPosition (
        double PositionX,
        double PositionY );
    HRESULT Move (
        double DeltaX,
        double DeltaY );
    IVGNodePtr Next ( );
    IVGNodePtr Previous ( );
    double GetDistanceFrom (
        struct IVGNode * Node );
    IVGSegmentPtr GetSegment ( );
    IVGSegmentPtr GetPrevSegment ( );
    IVGSegmentPtr GetNextSegment ( );
    VARIANT_BOOL Fillet (
        double Radius,
        VARIANT_BOOL CombineSmoothSegments );
    VARIANT_BOOL Chamfer (
        double DistanceA,
        double DistanceB,
        VARIANT_BOOL CombineSmoothSegments );
    VARIANT_BOOL Scallop (
        double Radius,
        VARIANT_BOOL CombineSmoothSegments );
    VARIANT_BOOL GetSelected ( );
    void PutSelected (
        VARIANT_BOOL pVal );
    HRESULT CreateSelection ( );
    VARIANT_BOOL ExtendSubPaths (
        struct IVGNode * Node2,
        VARIANT_BOOL JoinPaths );
    HRESULT AveragePositionWith (
        struct IVGNode * Node2,
        VARIANT_BOOL JoinPaths );
    HRESULT GetPoint (
        struct IVGPoint * * ppVal );
    HRESULT SetPoint (
        struct IVGPoint * ppVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct IVGApplication * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ struct IVGCurve * * ppVal ) = 0;
      virtual HRESULT __stdcall get_PositionX (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_PositionX (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_PositionY (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_PositionY (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum cdrNodeType * pVal ) = 0;
      virtual HRESULT __stdcall put_Type (
        /*[in]*/ enum cdrNodeType pVal ) = 0;
      virtual HRESULT __stdcall get_SubPath (
        /*[out,retval]*/ struct IVGSubPath * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Index (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_SubPathIndex (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_AbsoluteIndex (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_IsEnding (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_JoinWith (
        /*[in]*/ struct IVGNode * Target ) = 0;
      virtual HRESULT __stdcall raw_ConnectWith (
        /*[in]*/ struct IVGNode * Target ) = 0;
      virtual HRESULT __stdcall raw_BreakApart ( ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall raw_GetPosition (
        /*[out]*/ double * PositionX,
        /*[out]*/ double * PositionY ) = 0;
      virtual HRESULT __stdcall raw_SetPosition (
        /*[in]*/ double PositionX,
        /*[in]*/ double PositionY ) = 0;
      virtual HRESULT __stdcall raw_Move (
        /*[in]*/ double DeltaX,
        /*[in]*/ double DeltaY ) = 0;
      virtual HRESULT __stdcall raw_Next (
        /*[out,retval]*/ struct IVGNode * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_Previous (
        /*[out,retval]*/ struct IVGNode * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_GetDistanceFrom (
        /*[in]*/ struct IVGNode * Node,
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_Segment (
        /*[out,retval]*/ struct IVGSegment * * pVal ) = 0;
      virtual HRESULT __stdcall get_PrevSegment (
        /*[out,retval]*/ struct IVGSegment * * pVal ) = 0;
      virtual HRESULT __stdcall get_NextSegment (
        /*[out,retval]*/ struct IVGSegment * * pVal ) = 0;
      virtual HRESULT __stdcall raw_Fillet (
        /*[in]*/ double Radius,
        /*[in]*/ VARIANT_BOOL CombineSmoothSegments,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_Chamfer (
        /*[in]*/ double DistanceA,
        /*[in]*/ double DistanceB,
        /*[in]*/ VARIANT_BOOL CombineSmoothSegments,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_Scallop (
        /*[in]*/ double Radius,
        /*[in]*/ VARIANT_BOOL CombineSmoothSegments,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_Selected (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_Selected (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall raw_CreateSelection ( ) = 0;
      virtual HRESULT __stdcall raw_ExtendSubPaths (
        /*[in]*/ struct IVGNode * Node2,
        VARIANT_BOOL JoinPaths,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_AveragePositionWith (
        /*[in]*/ struct IVGNode * Node2,
        VARIANT_BOOL JoinPaths ) = 0;
      virtual HRESULT __stdcall raw_GetPoint (
        /*[out]*/ struct IVGPoint * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_SetPoint (
        /*[in]*/ struct IVGPoint * ppVal ) = 0;
};

struct __declspec(uuid("b0580060-9aa4-44fd-9547-4f91eb757ac4"))
IVGSnapPoint : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    IVGApplicationPtr Application;
    __declspec(property(get=GetParent))
    IVGShapePtr Parent;
    __declspec(property(get=GetPositionX,put=PutPositionX))
    double PositionX;
    __declspec(property(get=GetPositionY,put=PutPositionY))
    double PositionY;
    __declspec(property(get=GetType))
    enum cdrPointType Type;
    __declspec(property(get=GetNode))
    IVGNodePtr Node;
    __declspec(property(get=GetIsDeletable))
    VARIANT_BOOL IsDeletable;
    __declspec(property(get=GetIsMovable))
    VARIANT_BOOL IsMovable;
    __declspec(property(get=GetCanChangeDirection))
    VARIANT_BOOL CanChangeDirection;
    __declspec(property(get=GetUsesDirection,put=PutUsesDirection))
    VARIANT_BOOL UsesDirection;
    __declspec(property(get=GetIsSelectable))
    VARIANT_BOOL IsSelectable;
    __declspec(property(get=GetDirection,put=PutDirection))
    double Direction;
    __declspec(property(get=GetSelected,put=PutSelected))
    VARIANT_BOOL Selected;
    __declspec(property(get=GetUser))
    IVGUserSnapPointPtr User;
    __declspec(property(get=GetObject))
    IVGObjectSnapPointPtr Object;
    __declspec(property(get=GetShape))
    IVGShapePtr Shape;
    __declspec(property(get=GetBBox))
    IVGBBoxSnapPointPtr BBox;
    __declspec(property(get=GetReferenceData))
    _bstr_t ReferenceData;
    __declspec(property(get=GetEdge))
    IVGEdgeSnapPointPtr Edge;

    //
    // Wrapper methods for error-handling
    //

    IVGApplicationPtr GetApplication ( );
    IVGShapePtr GetParent ( );
    double GetPositionX ( );
    void PutPositionX (
        double pVal );
    double GetPositionY ( );
    void PutPositionY (
        double pVal );
    enum cdrPointType GetType ( );
    IVGNodePtr GetNode ( );
    VARIANT_BOOL GetIsDeletable ( );
    VARIANT_BOOL GetIsMovable ( );
    VARIANT_BOOL GetCanChangeDirection ( );
    HRESULT GetPosition (
        double * PositionX,
        double * PositionY );
    VARIANT_BOOL GetUsesDirection ( );
    void PutUsesDirection (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetIsSelectable ( );
    double GetDirection ( );
    void PutDirection (
        double pVal );
    HRESULT SetPosition (
        double PositionX,
        double PositionY );
    VARIANT_BOOL GetSelected ( );
    void PutSelected (
        VARIANT_BOOL pVal );
    HRESULT CreateSelection ( );
    IVGUserSnapPointPtr GetUser ( );
    IVGObjectSnapPointPtr GetObject ( );
    IVGShapePtr GetShape ( );
    IVGBBoxSnapPointPtr GetBBox ( );
    _bstr_t GetReferenceData ( );
    HRESULT Delete ( );
    HRESULT Move (
        double OffsetX,
        double OffsetY );
    IVGEdgeSnapPointPtr GetEdge ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct IVGApplication * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ struct IVGShape * * ppVal ) = 0;
      virtual HRESULT __stdcall get_PositionX (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_PositionX (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_PositionY (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_PositionY (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum cdrPointType * pVal ) = 0;
      virtual HRESULT __stdcall get_Node (
        /*[out,retval]*/ struct IVGNode * * ppVal ) = 0;
      virtual HRESULT __stdcall get_IsDeletable (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_IsMovable (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_CanChangeDirection (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetPosition (
        /*[out]*/ double * PositionX,
        /*[out]*/ double * PositionY ) = 0;
      virtual HRESULT __stdcall get_UsesDirection (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_UsesDirection (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_IsSelectable (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_Direction (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Direction (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall raw_SetPosition (
        /*[in]*/ double PositionX,
        /*[in]*/ double PositionY ) = 0;
      virtual HRESULT __stdcall get_Selected (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_Selected (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall raw_CreateSelection ( ) = 0;
      virtual HRESULT __stdcall get_User (
        /*[out,retval]*/ struct IVGUserSnapPoint * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Object (
        /*[out,retval]*/ struct IVGObjectSnapPoint * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Shape (
        /*[out,retval]*/ struct IVGShape * * ppVal ) = 0;
      virtual HRESULT __stdcall get_BBox (
        /*[out,retval]*/ struct IVGBBoxSnapPoint * * ppVal ) = 0;
      virtual HRESULT __stdcall get_ReferenceData (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall raw_Move (
        /*[in]*/ double OffsetX,
        /*[in]*/ double OffsetY ) = 0;
      virtual HRESULT __stdcall get_Edge (
        /*[out,retval]*/ struct IVGEdgeSnapPoint * * ppVal ) = 0;
};

struct __declspec(uuid("b05800ab-9aa4-44fd-9547-4f91eb757ac4"))
IVGSnapPointRange : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetItem))
    IVGSnapPointPtr Item[];
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    IVGSnapPointPtr GetItem (
        long Index );
    HRESULT Move (
        double OffsetX,
        double OffsetY );
    HRESULT Delete ( );
    IUnknownPtr Get_NewEnum ( );
    VARIANT_BOOL Add (
        struct IVGSnapPoint * SnapPoint );
    VARIANT_BOOL Remove (
        long Index );
    VARIANT_BOOL RemoveByReference (
        _bstr_t ReferenceData );
    IVGSnapPointPtr Find (
        _bstr_t ReferenceData );
    HRESULT CreateSelection ( );
    HRESULT AddToSelection ( );
    HRESULT RemoveFromSelection ( );
    HRESULT ChangeDirection (
        double Direction,
        enum cdrTriState UsesDirection );
    HRESULT SetAutoSnap (
        VARIANT_BOOL AutoSnap );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IVGSnapPoint * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_Move (
        /*[in]*/ double OffsetX,
        /*[in]*/ double OffsetY ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * pVal ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ struct IVGSnapPoint * SnapPoint,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_Remove (
        /*[in]*/ long Index,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_RemoveByReference (
        /*[in]*/ BSTR ReferenceData,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_Find (
        /*[in]*/ BSTR ReferenceData,
        /*[out,retval]*/ struct IVGSnapPoint * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_CreateSelection ( ) = 0;
      virtual HRESULT __stdcall raw_AddToSelection ( ) = 0;
      virtual HRESULT __stdcall raw_RemoveFromSelection ( ) = 0;
      virtual HRESULT __stdcall raw_ChangeDirection (
        /*[in]*/ double Direction,
        /*[in]*/ enum cdrTriState UsesDirection ) = 0;
      virtual HRESULT __stdcall raw_SetAutoSnap (
        /*[in]*/ VARIANT_BOOL AutoSnap ) = 0;
};

struct __declspec(uuid("b0580061-9aa4-44fd-9547-4f91eb757ac4"))
IVGSnapPoints : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    IVGApplicationPtr Application;
    __declspec(property(get=GetParent))
    IVGShapePtr Parent;
    __declspec(property(get=GetItem))
    IVGSnapPointPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetSelection))
    IVGSnapPointRangePtr Selection;
    __declspec(property(get=GetAll))
    IVGSnapPointRangePtr All;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IVGApplicationPtr GetApplication ( );
    IVGShapePtr GetParent ( );
    IVGSnapPointPtr GetItem (
        long Index );
    IUnknownPtr Get_NewEnum ( );
    long GetCount ( );
    IVGSnapPointPtr User (
        _bstr_t ID );
    IVGSnapPointPtr BBox (
        enum cdrReferencePoint Type );
    IVGSnapPointPtr Object (
        enum cdrObjectSnapPointType Type );
    IVGSnapPointPtr FindClosest (
        enum cdrPointType TypeSet,
        double PositionX,
        double PositionY );
    IVGSnapPointRangePtr Range (
        SAFEARRAY * * References );
    IVGSnapPointPtr AddUserSnapPoint (
        double PositionX,
        double PositionY,
        double Direction,
        VARIANT_BOOL UseDirection );
    IVGSnapPointPtr AddUserSnapPointEx (
        _bstr_t ID,
        double PositionX,
        double PositionY,
        double Direction,
        VARIANT_BOOL UseDirection );
    IVGSnapPointRangePtr GetSelection ( );
    HRESULT ClearSelection ( );
    IVGSnapPointRangePtr GetAll ( );
    IVGSnapPointPtr Edge (
        long SegmentIndex,
        double SegmentOffset );
    IVGSnapPointPtr Auto ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct IVGApplication * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ struct IVGShape * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IVGSnapPoint * * ppVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * pVal ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_User (
        /*[in]*/ BSTR ID,
        /*[out,retval]*/ struct IVGSnapPoint * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_BBox (
        /*[in]*/ enum cdrReferencePoint Type,
        /*[out,retval]*/ struct IVGSnapPoint * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_Object (
        /*[in]*/ enum cdrObjectSnapPointType Type,
        /*[out,retval]*/ struct IVGSnapPoint * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_FindClosest (
        /*[in]*/ enum cdrPointType TypeSet,
        /*[in]*/ double PositionX,
        /*[in]*/ double PositionY,
        /*[out,retval]*/ struct IVGSnapPoint * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_Range (
        /*[in]*/ SAFEARRAY * * References,
        /*[out,retval]*/ struct IVGSnapPointRange * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_AddUserSnapPoint (
        /*[in]*/ double PositionX,
        /*[in]*/ double PositionY,
        /*[in]*/ double Direction,
        /*[in]*/ VARIANT_BOOL UseDirection,
        /*[out,retval]*/ struct IVGSnapPoint * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_AddUserSnapPointEx (
        /*[in]*/ BSTR ID,
        /*[in]*/ double PositionX,
        /*[in]*/ double PositionY,
        /*[in]*/ double Direction,
        /*[in]*/ VARIANT_BOOL UseDirection,
        /*[out,retval]*/ struct IVGSnapPoint * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Selection (
        /*[out,retval]*/ struct IVGSnapPointRange * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_ClearSelection ( ) = 0;
      virtual HRESULT __stdcall get_All (
        /*[out,retval]*/ struct IVGSnapPointRange * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_Edge (
        /*[in]*/ long SegmentIndex,
        /*[in]*/ double SegmentOffset,
        /*[out,retval]*/ struct IVGSnapPoint * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_Auto (
        /*[out,retval]*/ struct IVGSnapPoint * * ppVal ) = 0;
};

struct __declspec(uuid("b0580016-9aa4-44fd-9547-4f91eb757ac4"))
IVGConnector : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetStartPoint,put=PutStartPoint))
    IVGSnapPointPtr StartPoint;
    __declspec(property(get=GetEndPoint,put=PutEndPoint))
    IVGSnapPointPtr EndPoint;
    __declspec(property(get=GetType))
    enum cdrConnectorType Type;

    //
    // Wrapper methods for error-handling
    //

    IVGSnapPointPtr GetStartPoint ( );
    void PutStartPoint (
        struct IVGSnapPoint * ppVal );
    IVGSnapPointPtr GetEndPoint ( );
    void PutEndPoint (
        struct IVGSnapPoint * ppVal );
    enum cdrConnectorType GetType ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_StartPoint (
        /*[out,retval]*/ struct IVGSnapPoint * * ppVal ) = 0;
      virtual HRESULT __stdcall put_StartPoint (
        /*[in]*/ struct IVGSnapPoint * ppVal ) = 0;
      virtual HRESULT __stdcall get_EndPoint (
        /*[out,retval]*/ struct IVGSnapPoint * * ppVal ) = 0;
      virtual HRESULT __stdcall put_EndPoint (
        /*[in]*/ struct IVGSnapPoint * ppVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum cdrConnectorType * pVal ) = 0;
};

struct __declspec(uuid("b0580023-9aa4-44fd-9547-4f91eb757ac4"))
IVGDimensionLinear : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetType))
    enum cdrLinearDimensionType Type;
    __declspec(property(get=GetPoint1,put=PutPoint1))
    IVGSnapPointPtr Point1;
    __declspec(property(get=GetPoint2,put=PutPoint2))
    IVGSnapPointPtr Point2;
    __declspec(property(get=GetTextCentered,put=PutTextCentered))
    VARIANT_BOOL TextCentered;
    __declspec(property(get=GetTextX,put=PutTextX))
    double TextX;
    __declspec(property(get=GetTextY,put=PutTextY))
    double TextY;
    __declspec(property(get=GetStyle,put=PutStyle))
    enum cdrDimensionStyle Style;
    __declspec(property(get=GetShowUnits,put=PutShowUnits))
    VARIANT_BOOL ShowUnits;
    __declspec(property(get=GetUnits,put=PutUnits))
    enum cdrDimensionLinearUnits Units;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    enum cdrDimensionPlacement Placement;
    __declspec(property(get=GetHorizontalText,put=PutHorizontalText))
    VARIANT_BOOL HorizontalText;
    __declspec(property(get=GetReverseTerminators,put=PutReverseTerminators))
    VARIANT_BOOL ReverseTerminators;
    __declspec(property(get=GetAutoReverseTerminators,put=PutAutoReverseTerminators))
    VARIANT_BOOL AutoReverseTerminators;
    __declspec(property(get=GetReverseTerminatorLength))
    double ReverseTerminatorLength;
    __declspec(property(get=GetUseReverseTerminatorLength,put=PutUseReverseTerminatorLength))
    VARIANT_BOOL UseReverseTerminatorLength;
    __declspec(property(get=GetInnerDimensionLineVisible,put=PutInnerDimensionLineVisible))
    VARIANT_BOOL InnerDimensionLineVisible;

    //
    // Wrapper methods for error-handling
    //

    enum cdrLinearDimensionType GetType ( );
    IVGSnapPointPtr GetPoint1 ( );
    void PutPoint1 (
        struct IVGSnapPoint * ppVal );
    IVGSnapPointPtr GetPoint2 ( );
    void PutPoint2 (
        struct IVGSnapPoint * ppVal );
    VARIANT_BOOL GetTextCentered ( );
    void PutTextCentered (
        VARIANT_BOOL pVal );
    double GetTextX ( );
    void PutTextX (
        double pVal );
    double GetTextY ( );
    void PutTextY (
        double pVal );
    enum cdrDimensionStyle GetStyle ( );
    void PutStyle (
        enum cdrDimensionStyle pVal );
    VARIANT_BOOL GetShowUnits ( );
    void PutShowUnits (
        VARIANT_BOOL pVal );
    enum cdrDimensionLinearUnits GetUnits ( );
    void PutUnits (
        enum cdrDimensionLinearUnits pVal );
    enum cdrDimensionPlacement GetPlacement ( );
    void PutPlacement (
        enum cdrDimensionPlacement pVal );
    VARIANT_BOOL GetHorizontalText ( );
    void PutHorizontalText (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetReverseTerminators ( );
    void PutReverseTerminators (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetAutoReverseTerminators ( );
    void PutAutoReverseTerminators (
        VARIANT_BOOL pVal );
    double GetReverseTerminatorLength ( );
    VARIANT_BOOL GetUseReverseTerminatorLength ( );
    void PutUseReverseTerminatorLength (
        VARIANT_BOOL pVal );
    HRESULT SetReverseTerminatorLength (
        double Length );
    VARIANT_BOOL GetInnerDimensionLineVisible ( );
    void PutInnerDimensionLineVisible (
        VARIANT_BOOL pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum cdrLinearDimensionType * pVal ) = 0;
      virtual HRESULT __stdcall get_Point1 (
        /*[out,retval]*/ struct IVGSnapPoint * * ppVal ) = 0;
      virtual HRESULT __stdcall put_Point1 (
        /*[in]*/ struct IVGSnapPoint * ppVal ) = 0;
      virtual HRESULT __stdcall get_Point2 (
        /*[out,retval]*/ struct IVGSnapPoint * * ppVal ) = 0;
      virtual HRESULT __stdcall put_Point2 (
        /*[in]*/ struct IVGSnapPoint * ppVal ) = 0;
      virtual HRESULT __stdcall get_TextCentered (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_TextCentered (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_TextX (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_TextX (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_TextY (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_TextY (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Style (
        /*[out,retval]*/ enum cdrDimensionStyle * pVal ) = 0;
      virtual HRESULT __stdcall put_Style (
        /*[in]*/ enum cdrDimensionStyle pVal ) = 0;
      virtual HRESULT __stdcall get_ShowUnits (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_ShowUnits (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Units (
        /*[out,retval]*/ enum cdrDimensionLinearUnits * pVal ) = 0;
      virtual HRESULT __stdcall put_Units (
        /*[in]*/ enum cdrDimensionLinearUnits pVal ) = 0;
      virtual HRESULT __stdcall get_Placement (
        /*[out,retval]*/ enum cdrDimensionPlacement * pVal ) = 0;
      virtual HRESULT __stdcall put_Placement (
        /*[in]*/ enum cdrDimensionPlacement pVal ) = 0;
      virtual HRESULT __stdcall get_HorizontalText (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_HorizontalText (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_ReverseTerminators (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_ReverseTerminators (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_AutoReverseTerminators (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_AutoReverseTerminators (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_ReverseTerminatorLength (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_UseReverseTerminatorLength (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_UseReverseTerminatorLength (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall raw_SetReverseTerminatorLength (
        /*[in]*/ double Length ) = 0;
      virtual HRESULT __stdcall get_InnerDimensionLineVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_InnerDimensionLineVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
};

struct __declspec(uuid("b0580022-9aa4-44fd-9547-4f91eb757ac4"))
IVGDimensionAngular : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCenter,put=PutCenter))
    IVGSnapPointPtr Center;
    __declspec(property(get=GetPoint1,put=PutPoint1))
    IVGSnapPointPtr Point1;
    __declspec(property(get=GetPoint2,put=PutPoint2))
    IVGSnapPointPtr Point2;
    __declspec(property(get=GetTextX,put=PutTextX))
    double TextX;
    __declspec(property(get=GetTextY,put=PutTextY))
    double TextY;
    __declspec(property(get=GetShowUnits,put=PutShowUnits))
    VARIANT_BOOL ShowUnits;
    __declspec(property(get=GetUnits,put=PutUnits))
    enum cdrDimensionAngularUnits Units;
    __declspec(property(get=GetClockwise,put=PutClockwise))
    VARIANT_BOOL Clockwise;
    __declspec(property(get=GetInnerExtensionLinesVisible,put=PutInnerExtensionLinesVisible))
    VARIANT_BOOL InnerExtensionLinesVisible;

    //
    // Wrapper methods for error-handling
    //

    IVGSnapPointPtr GetCenter ( );
    void PutCenter (
        struct IVGSnapPoint * ppVal );
    IVGSnapPointPtr GetPoint1 ( );
    void PutPoint1 (
        struct IVGSnapPoint * ppVal );
    IVGSnapPointPtr GetPoint2 ( );
    void PutPoint2 (
        struct IVGSnapPoint * ppVal );
    double GetTextX ( );
    void PutTextX (
        double pVal );
    double GetTextY ( );
    void PutTextY (
        double pVal );
    VARIANT_BOOL GetShowUnits ( );
    void PutShowUnits (
        VARIANT_BOOL pVal );
    enum cdrDimensionAngularUnits GetUnits ( );
    void PutUnits (
        enum cdrDimensionAngularUnits pVal );
    VARIANT_BOOL GetClockwise ( );
    void PutClockwise (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetInnerExtensionLinesVisible ( );
    void PutInnerExtensionLinesVisible (
        VARIANT_BOOL pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Center (
        /*[out,retval]*/ struct IVGSnapPoint * * ppVal ) = 0;
      virtual HRESULT __stdcall put_Center (
        /*[in]*/ struct IVGSnapPoint * ppVal ) = 0;
      virtual HRESULT __stdcall get_Point1 (
        /*[out,retval]*/ struct IVGSnapPoint * * ppVal ) = 0;
      virtual HRESULT __stdcall put_Point1 (
        /*[in]*/ struct IVGSnapPoint * ppVal ) = 0;
      virtual HRESULT __stdcall get_Point2 (
        /*[out,retval]*/ struct IVGSnapPoint * * ppVal ) = 0;
      virtual HRESULT __stdcall put_Point2 (
        /*[in]*/ struct IVGSnapPoint * ppVal ) = 0;
      virtual HRESULT __stdcall get_TextX (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_TextX (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_TextY (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_TextY (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ShowUnits (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_ShowUnits (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Units (
        /*[out,retval]*/ enum cdrDimensionAngularUnits * pVal ) = 0;
      virtual HRESULT __stdcall put_Units (
        /*[in]*/ enum cdrDimensionAngularUnits pVal ) = 0;
      virtual HRESULT __stdcall get_Clockwise (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_Clockwise (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_InnerExtensionLinesVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_InnerExtensionLinesVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
};

struct __declspec(uuid("b0580059-9aa4-44fd-9547-4f91eb757ac4"))
IVGSegment : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    IVGApplicationPtr Application;
    __declspec(property(get=GetParent))
    IVGCurvePtr Parent;
    __declspec(property(get=GetType,put=PutType))
    enum cdrSegmentType Type;
    __declspec(property(get=GetEndingControlPointY,put=PutEndingControlPointY))
    double EndingControlPointY;
    __declspec(property(get=GetSubPath))
    IVGSubPathPtr SubPath;
    __declspec(property(get=GetLength))
    double Length;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetSubPathIndex))
    long SubPathIndex;
    __declspec(property(get=GetAbsoluteIndex))
    long AbsoluteIndex;
    __declspec(property(get=GetStartingControlPointLength,put=PutStartingControlPointLength))
    double StartingControlPointLength;
    __declspec(property(get=GetStartingControlPointAngle,put=PutStartingControlPointAngle))
    double StartingControlPointAngle;
    __declspec(property(get=GetEndingControlPointLength,put=PutEndingControlPointLength))
    double EndingControlPointLength;
    __declspec(property(get=GetSelected,put=PutSelected))
    VARIANT_BOOL Selected;
    __declspec(property(get=GetEndingControlPointAngle,put=PutEndingControlPointAngle))
    double EndingControlPointAngle;
    __declspec(property(get=GetBoundingBox))
    IVGRectPtr BoundingBox;
    __declspec(property(get=GetStartNode))
    IVGNodePtr StartNode;
    __declspec(property(get=GetEndNode))
    IVGNodePtr EndNode;
    __declspec(property(get=GetStartingControlPointX,put=PutStartingControlPointX))
    double StartingControlPointX;
    __declspec(property(get=GetStartingControlPointY,put=PutStartingControlPointY))
    double StartingControlPointY;
    __declspec(property(get=GetEndingControlPointX,put=PutEndingControlPointX))
    double EndingControlPointX;

    //
    // Wrapper methods for error-handling
    //

    IVGApplicationPtr GetApplication ( );
    IVGCurvePtr GetParent ( );
    enum cdrSegmentType GetType ( );
    void PutType (
        enum cdrSegmentType pVal );
    IVGSubPathPtr GetSubPath ( );
    double GetLength ( );
    long GetIndex ( );
    long GetSubPathIndex ( );
    long GetAbsoluteIndex ( );
    double GetStartingControlPointLength ( );
    void PutStartingControlPointLength (
        double pVal );
    double GetStartingControlPointAngle ( );
    void PutStartingControlPointAngle (
        double pVal );
    double GetEndingControlPointLength ( );
    void PutEndingControlPointLength (
        double pVal );
    double GetEndingControlPointAngle ( );
    void PutEndingControlPointAngle (
        double pVal );
    HRESULT GetPointPositionAt (
        double * x,
        double * y,
        double Offset,
        enum cdrSegmentOffsetType OffsetType );
    IVGNodePtr BreakApartAt (
        double Offset,
        enum cdrSegmentOffsetType OffsetType );
    IVGNodePtr AddNodeAt (
        double Offset,
        enum cdrSegmentOffsetType OffsetType );
    double GetPerpendicularAt (
        double Offset,
        enum cdrSegmentOffsetType OffsetType );
    double GetTangentAt (
        double Offset,
        enum cdrSegmentOffsetType OffsetType );
    IVGCrossPointsPtr GetIntersections (
        struct IVGSegment * Target,
        enum cdrSegmentOffsetType OffsetType );
    IVGSegmentPtr Next ( );
    IVGSegmentPtr Previous ( );
    IVGNodePtr GetStartNode ( );
    IVGNodePtr GetEndNode ( );
    double GetStartingControlPointX ( );
    void PutStartingControlPointX (
        double pVal );
    double GetStartingControlPointY ( );
    void PutStartingControlPointY (
        double pVal );
    double GetEndingControlPointX ( );
    void PutEndingControlPointX (
        double pVal );
    double GetEndingControlPointY ( );
    void PutEndingControlPointY (
        double pVal );
    long GetPeaks (
        double Angle,
        double * Offset1,
        double * Offset2,
        enum cdrSegmentOffsetType OffsetType );
    long GetBendPoints (
        double * Offset1,
        double * Offset2,
        enum cdrSegmentOffsetType OffsetType );
    double GetCurvatureAt (
        double Offset,
        enum cdrSegmentOffsetType OffsetType );
    double GetCurveSpeedAt (
        double Offset,
        enum cdrSegmentOffsetType OffsetType );
    VARIANT_BOOL FindParamOffset (
        double AbsoluteOffset,
        double * ParamOffset,
        double * Remainder );
    double GetAbsoluteOffset (
        double ParamOffset );
    HRESULT GetStartingControlPointPosition (
        double * PositionX,
        double * PositionY );
    HRESULT SetStartingControlPointPosition (
        double PositionX,
        double PositionY );
    HRESULT GetEndingControlPointPosition (
        double * PositionX,
        double * PositionY );
    HRESULT SetEndingControlPointPosition (
        double PositionX,
        double PositionY );
    IVGCurvePtr GetCopy ( );
    VARIANT_BOOL GetSelected ( );
    void PutSelected (
        VARIANT_BOOL pVal );
    HRESULT CreateSelection ( );
    IVGCurvePtr GetPolyline (
        long CurvePrecision );
    VARIANT_BOOL IsRectOnEdge (
        double x1,
        double y1,
        double x2,
        double y2 );
    VARIANT_BOOL FindClosestPoint (
        double x,
        double y,
        double * ParamOffset );
    VARIANT_BOOL FindParamOffsetAtPoint (
        double x,
        double y,
        double * ParamOffset,
        double HotArea );
    VARIANT_BOOL GetBoundingBox (
        double * x,
        double * y,
        double * Width,
        double * Height );
    IVGRectPtr GetBoundingBox ( );
    IVGVectorPtr GetPerpendicularVectorAt (
        double Offset,
        enum cdrSegmentOffsetType OffsetType,
        VARIANT_BOOL Normalize );
    IVGVectorPtr GetTangentVectorAt (
        double Offset,
        enum cdrSegmentOffsetType OffsetType,
        VARIANT_BOOL Normalize );
    IVGPointPtr GetPointAt (
        double Offset,
        enum cdrSegmentOffsetType OffsetType );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct IVGApplication * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ struct IVGCurve * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum cdrSegmentType * pVal ) = 0;
      virtual HRESULT __stdcall put_Type (
        /*[in]*/ enum cdrSegmentType pVal ) = 0;
      virtual HRESULT __stdcall get_SubPath (
        /*[out,retval]*/ struct IVGSubPath * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Length (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_Index (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_SubPathIndex (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_AbsoluteIndex (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_StartingControlPointLength (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_StartingControlPointLength (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_StartingControlPointAngle (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_StartingControlPointAngle (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_EndingControlPointLength (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_EndingControlPointLength (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_EndingControlPointAngle (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_EndingControlPointAngle (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall raw_GetPointPositionAt (
        /*[out]*/ double * x,
        /*[out]*/ double * y,
        /*[in]*/ double Offset,
        /*[in]*/ enum cdrSegmentOffsetType OffsetType ) = 0;
      virtual HRESULT __stdcall raw_BreakApartAt (
        /*[in]*/ double Offset,
        /*[in]*/ enum cdrSegmentOffsetType OffsetType,
        /*[out,retval]*/ struct IVGNode * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_AddNodeAt (
        /*[in]*/ double Offset,
        /*[in]*/ enum cdrSegmentOffsetType OffsetType,
        /*[out,retval]*/ struct IVGNode * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_GetPerpendicularAt (
        /*[in]*/ double Offset,
        /*[in]*/ enum cdrSegmentOffsetType OffsetType,
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetTangentAt (
        /*[in]*/ double Offset,
        /*[in]*/ enum cdrSegmentOffsetType OffsetType,
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetIntersections (
        /*[in]*/ struct IVGSegment * Target,
        /*[in]*/ enum cdrSegmentOffsetType OffsetType,
        /*[out,retval]*/ struct IVGCrossPoints * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_Next (
        /*[out,retval]*/ struct IVGSegment * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_Previous (
        /*[out,retval]*/ struct IVGSegment * * ppVal ) = 0;
      virtual HRESULT __stdcall get_StartNode (
        /*[out,retval]*/ struct IVGNode * * ppVal ) = 0;
      virtual HRESULT __stdcall get_EndNode (
        /*[out,retval]*/ struct IVGNode * * ppVal ) = 0;
      virtual HRESULT __stdcall get_StartingControlPointX (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_StartingControlPointX (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_StartingControlPointY (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_StartingControlPointY (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_EndingControlPointX (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_EndingControlPointX (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_EndingControlPointY (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_EndingControlPointY (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall raw_GetPeaks (
        /*[in]*/ double Angle,
        /*[out]*/ double * Offset1,
        /*[out]*/ double * Offset2,
        /*[in]*/ enum cdrSegmentOffsetType OffsetType,
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetBendPoints (
        /*[out]*/ double * Offset1,
        /*[out]*/ double * Offset2,
        /*[in]*/ enum cdrSegmentOffsetType OffsetType,
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetCurvatureAt (
        /*[in]*/ double Offset,
        /*[in]*/ enum cdrSegmentOffsetType OffsetType,
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetCurveSpeedAt (
        /*[in]*/ double Offset,
        /*[in]*/ enum cdrSegmentOffsetType OffsetType,
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall raw_FindParamOffset (
        /*[in]*/ double AbsoluteOffset,
        /*[out]*/ double * ParamOffset,
        /*[out]*/ double * Remainder,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetAbsoluteOffset (
        /*[in]*/ double ParamOffset,
        /*[out,retval]*/ double * AbsoluteOffset ) = 0;
      virtual HRESULT __stdcall raw_GetStartingControlPointPosition (
        /*[out]*/ double * PositionX,
        /*[out]*/ double * PositionY ) = 0;
      virtual HRESULT __stdcall raw_SetStartingControlPointPosition (
        /*[in]*/ double PositionX,
        /*[in]*/ double PositionY ) = 0;
      virtual HRESULT __stdcall raw_GetEndingControlPointPosition (
        /*[out]*/ double * PositionX,
        /*[out]*/ double * PositionY ) = 0;
      virtual HRESULT __stdcall raw_SetEndingControlPointPosition (
        /*[in]*/ double PositionX,
        /*[in]*/ double PositionY ) = 0;
      virtual HRESULT __stdcall raw_GetCopy (
        /*[out,retval]*/ struct IVGCurve * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Selected (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_Selected (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall raw_CreateSelection ( ) = 0;
      virtual HRESULT __stdcall raw_GetPolyline (
        /*[in]*/ long CurvePrecision,
        /*[out,retval]*/ struct IVGCurve * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_IsRectOnEdge (
        /*[in]*/ double x1,
        /*[in]*/ double y1,
        /*[in]*/ double x2,
        /*[in]*/ double y2,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_FindClosestPoint (
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[out]*/ double * ParamOffset,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_FindParamOffsetAtPoint (
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[out]*/ double * ParamOffset,
        /*[in]*/ double HotArea,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetBoundingBox (
        /*[out]*/ double * x,
        /*[out]*/ double * y,
        /*[out]*/ double * Width,
        /*[out]*/ double * Height,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_BoundingBox (
        /*[out,retval]*/ struct IVGRect * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_GetPerpendicularVectorAt (
        /*[in]*/ double Offset,
        /*[in]*/ enum cdrSegmentOffsetType OffsetType,
        /*[in]*/ VARIANT_BOOL Normalize,
        /*[out,retval]*/ struct IVGVector * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_GetTangentVectorAt (
        /*[in]*/ double Offset,
        /*[in]*/ enum cdrSegmentOffsetType OffsetType,
        /*[in]*/ VARIANT_BOOL Normalize,
        /*[out,retval]*/ struct IVGVector * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_GetPointAt (
        /*[in]*/ double Offset,
        /*[in]*/ enum cdrSegmentOffsetType OffsetType,
        /*[out,retval]*/ struct IVGPoint * * ppVal ) = 0;
};

struct __declspec(uuid("b05800d2-9aa4-44fd-9547-4f91eb757ac4"))
IVGVector : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Getx,put=Putx))
    double x;
    __declspec(property(get=Gety,put=Puty))
    double y;
    __declspec(property(get=GetLength,put=PutLength))
    double Length;
    __declspec(property(get=GetAngle,put=PutAngle))
    double Angle;

    //
    // Wrapper methods for error-handling
    //

    double Getx ( );
    void Putx (
        double pVal );
    double Gety ( );
    void Puty (
        double pVal );
    double GetLength ( );
    void PutLength (
        double pVal );
    double GetAngle ( );
    void PutAngle (
        double pVal );
    IVGPointPtr GetOffsettedPoint (
        struct IVGPoint * Origin,
        double Distance );
    HRESULT Add (
        struct IVGVector * Vector );
    HRESULT Subtract (
        struct IVGVector * Vector );
    HRESULT MultiplyBy (
        double Multiplier );
    HRESULT Negate ( );
    HRESULT Normalize ( );
    double AngleBetween (
        struct IVGVector * Vector );
    double SmallAngleBetween (
        struct IVGVector * Vector );
    double DotProduct (
        struct IVGVector * Vector );
    double CrossProduct (
        struct IVGVector * Vector );
    HRESULT SetFromPoints (
        struct IVGPoint * Start,
        struct IVGPoint * End );
    IVGVectorPtr ProjectOnto (
        struct IVGVector * Vector );
    IVGVectorPtr GetCopy ( );
    HRESULT BindToDocument (
        struct IVGDocument * Document );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_x (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_x (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_y (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_y (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Length (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Length (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Angle (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Angle (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall raw_GetOffsettedPoint (
        /*[in]*/ struct IVGPoint * Origin,
        /*[in]*/ double Distance,
        /*[out,retval]*/ struct IVGPoint * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ struct IVGVector * Vector ) = 0;
      virtual HRESULT __stdcall raw_Subtract (
        /*[in]*/ struct IVGVector * Vector ) = 0;
      virtual HRESULT __stdcall raw_MultiplyBy (
        /*[in]*/ double Multiplier ) = 0;
      virtual HRESULT __stdcall raw_Negate ( ) = 0;
      virtual HRESULT __stdcall raw_Normalize ( ) = 0;
      virtual HRESULT __stdcall raw_AngleBetween (
        /*[in]*/ struct IVGVector * Vector,
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall raw_SmallAngleBetween (
        /*[in]*/ struct IVGVector * Vector,
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall raw_DotProduct (
        /*[in]*/ struct IVGVector * Vector,
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall raw_CrossProduct (
        /*[in]*/ struct IVGVector * Vector,
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetFromPoints (
        /*[in]*/ struct IVGPoint * Start,
        /*[in]*/ struct IVGPoint * End ) = 0;
      virtual HRESULT __stdcall raw_ProjectOnto (
        /*[in]*/ struct IVGVector * Vector,
        /*[out,retval]*/ struct IVGVector * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_GetCopy (
        /*[out,retval]*/ struct IVGVector * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_BindToDocument (
        /*[in]*/ struct IVGDocument * Document ) = 0;
};

struct __declspec(uuid("b05800d0-9aa4-44fd-9547-4f91eb757ac4"))
IVGPoint : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Getx,put=Putx))
    double x;
    __declspec(property(get=Gety,put=Puty))
    double y;

    //
    // Wrapper methods for error-handling
    //

    double Getx ( );
    void Putx (
        double pVal );
    double Gety ( );
    void Puty (
        double pVal );
    HRESULT Add (
        struct IVGVector * Vector );
    HRESULT Subtract (
        struct IVGVector * Vector );
    double DistanceTo (
        struct IVGPoint * Point );
    IVGPointPtr GetCopy ( );
    HRESULT BindToDocument (
        struct IVGDocument * Document );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_x (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_x (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_y (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_y (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ struct IVGVector * Vector ) = 0;
      virtual HRESULT __stdcall raw_Subtract (
        /*[in]*/ struct IVGVector * Vector ) = 0;
      virtual HRESULT __stdcall raw_DistanceTo (
        /*[in]*/ struct IVGPoint * Point,
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetCopy (
        /*[out,retval]*/ struct IVGPoint * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_BindToDocument (
        /*[in]*/ struct IVGDocument * Document ) = 0;
};

struct __declspec(uuid("b05800d1-9aa4-44fd-9547-4f91eb757ac4"))
IVGPointRange : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem,put=PutItem))
    IVGPointPtr Item[];
    __declspec(property(get=GetFirst))
    IVGPointPtr First;
    __declspec(property(get=GetLast))
    IVGPointPtr Last;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IVGPointPtr GetItem (
        long Index );
    void PutItem (
        long Index,
        struct IVGPoint * ppVal );
    IUnknownPtr Get_NewEnum ( );
    IVGPointPtr GetFirst ( );
    IVGPointPtr GetLast ( );
    long GetCount ( );
    HRESULT AddPoint (
        struct IVGPoint * Point );
    HRESULT AddPointXY (
        double x,
        double y );
    HRESULT InsertPoint (
        long Index,
        struct IVGPoint * Point );
    HRESULT AddPoints (
        struct IVGPointRange * Points );
    HRESULT InsertPoints (
        long Index,
        struct IVGPointRange * Points );
    HRESULT Remove (
        long Index );
    HRESULT RemoveRange (
        long StartIndex,
        long EndIndex );
    HRESULT RemoveAll ( );
    HRESULT RemoveAdjacentDuplicates ( );
    HRESULT Reverse ( );
    HRESULT Smoothen (
        double NumberOfPointsToSmoothAcross,
        VARIANT_BOOL Closed );
    IVGPointRangePtr GetCopy ( );
    HRESULT BindToDocument (
        struct IVGDocument * Document );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IVGPoint * * ppVal ) = 0;
      virtual HRESULT __stdcall put_Item (
        /*[in]*/ long Index,
        /*[in]*/ struct IVGPoint * ppVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * pVal ) = 0;
      virtual HRESULT __stdcall get_First (
        /*[out,retval]*/ struct IVGPoint * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Last (
        /*[out,retval]*/ struct IVGPoint * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_AddPoint (
        /*[in]*/ struct IVGPoint * Point ) = 0;
      virtual HRESULT __stdcall raw_AddPointXY (
        /*[in]*/ double x,
        /*[in]*/ double y ) = 0;
      virtual HRESULT __stdcall raw_InsertPoint (
        /*[in]*/ long Index,
        /*[in]*/ struct IVGPoint * Point ) = 0;
      virtual HRESULT __stdcall raw_AddPoints (
        /*[in]*/ struct IVGPointRange * Points ) = 0;
      virtual HRESULT __stdcall raw_InsertPoints (
        /*[in]*/ long Index,
        /*[in]*/ struct IVGPointRange * Points ) = 0;
      virtual HRESULT __stdcall raw_Remove (
        /*[in]*/ long Index ) = 0;
      virtual HRESULT __stdcall raw_RemoveRange (
        /*[in]*/ long StartIndex,
        /*[in]*/ long EndIndex ) = 0;
      virtual HRESULT __stdcall raw_RemoveAll ( ) = 0;
      virtual HRESULT __stdcall raw_RemoveAdjacentDuplicates ( ) = 0;
      virtual HRESULT __stdcall raw_Reverse ( ) = 0;
      virtual HRESULT __stdcall raw_Smoothen (
        /*[in]*/ double NumberOfPointsToSmoothAcross,
        /*[in]*/ VARIANT_BOOL Closed ) = 0;
      virtual HRESULT __stdcall raw_GetCopy (
        /*[out,retval]*/ struct IVGPointRange * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_BindToDocument (
        /*[in]*/ struct IVGDocument * Document ) = 0;
};

struct __declspec(uuid("b05800d3-9aa4-44fd-9547-4f91eb757ac4"))
IVGTransformMatrix : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Getd11,put=Putd11))
    double d11;
    __declspec(property(get=GetIsSkewedOrRotatedOrMirrored))
    VARIANT_BOOL IsSkewedOrRotatedOrMirrored;
    __declspec(property(get=Getd12,put=Putd12))
    double d12;
    __declspec(property(get=GetContainsOnlyTranslation))
    VARIANT_BOOL ContainsOnlyTranslation;
    __declspec(property(get=Getd21,put=Putd21))
    double d21;
    __declspec(property(get=GetIsSkewedOrRotated))
    VARIANT_BOOL IsSkewedOrRotated;
    __declspec(property(get=Getd22,put=Putd22))
    double d22;
    __declspec(property(get=GetIsScaledOrSkewedOrRotated))
    VARIANT_BOOL IsScaledOrSkewedOrRotated;
    __declspec(property(get=GetTranslationX,put=PutTranslationX))
    double TranslationX;
    __declspec(property(get=GetIsOrthogonal))
    VARIANT_BOOL IsOrthogonal;
    __declspec(property(get=GetTranslationY,put=PutTranslationY))
    double TranslationY;
    __declspec(property(get=GetIsOrthonormalAxisAligned))
    VARIANT_BOOL IsOrthonormalAxisAligned;
    __declspec(property(get=GetTranslation,put=PutTranslation))
    IVGVectorPtr Translation;
    __declspec(property(get=GetIsOrthonormal))
    VARIANT_BOOL IsOrthonormal;
    __declspec(property(get=GetIsMirrored))
    VARIANT_BOOL IsMirrored;
    __declspec(property(get=GetIsScaled))
    VARIANT_BOOL IsScaled;
    __declspec(property(get=GetIsTranslated))
    VARIANT_BOOL IsTranslated;
    __declspec(property(get=GetIsIdentity))
    VARIANT_BOOL IsIdentity;

    //
    // Wrapper methods for error-handling
    //

    double Getd11 ( );
    void Putd11 (
        double pVal );
    double Getd12 ( );
    void Putd12 (
        double pVal );
    double Getd21 ( );
    void Putd21 (
        double pVal );
    double Getd22 ( );
    void Putd22 (
        double pVal );
    double GetTranslationX ( );
    void PutTranslationX (
        double pVal );
    double GetTranslationY ( );
    void PutTranslationY (
        double pVal );
    IVGVectorPtr GetTranslation ( );
    void PutTranslation (
        struct IVGVector * ppVal );
    HRESULT SetToIdentity ( );
    HRESULT Invert ( );
    HRESULT TranslateBy (
        double x,
        double y );
    HRESULT TranslateByVector (
        struct IVGVector * Vector );
    HRESULT SetTranslation (
        double x,
        double y );
    HRESULT Rotate (
        double Angle );
    HRESULT RotateAround (
        double Angle,
        double x,
        double y );
    HRESULT Scale (
        double ScaleX,
        double ScaleY );
    HRESULT ScaleAround (
        double ScaleX,
        double ScaleY,
        double x,
        double y );
    HRESULT Transform (
        struct IVGTransformMatrix * TransformMatrix );
    HRESULT TransformAround (
        struct IVGTransformMatrix * TransformMatrix,
        double x,
        double y );
    HRESULT TransformPoint (
        struct IVGPoint * Point );
    HRESULT TransformPoints (
        struct IVGPointRange * Points );
    HRESULT TransformVector (
        struct IVGVector * Vector );
    HRESULT UntransformPoint (
        struct IVGPoint * Point );
    HRESULT UntransformPoints (
        struct IVGPointRange * Points );
    HRESULT UntransformVector (
        struct IVGVector * Vector );
    VARIANT_BOOL GetIsIdentity ( );
    VARIANT_BOOL GetIsSkewedOrRotatedOrMirrored ( );
    VARIANT_BOOL GetContainsOnlyTranslation ( );
    VARIANT_BOOL GetIsSkewedOrRotated ( );
    VARIANT_BOOL GetIsScaledOrSkewedOrRotated ( );
    VARIANT_BOOL GetIsOrthogonal ( );
    VARIANT_BOOL GetIsOrthonormalAxisAligned ( );
    VARIANT_BOOL GetIsOrthonormal ( );
    VARIANT_BOOL GetIsMirrored ( );
    VARIANT_BOOL GetIsScaled ( );
    VARIANT_BOOL GetIsTranslated ( );
    IVGTransformMatrixPtr GetCopy ( );
    HRESULT BindToDocument (
        struct IVGDocument * Document );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_d11 (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_d11 (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_d12 (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_d12 (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_d21 (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_d21 (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_d22 (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_d22 (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_TranslationX (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_TranslationX (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_TranslationY (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_TranslationY (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Translation (
        /*[out,retval]*/ struct IVGVector * * ppVal ) = 0;
      virtual HRESULT __stdcall put_Translation (
        /*[in]*/ struct IVGVector * ppVal ) = 0;
      virtual HRESULT __stdcall raw_SetToIdentity ( ) = 0;
      virtual HRESULT __stdcall raw_Invert ( ) = 0;
      virtual HRESULT __stdcall raw_TranslateBy (
        /*[in]*/ double x,
        /*[in]*/ double y ) = 0;
      virtual HRESULT __stdcall raw_TranslateByVector (
        struct IVGVector * Vector ) = 0;
      virtual HRESULT __stdcall raw_SetTranslation (
        /*[in]*/ double x,
        /*[in]*/ double y ) = 0;
      virtual HRESULT __stdcall raw_Rotate (
        /*[in]*/ double Angle ) = 0;
      virtual HRESULT __stdcall raw_RotateAround (
        /*[in]*/ double Angle,
        /*[in]*/ double x,
        /*[in]*/ double y ) = 0;
      virtual HRESULT __stdcall raw_Scale (
        /*[in]*/ double ScaleX,
        /*[in]*/ double ScaleY ) = 0;
      virtual HRESULT __stdcall raw_ScaleAround (
        /*[in]*/ double ScaleX,
        /*[in]*/ double ScaleY,
        /*[in]*/ double x,
        /*[in]*/ double y ) = 0;
      virtual HRESULT __stdcall raw_Transform (
        /*[in]*/ struct IVGTransformMatrix * TransformMatrix ) = 0;
      virtual HRESULT __stdcall raw_TransformAround (
        /*[in]*/ struct IVGTransformMatrix * TransformMatrix,
        /*[in]*/ double x,
        /*[in]*/ double y ) = 0;
      virtual HRESULT __stdcall raw_TransformPoint (
        /*[in]*/ struct IVGPoint * Point ) = 0;
      virtual HRESULT __stdcall raw_TransformPoints (
        /*[in]*/ struct IVGPointRange * Points ) = 0;
      virtual HRESULT __stdcall raw_TransformVector (
        /*[in]*/ struct IVGVector * Vector ) = 0;
      virtual HRESULT __stdcall raw_UntransformPoint (
        /*[in]*/ struct IVGPoint * Point ) = 0;
      virtual HRESULT __stdcall raw_UntransformPoints (
        /*[in]*/ struct IVGPointRange * Points ) = 0;
      virtual HRESULT __stdcall raw_UntransformVector (
        /*[in]*/ struct IVGVector * Vector ) = 0;
      virtual HRESULT __stdcall get_IsIdentity (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_IsSkewedOrRotatedOrMirrored (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_ContainsOnlyTranslation (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_IsSkewedOrRotated (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_IsScaledOrSkewedOrRotated (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_IsOrthogonal (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_IsOrthonormalAxisAligned (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_IsOrthonormal (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_IsMirrored (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_IsScaled (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_IsTranslated (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetCopy (
        /*[out,retval]*/ struct IVGTransformMatrix * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_BindToDocument (
        /*[in]*/ struct IVGDocument * Document ) = 0;
};

struct __declspec(uuid("b0580054-9aa4-44fd-9547-4f91eb757ac4"))
IVGProperties : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem,put=PutItem))
    _variant_t Item[][];
    __declspec(property(get=GetIndex))
    long Index[][];
    __declspec(property(get=GetItemByIndex))
    _variant_t ItemByIndex[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetItem (
        _bstr_t Name,
        long ID );
    void PutItem (
        _bstr_t Name,
        long ID,
        const _variant_t & pVal );
    IUnknownPtr Get_NewEnum ( );
    long GetIndex (
        _bstr_t Name,
        long ID );
    _variant_t GetItemByIndex (
        long Index );
    HRESULT Delete (
        _bstr_t Name,
        long ID );
    HRESULT DeleteByIndex (
        long Index );
    long GetCount ( );
    HRESULT Description (
        long Index,
        BSTR * Name,
        long * ID );
    HRESULT PutFile (
        _bstr_t Name,
        long ID,
        _bstr_t FileName );
    HRESULT GetFile (
        _bstr_t Name,
        long ID,
        _bstr_t FileName );
    VARIANT_BOOL Exists (
        _bstr_t Name,
        long ID );
    VARIANT_BOOL DeleteAll (
        _bstr_t Name );
    IVGPointPtr GetPoint (
        _bstr_t uuidName );
    HRESULT SetPoint (
        _bstr_t uuidName,
        struct IVGPoint * pVal );
    IVGVectorPtr GetVector (
        _bstr_t uuidName );
    HRESULT SetVector (
        _bstr_t uuidName,
        struct IVGVector * pVal );
    IVGCurvePtr GetCurve (
        _bstr_t uuidName );
    HRESULT SetCurve (
        _bstr_t uuidName,
        struct IVGCurve * pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Item (
        /*[in]*/ BSTR Name,
        /*[in]*/ long ID,
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_Item (
        /*[in]*/ BSTR Name,
        /*[in]*/ long ID,
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * pVal ) = 0;
      virtual HRESULT __stdcall get_Index (
        /*[in]*/ BSTR Name,
        /*[in]*/ long ID,
        /*[out,retval]*/ long * pIndex ) = 0;
      virtual HRESULT __stdcall get_ItemByIndex (
        /*[in]*/ long Index,
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[in]*/ BSTR Name,
        /*[in]*/ long ID ) = 0;
      virtual HRESULT __stdcall raw_DeleteByIndex (
        /*[in]*/ long Index ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_Description (
        /*[in]*/ long Index,
        /*[out]*/ BSTR * Name,
        /*[out]*/ long * ID ) = 0;
      virtual HRESULT __stdcall raw_PutFile (
        /*[in]*/ BSTR Name,
        /*[in]*/ long ID,
        /*[in]*/ BSTR FileName ) = 0;
      virtual HRESULT __stdcall raw_GetFile (
        /*[in]*/ BSTR Name,
        /*[in]*/ long ID,
        /*[in]*/ BSTR FileName ) = 0;
      virtual HRESULT __stdcall raw_Exists (
        /*[in]*/ BSTR Name,
        /*[in]*/ long ID,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_DeleteAll (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetPoint (
        /*[in]*/ BSTR uuidName,
        /*[out,retval]*/ struct IVGPoint * * ppRet ) = 0;
      virtual HRESULT __stdcall raw_SetPoint (
        /*[in]*/ BSTR uuidName,
        /*[in]*/ struct IVGPoint * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetVector (
        /*[in]*/ BSTR uuidName,
        /*[out,retval]*/ struct IVGVector * * ppRet ) = 0;
      virtual HRESULT __stdcall raw_SetVector (
        /*[in]*/ BSTR uuidName,
        /*[in]*/ struct IVGVector * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetCurve (
        /*[in]*/ BSTR uuidName,
        /*[out,retval]*/ struct IVGCurve * * ppRet ) = 0;
      virtual HRESULT __stdcall raw_SetCurve (
        /*[in]*/ BSTR uuidName,
        /*[in]*/ struct IVGCurve * pVal ) = 0;
};

struct __declspec(uuid("b05800ce-9aa4-44fd-9547-4f91eb757ac4"))
IVGToolStateAttributes : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetPropertyBarGuid,put=PutPropertyBarGuid))
    _bstr_t PropertyBarGuid;
    __declspec(property(get=GetContextMenuGuid,put=PutContextMenuGuid))
    _bstr_t ContextMenuGuid;
    __declspec(property(get=GetUseTabletPressure,put=PutUseTabletPressure))
    VARIANT_BOOL UseTabletPressure;
    __declspec(property(get=GetAllowTempPickState,put=PutAllowTempPickState))
    VARIANT_BOOL AllowTempPickState;
    __declspec(property(get=GetAllowAutopan,put=PutAllowAutopan))
    VARIANT_BOOL AllowAutopan;
    __declspec(property(get=GetAllowContextMenu,put=PutAllowContextMenu))
    VARIANT_BOOL AllowContextMenu;
    __declspec(property(get=GetCanUpdateSelectionOnMouseClick,put=PutCanUpdateSelectionOnMouseClick))
    VARIANT_BOOL CanUpdateSelectionOnMouseClick;
    __declspec(property(get=GetDeselectOnLButtonDown,put=PutDeselectOnLButtonDown))
    VARIANT_BOOL DeselectOnLButtonDown;
    __declspec(property(get=GetEnterGraceStateOnLButtonDown,put=PutEnterGraceStateOnLButtonDown))
    VARIANT_BOOL EnterGraceStateOnLButtonDown;
    __declspec(property(put=PutStatusInfo))
    _bstr_t StatusInfo;
    __declspec(property(get=GetCurrentPressure))
    double CurrentPressure;
    __declspec(property(get=GetDocument))
    IVGDocumentPtr Document;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetPropertyBarGuid ( );
    void PutPropertyBarGuid (
        _bstr_t pVal );
    _bstr_t GetContextMenuGuid ( );
    void PutContextMenuGuid (
        _bstr_t pVal );
    VARIANT_BOOL GetUseTabletPressure ( );
    void PutUseTabletPressure (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetAllowTempPickState ( );
    void PutAllowTempPickState (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetAllowAutopan ( );
    void PutAllowAutopan (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetAllowContextMenu ( );
    void PutAllowContextMenu (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetCanUpdateSelectionOnMouseClick ( );
    void PutCanUpdateSelectionOnMouseClick (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetDeselectOnLButtonDown ( );
    void PutDeselectOnLButtonDown (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetEnterGraceStateOnLButtonDown ( );
    void PutEnterGraceStateOnLButtonDown (
        VARIANT_BOOL pVal );
    void PutStatusInfo (
        _bstr_t _arg1 );
    HRESULT SetCursor (
        enum cdrCursorShape CursorShape );
    HRESULT StartTimer (
        long TimerId,
        long TimeToTick,
        VARIANT_BOOL OneTime );
    HRESULT StopTimer (
        long TimerId );
    HRESULT SnapMouse (
        struct IVGPoint * pt );
    HRESULT AnchoredSnapMouse (
        struct IVGPoint * pt,
        struct IVGPoint * AnchorPoint );
    HRESULT ConstrainMouse (
        struct IVGPoint * pt,
        struct IVGPoint * AnchorPoint );
    VARIANT_BOOL IsKeyDown (
        long KeyCode );
    double GetCurrentPressure ( );
    HRESULT SetCursorGuid (
        _bstr_t newVal );
    HRESULT SetStateHintsPage (
        _bstr_t newVal );
    HRESULT ExitTemporaryToolState ( );
    IVGDocumentPtr GetDocument ( );
    HRESULT SetFocus ( );
    HRESULT CaptureMouse ( );
    HRESULT ReleaseMouse ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_PropertyBarGuid (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_PropertyBarGuid (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ContextMenuGuid (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ContextMenuGuid (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_UseTabletPressure (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_UseTabletPressure (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_AllowTempPickState (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_AllowTempPickState (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_AllowAutopan (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_AllowAutopan (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_AllowContextMenu (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_AllowContextMenu (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_CanUpdateSelectionOnMouseClick (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_CanUpdateSelectionOnMouseClick (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_DeselectOnLButtonDown (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_DeselectOnLButtonDown (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_EnterGraceStateOnLButtonDown (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_EnterGraceStateOnLButtonDown (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall put_StatusInfo (
        /*[in]*/ BSTR _arg1 ) = 0;
      virtual HRESULT __stdcall raw_SetCursor (
        /*[in]*/ enum cdrCursorShape CursorShape ) = 0;
      virtual HRESULT __stdcall raw_StartTimer (
        /*[in]*/ long TimerId,
        /*[in]*/ long TimeToTick,
        /*[in]*/ VARIANT_BOOL OneTime ) = 0;
      virtual HRESULT __stdcall raw_StopTimer (
        /*[in]*/ long TimerId ) = 0;
      virtual HRESULT __stdcall raw_SnapMouse (
        /*[in,out]*/ struct IVGPoint * pt ) = 0;
      virtual HRESULT __stdcall raw_AnchoredSnapMouse (
        /*[in,out]*/ struct IVGPoint * pt,
        /*[in]*/ struct IVGPoint * AnchorPoint ) = 0;
      virtual HRESULT __stdcall raw_ConstrainMouse (
        /*[in,out]*/ struct IVGPoint * pt,
        /*[in]*/ struct IVGPoint * AnchorPoint ) = 0;
      virtual HRESULT __stdcall raw_IsKeyDown (
        /*[in]*/ long KeyCode,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_CurrentPressure (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetCursorGuid (
        /*[in]*/ BSTR newVal ) = 0;
      virtual HRESULT __stdcall raw_SetStateHintsPage (
        /*[in]*/ BSTR newVal ) = 0;
      virtual HRESULT __stdcall raw_ExitTemporaryToolState ( ) = 0;
      virtual HRESULT __stdcall get_Document (
        /*[out,retval]*/ struct IVGDocument * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_SetFocus ( ) = 0;
      virtual HRESULT __stdcall raw_CaptureMouse ( ) = 0;
      virtual HRESULT __stdcall raw_ReleaseMouse ( ) = 0;
};

struct __declspec(uuid("b05800cf-9aa4-44fd-9547-4f91eb757ac4"))
IVGToolState : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetIsDrawing))
    VARIANT_BOOL IsDrawing;

    //
    // Wrapper methods for error-handling
    //

    HRESULT OnStartState (
        struct IVGToolStateAttributes * StateAttributes );
    HRESULT OnExitState ( );
    HRESULT OnMouseMove (
        struct IVGPoint * pt );
    HRESULT OnLButtonDown (
        struct IVGPoint * pt );
    HRESULT OnLButtonDownLeaveGrace (
        struct IVGPoint * pt );
    HRESULT OnLButtonUp (
        struct IVGPoint * pt );
    HRESULT OnLButtonDblClick (
        struct IVGPoint * pt );
    HRESULT OnClick (
        struct IVGPoint * pt,
        VARIANT_BOOL * Handled );
    HRESULT OnRButtonDown (
        struct IVGPoint * pt,
        VARIANT_BOOL * Handled );
    HRESULT OnRButtonUp (
        struct IVGPoint * pt,
        VARIANT_BOOL * Handled );
    HRESULT OnKeyDown (
        long KeyCode,
        VARIANT_BOOL * Handled );
    HRESULT OnKeyUp (
        long KeyCode,
        VARIANT_BOOL * Handled );
    HRESULT OnDelete (
        VARIANT_BOOL * Handled );
    HRESULT OnAbort ( );
    HRESULT OnCommit (
        struct IVGPoint * pt );
    HRESULT OnSnapMouse (
        struct IVGPoint * pt,
        VARIANT_BOOL * Handled );
    HRESULT OnTimer (
        long TimerId,
        long TimeEllapsed );
    VARIANT_BOOL GetIsDrawing ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_OnStartState (
        /*[in]*/ struct IVGToolStateAttributes * StateAttributes ) = 0;
      virtual HRESULT __stdcall raw_OnExitState ( ) = 0;
      virtual HRESULT __stdcall raw_OnMouseMove (
        /*[in]*/ struct IVGPoint * pt ) = 0;
      virtual HRESULT __stdcall raw_OnLButtonDown (
        /*[in]*/ struct IVGPoint * pt ) = 0;
      virtual HRESULT __stdcall raw_OnLButtonDownLeaveGrace (
        /*[in]*/ struct IVGPoint * pt ) = 0;
      virtual HRESULT __stdcall raw_OnLButtonUp (
        /*[in]*/ struct IVGPoint * pt ) = 0;
      virtual HRESULT __stdcall raw_OnLButtonDblClick (
        /*[in]*/ struct IVGPoint * pt ) = 0;
      virtual HRESULT __stdcall raw_OnClick (
        /*[in]*/ struct IVGPoint * pt,
        /*[in,out]*/ VARIANT_BOOL * Handled ) = 0;
      virtual HRESULT __stdcall raw_OnRButtonDown (
        /*[in]*/ struct IVGPoint * pt,
        /*[in,out]*/ VARIANT_BOOL * Handled ) = 0;
      virtual HRESULT __stdcall raw_OnRButtonUp (
        /*[in]*/ struct IVGPoint * pt,
        /*[in,out]*/ VARIANT_BOOL * Handled ) = 0;
      virtual HRESULT __stdcall raw_OnKeyDown (
        long KeyCode,
        /*[in,out]*/ VARIANT_BOOL * Handled ) = 0;
      virtual HRESULT __stdcall raw_OnKeyUp (
        long KeyCode,
        /*[in,out]*/ VARIANT_BOOL * Handled ) = 0;
      virtual HRESULT __stdcall raw_OnDelete (
        /*[in,out]*/ VARIANT_BOOL * Handled ) = 0;
      virtual HRESULT __stdcall raw_OnAbort ( ) = 0;
      virtual HRESULT __stdcall raw_OnCommit (
        /*[in]*/ struct IVGPoint * pt ) = 0;
      virtual HRESULT __stdcall raw_OnSnapMouse (
        /*[in,out]*/ struct IVGPoint * pt,
        /*[in,out]*/ VARIANT_BOOL * Handled ) = 0;
      virtual HRESULT __stdcall raw_OnTimer (
        /*[in]*/ long TimerId,
        /*[in]*/ long TimeEllapsed ) = 0;
      virtual HRESULT __stdcall get_IsDrawing (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
};

struct __declspec(uuid("b05800cb-9aa4-44fd-9547-4f91eb757ac4"))
IVGOnScreenCurve : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT Show ( );
    HRESULT Hide ( );
    HRESULT SetPen (
        long Color,
        long WidthInPixels,
        enum cdrOnScreenCurvePenStyle Style );
    HRESULT SetNoPen ( );
    HRESULT SetBrush (
        long Color );
    HRESULT SetNoBrush ( );
    HRESULT SetCurve (
        struct IVGCurve * Curve );
    HRESULT SetLine (
        double x1,
        double y1,
        double x2,
        double y2 );
    HRESULT SetRectangle (
        double x1,
        double y1,
        double x2,
        double y2 );
    HRESULT SetCircle (
        double CenterX,
        double CenterY,
        double Radius );
    HRESULT SetPoints (
        struct IVGPointRange * Points );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Show ( ) = 0;
      virtual HRESULT __stdcall raw_Hide ( ) = 0;
      virtual HRESULT __stdcall raw_SetPen (
        /*[in]*/ long Color,
        long WidthInPixels,
        /*[in]*/ enum cdrOnScreenCurvePenStyle Style ) = 0;
      virtual HRESULT __stdcall raw_SetNoPen ( ) = 0;
      virtual HRESULT __stdcall raw_SetBrush (
        /*[in]*/ long Color ) = 0;
      virtual HRESULT __stdcall raw_SetNoBrush ( ) = 0;
      virtual HRESULT __stdcall raw_SetCurve (
        /*[in]*/ struct IVGCurve * Curve ) = 0;
      virtual HRESULT __stdcall raw_SetLine (
        /*[in]*/ double x1,
        /*[in]*/ double y1,
        /*[in]*/ double x2,
        /*[in]*/ double y2 ) = 0;
      virtual HRESULT __stdcall raw_SetRectangle (
        /*[in]*/ double x1,
        /*[in]*/ double y1,
        /*[in]*/ double x2,
        /*[in]*/ double y2 ) = 0;
      virtual HRESULT __stdcall raw_SetCircle (
        /*[in]*/ double CenterX,
        /*[in]*/ double CenterY,
        /*[in]*/ double Radius ) = 0;
      virtual HRESULT __stdcall raw_SetPoints (
        /*[in]*/ struct IVGPointRange * Points ) = 0;
};

struct __declspec(uuid("b05800d4-9aa4-44fd-9547-4f91eb757ac4"))
IVGMathUtils : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    IVGPointPtr Interpolate (
        struct IVGPoint * S,
        struct IVGPoint * E,
        double t );
    VARIANT_BOOL IntersectLineSegments (
        struct IVGPoint * S1,
        struct IVGPoint * E1,
        struct IVGPoint * S2,
        struct IVGPoint * E2,
        struct IVGPoint * * ppVal );
    double DistanceToLineSegment (
        struct IVGPoint * S,
        struct IVGPoint * E,
        struct IVGPoint * Point );
    IVGPointPtr ClosestPointToLineSegment (
        struct IVGPoint * S,
        struct IVGPoint * E,
        struct IVGPoint * Point );
    VARIANT_BOOL IntersectInfiniteLines (
        struct IVGPoint * S1,
        struct IVGPoint * E1,
        struct IVGPoint * S2,
        struct IVGPoint * E2,
        struct IVGPoint * * ppVal );
    double DistanceToInfiniteLine (
        struct IVGPoint * S,
        struct IVGPoint * E,
        struct IVGPoint * Point );
    IVGPointPtr ClosestPointToInfiniteLine (
        struct IVGPoint * S,
        struct IVGPoint * E,
        struct IVGPoint * Point );
    double GetRandomReal (
        double low,
        double High );
    long GetRandomInteger (
        long low,
        long High );
    HRESULT FitLineToPoints (
        struct IVGPointRange * Points,
        struct IVGPoint * * Origin,
        struct IVGVector * * Direction );
    IVGPointPtr MidPoint (
        struct IVGPoint * S,
        struct IVGPoint * E );
    IVGPointPtr CreatePoint (
        double x,
        double y );
    IVGVectorPtr CreateVector (
        double x,
        double y );
    IVGPointRangePtr CreatePointRange ( );
    IVGTransformMatrixPtr CreateIdentityTransformMatrix ( );
    IVGTransformMatrixPtr CreateRotationTransformMatrix (
        double Angle,
        double OriginX,
        double OriginY );
    IVGTransformMatrixPtr CreateTranslationTransformMatrix (
        double TranslateX,
        double TranslateY );
    IVGTransformMatrixPtr CreateScaleTransformMatrix (
        double ScaleX,
        double ScaleY,
        double OriginX,
        double OriginY );
    IVGTransformMatrixPtr CreateLineSegmentTransformMatrix (
        struct IVGPoint * FromStart,
        struct IVGPoint * FromEnd,
        struct IVGPoint * ToStart,
        struct IVGPoint * ToEnd );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Interpolate (
        /*[in]*/ struct IVGPoint * S,
        /*[in]*/ struct IVGPoint * E,
        /*[in]*/ double t,
        /*[out,retval]*/ struct IVGPoint * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_IntersectLineSegments (
        /*[in]*/ struct IVGPoint * S1,
        /*[in]*/ struct IVGPoint * E1,
        /*[in]*/ struct IVGPoint * S2,
        /*[in]*/ struct IVGPoint * E2,
        /*[out]*/ struct IVGPoint * * ppVal,
        /*[out,retval]*/ VARIANT_BOOL * pResult ) = 0;
      virtual HRESULT __stdcall raw_DistanceToLineSegment (
        /*[in]*/ struct IVGPoint * S,
        /*[in]*/ struct IVGPoint * E,
        /*[in]*/ struct IVGPoint * Point,
        /*[out,retval]*/ double * ppVal ) = 0;
      virtual HRESULT __stdcall raw_ClosestPointToLineSegment (
        /*[in]*/ struct IVGPoint * S,
        /*[in]*/ struct IVGPoint * E,
        /*[in]*/ struct IVGPoint * Point,
        /*[out,retval]*/ struct IVGPoint * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_IntersectInfiniteLines (
        /*[in]*/ struct IVGPoint * S1,
        /*[in]*/ struct IVGPoint * E1,
        /*[in]*/ struct IVGPoint * S2,
        /*[in]*/ struct IVGPoint * E2,
        /*[out]*/ struct IVGPoint * * ppVal,
        /*[out,retval]*/ VARIANT_BOOL * pResult ) = 0;
      virtual HRESULT __stdcall raw_DistanceToInfiniteLine (
        /*[in]*/ struct IVGPoint * S,
        /*[in]*/ struct IVGPoint * E,
        /*[in]*/ struct IVGPoint * Point,
        /*[out,retval]*/ double * ppVal ) = 0;
      virtual HRESULT __stdcall raw_ClosestPointToInfiniteLine (
        /*[in]*/ struct IVGPoint * S,
        /*[in]*/ struct IVGPoint * E,
        /*[in]*/ struct IVGPoint * Point,
        /*[out,retval]*/ struct IVGPoint * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_GetRandomReal (
        /*[in]*/ double low,
        /*[in]*/ double High,
        /*[out,retval]*/ double * ppVal ) = 0;
      virtual HRESULT __stdcall raw_GetRandomInteger (
        /*[in]*/ long low,
        /*[in]*/ long High,
        /*[out,retval]*/ long * ppVal ) = 0;
      virtual HRESULT __stdcall raw_FitLineToPoints (
        /*[in]*/ struct IVGPointRange * Points,
        /*[out]*/ struct IVGPoint * * Origin,
        /*[out]*/ struct IVGVector * * Direction ) = 0;
      virtual HRESULT __stdcall raw_MidPoint (
        /*[in]*/ struct IVGPoint * S,
        /*[in]*/ struct IVGPoint * E,
        /*[out,retval]*/ struct IVGPoint * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_CreatePoint (
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[out,retval]*/ struct IVGPoint * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_CreateVector (
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[out,retval]*/ struct IVGVector * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_CreatePointRange (
        /*[out,retval]*/ struct IVGPointRange * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_CreateIdentityTransformMatrix (
        /*[out,retval]*/ struct IVGTransformMatrix * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_CreateRotationTransformMatrix (
        /*[in]*/ double Angle,
        /*[in]*/ double OriginX,
        /*[in]*/ double OriginY,
        /*[out,retval]*/ struct IVGTransformMatrix * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_CreateTranslationTransformMatrix (
        /*[in]*/ double TranslateX,
        /*[in]*/ double TranslateY,
        /*[out,retval]*/ struct IVGTransformMatrix * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_CreateScaleTransformMatrix (
        /*[in]*/ double ScaleX,
        /*[in]*/ double ScaleY,
        /*[in]*/ double OriginX,
        /*[in]*/ double OriginY,
        /*[out,retval]*/ struct IVGTransformMatrix * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_CreateLineSegmentTransformMatrix (
        /*[in]*/ struct IVGPoint * FromStart,
        /*[in]*/ struct IVGPoint * FromEnd,
        /*[in]*/ struct IVGPoint * ToStart,
        /*[in]*/ struct IVGPoint * ToEnd,
        /*[out,retval]*/ struct IVGTransformMatrix * * ppVal ) = 0;
};

struct __declspec(uuid("b0580043-9aa4-44fd-9547-4f91eb757ac4"))
IVGNodeRange : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    IVGApplicationPtr Application;
    __declspec(property(get=GetParent))
    IVGCurvePtr Parent;
    __declspec(property(get=GetItem))
    IVGNodePtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetType))
    enum cdrNodeType Type;
    __declspec(property(get=GetPositionX))
    double PositionX;
    __declspec(property(get=GetPositionY))
    double PositionY;
    __declspec(property(get=GetSizeWidth))
    double SizeWidth;
    __declspec(property(get=GetSizeHeight))
    double SizeHeight;
    __declspec(property(get=GetLastNode))
    IVGNodePtr LastNode;
    __declspec(property(get=GetBoundingBox))
    IVGRectPtr BoundingBox;
    __declspec(property(get=GetSegmentRange))
    IVGSegmentRangePtr SegmentRange;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;
    __declspec(property(get=GetFirstNode))
    IVGNodePtr FirstNode;

    //
    // Wrapper methods for error-handling
    //

    IVGApplicationPtr GetApplication ( );
    IVGCurvePtr GetParent ( );
    IVGNodePtr GetItem (
        long Index );
    long GetCount ( );
    enum cdrNodeType GetType ( );
    double GetPositionX ( );
    double GetPositionY ( );
    double GetSizeWidth ( );
    double GetSizeHeight ( );
    HRESULT Add (
        struct IVGNode * Node );
    HRESULT Remove (
        long Index );
    HRESULT Move (
        double DeltaX,
        double DeltaY,
        long AnchorIndex,
        VARIANT_BOOL ElasticMode );
    HRESULT Delete ( );
    HRESULT Stretch (
        float RatioX,
        float RatioY,
        VARIANT_BOOL UseAnchorPoint,
        double StretchAnchorX,
        double StretchAnchorY );
    HRESULT Rotate (
        double Angle,
        VARIANT_BOOL UseCenterPoint,
        double RotationCenterX,
        double RotationCenterY );
    HRESULT Skew (
        double AngleX,
        double AngleY,
        VARIANT_BOOL UseAnchorPoint,
        double SkewAnchorX,
        double SkewAnchorY );
    HRESULT AutoReduce (
        double PrecisionMargin );
    HRESULT RemoveAll ( );
    HRESULT SetType (
        enum cdrNodeType Type );
    IUnknownPtr Get_NewEnum ( );
    HRESULT AddRange (
        struct IVGNodeRange * NodeRange );
    IVGSegmentRangePtr GetSegmentRange ( );
    HRESULT BreakApart ( );
    HRESULT Smoothen (
        long Smoothness );
    HRESULT RemoveRange (
        struct IVGNodeRange * NodeRange );
    HRESULT Fillet (
        double Radius,
        VARIANT_BOOL CombineSmoothSegments );
    HRESULT Chamfer (
        double DistanceA,
        double DistanceB,
        VARIANT_BOOL CombineSmoothSegments );
    HRESULT Scallop (
        double Radius,
        VARIANT_BOOL CombineSmoothSegments );
    HRESULT CreateSelection ( );
    HRESULT AddToSelection ( );
    HRESULT RemoveFromSelection ( );
    IVGNodePtr GetFirstNode ( );
    IVGNodePtr GetLastNode ( );
    VARIANT_BOOL GetBoundingBox (
        double * x,
        double * y,
        double * Width,
        double * Height );
    IVGRectPtr GetBoundingBox ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct IVGApplication * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ struct IVGCurve * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IVGNode * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum cdrNodeType * pVal ) = 0;
      virtual HRESULT __stdcall get_PositionX (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_PositionY (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_SizeWidth (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_SizeHeight (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ struct IVGNode * Node ) = 0;
      virtual HRESULT __stdcall raw_Remove (
        /*[in]*/ long Index ) = 0;
      virtual HRESULT __stdcall raw_Move (
        /*[in]*/ double DeltaX,
        /*[in]*/ double DeltaY,
        /*[in]*/ long AnchorIndex,
        /*[in]*/ VARIANT_BOOL ElasticMode ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall raw_Stretch (
        /*[in]*/ float RatioX,
        /*[in]*/ float RatioY,
        /*[in]*/ VARIANT_BOOL UseAnchorPoint,
        /*[in]*/ double StretchAnchorX,
        /*[in]*/ double StretchAnchorY ) = 0;
      virtual HRESULT __stdcall raw_Rotate (
        /*[in]*/ double Angle,
        /*[in]*/ VARIANT_BOOL UseCenterPoint,
        /*[in]*/ double RotationCenterX,
        /*[in]*/ double RotationCenterY ) = 0;
      virtual HRESULT __stdcall raw_Skew (
        /*[in]*/ double AngleX,
        /*[in]*/ double AngleY,
        /*[in]*/ VARIANT_BOOL UseAnchorPoint,
        /*[in]*/ double SkewAnchorX,
        /*[in]*/ double SkewAnchorY ) = 0;
      virtual HRESULT __stdcall raw_AutoReduce (
        /*[in]*/ double PrecisionMargin ) = 0;
      virtual HRESULT __stdcall raw_RemoveAll ( ) = 0;
      virtual HRESULT __stdcall raw_SetType (
        /*[in]*/ enum cdrNodeType Type ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * pVal ) = 0;
      virtual HRESULT __stdcall raw_AddRange (
        /*[in]*/ struct IVGNodeRange * NodeRange ) = 0;
      virtual HRESULT __stdcall get_SegmentRange (
        /*[out,retval]*/ struct IVGSegmentRange * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_BreakApart ( ) = 0;
      virtual HRESULT __stdcall raw_Smoothen (
        /*[in]*/ long Smoothness ) = 0;
      virtual HRESULT __stdcall raw_RemoveRange (
        /*[in]*/ struct IVGNodeRange * NodeRange ) = 0;
      virtual HRESULT __stdcall raw_Fillet (
        /*[in]*/ double Radius,
        /*[in]*/ VARIANT_BOOL CombineSmoothSegments ) = 0;
      virtual HRESULT __stdcall raw_Chamfer (
        /*[in]*/ double DistanceA,
        /*[in]*/ double DistanceB,
        /*[in]*/ VARIANT_BOOL CombineSmoothSegments ) = 0;
      virtual HRESULT __stdcall raw_Scallop (
        /*[in]*/ double Radius,
        /*[in]*/ VARIANT_BOOL CombineSmoothSegments ) = 0;
      virtual HRESULT __stdcall raw_CreateSelection ( ) = 0;
      virtual HRESULT __stdcall raw_AddToSelection ( ) = 0;
      virtual HRESULT __stdcall raw_RemoveFromSelection ( ) = 0;
      virtual HRESULT __stdcall get_FirstNode (
        /*[out,retval]*/ struct IVGNode * * ppVal ) = 0;
      virtual HRESULT __stdcall get_LastNode (
        /*[out,retval]*/ struct IVGNode * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_GetBoundingBox (
        /*[out]*/ double * x,
        /*[out]*/ double * y,
        /*[out]*/ double * Width,
        /*[out]*/ double * Height,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_BoundingBox (
        /*[out,retval]*/ struct IVGRect * * ppVal ) = 0;
};

struct __declspec(uuid("b058005a-9aa4-44fd-9547-4f91eb757ac4"))
IVGSegmentRange : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    IVGApplicationPtr Application;
    __declspec(property(get=GetParent))
    IVGCurvePtr Parent;
    __declspec(property(get=GetItem))
    IVGSegmentPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetType))
    enum cdrSegmentType Type;
    __declspec(property(get=GetLength))
    double Length;
    __declspec(property(get=GetNodeRange))
    IVGNodeRangePtr NodeRange;
    __declspec(property(get=GetFirstSegment))
    IVGSegmentPtr FirstSegment;
    __declspec(property(get=GetLastSegment))
    IVGSegmentPtr LastSegment;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IVGApplicationPtr GetApplication ( );
    IVGCurvePtr GetParent ( );
    IVGSegmentPtr GetItem (
        long Index );
    long GetCount ( );
    enum cdrSegmentType GetType ( );
    double GetLength ( );
    HRESULT Add (
        struct IVGSegment * Segment );
    HRESULT Remove (
        long Index );
    HRESULT AddNode ( );
    HRESULT RemoveAll ( );
    HRESULT SetType (
        enum cdrSegmentType Type );
    IUnknownPtr Get_NewEnum ( );
    HRESULT AddRange (
        struct IVGSegmentRange * SegmentRange );
    IVGNodeRangePtr GetNodeRange ( );
    HRESULT RemoveRange (
        struct IVGSegmentRange * SegmentRange );
    IVGSegmentPtr GetFirstSegment ( );
    IVGSegmentPtr GetLastSegment ( );
    HRESULT CreateSelection ( );
    HRESULT AddToSelection ( );
    HRESULT RemoveFromSelection ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct IVGApplication * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ struct IVGCurve * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IVGSegment * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum cdrSegmentType * pVal ) = 0;
      virtual HRESULT __stdcall get_Length (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ struct IVGSegment * Segment ) = 0;
      virtual HRESULT __stdcall raw_Remove (
        /*[in]*/ long Index ) = 0;
      virtual HRESULT __stdcall raw_AddNode ( ) = 0;
      virtual HRESULT __stdcall raw_RemoveAll ( ) = 0;
      virtual HRESULT __stdcall raw_SetType (
        /*[in]*/ enum cdrSegmentType Type ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * pVal ) = 0;
      virtual HRESULT __stdcall raw_AddRange (
        /*[in]*/ struct IVGSegmentRange * SegmentRange ) = 0;
      virtual HRESULT __stdcall get_NodeRange (
        /*[out,retval]*/ struct IVGNodeRange * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_RemoveRange (
        /*[in]*/ struct IVGSegmentRange * SegmentRange ) = 0;
      virtual HRESULT __stdcall get_FirstSegment (
        /*[out,retval]*/ struct IVGSegment * * ppVal ) = 0;
      virtual HRESULT __stdcall get_LastSegment (
        /*[out,retval]*/ struct IVGSegment * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_CreateSelection ( ) = 0;
      virtual HRESULT __stdcall raw_AddToSelection ( ) = 0;
      virtual HRESULT __stdcall raw_RemoveFromSelection ( ) = 0;
};

struct __declspec(uuid("b058005b-9aa4-44fd-9547-4f91eb757ac4"))
IVGSegments : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    IVGApplicationPtr Application;
    __declspec(property(get=GetParent))
    IVGCurvePtr Parent;
    __declspec(property(get=GetItem))
    IVGSegmentPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetFirst))
    IVGSegmentPtr First;
    __declspec(property(get=GetLast))
    IVGSegmentPtr Last;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IVGApplicationPtr GetApplication ( );
    IVGCurvePtr GetParent ( );
    IVGSegmentPtr GetItem (
        long Index );
    IUnknownPtr Get_NewEnum ( );
    long GetCount ( );
    IVGSegmentRangePtr Range (
        SAFEARRAY * * IndexArray );
    IVGSegmentRangePtr All ( );
    IVGSegmentRangePtr AllExcluding (
        SAFEARRAY * * IndexArray );
    IVGSegmentPtr GetFirst ( );
    IVGSegmentPtr GetLast ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct IVGApplication * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ struct IVGCurve * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IVGSegment * * ppVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * pVal ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_Range (
        /*[in]*/ SAFEARRAY * * IndexArray,
        /*[out,retval]*/ struct IVGSegmentRange * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_All (
        /*[out,retval]*/ struct IVGSegmentRange * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_AllExcluding (
        /*[in]*/ SAFEARRAY * * IndexArray,
        /*[out,retval]*/ struct IVGSegmentRange * * ppVal ) = 0;
      virtual HRESULT __stdcall get_First (
        /*[out,retval]*/ struct IVGSegment * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Last (
        /*[out,retval]*/ struct IVGSegment * * ppVal ) = 0;
};

struct __declspec(uuid("b058000f-9aa4-44fd-9547-4f91eb757ac4"))
IVGBitmap : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetSizeWidth))
    long SizeWidth;
    __declspec(property(get=GetSizeHeight))
    long SizeHeight;
    __declspec(property(get=GetResolutionX))
    long ResolutionX;
    __declspec(property(get=GetResolutionY))
    long ResolutionY;
    __declspec(property(get=GetExternallyLinked))
    VARIANT_BOOL ExternallyLinked;
    __declspec(property(get=GetImage))
    IVGImagePtr Image;
    __declspec(property(get=GetImageAlpha))
    IVGImagePtr ImageAlpha;
    __declspec(property(get=GetLinkFileName,put=PutLinkFileName))
    _bstr_t LinkFileName;
    __declspec(property(get=GetMode))
    enum cdrImageType Mode;
    __declspec(property(get=GetTransparent))
    VARIANT_BOOL Transparent;
    __declspec(property(get=GetWatermarked))
    VARIANT_BOOL Watermarked;
    __declspec(property(get=GetOPILinked))
    VARIANT_BOOL OPILinked;
    __declspec(property(get=GetIsEPS))
    VARIANT_BOOL IsEPS;
    __declspec(property(get=GetExternalLinkTime))
    DATE ExternalLinkTime;
    __declspec(property(get=GetEmbedded))
    VARIANT_BOOL Embedded;
    __declspec(property(get=GetCropped))
    VARIANT_BOOL Cropped;
    __declspec(property(get=GetCropEnvelopeModified))
    VARIANT_BOOL CropEnvelopeModified;
    __declspec(property(get=GetCropEnvelope))
    IVGCurvePtr CropEnvelope;
    __declspec(property(get=GetBoundingBoxPath))
    IVGCurvePtr BoundingBoxPath;
    __declspec(property(get=GetDuotone))
    IVGDuotonePtr Duotone;

    //
    // Wrapper methods for error-handling
    //

    long GetSizeWidth ( );
    long GetSizeHeight ( );
    long GetResolutionX ( );
    long GetResolutionY ( );
    VARIANT_BOOL GetExternallyLinked ( );
    HRESULT ResolveLink ( );
    HRESULT UpdateLink ( );
    HRESULT Inflate (
        long Width,
        long Height );
    _bstr_t GetLinkFileName ( );
    enum cdrImageType GetMode ( );
    ICorelExportFilterPtr SaveAs (
        _bstr_t FileName,
        enum cdrFilter Filter,
        enum cdrCompressionType Compression );
    HRESULT Resample (
        long Width,
        long Height,
        VARIANT_BOOL AntiAlias,
        double ResolutionX,
        double ResolutionY );
    HRESULT ConvertTo (
        enum cdrImageType Mode );
    HRESULT ApplyBitmapEffect (
        _bstr_t UndoString,
        _bstr_t Command );
    HRESULT Crop ( );
    VARIANT_BOOL GetTransparent ( );
    VARIANT_BOOL GetWatermarked ( );
    VARIANT_BOOL GetOPILinked ( );
    VARIANT_BOOL GetIsEPS ( );
    DATE GetExternalLinkTime ( );
    HRESULT ConvertToPaletted (
        enum cdrImagePaletteType PaletteType,
        enum cdrDitherType DitherType,
        long DitherIntensity,
        long Smoothing,
        long NumColors,
        VARIANT_BOOL ColorSensitive,
        long TargetColor,
        long Importance,
        long Lightness,
        long ToleranceA,
        long ToleranceB,
        VARIANT * Palette = &vtMissing );
    HRESULT ConvertToPaletted2 (
        struct IVGStructPaletteOptions * Options );
    HRESULT ConvertToBW (
        enum cdrRenderType RenderType,
        long Intensity,
        long Threshold,
        enum cdrHalftoneType Halftone,
        long HalftoneAngle,
        long HalftoneSize );
    HRESULT ResetCropEnvelope ( );
    VARIANT_BOOL GetEmbedded ( );
    VARIANT_BOOL GetCropped ( );
    VARIANT_BOOL GetCropEnvelopeModified ( );
    IVGCurvePtr GetCropEnvelope ( );
    IVGCurvePtr GetBoundingBoxPath ( );
    HRESULT ConvertToDuotone (
        struct IVGDuotone * Duotone );
    IVGDuotonePtr GetDuotone ( );
    void PutLinkFileName (
        _bstr_t pVal );
    IVGTraceSettingsPtr Trace (
        enum cdrTraceType TraceType,
        short Smoothing,
        short DetailLevelPercent,
        enum cdrColorType ColorMode,
        enum cdrPaletteID PaletteID,
        long ColorCount,
        VARIANT_BOOL DeleteOriginalObject,
        VARIANT_BOOL RemoveBackground,
        VARIANT_BOOL RemoveEntireBackColor );
    IVGImagePtr GetImage ( );
    IVGImagePtr GetImageAlpha ( );
    HRESULT SetImageData (
        struct IVGImage * Image,
        struct IVGImage * Alpha,
        long OffsetX,
        long OffsetY );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_SizeWidth (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_SizeHeight (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_ResolutionX (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_ResolutionY (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_ExternallyLinked (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_ResolveLink ( ) = 0;
      virtual HRESULT __stdcall raw_UpdateLink ( ) = 0;
      virtual HRESULT __stdcall raw_Inflate (
        /*[in]*/ long Width,
        /*[in]*/ long Height ) = 0;
      virtual HRESULT __stdcall get_LinkFileName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_Mode (
        /*[out,retval]*/ enum cdrImageType * pVal ) = 0;
      virtual HRESULT __stdcall raw_SaveAs (
        /*[in]*/ BSTR FileName,
        /*[in]*/ enum cdrFilter Filter,
        /*[in]*/ enum cdrCompressionType Compression,
        /*[out,retval]*/ struct ICorelExportFilter * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_Resample (
        /*[in]*/ long Width,
        /*[in]*/ long Height,
        /*[in]*/ VARIANT_BOOL AntiAlias,
        /*[in]*/ double ResolutionX,
        /*[in]*/ double ResolutionY ) = 0;
      virtual HRESULT __stdcall raw_ConvertTo (
        /*[in]*/ enum cdrImageType Mode ) = 0;
      virtual HRESULT __stdcall raw_ApplyBitmapEffect (
        /*[in]*/ BSTR UndoString,
        /*[in]*/ BSTR Command ) = 0;
      virtual HRESULT __stdcall raw_Crop ( ) = 0;
      virtual HRESULT __stdcall get_Transparent (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_Watermarked (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_OPILinked (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_IsEPS (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_ExternalLinkTime (
        /*[out,retval]*/ DATE * pVal ) = 0;
      virtual HRESULT __stdcall raw_ConvertToPaletted (
        /*[in]*/ enum cdrImagePaletteType PaletteType,
        /*[in]*/ enum cdrDitherType DitherType,
        /*[in]*/ long DitherIntensity,
        /*[in]*/ long Smoothing,
        /*[in]*/ long NumColors,
        /*[in]*/ VARIANT_BOOL ColorSensitive,
        /*[in]*/ long TargetColor,
        /*[in]*/ long Importance,
        /*[in]*/ long Lightness,
        /*[in]*/ long ToleranceA,
        /*[in]*/ long ToleranceB,
        /*[in]*/ VARIANT * Palette = &vtMissing ) = 0;
      virtual HRESULT __stdcall raw_ConvertToPaletted2 (
        /*[in]*/ struct IVGStructPaletteOptions * Options ) = 0;
      virtual HRESULT __stdcall raw_ConvertToBW (
        /*[in]*/ enum cdrRenderType RenderType,
        /*[in]*/ long Intensity,
        /*[in]*/ long Threshold,
        /*[in]*/ enum cdrHalftoneType Halftone,
        /*[in]*/ long HalftoneAngle,
        /*[in]*/ long HalftoneSize ) = 0;
      virtual HRESULT __stdcall raw_ResetCropEnvelope ( ) = 0;
      virtual HRESULT __stdcall get_Embedded (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_Cropped (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_CropEnvelopeModified (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_CropEnvelope (
        /*[out,retval]*/ struct IVGCurve * * ppVal ) = 0;
      virtual HRESULT __stdcall get_BoundingBoxPath (
        /*[out,retval]*/ struct IVGCurve * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_ConvertToDuotone (
        /*[in]*/ struct IVGDuotone * Duotone ) = 0;
      virtual HRESULT __stdcall get_Duotone (
        /*[out,retval]*/ struct IVGDuotone * * ppVal ) = 0;
      virtual HRESULT __stdcall put_LinkFileName (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall raw_Trace (
        /*[in]*/ enum cdrTraceType TraceType,
        /*[in]*/ short Smoothing,
        /*[in]*/ short DetailLevelPercent,
        /*[in]*/ enum cdrColorType ColorMode,
        /*[in]*/ enum cdrPaletteID PaletteID,
        /*[in]*/ long ColorCount,
        /*[in]*/ VARIANT_BOOL DeleteOriginalObject,
        /*[in]*/ VARIANT_BOOL RemoveBackground,
        /*[in]*/ VARIANT_BOOL RemoveEntireBackColor,
        /*[out,retval]*/ struct IVGTraceSettings * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Image (
        /*[out,retval]*/ struct IVGImage * * ppVal ) = 0;
      virtual HRESULT __stdcall get_ImageAlpha (
        /*[out,retval]*/ struct IVGImage * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_SetImageData (
        /*[in]*/ struct IVGImage * Image,
        /*[in]*/ struct IVGImage * Alpha,
        /*[in]*/ long OffsetX,
        /*[in]*/ long OffsetY ) = 0;
};

struct __declspec(uuid("b05800a0-9aa4-44fd-9547-4f91eb757ac4"))
IVGEPS : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetPreviewBitmap))
    IVGBitmapPtr PreviewBitmap;
    __declspec(property(get=GetData))
    SAFEARRAY * Data;
    __declspec(property(get=GetDataAsString))
    _bstr_t DataAsString;
    __declspec(property(get=GetCropEnvelope))
    IVGCurvePtr CropEnvelope;
    __declspec(property(get=GetCropEnvelopeModified))
    VARIANT_BOOL CropEnvelopeModified;
    __declspec(property(get=GetBoundingBoxPath))
    IVGCurvePtr BoundingBoxPath;
    __declspec(property(get=GetLinkFileName,put=PutLinkFileName))
    _bstr_t LinkFileName;
    __declspec(property(get=GetDCSFileNames))
    SAFEARRAY * DCSFileNames;

    //
    // Wrapper methods for error-handling
    //

    IVGBitmapPtr GetPreviewBitmap ( );
    SAFEARRAY * GetData ( );
    _bstr_t GetDataAsString ( );
    IVGCurvePtr GetCropEnvelope ( );
    HRESULT ResetCropEnvelope ( );
    VARIANT_BOOL GetCropEnvelopeModified ( );
    IVGCurvePtr GetBoundingBoxPath ( );
    _bstr_t GetLinkFileName ( );
    void PutLinkFileName (
        _bstr_t pVal );
    SAFEARRAY * GetDCSFileNames ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_PreviewBitmap (
        /*[out,retval]*/ struct IVGBitmap * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Data (
        /*[out,retval]*/ SAFEARRAY * * pVal ) = 0;
      virtual HRESULT __stdcall get_DataAsString (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_CropEnvelope (
        /*[out,retval]*/ struct IVGCurve * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_ResetCropEnvelope ( ) = 0;
      virtual HRESULT __stdcall get_CropEnvelopeModified (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_BoundingBoxPath (
        /*[out,retval]*/ struct IVGCurve * * ppVal ) = 0;
      virtual HRESULT __stdcall get_LinkFileName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_LinkFileName (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_DCSFileNames (
        /*[out,retval]*/ SAFEARRAY * * pVal ) = 0;
};

struct __declspec(uuid("b0580091-9aa4-44fd-9547-4f91eb757ac4"))
IVGDuotone : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetType,put=PutType))
    enum cdrDuotoneType Type;
    __declspec(property(get=GetUseOverprints,put=PutUseOverprints))
    VARIANT_BOOL UseOverprints;
    __declspec(property(get=GetOverprintCount))
    long OverprintCount;
    __declspec(property(get=GetOverprints))
    IVGDuotoneOverprintPtr Overprints[];
    __declspec(property(get=GetInkCount))
    long InkCount;
    __declspec(property(get=GetInks))
    IVGDuotoneInkPtr Inks[];

    //
    // Wrapper methods for error-handling
    //

    enum cdrDuotoneType GetType ( );
    void PutType (
        enum cdrDuotoneType pVal );
    VARIANT_BOOL GetUseOverprints ( );
    void PutUseOverprints (
        VARIANT_BOOL pVal );
    long GetOverprintCount ( );
    IVGDuotoneOverprintPtr GetOverprints (
        long Index );
    long GetInkCount ( );
    IVGDuotoneInkPtr GetInks (
        long Index );
    IVGDuotonePtr GetCopy ( );
    HRESULT CopyAssign (
        struct IVGDuotone * Duotone );
    HRESULT ResetOverprints ( );
    VARIANT_BOOL Load (
        _bstr_t FileName );
    VARIANT_BOOL Save (
        _bstr_t FileName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum cdrDuotoneType * pVal ) = 0;
      virtual HRESULT __stdcall put_Type (
        /*[in]*/ enum cdrDuotoneType pVal ) = 0;
      virtual HRESULT __stdcall get_UseOverprints (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_UseOverprints (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_OverprintCount (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_Overprints (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IVGDuotoneOverprint * * ppVal ) = 0;
      virtual HRESULT __stdcall get_InkCount (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_Inks (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IVGDuotoneInk * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_GetCopy (
        /*[out,retval]*/ struct IVGDuotone * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_CopyAssign (
        /*[in]*/ struct IVGDuotone * Duotone ) = 0;
      virtual HRESULT __stdcall raw_ResetOverprints ( ) = 0;
      virtual HRESULT __stdcall raw_Load (
        /*[in]*/ BSTR FileName,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_Save (
        /*[in]*/ BSTR FileName,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
};

struct __declspec(uuid("b0580092-9aa4-44fd-9547-4f91eb757ac4"))
IVGDuotoneOverprint : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCyan,put=PutCyan))
    long Cyan;
    __declspec(property(get=GetMagenta,put=PutMagenta))
    long Magenta;
    __declspec(property(get=GetYellow,put=PutYellow))
    long Yellow;
    __declspec(property(get=GetBlack,put=PutBlack))
    long Black;
    __declspec(property(get=GetColor,put=PutColor))
    IVGColorPtr Color;

    //
    // Wrapper methods for error-handling
    //

    long GetCyan ( );
    void PutCyan (
        long pVal );
    long GetMagenta ( );
    void PutMagenta (
        long pVal );
    long GetYellow ( );
    void PutYellow (
        long pVal );
    long GetBlack ( );
    void PutBlack (
        long pVal );
    IVGColorPtr GetColor ( );
    void PutColor (
        struct IVGColor * ppVal );
    HRESULT Reset ( );
    HRESULT SetValues (
        long Cyan,
        long Magenta,
        long Yellow,
        long Black );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Cyan (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_Cyan (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_Magenta (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_Magenta (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_Yellow (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_Yellow (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_Black (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_Black (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ struct IVGColor * * ppVal ) = 0;
      virtual HRESULT __stdcall put_Color (
        /*[in]*/ struct IVGColor * ppVal ) = 0;
      virtual HRESULT __stdcall raw_Reset ( ) = 0;
      virtual HRESULT __stdcall raw_SetValues (
        /*[in]*/ long Cyan,
        /*[in]*/ long Magenta,
        /*[in]*/ long Yellow,
        /*[in]*/ long Black ) = 0;
};

struct __declspec(uuid("b0580012-9aa4-44fd-9547-4f91eb757ac4"))
IVGColor : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    IDispatchPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetType))
    enum cdrColorType Type;
    __declspec(property(get=GetRGBRed,put=PutRGBRed))
    long RGBRed;
    __declspec(property(get=GetIsInGamut))
    VARIANT_BOOL IsInGamut;
    __declspec(property(get=GetRGBGreen,put=PutRGBGreen))
    long RGBGreen;
    __declspec(property(get=GetInGamutColor))
    IVGColorPtr InGamutColor;
    __declspec(property(get=GetRGBBlue,put=PutRGBBlue))
    long RGBBlue;
    __declspec(property(get=GetIsCMYK))
    VARIANT_BOOL IsCMYK;
    __declspec(property(get=GetIsGray))
    VARIANT_BOOL IsGray;
    __declspec(property(get=GetIsWhite))
    VARIANT_BOOL IsWhite;
    __declspec(property(get=GetCMYKCyan,put=PutCMYKCyan))
    long CMYKCyan;
    __declspec(property(get=GetIsSpot))
    VARIANT_BOOL IsSpot;
    __declspec(property(get=GetCMYKYellow,put=PutCMYKYellow))
    long CMYKYellow;
    __declspec(property(get=GetIsTintable))
    VARIANT_BOOL IsTintable;
    __declspec(property(get=GetCMYKMagenta,put=PutCMYKMagenta))
    long CMYKMagenta;
    __declspec(property(get=GetIsValidDuotoneColor))
    VARIANT_BOOL IsValidDuotoneColor;
    __declspec(property(get=GetCMYKBlack,put=PutCMYKBlack))
    long CMYKBlack;
    __declspec(property(get=GetValidDuotoneColor))
    IVGColorPtr ValidDuotoneColor;
    __declspec(property(get=GetHexValue,put=PutHexValue))
    _bstr_t HexValue;
    __declspec(property(get=GetRGBValue,put=PutRGBValue))
    long RGBValue;
    __declspec(property(get=GetCMYCyan,put=PutCMYCyan))
    long CMYCyan;
    __declspec(property(get=GetCMYMagenta,put=PutCMYMagenta))
    long CMYMagenta;
    __declspec(property(get=GetColorContext))
    IVGColorContextPtr ColorContext;
    __declspec(property(get=GetCMYYellow,put=PutCMYYellow))
    long CMYYellow;
    __declspec(property(get=GetPalette))
    IVGPalettePtr Palette;
    __declspec(property(get=GetHSBHue,put=PutHSBHue))
    long HSBHue;
    __declspec(property(get=GetSpotColorID,put=PutSpotColorID))
    long SpotColorID;
    __declspec(property(get=GetHSBSaturation,put=PutHSBSaturation))
    long HSBSaturation;
    __declspec(property(get=GetSpotColorName))
    _bstr_t SpotColorName;
    __declspec(property(get=GetHSBBrightness,put=PutHSBBrightness))
    long HSBBrightness;
    __declspec(property(get=GetPaletteIdentifier))
    _bstr_t PaletteIdentifier;
    __declspec(property(get=GetIsColorStyle))
    VARIANT_BOOL IsColorStyle;
    __declspec(property(get=GetColorStyleName))
    _bstr_t ColorStyleName;
    __declspec(property(get=GetHLSHue,put=PutHLSHue))
    long HLSHue;
    __declspec(property(get=GetHLSLightness,put=PutHLSLightness))
    long HLSLightness;
    __declspec(property(get=GetHLSSaturation,put=PutHLSSaturation))
    long HLSSaturation;
    __declspec(property(get=GetBW,put=PutBW))
    VARIANT_BOOL BW;
    __declspec(property(get=GetGray,put=PutGray))
    long Gray;
    __declspec(property(get=GetName))
    _bstr_t Name[];
    __declspec(property(get=GetYIQLuminanceY,put=PutYIQLuminanceY))
    long YIQLuminanceY;
    __declspec(property(get=GetYIQChromaI,put=PutYIQChromaI))
    long YIQChromaI;
    __declspec(property(get=GetYIQChromaQ,put=PutYIQChromaQ))
    long YIQChromaQ;
    __declspec(property(get=GetLabLuminance,put=PutLabLuminance))
    long LabLuminance;
    __declspec(property(get=GetLabComponentA,put=PutLabComponentA))
    long LabComponentA;
    __declspec(property(get=GetLabComponentB,put=PutLabComponentB))
    long LabComponentB;
    __declspec(property(get=GetPaletteID))
    enum cdrPaletteID PaletteID;
    __declspec(property(get=GetPaletteIndex,put=PutPaletteIndex))
    long PaletteIndex;
    __declspec(property(get=GetTint,put=PutTint))
    long Tint;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    enum cdrColorType GetType ( );
    HRESULT RGBAssign (
        long Red,
        long Green,
        long Blue );
    long GetRGBRed ( );
    void PutRGBRed (
        long pVal );
    long GetRGBGreen ( );
    void PutRGBGreen (
        long pVal );
    long GetRGBBlue ( );
    void PutRGBBlue (
        long pVal );
    HRESULT ConvertToRGB ( );
    HRESULT CMYKAssign (
        long Cyan,
        long Magenta,
        long Yellow,
        long Black );
    long GetCMYKCyan ( );
    void PutCMYKCyan (
        long pVal );
    long GetCMYKYellow ( );
    void PutCMYKYellow (
        long pVal );
    long GetCMYKMagenta ( );
    void PutCMYKMagenta (
        long pVal );
    long GetCMYKBlack ( );
    void PutCMYKBlack (
        long pVal );
    HRESULT ConvertToCMYK ( );
    HRESULT CMYAssign (
        long Cyan,
        long Magenta,
        long Yellow );
    long GetCMYCyan ( );
    void PutCMYCyan (
        long pVal );
    long GetCMYMagenta ( );
    void PutCMYMagenta (
        long pVal );
    long GetCMYYellow ( );
    void PutCMYYellow (
        long pVal );
    HRESULT ConvertToCMY ( );
    HRESULT HSBAssign (
        long Hue,
        long Saturation,
        long Brightness );
    long GetHSBHue ( );
    void PutHSBHue (
        long pVal );
    long GetHSBSaturation ( );
    void PutHSBSaturation (
        long pVal );
    long GetHSBBrightness ( );
    void PutHSBBrightness (
        long pVal );
    HRESULT ConvertToHSB ( );
    HRESULT HLSAssign (
        long Hue,
        long Lightness,
        long Saturation );
    long GetHLSHue ( );
    void PutHLSHue (
        long pVal );
    long GetHLSLightness ( );
    void PutHLSLightness (
        long pVal );
    long GetHLSSaturation ( );
    void PutHLSSaturation (
        long pVal );
    HRESULT ConvertToHLS ( );
    HRESULT BWAssign (
        VARIANT_BOOL White );
    VARIANT_BOOL GetBW ( );
    void PutBW (
        VARIANT_BOOL pVal );
    HRESULT ConvertToBW ( );
    HRESULT GrayAssign (
        long GrayValue );
    long GetGray ( );
    void PutGray (
        long pVal );
    HRESULT ConvertToGray ( );
    HRESULT CorelScriptAssign (
        long ColorModel,
        long V1,
        long V2,
        long V3,
        long V4,
        long V5,
        long V6,
        long V7 );
    HRESULT CorelScriptGetComponent (
        long * ColorModel,
        long * V1,
        long * V2,
        long * V3,
        long * V4,
        long * V5,
        long * V6,
        long * V7 );
    HRESULT UserAssign (
        long ParentWindowHandle );
    HRESULT CopyAssign (
        struct IVGColor * Color );
    _bstr_t GetName (
        VARIANT_BOOL Components );
    HRESULT YIQAssign (
        long y,
        long I,
        long Q );
    long GetYIQLuminanceY ( );
    void PutYIQLuminanceY (
        long pVal );
    long GetYIQChromaI ( );
    void PutYIQChromaI (
        long pVal );
    long GetYIQChromaQ ( );
    void PutYIQChromaQ (
        long pVal );
    HRESULT ConvertToYIQ ( );
    HRESULT LabAssign (
        long L,
        long A,
        long B );
    long GetLabLuminance ( );
    void PutLabLuminance (
        long pVal );
    long GetLabComponentA ( );
    void PutLabComponentA (
        long pVal );
    long GetLabComponentB ( );
    void PutLabComponentB (
        long pVal );
    HRESULT ConvertToLab ( );
    HRESULT RegistrationAssign ( );
    HRESULT FixedAssign (
        enum cdrPaletteID PaletteID,
        long PaletteIndex,
        long Tint );
    enum cdrPaletteID GetPaletteID ( );
    long GetPaletteIndex ( );
    void PutPaletteIndex (
        long pVal );
    long GetTint ( );
    void PutTint (
        long pVal );
    HRESULT ConvertToFixed (
        enum cdrPaletteID PaletteID );
    VARIANT_BOOL UserAssignEx (
        long ParentWindowHandle );
    HRESULT SetName (
        _bstr_t Name );
    HRESULT BlendWith (
        struct IVGColor * Color,
        long MixRatio );
    VARIANT_BOOL IsSame (
        struct IVGColor * Color );
    VARIANT_BOOL GetIsInGamut ( );
    IVGColorPtr GetInGamutColor ( );
    VARIANT_BOOL GetIsCMYK ( );
    VARIANT_BOOL GetIsGray ( );
    VARIANT_BOOL GetIsWhite ( );
    VARIANT_BOOL GetIsSpot ( );
    VARIANT_BOOL GetIsTintable ( );
    VARIANT_BOOL GetIsValidDuotoneColor ( );
    IVGColorPtr GetValidDuotoneColor ( );
    long GetColorDistanceFrom (
        struct IVGColor * Color );
    VARIANT_BOOL IsSimilar (
        struct IVGColor * Color );
    _bstr_t ToString ( );
    VARIANT_BOOL StringAssign (
        _bstr_t ColorString );
    HRESULT Invalidate ( );
    _bstr_t GetHexValue ( );
    void PutHexValue (
        _bstr_t pVal );
    IVGColorPtr GetCopy ( );
    long GetRGBValue ( );
    void PutRGBValue (
        long pVal );
    HRESULT CopyAppearance (
        struct IVGColor * Color,
        struct IVGColorContext * SourceColorContext );
    IVGColorContextPtr GetColorContext ( );
    VARIANT_BOOL ConvertTo (
        enum cdrColorType ColorType,
        struct IVGColorContext * DestinationColorContext,
        struct IVGColorContext * SourceColorContext );
    IVGPalettePtr GetPalette ( );
    HRESULT SpotAssign (
        _bstr_t PaletteIdentifier,
        long SpotColorID,
        long Tint );
    HRESULT SpotAssignByName (
        _bstr_t PaletteIdentifier,
        _bstr_t SpotColorName,
        long Tint );
    HRESULT ConvertToPalette (
        _bstr_t PaletteIdentifier );
    long GetSpotColorID ( );
    void PutSpotColorID (
        long pVal );
    _bstr_t GetSpotColorName ( );
    HRESULT PaletteAssign (
        _bstr_t PaletteIdentifier,
        long ColorIndex );
    _bstr_t GetPaletteIdentifier ( );
    VARIANT_BOOL GetIsColorStyle ( );
    _bstr_t GetColorStyleName ( );
    HRESULT ModifyColorStyleColor (
        struct IVGColor * Color,
        VARIANT_BOOL ChangeWholeHarmony );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ IDispatch * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum cdrColorType * Type ) = 0;
      virtual HRESULT __stdcall raw_RGBAssign (
        /*[in]*/ long Red,
        /*[in]*/ long Green,
        /*[in]*/ long Blue ) = 0;
      virtual HRESULT __stdcall get_RGBRed (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_RGBRed (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_RGBGreen (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_RGBGreen (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_RGBBlue (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_RGBBlue (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall raw_ConvertToRGB ( ) = 0;
      virtual HRESULT __stdcall raw_CMYKAssign (
        /*[in]*/ long Cyan,
        /*[in]*/ long Magenta,
        /*[in]*/ long Yellow,
        /*[in]*/ long Black ) = 0;
      virtual HRESULT __stdcall get_CMYKCyan (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_CMYKCyan (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_CMYKYellow (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_CMYKYellow (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_CMYKMagenta (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_CMYKMagenta (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_CMYKBlack (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_CMYKBlack (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall raw_ConvertToCMYK ( ) = 0;
      virtual HRESULT __stdcall raw_CMYAssign (
        /*[in]*/ long Cyan,
        /*[in]*/ long Magenta,
        /*[in]*/ long Yellow ) = 0;
      virtual HRESULT __stdcall get_CMYCyan (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_CMYCyan (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_CMYMagenta (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_CMYMagenta (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_CMYYellow (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_CMYYellow (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall raw_ConvertToCMY ( ) = 0;
      virtual HRESULT __stdcall raw_HSBAssign (
        /*[in]*/ long Hue,
        /*[in]*/ long Saturation,
        /*[in]*/ long Brightness ) = 0;
      virtual HRESULT __stdcall get_HSBHue (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_HSBHue (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_HSBSaturation (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_HSBSaturation (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_HSBBrightness (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_HSBBrightness (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall raw_ConvertToHSB ( ) = 0;
      virtual HRESULT __stdcall raw_HLSAssign (
        /*[in]*/ long Hue,
        /*[in]*/ long Lightness,
        /*[in]*/ long Saturation ) = 0;
      virtual HRESULT __stdcall get_HLSHue (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_HLSHue (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_HLSLightness (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_HLSLightness (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_HLSSaturation (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_HLSSaturation (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall raw_ConvertToHLS ( ) = 0;
      virtual HRESULT __stdcall raw_BWAssign (
        /*[in]*/ VARIANT_BOOL White ) = 0;
      virtual HRESULT __stdcall get_BW (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_BW (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall raw_ConvertToBW ( ) = 0;
      virtual HRESULT __stdcall raw_GrayAssign (
        /*[in]*/ long GrayValue ) = 0;
      virtual HRESULT __stdcall get_Gray (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_Gray (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall raw_ConvertToGray ( ) = 0;
      virtual HRESULT __stdcall raw_CorelScriptAssign (
        /*[in]*/ long ColorModel,
        /*[in]*/ long V1,
        /*[in]*/ long V2,
        /*[in]*/ long V3,
        /*[in]*/ long V4,
        /*[in]*/ long V5,
        /*[in]*/ long V6,
        /*[in]*/ long V7 ) = 0;
      virtual HRESULT __stdcall raw_CorelScriptGetComponent (
        /*[out]*/ long * ColorModel,
        /*[out]*/ long * V1,
        /*[out]*/ long * V2,
        /*[out]*/ long * V3,
        /*[out]*/ long * V4,
        /*[out]*/ long * V5,
        /*[out]*/ long * V6,
        /*[out]*/ long * V7 ) = 0;
      virtual HRESULT __stdcall raw_UserAssign (
        /*[in]*/ long ParentWindowHandle ) = 0;
      virtual HRESULT __stdcall raw_CopyAssign (
        /*[in]*/ struct IVGColor * Color ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[in]*/ VARIANT_BOOL Components,
        /*[out,retval]*/ BSTR * Name ) = 0;
      virtual HRESULT __stdcall raw_YIQAssign (
        /*[in]*/ long y,
        /*[in]*/ long I,
        /*[in]*/ long Q ) = 0;
      virtual HRESULT __stdcall get_YIQLuminanceY (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_YIQLuminanceY (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_YIQChromaI (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_YIQChromaI (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_YIQChromaQ (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_YIQChromaQ (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall raw_ConvertToYIQ ( ) = 0;
      virtual HRESULT __stdcall raw_LabAssign (
        /*[in]*/ long L,
        /*[in]*/ long A,
        /*[in]*/ long B ) = 0;
      virtual HRESULT __stdcall get_LabLuminance (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_LabLuminance (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_LabComponentA (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_LabComponentA (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_LabComponentB (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_LabComponentB (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall raw_ConvertToLab ( ) = 0;
      virtual HRESULT __stdcall raw_RegistrationAssign ( ) = 0;
      virtual HRESULT __stdcall raw_FixedAssign (
        /*[in]*/ enum cdrPaletteID PaletteID,
        /*[in]*/ long PaletteIndex,
        /*[in]*/ long Tint ) = 0;
      virtual HRESULT __stdcall get_PaletteID (
        /*[out,retval]*/ enum cdrPaletteID * pVal ) = 0;
      virtual HRESULT __stdcall get_PaletteIndex (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_PaletteIndex (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_Tint (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_Tint (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall raw_ConvertToFixed (
        /*[in]*/ enum cdrPaletteID PaletteID ) = 0;
      virtual HRESULT __stdcall raw_UserAssignEx (
        /*[in]*/ long ParentWindowHandle,
        /*[out,retval]*/ VARIANT_BOOL * pbOK ) = 0;
      virtual HRESULT __stdcall raw_SetName (
        /*[in]*/ BSTR Name ) = 0;
      virtual HRESULT __stdcall raw_BlendWith (
        /*[in]*/ struct IVGColor * Color,
        /*[in]*/ long MixRatio ) = 0;
      virtual HRESULT __stdcall raw_IsSame (
        /*[in]*/ struct IVGColor * Color,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_IsInGamut (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_InGamutColor (
        /*[out,retval]*/ struct IVGColor * * ppVal ) = 0;
      virtual HRESULT __stdcall get_IsCMYK (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_IsGray (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_IsWhite (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_IsSpot (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_IsTintable (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_IsValidDuotoneColor (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_ValidDuotoneColor (
        /*[out,retval]*/ struct IVGColor * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_GetColorDistanceFrom (
        /*[in]*/ struct IVGColor * Color,
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_IsSimilar (
        /*[in]*/ struct IVGColor * Color,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_ToString (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall raw_StringAssign (
        /*[in]*/ BSTR ColorString,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_Invalidate ( ) = 0;
      virtual HRESULT __stdcall get_HexValue (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_HexValue (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall raw_GetCopy (
        /*[out,retval]*/ struct IVGColor * * ppVal ) = 0;
      virtual HRESULT __stdcall get_RGBValue (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_RGBValue (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall raw_CopyAppearance (
        /*[in]*/ struct IVGColor * Color,
        /*[in]*/ struct IVGColorContext * SourceColorContext ) = 0;
      virtual HRESULT __stdcall get_ColorContext (
        /*[out,retval]*/ struct IVGColorContext * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_ConvertTo (
        /*[in]*/ enum cdrColorType ColorType,
        /*[in]*/ struct IVGColorContext * DestinationColorContext,
        /*[in]*/ struct IVGColorContext * SourceColorContext,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_Palette (
        /*[out,retval]*/ struct IVGPalette * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_SpotAssign (
        /*[in]*/ BSTR PaletteIdentifier,
        /*[in]*/ long SpotColorID,
        /*[in]*/ long Tint ) = 0;
      virtual HRESULT __stdcall raw_SpotAssignByName (
        /*[in]*/ BSTR PaletteIdentifier,
        /*[in]*/ BSTR SpotColorName,
        /*[in]*/ long Tint ) = 0;
      virtual HRESULT __stdcall raw_ConvertToPalette (
        /*[in]*/ BSTR PaletteIdentifier ) = 0;
      virtual HRESULT __stdcall get_SpotColorID (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_SpotColorID (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_SpotColorName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall raw_PaletteAssign (
        /*[in]*/ BSTR PaletteIdentifier,
        /*[in]*/ long ColorIndex ) = 0;
      virtual HRESULT __stdcall get_PaletteIdentifier (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_IsColorStyle (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_ColorStyleName (
        /*[out,retval]*/ BSTR * Name ) = 0;
      virtual HRESULT __stdcall raw_ModifyColorStyleColor (
        /*[in]*/ struct IVGColor * Color,
        /*[in]*/ VARIANT_BOOL ChangeWholeHarmony ) = 0;
};

struct __declspec(uuid("b0580093-9aa4-44fd-9547-4f91eb757ac4"))
IVGDuotoneInk : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetColor,put=PutColor))
    IVGColorPtr Color;
    __declspec(property(get=GetHandleCount))
    long HandleCount;
    __declspec(property(get=GetHandleX,put=PutHandleX))
    long HandleX[];
    __declspec(property(get=GetHandleY,put=PutHandleY))
    long HandleY[];
    __declspec(property(get=GetCurveLevel))
    long CurveLevel[];

    //
    // Wrapper methods for error-handling
    //

    IVGColorPtr GetColor ( );
    void PutColor (
        struct IVGColor * ppVal );
    long GetHandleCount ( );
    long GetHandleX (
        long Index );
    void PutHandleX (
        long Index,
        long pVal );
    long GetHandleY (
        long Index );
    void PutHandleY (
        long Index,
        long pVal );
    long AddHandle (
        long x,
        long y );
    VARIANT_BOOL RemoveHandle (
        long Index );
    long FindHandle (
        long x,
        long y );
    VARIANT_BOOL Load (
        _bstr_t FileName );
    VARIANT_BOOL Save (
        _bstr_t FileName );
    long GetCurveLevel (
        long Index );
    HRESULT Reset ( );
    SAFEARRAY * GetCurveLevels ( );
    SAFEARRAY * GetHandles ( );
    HRESULT PutHandles (
        const _variant_t & HandleArray,
        long NumElements );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ struct IVGColor * * ppVal ) = 0;
      virtual HRESULT __stdcall put_Color (
        /*[in]*/ struct IVGColor * ppVal ) = 0;
      virtual HRESULT __stdcall get_HandleCount (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_HandleX (
        /*[in]*/ long Index,
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_HandleX (
        /*[in]*/ long Index,
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_HandleY (
        /*[in]*/ long Index,
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_HandleY (
        /*[in]*/ long Index,
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall raw_AddHandle (
        /*[in]*/ long x,
        /*[in]*/ long y,
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_RemoveHandle (
        /*[in]*/ long Index,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_FindHandle (
        /*[in]*/ long x,
        /*[in]*/ long y,
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_Load (
        /*[in]*/ BSTR FileName,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_Save (
        /*[in]*/ BSTR FileName,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_CurveLevel (
        /*[in]*/ long Index,
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_Reset ( ) = 0;
      virtual HRESULT __stdcall raw_GetCurveLevels (
        /*[out,retval]*/ SAFEARRAY * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_GetHandles (
        /*[out,retval]*/ SAFEARRAY * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_PutHandles (
        /*[in]*/ VARIANT HandleArray,
        /*[in]*/ long NumElements ) = 0;
};

struct __declspec(uuid("b058003a-9aa4-44fd-9547-4f91eb757ac4"))
IVGFountainColor : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetPosition))
    long Position;
    __declspec(property(get=GetColor,put=PutColor))
    IVGColorPtr Color;
    __declspec(property(get=GetMidPoint,put=PutMidPoint))
    long MidPoint;
    __declspec(property(get=GetBlendType,put=PutBlendType))
    enum cdrFountainFillBlendType BlendType;
    __declspec(property(get=GetOpacity,put=PutOpacity))
    unsigned char Opacity;

    //
    // Wrapper methods for error-handling
    //

    long GetPosition ( );
    IVGColorPtr GetColor ( );
    void PutColor (
        struct IVGColor * ppVal );
    HRESULT Move (
        long NewPosition );
    HRESULT Delete ( );
    long GetMidPoint ( );
    void PutMidPoint (
        long pVal );
    enum cdrFountainFillBlendType GetBlendType ( );
    void PutBlendType (
        enum cdrFountainFillBlendType pVal );
    unsigned char GetOpacity ( );
    void PutOpacity (
        unsigned char pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Position (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ struct IVGColor * * ppVal ) = 0;
      virtual HRESULT __stdcall put_Color (
        /*[in]*/ struct IVGColor * ppVal ) = 0;
      virtual HRESULT __stdcall raw_Move (
        /*[in]*/ long NewPosition ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall get_MidPoint (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_MidPoint (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_BlendType (
        /*[out,retval]*/ enum cdrFountainFillBlendType * pVal ) = 0;
      virtual HRESULT __stdcall put_BlendType (
        /*[in]*/ enum cdrFountainFillBlendType pVal ) = 0;
      virtual HRESULT __stdcall get_Opacity (
        /*[out,retval]*/ unsigned char * pVal ) = 0;
      virtual HRESULT __stdcall put_Opacity (
        /*[in]*/ unsigned char pVal ) = 0;
};

struct __declspec(uuid("b058003b-9aa4-44fd-9547-4f91eb757ac4"))
IVGFountainColors : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem,put=PutItem))
    IVGFountainColorPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetGrayLevel,put=PutGrayLevel))
    long GrayLevel[];
    __declspec(property(get=GetFirst))
    IVGFountainColorPtr First;
    __declspec(property(get=GetLast))
    IVGFountainColorPtr Last;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IVGFountainColorPtr GetItem (
        long Index );
    void PutItem (
        long Index,
        struct IVGFountainColor * ppVal );
    IUnknownPtr Get_NewEnum ( );
    long GetCount ( );
    HRESULT Add (
        struct IVGColor * Color,
        long Position );
    long GetGrayLevel (
        long Index );
    void PutGrayLevel (
        long Index,
        long pVal );
    HRESULT AddGrayLevel (
        long GrayLevel,
        long Position );
    IVGFountainColorPtr GetFirst ( );
    IVGFountainColorPtr GetLast ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IVGFountainColor * * ppVal ) = 0;
      virtual HRESULT __stdcall put_Item (
        /*[in]*/ long Index,
        /*[in]*/ struct IVGFountainColor * ppVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * pVal ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ struct IVGColor * Color,
        /*[in]*/ long Position ) = 0;
      virtual HRESULT __stdcall get_GrayLevel (
        /*[in]*/ long Index,
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_GrayLevel (
        /*[in]*/ long Index,
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall raw_AddGrayLevel (
        /*[in]*/ long GrayLevel,
        /*[in]*/ long Position ) = 0;
      virtual HRESULT __stdcall get_First (
        /*[out,retval]*/ struct IVGFountainColor * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Last (
        /*[out,retval]*/ struct IVGFountainColor * * ppVal ) = 0;
};

struct __declspec(uuid("b058003c-9aa4-44fd-9547-4f91eb757ac4"))
IVGFountainFill : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetType,put=PutType))
    enum cdrFountainFillType Type;
    __declspec(property(get=GetSkew,put=PutSkew))
    double Skew;
    __declspec(property(get=GetStartX,put=PutStartX))
    double StartX;
    __declspec(property(get=GetBlendAcceleration,put=PutBlendAcceleration))
    double BlendAcceleration;
    __declspec(property(get=GetStartY,put=PutStartY))
    double StartY;
    __declspec(property(get=GetEndX,put=PutEndX))
    double EndX;
    __declspec(property(get=GetHasHSBBlends))
    VARIANT_BOOL HasHSBBlends;
    __declspec(property(get=GetEndY,put=PutEndY))
    double EndY;
    __declspec(property(get=GetHasNonLinearBlends))
    VARIANT_BOOL HasNonLinearBlends;
    __declspec(property(get=GetAngle))
    double Angle;
    __declspec(property(get=GetEnd2X,put=PutEnd2X))
    double End2X;
    __declspec(property(get=GetEnd2Y,put=PutEnd2Y))
    double End2Y;
    __declspec(property(get=GetEdgePad))
    long EdgePad;
    __declspec(property(get=GetSteps,put=PutSteps))
    long Steps;
    __declspec(property(get=GetBlendType,put=PutBlendType))
    enum cdrFountainFillBlendType BlendType;
    __declspec(property(get=GetMidPoint,put=PutMidPoint))
    long MidPoint;
    __declspec(property(get=GetColors,put=PutColors))
    IVGFountainColorsPtr Colors;
    __declspec(property(get=GetStartColor,put=PutStartColor))
    IVGColorPtr StartColor;
    __declspec(property(get=GetEndColor,put=PutEndColor))
    IVGColorPtr EndColor;
    __declspec(property(get=GetCenterOffsetX,put=PutCenterOffsetX))
    double CenterOffsetX;
    __declspec(property(get=GetCenterOffsetY,put=PutCenterOffsetY))
    double CenterOffsetY;
    __declspec(property(get=GetSmoothBlend,put=PutSmoothBlend))
    VARIANT_BOOL SmoothBlend;
    __declspec(property(get=GetSpreadMethod,put=PutSpreadMethod))
    enum cdrFountainFillSpreadMethod SpreadMethod;
    __declspec(property(get=GetAnisotropic,put=PutAnisotropic))
    VARIANT_BOOL Anisotropic;
    __declspec(property(get=GetIsTransparent))
    VARIANT_BOOL IsTransparent;
    __declspec(property(get=GetMergeMode,put=PutMergeMode))
    enum cdrMergeMode MergeMode;
    __declspec(property(get=GetScaleX,put=PutScaleX))
    double ScaleX;
    __declspec(property(get=GetScaleY,put=PutScaleY))
    double ScaleY;

    //
    // Wrapper methods for error-handling
    //

    enum cdrFountainFillType GetType ( );
    void PutType (
        enum cdrFountainFillType pVal );
    double GetStartX ( );
    void PutStartX (
        double pVal );
    double GetStartY ( );
    void PutStartY (
        double pVal );
    double GetEndX ( );
    void PutEndX (
        double pVal );
    double GetEndY ( );
    void PutEndY (
        double pVal );
    double GetAngle ( );
    HRESULT SetAngle (
        double Angle );
    HRESULT Translate (
        double x,
        double y );
    long GetEdgePad ( );
    long GetSteps ( );
    void PutSteps (
        long pVal );
    enum cdrFountainFillBlendType GetBlendType ( );
    void PutBlendType (
        enum cdrFountainFillBlendType pVal );
    long GetMidPoint ( );
    void PutMidPoint (
        long pVal );
    IVGFountainColorsPtr GetColors ( );
    IVGColorPtr GetStartColor ( );
    void PutStartColor (
        struct IVGColor * ppVal );
    IVGColorPtr GetEndColor ( );
    void PutEndColor (
        struct IVGColor * ppVal );
    void PutColors (
        struct IVGFountainColors * ppVal );
    HRESULT SetEdgePad (
        long EdgePad );
    double GetCenterOffsetX ( );
    void PutCenterOffsetX (
        double pVal );
    double GetCenterOffsetY ( );
    void PutCenterOffsetY (
        double pVal );
    VARIANT_BOOL GetSmoothBlend ( );
    void PutSmoothBlend (
        VARIANT_BOOL pVal );
    enum cdrFountainFillSpreadMethod GetSpreadMethod ( );
    void PutSpreadMethod (
        enum cdrFountainFillSpreadMethod pVal );
    VARIANT_BOOL GetAnisotropic ( );
    void PutAnisotropic (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetIsTransparent ( );
    enum cdrMergeMode GetMergeMode ( );
    void PutMergeMode (
        enum cdrMergeMode pVal );
    double GetScaleX ( );
    void PutScaleX (
        double pVal );
    double GetScaleY ( );
    void PutScaleY (
        double pVal );
    double GetSkew ( );
    void PutSkew (
        double pVal );
    double GetBlendAcceleration ( );
    void PutBlendAcceleration (
        double pVal );
    HRESULT MakeOpaque ( );
    HRESULT GetTransformations (
        double * d11,
        double * d12,
        double * d21,
        double * d22 );
    HRESULT SetTransformations (
        double d11,
        double d12,
        double d21,
        double d22 );
    VARIANT_BOOL GetHasHSBBlends ( );
    VARIANT_BOOL GetHasNonLinearBlends ( );
    double GetEnd2X ( );
    void PutEnd2X (
        double pVal );
    double GetEnd2Y ( );
    void PutEnd2Y (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum cdrFountainFillType * pVal ) = 0;
      virtual HRESULT __stdcall put_Type (
        /*[in]*/ enum cdrFountainFillType pVal ) = 0;
      virtual HRESULT __stdcall get_StartX (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_StartX (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_StartY (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_StartY (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_EndX (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_EndX (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_EndY (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_EndY (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Angle (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetAngle (
        /*[in]*/ double Angle ) = 0;
      virtual HRESULT __stdcall raw_Translate (
        /*[in]*/ double x,
        /*[in]*/ double y ) = 0;
      virtual HRESULT __stdcall get_EdgePad (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_Steps (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_Steps (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_BlendType (
        /*[out,retval]*/ enum cdrFountainFillBlendType * pVal ) = 0;
      virtual HRESULT __stdcall put_BlendType (
        /*[in]*/ enum cdrFountainFillBlendType pVal ) = 0;
      virtual HRESULT __stdcall get_MidPoint (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_MidPoint (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_Colors (
        /*[out,retval]*/ struct IVGFountainColors * * ppVal ) = 0;
      virtual HRESULT __stdcall get_StartColor (
        /*[out,retval]*/ struct IVGColor * * ppVal ) = 0;
      virtual HRESULT __stdcall put_StartColor (
        /*[in]*/ struct IVGColor * ppVal ) = 0;
      virtual HRESULT __stdcall get_EndColor (
        /*[out,retval]*/ struct IVGColor * * ppVal ) = 0;
      virtual HRESULT __stdcall put_EndColor (
        /*[in]*/ struct IVGColor * ppVal ) = 0;
      virtual HRESULT __stdcall put_Colors (
        /*[in]*/ struct IVGFountainColors * ppVal ) = 0;
      virtual HRESULT __stdcall raw_SetEdgePad (
        /*[in]*/ long EdgePad ) = 0;
      virtual HRESULT __stdcall get_CenterOffsetX (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_CenterOffsetX (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_CenterOffsetY (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_CenterOffsetY (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_SmoothBlend (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_SmoothBlend (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_SpreadMethod (
        /*[out,retval]*/ enum cdrFountainFillSpreadMethod * pVal ) = 0;
      virtual HRESULT __stdcall put_SpreadMethod (
        /*[in]*/ enum cdrFountainFillSpreadMethod pVal ) = 0;
      virtual HRESULT __stdcall get_Anisotropic (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_Anisotropic (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_IsTransparent (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_MergeMode (
        /*[out,retval]*/ enum cdrMergeMode * pVal ) = 0;
      virtual HRESULT __stdcall put_MergeMode (
        /*[in]*/ enum cdrMergeMode pVal ) = 0;
      virtual HRESULT __stdcall get_ScaleX (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_ScaleX (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ScaleY (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_ScaleY (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Skew (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Skew (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_BlendAcceleration (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_BlendAcceleration (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall raw_MakeOpaque ( ) = 0;
      virtual HRESULT __stdcall raw_GetTransformations (
        /*[out]*/ double * d11,
        /*[out]*/ double * d12,
        /*[out]*/ double * d21,
        /*[out]*/ double * d22 ) = 0;
      virtual HRESULT __stdcall raw_SetTransformations (
        /*[in]*/ double d11,
        /*[in]*/ double d12,
        /*[in]*/ double d21,
        /*[in]*/ double d22 ) = 0;
      virtual HRESULT __stdcall get_HasHSBBlends (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_HasNonLinearBlends (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_End2X (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_End2X (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_End2Y (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_End2Y (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("b0580050-9aa4-44fd-9547-4f91eb757ac4"))
IVGPatternFill : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetType,put=PutType))
    enum cdrPatternFillType Type;
    __declspec(property(get=GetMirrorFillY,put=PutMirrorFillY))
    VARIANT_BOOL MirrorFillY;
    __declspec(property(get=GetFrontColor,put=PutFrontColor))
    IVGColorPtr FrontColor;
    __declspec(property(get=GetBackColor,put=PutBackColor))
    IVGColorPtr BackColor;
    __declspec(property(get=GetCanvas,put=PutCanvas))
    IVGPatternCanvasPtr Canvas;
    __declspec(property(get=GetFilePath))
    _bstr_t FilePath;
    __declspec(property(get=GetOriginX,put=PutOriginX))
    double OriginX;
    __declspec(property(get=GetOriginY,put=PutOriginY))
    double OriginY;
    __declspec(property(get=GetTileWidth,put=PutTileWidth))
    double TileWidth;
    __declspec(property(get=GetTileHeight,put=PutTileHeight))
    double TileHeight;
    __declspec(property(get=GetTileOffsetType,put=PutTileOffsetType))
    enum cdrTileOffsetType TileOffsetType;
    __declspec(property(get=GetTileOffset,put=PutTileOffset))
    long TileOffset;
    __declspec(property(get=GetSkewAngle,put=PutSkewAngle))
    double SkewAngle;
    __declspec(property(get=GetRotationAngle,put=PutRotationAngle))
    double RotationAngle;
    __declspec(property(get=GetTransformWithShape,put=PutTransformWithShape))
    VARIANT_BOOL TransformWithShape;
    __declspec(property(get=GetMirrorFill,put=PutMirrorFill))
    VARIANT_BOOL MirrorFill;
    __declspec(property(get=GetMirrorFillX,put=PutMirrorFillX))
    VARIANT_BOOL MirrorFillX;

    //
    // Wrapper methods for error-handling
    //

    enum cdrPatternFillType GetType ( );
    void PutType (
        enum cdrPatternFillType pVal );
    IVGColorPtr GetFrontColor ( );
    void PutFrontColor (
        struct IVGColor * ppVal );
    IVGColorPtr GetBackColor ( );
    void PutBackColor (
        struct IVGColor * ppVal );
    IVGPatternCanvasPtr GetCanvas ( );
    void PutCanvas (
        struct IVGPatternCanvas * ppVal );
    _bstr_t GetFilePath ( );
    double GetOriginX ( );
    void PutOriginX (
        double pVal );
    double GetOriginY ( );
    void PutOriginY (
        double pVal );
    double GetTileWidth ( );
    void PutTileWidth (
        double pVal );
    double GetTileHeight ( );
    void PutTileHeight (
        double pVal );
    enum cdrTileOffsetType GetTileOffsetType ( );
    void PutTileOffsetType (
        enum cdrTileOffsetType pVal );
    long GetTileOffset ( );
    void PutTileOffset (
        long pVal );
    double GetSkewAngle ( );
    void PutSkewAngle (
        double pVal );
    double GetRotationAngle ( );
    void PutRotationAngle (
        double pVal );
    VARIANT_BOOL GetTransformWithShape ( );
    void PutTransformWithShape (
        VARIANT_BOOL pVal );
    VARIANT_BOOL Load (
        _bstr_t FileName );
    VARIANT_BOOL GetMirrorFill ( );
    void PutMirrorFill (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetMirrorFillX ( );
    void PutMirrorFillX (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetMirrorFillY ( );
    void PutMirrorFillY (
        VARIANT_BOOL pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum cdrPatternFillType * pVal ) = 0;
      virtual HRESULT __stdcall put_Type (
        /*[in]*/ enum cdrPatternFillType pVal ) = 0;
      virtual HRESULT __stdcall get_FrontColor (
        /*[out,retval]*/ struct IVGColor * * ppVal ) = 0;
      virtual HRESULT __stdcall put_FrontColor (
        /*[in]*/ struct IVGColor * ppVal ) = 0;
      virtual HRESULT __stdcall get_BackColor (
        /*[out,retval]*/ struct IVGColor * * ppVal ) = 0;
      virtual HRESULT __stdcall put_BackColor (
        /*[in]*/ struct IVGColor * ppVal ) = 0;
      virtual HRESULT __stdcall get_Canvas (
        /*[out,retval]*/ struct IVGPatternCanvas * * ppVal ) = 0;
      virtual HRESULT __stdcall put_Canvas (
        /*[in]*/ struct IVGPatternCanvas * ppVal ) = 0;
      virtual HRESULT __stdcall get_FilePath (
        /*[out,retval]*/ BSTR * FileName ) = 0;
      virtual HRESULT __stdcall get_OriginX (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_OriginX (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_OriginY (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_OriginY (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_TileWidth (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_TileWidth (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_TileHeight (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_TileHeight (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_TileOffsetType (
        /*[out,retval]*/ enum cdrTileOffsetType * pVal ) = 0;
      virtual HRESULT __stdcall put_TileOffsetType (
        /*[in]*/ enum cdrTileOffsetType pVal ) = 0;
      virtual HRESULT __stdcall get_TileOffset (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_TileOffset (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_SkewAngle (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_SkewAngle (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_RotationAngle (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_RotationAngle (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_TransformWithShape (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_TransformWithShape (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall raw_Load (
        /*[in]*/ BSTR FileName,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_MirrorFill (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_MirrorFill (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_MirrorFillX (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_MirrorFillX (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_MirrorFillY (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_MirrorFillY (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
};

struct __declspec(uuid("b0580045-9aa4-44fd-9547-4f91eb757ac4"))
IVGOutline : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetDashDotLength,put=PutDashDotLength))
    double DashDotLength;
    __declspec(property(get=GetColor,put=PutColor))
    IVGColorPtr Color;
    __declspec(property(get=GetType,put=PutType))
    enum cdrOutlineType Type;
    __declspec(property(get=GetPenWidth,put=PutPenWidth))
    double PenWidth;
    __declspec(property(get=GetStyle,put=PutStyle))
    IVGOutlineStylePtr Style;
    __declspec(property(get=GetMiterLimit,put=PutMiterLimit))
    double MiterLimit;
    __declspec(property(get=GetStartArrow,put=PutStartArrow))
    IVGArrowHeadPtr StartArrow;
    __declspec(property(get=GetStartArrowOptions,put=PutStartArrowOptions))
    IVGArrowHeadOptionsPtr StartArrowOptions;
    __declspec(property(get=GetEndArrow,put=PutEndArrow))
    IVGArrowHeadPtr EndArrow;
    __declspec(property(get=GetEndArrowOptions,put=PutEndArrowOptions))
    IVGArrowHeadOptionsPtr EndArrowOptions;
    __declspec(property(get=GetNibStretch,put=PutNibStretch))
    long NibStretch;
    __declspec(property(get=GetJustification,put=PutJustification))
    enum cdrOutlineJustification Justification;
    __declspec(property(get=GetNibAngle,put=PutNibAngle))
    double NibAngle;
    __declspec(property(get=GetBehindFill,put=PutBehindFill))
    VARIANT_BOOL BehindFill;
    __declspec(property(get=GetAdjustDashes,put=PutAdjustDashes))
    enum cdrOutlineDashAdjust AdjustDashes;
    __declspec(property(get=GetLineCaps,put=PutLineCaps))
    enum cdrOutlineLineCaps LineCaps;
    __declspec(property(get=GetLineJoin,put=PutLineJoin))
    enum cdrOutlineLineJoin LineJoin;
    __declspec(property(get=GetScaleWithShape,put=PutScaleWithShape))
    VARIANT_BOOL ScaleWithShape;
    __declspec(property(get=GetSize,put=PutSize))
    double Size;
    __declspec(property(get=GetPSScreen))
    IVGPSScreenOptionsPtr PSScreen;

    //
    // Wrapper methods for error-handling
    //

    double GetWidth ( );
    void PutWidth (
        double pVal );
    IVGColorPtr GetColor ( );
    void PutColor (
        struct IVGColor * ppVal );
    IVGShapePtr ConvertToObject ( );
    enum cdrOutlineType GetType ( );
    void PutType (
        enum cdrOutlineType Type );
    IVGOutlineStylePtr GetStyle ( );
    void PutStyle (
        struct IVGOutlineStyle * ppStyle );
    IVGArrowHeadPtr GetStartArrow ( );
    void PutStartArrow (
        struct IVGArrowHead * ppArrowHead );
    IVGArrowHeadPtr GetEndArrow ( );
    void PutEndArrow (
        struct IVGArrowHead * ppArrowHead );
    long GetNibStretch ( );
    void PutNibStretch (
        long pVal );
    double GetNibAngle ( );
    void PutNibAngle (
        double pVal );
    VARIANT_BOOL GetBehindFill ( );
    void PutBehindFill (
        VARIANT_BOOL pVal );
    enum cdrOutlineLineCaps GetLineCaps ( );
    void PutLineCaps (
        enum cdrOutlineLineCaps pVal );
    enum cdrOutlineLineJoin GetLineJoin ( );
    void PutLineJoin (
        enum cdrOutlineLineJoin pVal );
    VARIANT_BOOL GetScaleWithShape ( );
    void PutScaleWithShape (
        VARIANT_BOOL pVal );
    HRESULT SetProperties (
        double Width,
        struct IVGOutlineStyle * Style,
        struct IVGColor * Color,
        struct IVGArrowHead * StartArrow,
        struct IVGArrowHead * EndArrow,
        enum cdrTriState BehindFill,
        enum cdrTriState ScaleWithShape,
        enum cdrOutlineLineCaps LineCaps,
        enum cdrOutlineLineJoin LineJoin,
        double NibAngle,
        long NibStretch,
        double DashDotLength,
        double PenWidth,
        double MiterLimit );
    double GetSize ( );
    void PutSize (
        double pVal );
    IVGOutlinePtr GetCopy ( );
    HRESULT CopyAssign (
        struct IVGOutline * SourceOutline );
    VARIANT_BOOL UserAssign (
        long ParentWindowHandle );
    IVGPSScreenOptionsPtr GetPSScreen ( );
    VARIANT_BOOL CompareWith (
        struct IVGOutline * Outline );
    double GetDashDotLength ( );
    void PutDashDotLength (
        double pVal );
    _bstr_t ToString ( );
    VARIANT_BOOL StringAssign (
        _bstr_t OutlineString );
    double GetPenWidth ( );
    void PutPenWidth (
        double pVal );
    double GetMiterLimit ( );
    void PutMiterLimit (
        double pVal );
    HRESULT SetNoOutline ( );
    IVGArrowHeadOptionsPtr GetStartArrowOptions ( );
    void PutStartArrowOptions (
        struct IVGArrowHeadOptions * ppVal );
    IVGArrowHeadOptionsPtr GetEndArrowOptions ( );
    void PutEndArrowOptions (
        struct IVGArrowHeadOptions * ppVal );
    enum cdrOutlineJustification GetJustification ( );
    void PutJustification (
        enum cdrOutlineJustification pVal );
    HRESULT SetPropertiesEx (
        double Width,
        struct IVGOutlineStyle * Style,
        struct IVGColor * Color,
        struct IVGArrowHead * StartArrow,
        struct IVGArrowHead * EndArrow,
        enum cdrTriState BehindFill,
        enum cdrTriState ScaleWithShape,
        enum cdrOutlineLineCaps LineCaps,
        enum cdrOutlineLineJoin LineJoin,
        double NibAngle,
        long NibStretch,
        double DashDotLength,
        double PenWidth,
        double MiterLimit,
        enum cdrOutlineJustification Justification );
    enum cdrOutlineDashAdjust GetAdjustDashes ( );
    void PutAdjustDashes (
        enum cdrOutlineDashAdjust pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ struct IVGColor * * ppVal ) = 0;
      virtual HRESULT __stdcall put_Color (
        /*[in]*/ struct IVGColor * ppVal ) = 0;
      virtual HRESULT __stdcall raw_ConvertToObject (
        /*[out,retval]*/ struct IVGShape * * ppRetVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum cdrOutlineType * Type ) = 0;
      virtual HRESULT __stdcall put_Type (
        /*[in]*/ enum cdrOutlineType Type ) = 0;
      virtual HRESULT __stdcall get_Style (
        /*[out,retval]*/ struct IVGOutlineStyle * * ppStyle ) = 0;
      virtual HRESULT __stdcall put_Style (
        /*[in]*/ struct IVGOutlineStyle * ppStyle ) = 0;
      virtual HRESULT __stdcall get_StartArrow (
        /*[out,retval]*/ struct IVGArrowHead * * ppArrowHead ) = 0;
      virtual HRESULT __stdcall put_StartArrow (
        /*[in]*/ struct IVGArrowHead * ppArrowHead ) = 0;
      virtual HRESULT __stdcall get_EndArrow (
        /*[out,retval]*/ struct IVGArrowHead * * ppArrowHead ) = 0;
      virtual HRESULT __stdcall put_EndArrow (
        /*[in]*/ struct IVGArrowHead * ppArrowHead ) = 0;
      virtual HRESULT __stdcall get_NibStretch (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_NibStretch (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_NibAngle (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_NibAngle (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_BehindFill (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_BehindFill (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_LineCaps (
        /*[out,retval]*/ enum cdrOutlineLineCaps * pVal ) = 0;
      virtual HRESULT __stdcall put_LineCaps (
        /*[in]*/ enum cdrOutlineLineCaps pVal ) = 0;
      virtual HRESULT __stdcall get_LineJoin (
        /*[out,retval]*/ enum cdrOutlineLineJoin * pVal ) = 0;
      virtual HRESULT __stdcall put_LineJoin (
        /*[in]*/ enum cdrOutlineLineJoin pVal ) = 0;
      virtual HRESULT __stdcall get_ScaleWithShape (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_ScaleWithShape (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall raw_SetProperties (
        /*[in]*/ double Width,
        /*[in]*/ struct IVGOutlineStyle * Style,
        /*[in]*/ struct IVGColor * Color,
        /*[in]*/ struct IVGArrowHead * StartArrow,
        /*[in]*/ struct IVGArrowHead * EndArrow,
        /*[in]*/ enum cdrTriState BehindFill,
        /*[in]*/ enum cdrTriState ScaleWithShape,
        /*[in]*/ enum cdrOutlineLineCaps LineCaps,
        /*[in]*/ enum cdrOutlineLineJoin LineJoin,
        /*[in]*/ double NibAngle,
        /*[in]*/ long NibStretch,
        /*[in]*/ double DashDotLength,
        /*[in]*/ double PenWidth,
        /*[in]*/ double MiterLimit ) = 0;
      virtual HRESULT __stdcall get_Size (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Size (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall raw_GetCopy (
        /*[out,retval]*/ struct IVGOutline * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_CopyAssign (
        /*[in]*/ struct IVGOutline * SourceOutline ) = 0;
      virtual HRESULT __stdcall raw_UserAssign (
        /*[in]*/ long ParentWindowHandle,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_PSScreen (
        /*[out,retval]*/ struct IVGPSScreenOptions * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_CompareWith (
        /*[in]*/ struct IVGOutline * Outline,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_DashDotLength (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_DashDotLength (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall raw_ToString (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall raw_StringAssign (
        /*[in]*/ BSTR OutlineString,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_PenWidth (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_PenWidth (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_MiterLimit (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_MiterLimit (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall raw_SetNoOutline ( ) = 0;
      virtual HRESULT __stdcall get_StartArrowOptions (
        /*[out,retval]*/ struct IVGArrowHeadOptions * * ppVal ) = 0;
      virtual HRESULT __stdcall put_StartArrowOptions (
        /*[in]*/ struct IVGArrowHeadOptions * ppVal ) = 0;
      virtual HRESULT __stdcall get_EndArrowOptions (
        /*[out,retval]*/ struct IVGArrowHeadOptions * * ppVal ) = 0;
      virtual HRESULT __stdcall put_EndArrowOptions (
        /*[in]*/ struct IVGArrowHeadOptions * ppVal ) = 0;
      virtual HRESULT __stdcall get_Justification (
        /*[out,retval]*/ enum cdrOutlineJustification * pVal ) = 0;
      virtual HRESULT __stdcall put_Justification (
        /*[in]*/ enum cdrOutlineJustification pVal ) = 0;
      virtual HRESULT __stdcall raw_SetPropertiesEx (
        /*[in]*/ double Width,
        /*[in]*/ struct IVGOutlineStyle * Style,
        /*[in]*/ struct IVGColor * Color,
        /*[in]*/ struct IVGArrowHead * StartArrow,
        /*[in]*/ struct IVGArrowHead * EndArrow,
        /*[in]*/ enum cdrTriState BehindFill,
        /*[in]*/ enum cdrTriState ScaleWithShape,
        /*[in]*/ enum cdrOutlineLineCaps LineCaps,
        /*[in]*/ enum cdrOutlineLineJoin LineJoin,
        /*[in]*/ double NibAngle,
        /*[in]*/ long NibStretch,
        /*[in]*/ double DashDotLength,
        /*[in]*/ double PenWidth,
        /*[in]*/ double MiterLimit,
        /*[in]*/ enum cdrOutlineJustification Justification ) = 0;
      virtual HRESULT __stdcall get_AdjustDashes (
        /*[out,retval]*/ enum cdrOutlineDashAdjust * pVal ) = 0;
      virtual HRESULT __stdcall put_AdjustDashes (
        /*[in]*/ enum cdrOutlineDashAdjust pVal ) = 0;
};

struct __declspec(uuid("b058009c-9aa4-44fd-9547-4f91eb757ac4"))
IVGHatchPattern : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetAngle,put=PutAngle))
    double Angle;
    __declspec(property(get=GetOriginX,put=PutOriginX))
    double OriginX;
    __declspec(property(get=GetOriginY,put=PutOriginY))
    double OriginY;
    __declspec(property(get=GetSpacing,put=PutSpacing))
    double Spacing;
    __declspec(property(get=GetShift,put=PutShift))
    double Shift;
    __declspec(property(get=GetShiftPercent,put=PutShiftPercent))
    double ShiftPercent;
    __declspec(property(get=GetOutline))
    IVGOutlinePtr Outline;
    __declspec(property(get=GetIndex))
    long Index;

    //
    // Wrapper methods for error-handling
    //

    double GetAngle ( );
    void PutAngle (
        double pVal );
    double GetOriginX ( );
    void PutOriginX (
        double pVal );
    double GetOriginY ( );
    void PutOriginY (
        double pVal );
    double GetSpacing ( );
    void PutSpacing (
        double pVal );
    double GetShift ( );
    void PutShift (
        double pVal );
    double GetShiftPercent ( );
    void PutShiftPercent (
        double pVal );
    IVGOutlinePtr GetOutline ( );
    long GetIndex ( );
    HRESULT Delete ( );
    HRESULT SetOrigin (
        double OriginX,
        double OriginY );
    HRESULT GetOrigin (
        double * OriginX,
        double * OriginY );
    HRESULT SetProperties (
        const _variant_t & Angle,
        double Spacing,
        const _variant_t & Shift,
        const _variant_t & OriginX,
        const _variant_t & OriginY,
        double Width,
        struct IVGColor * Color,
        struct IVGOutlineStyle * Style,
        double DashDotLength,
        double PenWidth );
    HRESULT Reset ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Angle (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Angle (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_OriginX (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_OriginX (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_OriginY (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_OriginY (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Spacing (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Spacing (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Shift (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Shift (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ShiftPercent (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_ShiftPercent (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Outline (
        /*[out,retval]*/ struct IVGOutline * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Index (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall raw_SetOrigin (
        /*[in]*/ double OriginX,
        /*[in]*/ double OriginY ) = 0;
      virtual HRESULT __stdcall raw_GetOrigin (
        /*[out]*/ double * OriginX,
        /*[out]*/ double * OriginY ) = 0;
      virtual HRESULT __stdcall raw_SetProperties (
        /*[in]*/ VARIANT Angle,
        /*[in]*/ double Spacing,
        /*[in]*/ VARIANT Shift,
        /*[in]*/ VARIANT OriginX,
        /*[in]*/ VARIANT OriginY,
        /*[in]*/ double Width,
        /*[in]*/ struct IVGColor * Color,
        /*[in]*/ struct IVGOutlineStyle * Style,
        /*[in]*/ double DashDotLength,
        /*[in]*/ double PenWidth ) = 0;
      virtual HRESULT __stdcall raw_Reset ( ) = 0;
};

struct __declspec(uuid("b058009b-9aa4-44fd-9547-4f91eb757ac4"))
IVGHatchPatterns : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetItem))
    IVGHatchPatternPtr Item[];
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    IVGHatchPatternPtr GetItem (
        long Index );
    IUnknownPtr Get_NewEnum ( );
    HRESULT Reset ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IVGHatchPattern * * ppVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * pVal ) = 0;
      virtual HRESULT __stdcall raw_Reset ( ) = 0;
};

struct __declspec(uuid("b05800d8-9aa4-44fd-9547-4f91eb757ac4"))
IVGImage : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetType))
    enum cdrImageType Type;
    __declspec(property(get=GetWidth))
    long Width;
    __declspec(property(get=GetHeight))
    long Height;
    __declspec(property(get=GetPixel))
    IVGColorPtr Pixel[][];
    __declspec(property(get=GetReadOnly))
    VARIANT_BOOL ReadOnly;
    __declspec(property(get=GetTiles))
    IVGImageTilesPtr Tiles;

    //
    // Wrapper methods for error-handling
    //

    enum cdrImageType GetType ( );
    long GetWidth ( );
    long GetHeight ( );
    IVGColorPtr GetPixel (
        long x,
        long y );
    IVGImagePtr GetCopy ( );
    VARIANT_BOOL GetReadOnly ( );
    IVGImageTilesPtr GetTiles ( );
    HRESULT Blit (
        long DestX,
        long DestY,
        long DestWidth,
        long DestHeight,
        struct IVGImage * SrcImage,
        long SrcX,
        long SrcY,
        long SrcWidth,
        long SrcHeight,
        enum cdrMergeMode MergeMode );
    HRESULT FillArea (
        long x,
        long y,
        long Width,
        long Height,
        struct IVGColor * Color );
    HRESULT FlipArea (
        long x,
        long y,
        long Width,
        long Height,
        enum cdrFlipAxes Axes );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum cdrImageType * pVal ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_Pixel (
        /*[in]*/ long x,
        /*[in]*/ long y,
        /*[out,retval]*/ struct IVGColor * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_GetCopy (
        /*[out,retval]*/ struct IVGImage * * ppVal ) = 0;
      virtual HRESULT __stdcall get_ReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_Tiles (
        /*[out,retval]*/ struct IVGImageTiles * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_Blit (
        /*[in]*/ long DestX,
        /*[in]*/ long DestY,
        /*[in]*/ long DestWidth,
        /*[in]*/ long DestHeight,
        /*[in]*/ struct IVGImage * SrcImage,
        /*[in]*/ long SrcX,
        /*[in]*/ long SrcY,
        /*[in]*/ long SrcWidth,
        /*[in]*/ long SrcHeight,
        /*[in]*/ enum cdrMergeMode MergeMode ) = 0;
      virtual HRESULT __stdcall raw_FillArea (
        /*[in]*/ long x,
        /*[in]*/ long y,
        /*[in]*/ long Width,
        /*[in]*/ long Height,
        /*[in]*/ struct IVGColor * Color ) = 0;
      virtual HRESULT __stdcall raw_FlipArea (
        /*[in]*/ long x,
        /*[in]*/ long y,
        /*[in]*/ long Width,
        /*[in]*/ long Height,
        /*[in]*/ enum cdrFlipAxes Axes ) = 0;
};

struct __declspec(uuid("b058007d-9aa4-44fd-9547-4f91eb757ac4"))
IVGTransparency : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    IDispatchPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetType))
    enum cdrTransparencyType Type;
    __declspec(property(get=GetUniform,put=PutUniform))
    long Uniform;
    __declspec(property(get=GetFountain,put=PutFountain))
    IVGFountainFillPtr Fountain;
    __declspec(property(get=GetPattern,put=PutPattern))
    IVGPatternFillPtr Pattern;
    __declspec(property(get=GetTexture,put=PutTexture))
    IVGTextureFillPtr Texture;
    __declspec(property(get=GetStart,put=PutStart))
    long Start;
    __declspec(property(get=GetEnd,put=PutEnd))
    long End;
    __declspec(property(get=GetFrozen))
    VARIANT_BOOL Frozen;
    __declspec(property(get=GetAppliedTo,put=PutAppliedTo))
    enum cdrTransparencyAppliedTo AppliedTo;
    __declspec(property(get=GetMergeMode,put=PutMergeMode))
    enum cdrMergeMode MergeMode;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    enum cdrTransparencyType GetType ( );
    long GetUniform ( );
    void PutUniform (
        long pVal );
    IVGFountainFillPtr GetFountain ( );
    void PutFountain (
        struct IVGFountainFill * ppVal );
    IVGPatternFillPtr GetPattern ( );
    void PutPattern (
        struct IVGPatternFill * ppVal );
    IVGTextureFillPtr GetTexture ( );
    void PutTexture (
        struct IVGTextureFill * ppVal );
    long GetStart ( );
    void PutStart (
        long pVal );
    long GetEnd ( );
    void PutEnd (
        long pVal );
    VARIANT_BOOL GetFrozen ( );
    HRESULT ApplyNoTransparency ( );
    HRESULT ApplyUniformTransparency (
        long Value );
    IVGFountainFillPtr ApplyFountainTransparency (
        long Start,
        long End,
        enum cdrFountainFillType Type,
        double Angle,
        long Steps,
        long EdgePad,
        long MidPoint,
        double CenterOffsetX,
        double CenterOffsetY );
    IVGPatternFillPtr ApplyPatternTransparency (
        enum cdrPatternFillType Type,
        _bstr_t FileName,
        long PatternCanvasIndex,
        long Front,
        long Back,
        VARIANT_BOOL TransformWithShape );
    IVGTextureFillPtr ApplyTextureTransparency (
        _bstr_t TextureName,
        _bstr_t LibraryName,
        long Front,
        long Back );
    HRESULT Freeze ( );
    HRESULT Unfreeze ( );
    enum cdrTransparencyAppliedTo GetAppliedTo ( );
    void PutAppliedTo (
        enum cdrTransparencyAppliedTo pVal );
    enum cdrMergeMode GetMergeMode ( );
    void PutMergeMode (
        enum cdrMergeMode pVal );
    VARIANT_BOOL UserAssign (
        enum cdrTransparencyType TransparencyType,
        enum cdrPatternFillType PatternType,
        long ParentWindowHandle );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ IDispatch * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum cdrTransparencyType * pVal ) = 0;
      virtual HRESULT __stdcall get_Uniform (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_Uniform (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_Fountain (
        /*[out,retval]*/ struct IVGFountainFill * * ppVal ) = 0;
      virtual HRESULT __stdcall put_Fountain (
        /*[in]*/ struct IVGFountainFill * ppVal ) = 0;
      virtual HRESULT __stdcall get_Pattern (
        /*[out,retval]*/ struct IVGPatternFill * * ppVal ) = 0;
      virtual HRESULT __stdcall put_Pattern (
        /*[in]*/ struct IVGPatternFill * ppVal ) = 0;
      virtual HRESULT __stdcall get_Texture (
        /*[out,retval]*/ struct IVGTextureFill * * ppVal ) = 0;
      virtual HRESULT __stdcall put_Texture (
        /*[in]*/ struct IVGTextureFill * ppVal ) = 0;
      virtual HRESULT __stdcall get_Start (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_Start (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_End (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_End (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_Frozen (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_ApplyNoTransparency ( ) = 0;
      virtual HRESULT __stdcall raw_ApplyUniformTransparency (
        long Value ) = 0;
      virtual HRESULT __stdcall raw_ApplyFountainTransparency (
        /*[in]*/ long Start,
        /*[in]*/ long End,
        /*[in]*/ enum cdrFountainFillType Type,
        /*[in]*/ double Angle,
        /*[in]*/ long Steps,
        /*[in]*/ long EdgePad,
        /*[in]*/ long MidPoint,
        /*[in]*/ double CenterOffsetX,
        /*[in]*/ double CenterOffsetY,
        /*[out,retval]*/ struct IVGFountainFill * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_ApplyPatternTransparency (
        /*[in]*/ enum cdrPatternFillType Type,
        /*[in]*/ BSTR FileName,
        /*[in]*/ long PatternCanvasIndex,
        /*[in]*/ long Front,
        /*[in]*/ long Back,
        /*[in]*/ VARIANT_BOOL TransformWithShape,
        /*[out,retval]*/ struct IVGPatternFill * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_ApplyTextureTransparency (
        /*[in]*/ BSTR TextureName,
        /*[in]*/ BSTR LibraryName,
        /*[in]*/ long Front,
        /*[in]*/ long Back,
        /*[out,retval]*/ struct IVGTextureFill * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_Freeze ( ) = 0;
      virtual HRESULT __stdcall raw_Unfreeze ( ) = 0;
      virtual HRESULT __stdcall get_AppliedTo (
        /*[out,retval]*/ enum cdrTransparencyAppliedTo * pVal ) = 0;
      virtual HRESULT __stdcall put_AppliedTo (
        /*[in]*/ enum cdrTransparencyAppliedTo pVal ) = 0;
      virtual HRESULT __stdcall get_MergeMode (
        /*[out,retval]*/ enum cdrMergeMode * pVal ) = 0;
      virtual HRESULT __stdcall put_MergeMode (
        /*[in]*/ enum cdrMergeMode pVal ) = 0;
      virtual HRESULT __stdcall raw_UserAssign (
        /*[in]*/ enum cdrTransparencyType TransparencyType,
        /*[in]*/ enum cdrPatternFillType PatternType,
        /*[in]*/ long ParentWindowHandle,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
};

struct __declspec(uuid("b0580021-9aa4-44fd-9547-4f91eb757ac4"))
IVGDimension : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetType))
    enum cdrDimensionType Type;
    __declspec(property(get=GetLinear))
    IVGDimensionLinearPtr Linear;
    __declspec(property(get=GetAngular))
    IVGDimensionAngularPtr Angular;
    __declspec(property(get=GetPrecision,put=PutPrecision))
    long Precision;
    __declspec(property(get=GetBoxedText,put=PutBoxedText))
    VARIANT_BOOL BoxedText;
    __declspec(property(get=GetLeadingZero,put=PutLeadingZero))
    VARIANT_BOOL LeadingZero;
    __declspec(property(get=GetTextShape))
    IVGShapePtr TextShape;
    __declspec(property(get=GetPrefix,put=PutPrefix))
    _bstr_t Prefix;
    __declspec(property(get=GetSuffix,put=PutSuffix))
    _bstr_t Suffix;
    __declspec(property(get=GetOutline))
    IVGOutlinePtr Outline;
    __declspec(property(get=GetTextCentered,put=PutTextCentered))
    VARIANT_BOOL TextCentered;
    __declspec(property(get=GetShowUnits,put=PutShowUnits))
    VARIANT_BOOL ShowUnits;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    enum cdrDimensionPlacement Placement;
    __declspec(property(get=GetHorizontalText,put=PutHorizontalText))
    VARIANT_BOOL HorizontalText;
    __declspec(property(get=GetDynamicText,put=PutDynamicText))
    VARIANT_BOOL DynamicText;
    __declspec(property(get=GetDistanceFromObject))
    double DistanceFromObject;
    __declspec(property(get=GetUseDistanceFromObject,put=PutUseDistanceFromObject))
    VARIANT_BOOL UseDistanceFromObject;
    __declspec(property(get=GetOverhang))
    double Overhang;
    __declspec(property(get=GetUseOverhang,put=PutUseOverhang))
    VARIANT_BOOL UseOverhang;
    __declspec(property(get=GetTextLabelGap))
    double TextLabelGap;
    __declspec(property(get=GetUseTextLabelGap,put=PutUseTextLabelGap))
    VARIANT_BOOL UseTextLabelGap;
    __declspec(property(get=GetExtensionLinesVisible,put=PutExtensionLinesVisible))
    VARIANT_BOOL ExtensionLinesVisible;
    __declspec(property(get=GetInnerExtensionLinesVisible,put=PutInnerExtensionLinesVisible))
    VARIANT_BOOL InnerExtensionLinesVisible;
    __declspec(property(get=GetGapOnFreeExtensionVisible,put=PutGapOnFreeExtensionVisible))
    VARIANT_BOOL GapOnFreeExtensionVisible;

    //
    // Wrapper methods for error-handling
    //

    enum cdrDimensionType GetType ( );
    IVGDimensionLinearPtr GetLinear ( );
    IVGDimensionAngularPtr GetAngular ( );
    long GetPrecision ( );
    void PutPrecision (
        long pVal );
    VARIANT_BOOL GetBoxedText ( );
    void PutBoxedText (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetLeadingZero ( );
    void PutLeadingZero (
        VARIANT_BOOL pVal );
    IVGShapePtr GetTextShape ( );
    _bstr_t GetPrefix ( );
    void PutPrefix (
        _bstr_t pVal );
    _bstr_t GetSuffix ( );
    void PutSuffix (
        _bstr_t pVal );
    IVGOutlinePtr GetOutline ( );
    VARIANT_BOOL GetTextCentered ( );
    void PutTextCentered (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetShowUnits ( );
    void PutShowUnits (
        VARIANT_BOOL pVal );
    enum cdrDimensionPlacement GetPlacement ( );
    void PutPlacement (
        enum cdrDimensionPlacement pVal );
    VARIANT_BOOL GetHorizontalText ( );
    void PutHorizontalText (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetDynamicText ( );
    void PutDynamicText (
        VARIANT_BOOL pVal );
    double GetDistanceFromObject ( );
    VARIANT_BOOL GetUseDistanceFromObject ( );
    void PutUseDistanceFromObject (
        VARIANT_BOOL pVal );
    HRESULT SetDistanceFromObject (
        double Distance );
    double GetOverhang ( );
    VARIANT_BOOL GetUseOverhang ( );
    void PutUseOverhang (
        VARIANT_BOOL pVal );
    HRESULT SetOverhang (
        double Overhang );
    double GetTextLabelGap ( );
    VARIANT_BOOL GetUseTextLabelGap ( );
    void PutUseTextLabelGap (
        VARIANT_BOOL pVal );
    HRESULT SetTextLabelGap (
        double Gap );
    VARIANT_BOOL GetExtensionLinesVisible ( );
    void PutExtensionLinesVisible (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetInnerExtensionLinesVisible ( );
    void PutInnerExtensionLinesVisible (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetGapOnFreeExtensionVisible ( );
    void PutGapOnFreeExtensionVisible (
        VARIANT_BOOL pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum cdrDimensionType * pVal ) = 0;
      virtual HRESULT __stdcall get_Linear (
        /*[out,retval]*/ struct IVGDimensionLinear * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Angular (
        /*[out,retval]*/ struct IVGDimensionAngular * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Precision (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_Precision (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_BoxedText (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_BoxedText (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_LeadingZero (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_LeadingZero (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_TextShape (
        /*[out,retval]*/ struct IVGShape * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Prefix (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Prefix (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Suffix (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Suffix (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Outline (
        /*[out,retval]*/ struct IVGOutline * * ppVal ) = 0;
      virtual HRESULT __stdcall get_TextCentered (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_TextCentered (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_ShowUnits (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_ShowUnits (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Placement (
        /*[out,retval]*/ enum cdrDimensionPlacement * pVal ) = 0;
      virtual HRESULT __stdcall put_Placement (
        /*[in]*/ enum cdrDimensionPlacement pVal ) = 0;
      virtual HRESULT __stdcall get_HorizontalText (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_HorizontalText (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_DynamicText (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_DynamicText (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_DistanceFromObject (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_UseDistanceFromObject (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_UseDistanceFromObject (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall raw_SetDistanceFromObject (
        /*[in]*/ double Distance ) = 0;
      virtual HRESULT __stdcall get_Overhang (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_UseOverhang (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_UseOverhang (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall raw_SetOverhang (
        /*[in]*/ double Overhang ) = 0;
      virtual HRESULT __stdcall get_TextLabelGap (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_UseTextLabelGap (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_UseTextLabelGap (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall raw_SetTextLabelGap (
        /*[in]*/ double Gap ) = 0;
      virtual HRESULT __stdcall get_ExtensionLinesVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_ExtensionLinesVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_InnerExtensionLinesVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_InnerExtensionLinesVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_GapOnFreeExtensionVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_GapOnFreeExtensionVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
};

struct __declspec(uuid("b05800e8-9aa4-44fd-9547-4f91eb757ac4"))
IVGCommentAnnotation : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetEndArrowVisible,put=PutEndArrowVisible))
    VARIANT_BOOL EndArrowVisible;
    __declspec(property(get=GetCurve,put=PutCurve))
    IVGCurvePtr Curve;
    __declspec(property(get=GetOutlineWidth,put=PutOutlineWidth))
    long OutlineWidth;
    __declspec(property(get=GetFillColor,put=PutFillColor))
    IVGColorPtr FillColor;
    __declspec(property(get=GetOutlineColor,put=PutOutlineColor))
    IVGColorPtr OutlineColor;
    __declspec(property(get=GetType))
    enum cdrCommentAnnotationType Type;
    __declspec(property(get=GetStartArrowVisible,put=PutStartArrowVisible))
    VARIANT_BOOL StartArrowVisible;
    __declspec(property(get=GetSizeWidth,put=PutSizeWidth))
    double SizeWidth;
    __declspec(property(get=GetSizeHeight,put=PutSizeHeight))
    double SizeHeight;
    __declspec(property(get=GetLeftX,put=PutLeftX))
    double LeftX;
    __declspec(property(get=GetRightX,put=PutRightX))
    double RightX;
    __declspec(property(get=GetTopY,put=PutTopY))
    double TopY;
    __declspec(property(get=GetBottomY,put=PutBottomY))
    double BottomY;
    __declspec(property(get=GetCenterX,put=PutCenterX))
    double CenterX;
    __declspec(property(get=GetCenterY,put=PutCenterY))
    double CenterY;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetEndArrowVisible ( );
    void PutEndArrowVisible (
        VARIANT_BOOL pRet );
    IVGCurvePtr GetCurve ( );
    void PutCurve (
        struct IVGCurve * pRet );
    long GetOutlineWidth ( );
    void PutOutlineWidth (
        long pRet );
    IVGColorPtr GetFillColor ( );
    void PutFillColor (
        struct IVGColor * pRet );
    IVGColorPtr GetOutlineColor ( );
    void PutOutlineColor (
        struct IVGColor * pRet );
    enum cdrCommentAnnotationType GetType ( );
    VARIANT_BOOL GetStartArrowVisible ( );
    void PutStartArrowVisible (
        VARIANT_BOOL pRet );
    HRESULT Move (
        double DeltaX,
        double DeltaY );
    double GetSizeWidth ( );
    void PutSizeWidth (
        double pVal );
    double GetSizeHeight ( );
    void PutSizeHeight (
        double pVal );
    double GetLeftX ( );
    void PutLeftX (
        double pVal );
    double GetRightX ( );
    void PutRightX (
        double pVal );
    double GetTopY ( );
    void PutTopY (
        double pVal );
    double GetBottomY ( );
    void PutBottomY (
        double pVal );
    double GetCenterX ( );
    void PutCenterX (
        double pVal );
    double GetCenterY ( );
    void PutCenterY (
        double pVal );
    HRESULT SetPosition (
        enum cdrReferencePoint ReferencePoint,
        double x,
        double y );
    HRESULT GetPosition (
        enum cdrReferencePoint ReferencePoint,
        double * x,
        double * y );
    HRESULT SetSize (
        enum cdrReferencePoint ReferencePoint,
        double Width,
        double Height );
    HRESULT GetSize (
        double * Width,
        double * Height );
    HRESULT GetBoundingBox (
        double * x,
        double * y,
        double * Width,
        double * Height );
    HRESULT SetBoundingBox (
        double x,
        double y,
        double Width,
        double Height,
        VARIANT_BOOL KeepAspect,
        enum cdrReferencePoint ReferencePoint );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_EndArrowVisible (
        /*[out,retval]*/ VARIANT_BOOL * pRet ) = 0;
      virtual HRESULT __stdcall put_EndArrowVisible (
        /*[in]*/ VARIANT_BOOL pRet ) = 0;
      virtual HRESULT __stdcall get_Curve (
        /*[out,retval]*/ struct IVGCurve * * pRet ) = 0;
      virtual HRESULT __stdcall put_Curve (
        /*[in]*/ struct IVGCurve * pRet ) = 0;
      virtual HRESULT __stdcall get_OutlineWidth (
        /*[out,retval]*/ long * pRet ) = 0;
      virtual HRESULT __stdcall put_OutlineWidth (
        /*[in]*/ long pRet ) = 0;
      virtual HRESULT __stdcall get_FillColor (
        /*[out,retval]*/ struct IVGColor * * pRet ) = 0;
      virtual HRESULT __stdcall put_FillColor (
        /*[in]*/ struct IVGColor * pRet ) = 0;
      virtual HRESULT __stdcall get_OutlineColor (
        /*[out,retval]*/ struct IVGColor * * pRet ) = 0;
      virtual HRESULT __stdcall put_OutlineColor (
        /*[in]*/ struct IVGColor * pRet ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum cdrCommentAnnotationType * pRet ) = 0;
      virtual HRESULT __stdcall get_StartArrowVisible (
        /*[out,retval]*/ VARIANT_BOOL * pRet ) = 0;
      virtual HRESULT __stdcall put_StartArrowVisible (
        /*[in]*/ VARIANT_BOOL pRet ) = 0;
      virtual HRESULT __stdcall raw_Move (
        /*[in]*/ double DeltaX,
        /*[in]*/ double DeltaY ) = 0;
      virtual HRESULT __stdcall get_SizeWidth (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_SizeWidth (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_SizeHeight (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_SizeHeight (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_LeftX (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LeftX (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_RightX (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_RightX (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_TopY (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_TopY (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_BottomY (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_BottomY (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_CenterX (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_CenterX (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_CenterY (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_CenterY (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall raw_SetPosition (
        /*[in]*/ enum cdrReferencePoint ReferencePoint,
        /*[in]*/ double x,
        /*[in]*/ double y ) = 0;
      virtual HRESULT __stdcall raw_GetPosition (
        /*[in]*/ enum cdrReferencePoint ReferencePoint,
        /*[out]*/ double * x,
        /*[out]*/ double * y ) = 0;
      virtual HRESULT __stdcall raw_SetSize (
        /*[in]*/ enum cdrReferencePoint ReferencePoint,
        /*[in]*/ double Width,
        /*[in]*/ double Height ) = 0;
      virtual HRESULT __stdcall raw_GetSize (
        /*[out]*/ double * Width,
        /*[out]*/ double * Height ) = 0;
      virtual HRESULT __stdcall raw_GetBoundingBox (
        /*[out]*/ double * x,
        /*[out]*/ double * y,
        /*[out]*/ double * Width,
        /*[out]*/ double * Height ) = 0;
      virtual HRESULT __stdcall raw_SetBoundingBox (
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[in]*/ double Width,
        /*[in]*/ double Height,
        /*[in]*/ VARIANT_BOOL KeepAspect,
        /*[in]*/ enum cdrReferencePoint ReferencePoint ) = 0;
};

struct __declspec(uuid("b05800b0-9aa4-44fd-9547-4f91eb757ac4"))
IVGColorContext : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetRGBColorProfile,put=PutRGBColorProfile))
    IVGColorProfilePtr RGBColorProfile;
    __declspec(property(get=GetCMYKColorProfile,put=PutCMYKColorProfile))
    IVGColorProfilePtr CMYKColorProfile;
    __declspec(property(get=GetGrayscaleColorProfile,put=PutGrayscaleColorProfile))
    IVGColorProfilePtr GrayscaleColorProfile;
    __declspec(property(get=GetRenderingIntent,put=PutRenderingIntent))
    enum clrRenderingIntent RenderingIntent;
    __declspec(property(get=GetBlendingColorModel,put=PutBlendingColorModel))
    enum clrColorModel BlendingColorModel;
    __declspec(property(get=GetColorProfile,put=PutColorProfile))
    IVGColorProfilePtr ColorProfile[];
    __declspec(property(get=GetColorProfiles))
    IVGColorProfilesPtr ColorProfiles;
    __declspec(property(get=GetReadOnly))
    VARIANT_BOOL ReadOnly;
    __declspec(property(get=GetColorProfileNameList))
    _bstr_t ColorProfileNameList;

    //
    // Wrapper methods for error-handling
    //

    IVGColorProfilePtr GetRGBColorProfile ( );
    void PutRGBColorProfile (
        struct IVGColorProfile * ppVal );
    IVGColorProfilePtr GetCMYKColorProfile ( );
    void PutCMYKColorProfile (
        struct IVGColorProfile * ppVal );
    IVGColorProfilePtr GetGrayscaleColorProfile ( );
    void PutGrayscaleColorProfile (
        struct IVGColorProfile * ppVal );
    enum clrRenderingIntent GetRenderingIntent ( );
    void PutRenderingIntent (
        enum clrRenderingIntent pVal );
    enum clrColorModel GetBlendingColorModel ( );
    void PutBlendingColorModel (
        enum clrColorModel pVal );
    IVGColorContextPtr GetCopy ( );
    HRESULT CopyAssign (
        struct IVGColorContext * ColorContext );
    IVGColorProfilePtr GetColorProfile (
        enum clrColorModel ColorModel );
    void PutColorProfile (
        enum clrColorModel ColorModel,
        struct IVGColorProfile * ppVal );
    VARIANT_BOOL Merge (
        struct IVGColorContext * ColorContext );
    VARIANT_BOOL IsSame (
        struct IVGColorContext * ColorContext );
    IVGColorProfilesPtr GetColorProfiles ( );
    VARIANT_BOOL GetReadOnly ( );
    _bstr_t GetColorProfileNameList ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_RGBColorProfile (
        /*[out,retval]*/ struct IVGColorProfile * * ppVal ) = 0;
      virtual HRESULT __stdcall put_RGBColorProfile (
        /*[in]*/ struct IVGColorProfile * ppVal ) = 0;
      virtual HRESULT __stdcall get_CMYKColorProfile (
        /*[out,retval]*/ struct IVGColorProfile * * ppVal ) = 0;
      virtual HRESULT __stdcall put_CMYKColorProfile (
        /*[in]*/ struct IVGColorProfile * ppVal ) = 0;
      virtual HRESULT __stdcall get_GrayscaleColorProfile (
        /*[out,retval]*/ struct IVGColorProfile * * ppVal ) = 0;
      virtual HRESULT __stdcall put_GrayscaleColorProfile (
        /*[in]*/ struct IVGColorProfile * ppVal ) = 0;
      virtual HRESULT __stdcall get_RenderingIntent (
        /*[out,retval]*/ enum clrRenderingIntent * pVal ) = 0;
      virtual HRESULT __stdcall put_RenderingIntent (
        /*[in]*/ enum clrRenderingIntent pVal ) = 0;
      virtual HRESULT __stdcall get_BlendingColorModel (
        /*[out,retval]*/ enum clrColorModel * pVal ) = 0;
      virtual HRESULT __stdcall put_BlendingColorModel (
        /*[in]*/ enum clrColorModel pVal ) = 0;
      virtual HRESULT __stdcall raw_GetCopy (
        /*[out,retval]*/ struct IVGColorContext * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_CopyAssign (
        /*[in]*/ struct IVGColorContext * ColorContext ) = 0;
      virtual HRESULT __stdcall get_ColorProfile (
        /*[in]*/ enum clrColorModel ColorModel,
        /*[out,retval]*/ struct IVGColorProfile * * ppVal ) = 0;
      virtual HRESULT __stdcall put_ColorProfile (
        /*[in]*/ enum clrColorModel ColorModel,
        /*[in]*/ struct IVGColorProfile * ppVal ) = 0;
      virtual HRESULT __stdcall raw_Merge (
        /*[in]*/ struct IVGColorContext * ColorContext,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_IsSame (
        /*[in]*/ struct IVGColorContext * ColorContext,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_ColorProfiles (
        /*[out,retval]*/ struct IVGColorProfiles * * ppVal ) = 0;
      virtual HRESULT __stdcall get_ReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_ColorProfileNameList (
        /*[out,retval]*/ BSTR * pVal ) = 0;
};

struct __declspec(uuid("b0580098-9aa4-44fd-9547-4f91eb757ac4"))
IVGColorProfile : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetFileName))
    _bstr_t FileName;
    __declspec(property(get=GetManufacturer))
    _bstr_t Manufacturer;
    __declspec(property(get=GetDeviceModel))
    _bstr_t DeviceModel;
    __declspec(property(get=GetDeviceType))
    enum clrDeviceType DeviceType;
    __declspec(property(get=GetSelected))
    VARIANT_BOOL Selected;
    __declspec(property(get=GetGeneric))
    VARIANT_BOOL Generic;
    __declspec(property(get=GetInstalled))
    VARIANT_BOOL Installed;
    __declspec(property(get=GetID))
    _bstr_t ID;
    __declspec(property(get=GetColorModel))
    enum clrColorModel ColorModel;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetName ( );
    _bstr_t GetFileName ( );
    _bstr_t GetManufacturer ( );
    _bstr_t GetDeviceModel ( );
    enum clrDeviceType GetDeviceType ( );
    VARIANT_BOOL GetSelected ( );
    HRESULT Select ( );
    VARIANT_BOOL GetGeneric ( );
    VARIANT_BOOL GetInstalled ( );
    _bstr_t GetID ( );
    enum clrColorModel GetColorModel ( );
    IVGColorContextPtr CreateColorContext (
        enum clrRenderingIntent RenderingIntent );
    VARIANT_BOOL IsSame (
        struct IVGColorProfile * ColorProfile );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_FileName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_Manufacturer (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_DeviceModel (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_DeviceType (
        /*[out,retval]*/ enum clrDeviceType * pVal ) = 0;
      virtual HRESULT __stdcall get_Selected (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_Select ( ) = 0;
      virtual HRESULT __stdcall get_Generic (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_Installed (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_ID (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_ColorModel (
        /*[out,retval]*/ enum clrColorModel * pVal ) = 0;
      virtual HRESULT __stdcall raw_CreateColorContext (
        /*[in]*/ enum clrRenderingIntent RenderingIntent,
        /*[out,retval]*/ struct IVGColorContext * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_IsSame (
        /*[in]*/ struct IVGColorProfile * ColorProfile,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
};

struct __declspec(uuid("b0580099-9aa4-44fd-9547-4f91eb757ac4"))
IVGColorProfiles : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IVGColorProfilePtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetDeviceType))
    enum clrDeviceType DeviceType;
    __declspec(property(get=GetGenericProfile))
    IVGColorProfilePtr GenericProfile;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IVGColorProfilePtr GetItem (
        const _variant_t & IndexOrName );
    long GetCount ( );
    IUnknownPtr Get_NewEnum ( );
    enum clrDeviceType GetDeviceType ( );
    VARIANT_BOOL SelectByName (
        _bstr_t Name );
    VARIANT_BOOL Install (
        _bstr_t FileName );
    IVGColorProfilePtr GetGenericProfile ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT IndexOrName,
        /*[out,retval]*/ struct IVGColorProfile * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * pVal ) = 0;
      virtual HRESULT __stdcall get_DeviceType (
        /*[out,retval]*/ enum clrDeviceType * pVal ) = 0;
      virtual HRESULT __stdcall raw_SelectByName (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_Install (
        /*[in]*/ BSTR FileName,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_GenericProfile (
        /*[out,retval]*/ struct IVGColorProfile * * ppVal ) = 0;
};

struct __declspec(uuid("b05800b6-9aa4-44fd-9547-4f91eb757ac4"))
IVGProofColorSettings : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetColorContext,put=PutColorContext))
    IVGColorContextPtr ColorContext;
    __declspec(property(get=GetShowOutOfGamutWarning,put=PutShowOutOfGamutWarning))
    VARIANT_BOOL ShowOutOfGamutWarning;
    __declspec(property(get=GetOutOfGamutColor,put=PutOutOfGamutColor))
    IVGColorPtr OutOfGamutColor;
    __declspec(property(get=GetOutOfGamutTransparency,put=PutOutOfGamutTransparency))
    double OutOfGamutTransparency;
    __declspec(property(get=GetPreserveColorValues,put=PutPreserveColorValues))
    VARIANT_BOOL PreserveColorValues;

    //
    // Wrapper methods for error-handling
    //

    IVGColorContextPtr GetColorContext ( );
    void PutColorContext (
        struct IVGColorContext * ppVal );
    VARIANT_BOOL GetShowOutOfGamutWarning ( );
    void PutShowOutOfGamutWarning (
        VARIANT_BOOL pVal );
    IVGColorPtr GetOutOfGamutColor ( );
    void PutOutOfGamutColor (
        struct IVGColor * ppVal );
    double GetOutOfGamutTransparency ( );
    void PutOutOfGamutTransparency (
        double pVal );
    VARIANT_BOOL GetPreserveColorValues ( );
    void PutPreserveColorValues (
        VARIANT_BOOL pVal );
    IVGProofColorSettingsPtr GetCopy ( );
    HRESULT CopyAssign (
        struct IVGProofColorSettings * Source );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ColorContext (
        /*[out,retval]*/ struct IVGColorContext * * ppVal ) = 0;
      virtual HRESULT __stdcall put_ColorContext (
        /*[in]*/ struct IVGColorContext * ppVal ) = 0;
      virtual HRESULT __stdcall get_ShowOutOfGamutWarning (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_ShowOutOfGamutWarning (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_OutOfGamutColor (
        /*[out,retval]*/ struct IVGColor * * ppVal ) = 0;
      virtual HRESULT __stdcall put_OutOfGamutColor (
        /*[in]*/ struct IVGColor * ppVal ) = 0;
      virtual HRESULT __stdcall get_OutOfGamutTransparency (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_OutOfGamutTransparency (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_PreserveColorValues (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_PreserveColorValues (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall raw_GetCopy (
        /*[out,retval]*/ struct IVGProofColorSettings * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_CopyAssign (
        /*[in]*/ struct IVGProofColorSettings * Source ) = 0;
};

struct __declspec(uuid("b0580063-9aa4-44fd-9547-4f91eb757ac4"))
IVGStructExportOptions : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetSizeX,put=PutSizeX))
    long SizeX;
    __declspec(property(get=GetMatteMaskedOnly,put=PutMatteMaskedOnly))
    VARIANT_BOOL MatteMaskedOnly;
    __declspec(property(get=GetSizeY,put=PutSizeY))
    long SizeY;
    __declspec(property(get=GetAlwaysOverprintBlack,put=PutAlwaysOverprintBlack))
    VARIANT_BOOL AlwaysOverprintBlack;
    __declspec(property(get=GetResolutionX,put=PutResolutionX))
    long ResolutionX;
    __declspec(property(get=GetProofColorSettings,put=PutProofColorSettings))
    IVGProofColorSettingsPtr ProofColorSettings;
    __declspec(property(get=GetResolutionY,put=PutResolutionY))
    long ResolutionY;
    __declspec(property(get=GetAntiAliasingType,put=PutAntiAliasingType))
    enum cdrAntiAliasingType AntiAliasingType;
    __declspec(property(get=GetOverwrite,put=PutOverwrite))
    VARIANT_BOOL Overwrite;
    __declspec(property(get=GetImageType,put=PutImageType))
    enum cdrImageType ImageType;
    __declspec(property(get=GetDithered,put=PutDithered))
    VARIANT_BOOL Dithered;
    __declspec(property(get=GetTransparent,put=PutTransparent))
    VARIANT_BOOL Transparent;
    __declspec(property(get=GetUseColorProfile,put=PutUseColorProfile))
    VARIANT_BOOL UseColorProfile;
    __declspec(property(get=GetCompression,put=PutCompression))
    enum cdrCompressionType Compression;
    __declspec(property(get=GetMaintainLayers,put=PutMaintainLayers))
    VARIANT_BOOL MaintainLayers;
    __declspec(property(get=GetMaintainAspect,put=PutMaintainAspect))
    VARIANT_BOOL MaintainAspect;
    __declspec(property(get=GetMatted,put=PutMatted))
    VARIANT_BOOL Matted;
    __declspec(property(get=GetMatteColor,put=PutMatteColor))
    IVGColorPtr MatteColor;

    //
    // Wrapper methods for error-handling
    //

    void PutSizeX (
        long pVal );
    long GetSizeX ( );
    void PutSizeY (
        long pVal );
    long GetSizeY ( );
    void PutResolutionX (
        long pVal );
    long GetResolutionX ( );
    void PutResolutionY (
        long pVal );
    long GetResolutionY ( );
    void PutAntiAliasingType (
        enum cdrAntiAliasingType pVal );
    enum cdrAntiAliasingType GetAntiAliasingType ( );
    void PutOverwrite (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetOverwrite ( );
    void PutImageType (
        enum cdrImageType pVal );
    enum cdrImageType GetImageType ( );
    void PutDithered (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetDithered ( );
    void PutTransparent (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetTransparent ( );
    void PutUseColorProfile (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetUseColorProfile ( );
    void PutCompression (
        enum cdrCompressionType pVal );
    enum cdrCompressionType GetCompression ( );
    void PutMaintainLayers (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetMaintainLayers ( );
    void PutMaintainAspect (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetMaintainAspect ( );
    IVGRectPtr GetExportArea ( );
    void PutRefExportArea (
        struct IVGRect * * ppVal );
    void PutMatted (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetMatted ( );
    IVGColorPtr GetMatteColor ( );
    void PutMatteColor (
        struct IVGColor * ppVal );
    void PutMatteMaskedOnly (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetMatteMaskedOnly ( );
    void PutAlwaysOverprintBlack (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetAlwaysOverprintBlack ( );
    IVGProofColorSettingsPtr GetProofColorSettings ( );
    void PutProofColorSettings (
        struct IVGProofColorSettings * ppVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_SizeX (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_SizeX (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_SizeY (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_SizeY (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_ResolutionX (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_ResolutionX (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_ResolutionY (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_ResolutionY (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_AntiAliasingType (
        /*[in]*/ enum cdrAntiAliasingType pVal ) = 0;
      virtual HRESULT __stdcall get_AntiAliasingType (
        /*[out,retval]*/ enum cdrAntiAliasingType * pVal ) = 0;
      virtual HRESULT __stdcall put_Overwrite (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Overwrite (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_ImageType (
        /*[in]*/ enum cdrImageType pVal ) = 0;
      virtual HRESULT __stdcall get_ImageType (
        /*[out,retval]*/ enum cdrImageType * pVal ) = 0;
      virtual HRESULT __stdcall put_Dithered (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Dithered (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_Transparent (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Transparent (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_UseColorProfile (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_UseColorProfile (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_Compression (
        /*[in]*/ enum cdrCompressionType pVal ) = 0;
      virtual HRESULT __stdcall get_Compression (
        /*[out,retval]*/ enum cdrCompressionType * pVal ) = 0;
      virtual HRESULT __stdcall put_MaintainLayers (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_MaintainLayers (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_MaintainAspect (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_MaintainAspect (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_ExportArea (
        /*[out,retval]*/ struct IVGRect * * ppVal ) = 0;
      virtual HRESULT __stdcall putref_ExportArea (
        /*[in]*/ struct IVGRect * * ppVal ) = 0;
      virtual HRESULT __stdcall put_Matted (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Matted (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_MatteColor (
        /*[out,retval]*/ struct IVGColor * * ppVal ) = 0;
      virtual HRESULT __stdcall put_MatteColor (
        /*[in]*/ struct IVGColor * ppVal ) = 0;
      virtual HRESULT __stdcall put_MatteMaskedOnly (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_MatteMaskedOnly (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_AlwaysOverprintBlack (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_AlwaysOverprintBlack (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_ProofColorSettings (
        /*[out,retval]*/ struct IVGProofColorSettings * * ppVal ) = 0;
      virtual HRESULT __stdcall put_ProofColorSettings (
        /*[in]*/ struct IVGProofColorSettings * ppVal ) = 0;
};

struct __declspec(uuid("b0580097-9aa4-44fd-9547-4f91eb757ac4"))
IVGColorManager : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetScannerCalibrated,put=PutScannerCalibrated))
    VARIANT_BOOL ScannerCalibrated;
    __declspec(property(get=GetSeparationPrinterCalibrated,put=PutSeparationPrinterCalibrated))
    VARIANT_BOOL SeparationPrinterCalibrated;
    __declspec(property(get=GetCompositePrinterCalibrated))
    VARIANT_BOOL CompositePrinterCalibrated;
    __declspec(property(get=GetCompositePrinterCalibration,put=PutCompositePrinterCalibration))
    enum clrCompPrnCalibration CompositePrinterCalibration;
    __declspec(property(get=GetMonitorCalibration,put=PutMonitorCalibration))
    enum clrMonitorCalibration MonitorCalibration;
    __declspec(property(get=GetCompositePrinterSimulatesSeparation))
    VARIANT_BOOL CompositePrinterSimulatesSeparation;
    __declspec(property(get=GetShowOutOfGamut,put=PutShowOutOfGamut))
    VARIANT_BOOL ShowOutOfGamut;
    __declspec(property(get=GetOutOfGamutColor,put=PutOutOfGamutColor))
    IVGColorPtr OutOfGamutColor;
    __declspec(property(get=GetOutOfGamutTransparency,put=PutOutOfGamutTransparency))
    long OutOfGamutTransparency;
    __declspec(property(get=GetCMYKInPercents,put=PutCMYKInPercents))
    VARIANT_BOOL CMYKInPercents;
    __declspec(property(get=GetCMYKGamutForSpotColors,put=PutCMYKGamutForSpotColors))
    VARIANT_BOOL CMYKGamutForSpotColors;
    __declspec(property(get=GetRenderingIntent,put=PutRenderingIntent))
    enum clrRenderingIntent RenderingIntent;
    __declspec(property(get=GetColorEngine,put=PutColorEngine))
    enum clrColorEngine ColorEngine;
    __declspec(property(get=GetStyleCount))
    long StyleCount;
    __declspec(property(get=GetStyleByIndex))
    _bstr_t StyleByIndex[];
    __declspec(property(get=GetCurrentProfile))
    IVGColorProfilePtr CurrentProfile[];
    __declspec(property(get=GetInstalledProfiles))
    IVGColorProfilesPtr InstalledProfiles[];
    __declspec(property(get=GetIsICM2Available))
    VARIANT_BOOL IsICM2Available;
    __declspec(property(get=GetUnsavedStyleName))
    _bstr_t UnsavedStyleName;
    __declspec(property(get=GetGenericProfileName))
    _bstr_t GenericProfileName[];
    __declspec(property(get=GetIsCompositePrinterCMYK))
    VARIANT_BOOL IsCompositePrinterCMYK;
    __declspec(property(get=GetColorCorrectionOnImport,put=PutColorCorrectionOnImport))
    enum clrImportColorCorrection ColorCorrectionOnImport;
    __declspec(property(get=GetColorCorrectionOnExport,put=PutColorCorrectionOnExport))
    enum clrExportColorCorrection ColorCorrectionOnExport;
    __declspec(property(get=GetMonitorColorProfiles))
    IVGColorProfilesPtr MonitorColorProfiles;
    __declspec(property(get=GetDefaultColorContext))
    IVGColorContextPtr DefaultColorContext;
    __declspec(property(get=GetMapGrayToCMYKBlack,put=PutMapGrayToCMYKBlack))
    VARIANT_BOOL MapGrayToCMYKBlack;
    __declspec(property(get=GetPreservePureBlack,put=PutPreservePureBlack))
    VARIANT_BOOL PreservePureBlack;
    __declspec(property(get=GetSpotColorDefinition,put=PutSpotColorDefinition))
    enum clrColorModel SpotColorDefinition;
    __declspec(property(get=GetColorProfiles))
    IVGColorProfilesPtr ColorProfiles;
    __declspec(property(get=GetPolicyForOpen))
    IVGColorManagementPolicyPtr PolicyForOpen;
    __declspec(property(get=GetPolicyForImport))
    IVGColorManagementPolicyPtr PolicyForImport;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetScannerCalibrated ( );
    void PutScannerCalibrated (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetSeparationPrinterCalibrated ( );
    void PutSeparationPrinterCalibrated (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetCompositePrinterCalibrated ( );
    enum clrCompPrnCalibration GetCompositePrinterCalibration ( );
    void PutCompositePrinterCalibration (
        enum clrCompPrnCalibration pVal );
    enum clrMonitorCalibration GetMonitorCalibration ( );
    void PutMonitorCalibration (
        enum clrMonitorCalibration pVal );
    VARIANT_BOOL GetCompositePrinterSimulatesSeparation ( );
    VARIANT_BOOL GetShowOutOfGamut ( );
    void PutShowOutOfGamut (
        VARIANT_BOOL pVal );
    IVGColorPtr GetOutOfGamutColor ( );
    void PutOutOfGamutColor (
        struct IVGColor * ppVal );
    long GetOutOfGamutTransparency ( );
    void PutOutOfGamutTransparency (
        long pVal );
    VARIANT_BOOL GetCMYKInPercents ( );
    void PutCMYKInPercents (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetCMYKGamutForSpotColors ( );
    void PutCMYKGamutForSpotColors (
        VARIANT_BOOL pVal );
    enum clrRenderingIntent GetRenderingIntent ( );
    void PutRenderingIntent (
        enum clrRenderingIntent pVal );
    enum clrColorEngine GetColorEngine ( );
    void PutColorEngine (
        enum clrColorEngine pVal );
    long GetStyleCount ( );
    _bstr_t GetStyleByIndex (
        long Index );
    IVGColorProfilePtr GetCurrentProfile (
        enum clrDeviceType DeviceType );
    IVGColorProfilesPtr GetInstalledProfiles (
        enum clrDeviceType DeviceType );
    VARIANT_BOOL LoadStyle (
        _bstr_t StyleName );
    VARIANT_BOOL DeleteStyle (
        _bstr_t StyleName );
    VARIANT_BOOL SaveStyle (
        _bstr_t StyleName );
    VARIANT_BOOL GetIsICM2Available ( );
    _bstr_t GetUnsavedStyleName ( );
    _bstr_t GetGenericProfileName (
        enum clrDeviceType DeviceType );
    VARIANT_BOOL GetIsCompositePrinterCMYK ( );
    enum clrImportColorCorrection GetColorCorrectionOnImport ( );
    void PutColorCorrectionOnImport (
        enum clrImportColorCorrection pVal );
    enum clrExportColorCorrection GetColorCorrectionOnExport ( );
    void PutColorCorrectionOnExport (
        enum clrExportColorCorrection pVal );
    IVGColorProfilePtr GetDefaultImportProfile ( );
    void PutRefDefaultImportProfile (
        struct IVGColorProfile * * ppVal );
    IVGColorProfilePtr GetCustomImportProfile ( );
    void PutRefCustomImportProfile (
        struct IVGColorProfile * * ppVal );
    IVGColorProfilePtr GetCustomExportProfile ( );
    void PutRefCustomExportProfile (
        struct IVGColorProfile * * ppVal );
    IVGColorProfilesPtr GetMonitorColorProfiles ( );
    IVGColorProfilesPtr GetProfilesByColorModel (
        enum clrColorModel ColorModel );
    IVGColorProfilesPtr GetProfilesForDevice (
        enum clrDeviceType DeviceType,
        _bstr_t DeviceName );
    IVGColorContextPtr GetDefaultColorContext ( );
    VARIANT_BOOL ColorEnginePresent (
        enum clrColorEngine ColorEngine );
    VARIANT_BOOL CanDeleteStyle (
        _bstr_t StyleName );
    VARIANT_BOOL GetMapGrayToCMYKBlack ( );
    void PutMapGrayToCMYKBlack (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetPreservePureBlack ( );
    void PutPreservePureBlack (
        VARIANT_BOOL pVal );
    enum clrColorModel GetSpotColorDefinition ( );
    void PutSpotColorDefinition (
        enum clrColorModel pVal );
    IVGColorProfilesPtr GetColorProfiles ( );
    IVGColorManagementPolicyPtr GetPolicyForOpen ( );
    IVGColorManagementPolicyPtr GetPolicyForImport ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ScannerCalibrated (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_ScannerCalibrated (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_SeparationPrinterCalibrated (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_SeparationPrinterCalibrated (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_CompositePrinterCalibrated (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_CompositePrinterCalibration (
        /*[out,retval]*/ enum clrCompPrnCalibration * pVal ) = 0;
      virtual HRESULT __stdcall put_CompositePrinterCalibration (
        /*[in]*/ enum clrCompPrnCalibration pVal ) = 0;
      virtual HRESULT __stdcall get_MonitorCalibration (
        /*[out,retval]*/ enum clrMonitorCalibration * pVal ) = 0;
      virtual HRESULT __stdcall put_MonitorCalibration (
        /*[in]*/ enum clrMonitorCalibration pVal ) = 0;
      virtual HRESULT __stdcall get_CompositePrinterSimulatesSeparation (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_ShowOutOfGamut (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_ShowOutOfGamut (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_OutOfGamutColor (
        /*[out,retval]*/ struct IVGColor * * ppVal ) = 0;
      virtual HRESULT __stdcall put_OutOfGamutColor (
        /*[in]*/ struct IVGColor * ppVal ) = 0;
      virtual HRESULT __stdcall get_OutOfGamutTransparency (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_OutOfGamutTransparency (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_CMYKInPercents (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_CMYKInPercents (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_CMYKGamutForSpotColors (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_CMYKGamutForSpotColors (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_RenderingIntent (
        /*[out,retval]*/ enum clrRenderingIntent * pVal ) = 0;
      virtual HRESULT __stdcall put_RenderingIntent (
        /*[in]*/ enum clrRenderingIntent pVal ) = 0;
      virtual HRESULT __stdcall get_ColorEngine (
        /*[out,retval]*/ enum clrColorEngine * pVal ) = 0;
      virtual HRESULT __stdcall put_ColorEngine (
        /*[in]*/ enum clrColorEngine pVal ) = 0;
      virtual HRESULT __stdcall get_StyleCount (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_StyleByIndex (
        /*[in]*/ long Index,
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_CurrentProfile (
        /*[in]*/ enum clrDeviceType DeviceType,
        /*[out,retval]*/ struct IVGColorProfile * * ppVal ) = 0;
      virtual HRESULT __stdcall get_InstalledProfiles (
        /*[in]*/ enum clrDeviceType DeviceType,
        /*[out,retval]*/ struct IVGColorProfiles * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_LoadStyle (
        /*[in]*/ BSTR StyleName,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_DeleteStyle (
        /*[in]*/ BSTR StyleName,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_SaveStyle (
        /*[in]*/ BSTR StyleName,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_IsICM2Available (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_UnsavedStyleName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_GenericProfileName (
        /*[in]*/ enum clrDeviceType DeviceType,
        /*[out,retval]*/ BSTR * ppVal ) = 0;
      virtual HRESULT __stdcall get_IsCompositePrinterCMYK (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_ColorCorrectionOnImport (
        /*[out,retval]*/ enum clrImportColorCorrection * pVal ) = 0;
      virtual HRESULT __stdcall put_ColorCorrectionOnImport (
        /*[in]*/ enum clrImportColorCorrection pVal ) = 0;
      virtual HRESULT __stdcall get_ColorCorrectionOnExport (
        /*[out,retval]*/ enum clrExportColorCorrection * pVal ) = 0;
      virtual HRESULT __stdcall put_ColorCorrectionOnExport (
        /*[in]*/ enum clrExportColorCorrection pVal ) = 0;
      virtual HRESULT __stdcall get_DefaultImportProfile (
        /*[out,retval]*/ struct IVGColorProfile * * ppVal ) = 0;
      virtual HRESULT __stdcall putref_DefaultImportProfile (
        /*[in]*/ struct IVGColorProfile * * ppVal ) = 0;
      virtual HRESULT __stdcall get_CustomImportProfile (
        /*[out,retval]*/ struct IVGColorProfile * * ppVal ) = 0;
      virtual HRESULT __stdcall putref_CustomImportProfile (
        /*[in]*/ struct IVGColorProfile * * ppVal ) = 0;
      virtual HRESULT __stdcall get_CustomExportProfile (
        /*[out,retval]*/ struct IVGColorProfile * * ppVal ) = 0;
      virtual HRESULT __stdcall putref_CustomExportProfile (
        /*[in]*/ struct IVGColorProfile * * ppVal ) = 0;
      virtual HRESULT __stdcall get_MonitorColorProfiles (
        /*[out,retval]*/ struct IVGColorProfiles * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_GetProfilesByColorModel (
        /*[in]*/ enum clrColorModel ColorModel,
        /*[out,retval]*/ struct IVGColorProfiles * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_GetProfilesForDevice (
        /*[in]*/ enum clrDeviceType DeviceType,
        /*[in]*/ BSTR DeviceName,
        /*[out,retval]*/ struct IVGColorProfiles * * ppVal ) = 0;
      virtual HRESULT __stdcall get_DefaultColorContext (
        /*[out,retval]*/ struct IVGColorContext * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_ColorEnginePresent (
        /*[in]*/ enum clrColorEngine ColorEngine,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_CanDeleteStyle (
        /*[in]*/ BSTR StyleName,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_MapGrayToCMYKBlack (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_MapGrayToCMYKBlack (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_PreservePureBlack (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_PreservePureBlack (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_SpotColorDefinition (
        /*[out,retval]*/ enum clrColorModel * pVal ) = 0;
      virtual HRESULT __stdcall put_SpotColorDefinition (
        /*[in]*/ enum clrColorModel pVal ) = 0;
      virtual HRESULT __stdcall get_ColorProfiles (
        /*[out,retval]*/ struct IVGColorProfiles * * ppVal ) = 0;
      virtual HRESULT __stdcall get_PolicyForOpen (
        /*[out,retval]*/ struct IVGColorManagementPolicy * * ppVal ) = 0;
      virtual HRESULT __stdcall get_PolicyForImport (
        /*[out,retval]*/ struct IVGColorManagementPolicy * * ppVal ) = 0;
};

struct __declspec(uuid("b05800b4-9aa4-44fd-9547-4f91eb757ac4"))
IVGStructCreateOptions : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetColorContext,put=PutColorContext))
    IVGColorContextPtr ColorContext;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetPageWidth,put=PutPageWidth))
    double PageWidth;
    __declspec(property(get=GetPageHeight,put=PutPageHeight))
    double PageHeight;
    __declspec(property(get=GetUnits,put=PutUnits))
    enum cdrUnit Units;
    __declspec(property(get=GetResolution,put=PutResolution))
    double Resolution;

    //
    // Wrapper methods for error-handling
    //

    IVGColorContextPtr GetColorContext ( );
    void PutColorContext (
        struct IVGColorContext * ppVal );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t pVal );
    double GetPageWidth ( );
    void PutPageWidth (
        double pVal );
    double GetPageHeight ( );
    void PutPageHeight (
        double pVal );
    enum cdrUnit GetUnits ( );
    void PutUnits (
        enum cdrUnit pVal );
    double GetResolution ( );
    void PutResolution (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ColorContext (
        /*[out,retval]*/ struct IVGColorContext * * ppVal ) = 0;
      virtual HRESULT __stdcall put_ColorContext (
        /*[in]*/ struct IVGColorContext * ppVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_PageWidth (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_PageWidth (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_PageHeight (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_PageHeight (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Units (
        /*[out,retval]*/ enum cdrUnit * pVal ) = 0;
      virtual HRESULT __stdcall put_Units (
        /*[in]*/ enum cdrUnit pVal ) = 0;
      virtual HRESULT __stdcall get_Resolution (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Resolution (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("b058004c-9aa4-44fd-9547-4f91eb757ac4"))
IVGPalette : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    IDispatchPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetType))
    enum cdrPaletteType Type;
    __declspec(property(get=GetColor,put=PutColor))
    IVGColorPtr Color[];
    __declspec(property(get=GetDuplicatePresent))
    VARIANT_BOOL DuplicatePresent;
    __declspec(property(get=GetColorCount))
    long ColorCount;
    __declspec(property(get=GetPaletteID))
    enum cdrPaletteID PaletteID;
    __declspec(property(get=GetFileName))
    _bstr_t FileName;
    __declspec(property(get=GetDocument))
    IVGDocumentPtr Document;
    __declspec(property(get=GetIdentifier))
    _bstr_t Identifier;
    __declspec(property(get=GetIsEmpty))
    VARIANT_BOOL IsEmpty;
    __declspec(property(get=GetLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetDefault))
    VARIANT_BOOL Default;
    __declspec(property(get=GetIsOpen))
    VARIANT_BOOL IsOpen;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t Name );
    HRESULT Close ( );
    enum cdrPaletteType GetType ( );
    IVGColorsPtr Colors ( );
    IVGColorPtr GetColor (
        long Index );
    void PutColor (
        long Index,
        struct IVGColor * Color );
    HRESULT AddColor (
        struct IVGColor * Color );
    HRESULT InsertColor (
        long Index,
        struct IVGColor * Color );
    HRESULT RemoveColor (
        long Index );
    long GetIndexOfColor (
        struct IVGColor * Color );
    VARIANT_BOOL GetDuplicatePresent ( );
    long GetColorCount ( );
    HRESULT Save ( );
    enum cdrPaletteID GetPaletteID ( );
    _bstr_t GetFileName ( );
    long MatchColor (
        struct IVGColor * Color );
    long FindColor (
        _bstr_t Name );
    HRESULT SaveAs (
        _bstr_t FileName,
        _bstr_t Name,
        enum cdrPaletteVersion Version );
    IVGDocumentPtr GetDocument ( );
    _bstr_t GetIdentifier ( );
    VARIANT_BOOL GetIsEmpty ( );
    VARIANT_BOOL GetLocked ( );
    VARIANT_BOOL GetDefault ( );
    VARIANT_BOOL GetIsOpen ( );
    HRESULT Open ( );
    HRESULT MakeDefault ( );
    VARIANT_BOOL Delete ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ IDispatch * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * Name ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR Name ) = 0;
      virtual HRESULT __stdcall raw_Close ( ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum cdrPaletteType * Type ) = 0;
      virtual HRESULT __stdcall raw_Colors (
        /*[out,retval]*/ struct IVGColors * * Colors ) = 0;
      virtual HRESULT __stdcall get_Color (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IVGColor * * Color ) = 0;
      virtual HRESULT __stdcall put_Color (
        /*[in]*/ long Index,
        /*[in]*/ struct IVGColor * Color ) = 0;
      virtual HRESULT __stdcall raw_AddColor (
        /*[in]*/ struct IVGColor * Color ) = 0;
      virtual HRESULT __stdcall raw_InsertColor (
        /*[in]*/ long Index,
        /*[in]*/ struct IVGColor * Color ) = 0;
      virtual HRESULT __stdcall raw_RemoveColor (
        /*[in]*/ long Index ) = 0;
      virtual HRESULT __stdcall raw_GetIndexOfColor (
        /*[in]*/ struct IVGColor * Color,
        /*[out,retval]*/ long * Index ) = 0;
      virtual HRESULT __stdcall get_DuplicatePresent (
        /*[out,retval]*/ VARIANT_BOOL * Duplicate ) = 0;
      virtual HRESULT __stdcall get_ColorCount (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall raw_Save ( ) = 0;
      virtual HRESULT __stdcall get_PaletteID (
        /*[out,retval]*/ enum cdrPaletteID * pVal ) = 0;
      virtual HRESULT __stdcall get_FileName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall raw_MatchColor (
        /*[in]*/ struct IVGColor * Color,
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_FindColor (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_SaveAs (
        /*[in]*/ BSTR FileName,
        /*[in]*/ BSTR Name,
        /*[in]*/ enum cdrPaletteVersion Version ) = 0;
      virtual HRESULT __stdcall get_Document (
        /*[out,retval]*/ struct IVGDocument * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Identifier (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_IsEmpty (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_Locked (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_Default (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_IsOpen (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_Open ( ) = 0;
      virtual HRESULT __stdcall raw_MakeDefault ( ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
};

struct __declspec(uuid("b0580013-9aa4-44fd-9547-4f91eb757ac4"))
IVGColors : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    IDispatchPtr Application;
    __declspec(property(get=GetParent))
    IVGPalettePtr Parent;
    __declspec(property(get=GetItem))
    IVGColorPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetApplication ( );
    IVGPalettePtr GetParent ( );
    IVGColorPtr GetItem (
        long Index );
    IUnknownPtr Get_NewEnum ( );
    long GetCount ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ IDispatch * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ struct IVGPalette * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IVGColor * * ppVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * pVal ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pVal ) = 0;
};

struct __declspec(uuid("b058004d-9aa4-44fd-9547-4f91eb757ac4"))
IVGPalettes : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    IDispatchPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetItem))
    IVGPalettePtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    IVGPalettePtr GetItem (
        const _variant_t & IndexOrName );
    IUnknownPtr Get_NewEnum ( );
    long GetCount ( );
    IVGPalettePtr Open (
        _bstr_t FileName );
    IVGPalettePtr OpenFixed (
        enum cdrPaletteID PaletteID );
    IVGPalettePtr CreateFromDocument (
        _bstr_t Name,
        _bstr_t FileName,
        VARIANT_BOOL Overwrite );
    IVGPalettePtr CreateFromSelection (
        _bstr_t Name,
        _bstr_t FileName,
        VARIANT_BOOL Overwrite );
    IVGPalettePtr Create (
        _bstr_t Name,
        _bstr_t FileName,
        VARIANT_BOOL Overwrite );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ IDispatch * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT IndexOrName,
        /*[out,retval]*/ struct IVGPalette * * ppVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * pVal ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_Open (
        /*[in]*/ BSTR FileName,
        /*[out,retval]*/ struct IVGPalette * * ppPalette ) = 0;
      virtual HRESULT __stdcall raw_OpenFixed (
        /*[in]*/ enum cdrPaletteID PaletteID,
        /*[out,retval]*/ struct IVGPalette * * ppPalette ) = 0;
      virtual HRESULT __stdcall raw_CreateFromDocument (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR FileName,
        /*[in]*/ VARIANT_BOOL Overwrite,
        /*[out,retval]*/ struct IVGPalette * * ppPalette ) = 0;
      virtual HRESULT __stdcall raw_CreateFromSelection (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR FileName,
        /*[in]*/ VARIANT_BOOL Overwrite,
        /*[out,retval]*/ struct IVGPalette * * ppPalette ) = 0;
      virtual HRESULT __stdcall raw_Create (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR FileName,
        /*[in]*/ VARIANT_BOOL Overwrite,
        /*[out,retval]*/ struct IVGPalette * * ppPalette ) = 0;
};

struct __declspec(uuid("b05800b7-9aa4-44fd-9547-4f91eb757ac4"))
IVGPaletteManager : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetPaletteCount))
    long PaletteCount;
    __declspec(property(get=GetDefaultPalette))
    IVGPalettePtr DefaultPalette;
    __declspec(property(get=GetOpenPalettes))
    IVGPalettesPtr OpenPalettes;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    long GetPaletteCount ( );
    IVGPalettePtr GetPalette (
        const _variant_t & IndexOrName );
    IVGPalettePtr GetDefaultPalette ( );
    IVGPalettesPtr GetOpenPalettes ( );
    IUnknownPtr Get_NewEnum ( );
    HRESULT LoadAllPalettes ( );
    IVGPalettePtr LoadPalette (
        _bstr_t FileName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_PaletteCount (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetPalette (
        /*[in]*/ VARIANT IndexOrName,
        /*[out,retval]*/ struct IVGPalette * * ppVal ) = 0;
      virtual HRESULT __stdcall get_DefaultPalette (
        /*[out,retval]*/ struct IVGPalette * * ppVal ) = 0;
      virtual HRESULT __stdcall get_OpenPalettes (
        /*[out,retval]*/ struct IVGPalettes * * ppVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * pVal ) = 0;
      virtual HRESULT __stdcall raw_LoadAllPalettes ( ) = 0;
      virtual HRESULT __stdcall raw_LoadPalette (
        /*[in]*/ BSTR FileName,
        /*[out,retval]*/ struct IVGPalette * * ppVal ) = 0;
};

struct __declspec(uuid("b05800a1-9aa4-44fd-9547-4f91eb757ac4"))
IVGTraceSettings : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetTraceType,put=PutTraceType))
    enum cdrTraceType TraceType;
    __declspec(property(get=GetSmoothing,put=PutSmoothing))
    short Smoothing;
    __declspec(property(get=GetDetailLevel,put=PutDetailLevel))
    short DetailLevel;
    __declspec(property(get=GetColorMode))
    enum cdrColorType ColorMode;
    __declspec(property(get=GetPaletteID))
    enum cdrPaletteID PaletteID;
    __declspec(property(get=GetColorCount))
    long ColorCount;
    __declspec(property(get=GetColor))
    IVGColorPtr Color[];
    __declspec(property(get=GetDeleteOriginalObject,put=PutDeleteOriginalObject))
    VARIANT_BOOL DeleteOriginalObject;
    __declspec(property(get=GetRemoveBackground,put=PutRemoveBackground))
    VARIANT_BOOL RemoveBackground;
    __declspec(property(get=GetRemoveEntireBackColor,put=PutRemoveEntireBackColor))
    VARIANT_BOOL RemoveEntireBackColor;
    __declspec(property(get=GetBackgroundRemovalMode,put=PutBackgroundRemovalMode))
    enum cdrTraceBackgroundMode BackgroundRemovalMode;
    __declspec(property(get=GetBackgroundColor))
    IVGColorPtr BackgroundColor;
    __declspec(property(get=GetCurveCount))
    long CurveCount;
    __declspec(property(get=GetNodeCount))
    long NodeCount;
    __declspec(property(get=GetBitmapWidth))
    long BitmapWidth;
    __declspec(property(get=GetBitmapHeight))
    long BitmapHeight;
    __declspec(property(get=GetDetailLevelPercent,put=PutDetailLevelPercent))
    short DetailLevelPercent;
    __declspec(property(get=GetMaxDetailLevel))
    short MaxDetailLevel;
    __declspec(property(get=GetMinDetailLevel))
    short MinDetailLevel;
    __declspec(property(get=GetCornerSmoothness,put=PutCornerSmoothness))
    short CornerSmoothness;
    __declspec(property(get=GetMergeAdjacentObjects,put=PutMergeAdjacentObjects))
    VARIANT_BOOL MergeAdjacentObjects;
    __declspec(property(get=GetRemoveOverlap,put=PutRemoveOverlap))
    VARIANT_BOOL RemoveOverlap;
    __declspec(property(get=GetGroupObjectsByColor,put=PutGroupObjectsByColor))
    VARIANT_BOOL GroupObjectsByColor;

    //
    // Wrapper methods for error-handling
    //

    enum cdrTraceType GetTraceType ( );
    void PutTraceType (
        enum cdrTraceType pVal );
    short GetSmoothing ( );
    void PutSmoothing (
        short pVal );
    short GetDetailLevel ( );
    void PutDetailLevel (
        short pVal );
    enum cdrColorType GetColorMode ( );
    enum cdrPaletteID GetPaletteID ( );
    long GetColorCount ( );
    IVGColorPtr GetColor (
        long Index );
    VARIANT_BOOL GetDeleteOriginalObject ( );
    void PutDeleteOriginalObject (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetRemoveBackground ( );
    void PutRemoveBackground (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetRemoveEntireBackColor ( );
    void PutRemoveEntireBackColor (
        VARIANT_BOOL pVal );
    enum cdrTraceBackgroundMode GetBackgroundRemovalMode ( );
    void PutBackgroundRemovalMode (
        enum cdrTraceBackgroundMode pVal );
    IVGColorPtr GetBackgroundColor ( );
    long GetCurveCount ( );
    long GetNodeCount ( );
    long GetBitmapWidth ( );
    long GetBitmapHeight ( );
    long SetColorCount (
        long ColorCount );
    IVGShapeRangePtr Finish ( );
    VARIANT_BOOL ShowDialog (
        long ParentWindowHandle );
    HRESULT ApplyChanges ( );
    HRESULT SetColorMode (
        enum cdrColorType ColorMode,
        enum cdrPaletteID PaletteID );
    short GetDetailLevelPercent ( );
    void PutDetailLevelPercent (
        short pVal );
    short GetMaxDetailLevel ( );
    short GetMinDetailLevel ( );
    short GetCornerSmoothness ( );
    void PutCornerSmoothness (
        short pVal );
    VARIANT_BOOL GetMergeAdjacentObjects ( );
    void PutMergeAdjacentObjects (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetRemoveOverlap ( );
    void PutRemoveOverlap (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetGroupObjectsByColor ( );
    void PutGroupObjectsByColor (
        VARIANT_BOOL pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_TraceType (
        /*[out,retval]*/ enum cdrTraceType * pVal ) = 0;
      virtual HRESULT __stdcall put_TraceType (
        /*[in]*/ enum cdrTraceType pVal ) = 0;
      virtual HRESULT __stdcall get_Smoothing (
        /*[out,retval]*/ short * pVal ) = 0;
      virtual HRESULT __stdcall put_Smoothing (
        /*[in]*/ short pVal ) = 0;
      virtual HRESULT __stdcall get_DetailLevel (
        /*[out,retval]*/ short * pVal ) = 0;
      virtual HRESULT __stdcall put_DetailLevel (
        /*[in]*/ short pVal ) = 0;
      virtual HRESULT __stdcall get_ColorMode (
        /*[out,retval]*/ enum cdrColorType * pVal ) = 0;
      virtual HRESULT __stdcall get_PaletteID (
        /*[out,retval]*/ enum cdrPaletteID * pVal ) = 0;
      virtual HRESULT __stdcall get_ColorCount (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_Color (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IVGColor * * ppVal ) = 0;
      virtual HRESULT __stdcall get_DeleteOriginalObject (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_DeleteOriginalObject (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_RemoveBackground (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_RemoveBackground (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_RemoveEntireBackColor (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_RemoveEntireBackColor (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_BackgroundRemovalMode (
        /*[out,retval]*/ enum cdrTraceBackgroundMode * pVal ) = 0;
      virtual HRESULT __stdcall put_BackgroundRemovalMode (
        /*[in]*/ enum cdrTraceBackgroundMode pVal ) = 0;
      virtual HRESULT __stdcall get_BackgroundColor (
        /*[out,retval]*/ struct IVGColor * * ppVal ) = 0;
      virtual HRESULT __stdcall get_CurveCount (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_NodeCount (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_BitmapWidth (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_BitmapHeight (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetColorCount (
        /*[in]*/ long ColorCount,
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_Finish (
        /*[out,retval]*/ struct IVGShapeRange * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_ShowDialog (
        /*[in]*/ long ParentWindowHandle,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_ApplyChanges ( ) = 0;
      virtual HRESULT __stdcall raw_SetColorMode (
        /*[in]*/ enum cdrColorType ColorMode,
        /*[in]*/ enum cdrPaletteID PaletteID ) = 0;
      virtual HRESULT __stdcall get_DetailLevelPercent (
        /*[out,retval]*/ short * pVal ) = 0;
      virtual HRESULT __stdcall put_DetailLevelPercent (
        /*[in]*/ short pVal ) = 0;
      virtual HRESULT __stdcall get_MaxDetailLevel (
        /*[out,retval]*/ short * pVal ) = 0;
      virtual HRESULT __stdcall get_MinDetailLevel (
        /*[out,retval]*/ short * pVal ) = 0;
      virtual HRESULT __stdcall get_CornerSmoothness (
        /*[out,retval]*/ short * pVal ) = 0;
      virtual HRESULT __stdcall put_CornerSmoothness (
        /*[in]*/ short pVal ) = 0;
      virtual HRESULT __stdcall get_MergeAdjacentObjects (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_MergeAdjacentObjects (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_RemoveOverlap (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_RemoveOverlap (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_GroupObjectsByColor (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_GroupObjectsByColor (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
};

struct __declspec(uuid("b058005e-9aa4-44fd-9547-4f91eb757ac4"))
IVGShapeRange : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    IVGApplicationPtr Application;
    __declspec(property(get=GetParent))
    IVGApplicationPtr Parent;
    __declspec(property(get=GetItem))
    IVGShapePtr Item[];
    __declspec(property(get=GetCenterX,put=PutCenterX))
    double CenterX;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetCenterY,put=PutCenterY))
    double CenterY;
    __declspec(property(get=GetRotationCenterY,put=PutRotationCenterY))
    double RotationCenterY;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;
    __declspec(property(get=GetReverseRange))
    IVGShapeRangePtr ReverseRange;
    __declspec(property(get=GetLeftX,put=PutLeftX))
    double LeftX;
    __declspec(property(get=GetRightX,put=PutRightX))
    double RightX;
    __declspec(property(get=GetTopY,put=PutTopY))
    double TopY;
    __declspec(property(get=GetBottomY,put=PutBottomY))
    double BottomY;
    __declspec(property(get=GetShapes))
    IVGShapesPtr Shapes;
    __declspec(property(get=GetPositionX,put=PutPositionX))
    double PositionX;
    __declspec(property(get=GetFirstShape))
    IVGShapePtr FirstShape;
    __declspec(property(get=GetPositionY,put=PutPositionY))
    double PositionY;
    __declspec(property(get=GetLastShape))
    IVGShapePtr LastShape;
    __declspec(property(get=GetSizeWidth,put=PutSizeWidth))
    double SizeWidth;
    __declspec(property(get=GetSizeHeight,put=PutSizeHeight))
    double SizeHeight;
    __declspec(property(get=GetBoundingBox))
    IVGRectPtr BoundingBox;
    __declspec(property(get=GetRotationCenterX,put=PutRotationCenterX))
    double RotationCenterX;

    //
    // Wrapper methods for error-handling
    //

    IVGApplicationPtr GetApplication ( );
    IVGApplicationPtr GetParent ( );
    IVGShapePtr GetItem (
        const _variant_t & IndexOrName );
    IUnknownPtr Get_NewEnum ( );
    long GetCount ( );
    HRESULT Add (
        struct IVGShape * Shape );
    HRESULT Remove (
        long Index );
    long IndexOf (
        struct IVGShape * Shape );
    HRESULT AddToSelection ( );
    HRESULT ConvertToCurves ( );
    IVGShapePtr ConvertToBitmap (
        long BitDepth,
        VARIANT_BOOL Grayscale,
        VARIANT_BOOL Dithered,
        VARIANT_BOOL TransparentBG,
        long Resolution,
        enum cdrAntiAliasingType AntiAliasing,
        VARIANT_BOOL UseColorProfile,
        VARIANT_BOOL MultiChannel,
        VARIANT_BOOL AlwaysOverprintBlack,
        long OverprintBlackLimit );
    HRESULT Copy ( );
    HRESULT Cut ( );
    HRESULT Delete ( );
    HRESULT GetPosition (
        double * PositionX,
        double * PositionY );
    HRESULT GetSize (
        double * Width,
        double * Height );
    HRESULT Move (
        double DeltaX,
        double DeltaY );
    IVGShapeRangePtr Duplicate (
        double OffsetX,
        double OffsetY );
    IVGShapeRangePtr Clone (
        double OffsetX,
        double OffsetY );
    IVGShapePtr Group ( );
    HRESULT RemoveAll ( );
    HRESULT OrderToFront ( );
    HRESULT OrderToBack ( );
    HRESULT OrderForwardOne ( );
    HRESULT OrderBackOne ( );
    HRESULT OrderFrontOf (
        struct IVGShape * Shape );
    HRESULT OrderBackOf (
        struct IVGShape * Shape );
    HRESULT OrderReverse ( );
    HRESULT Rotate (
        double Angle );
    HRESULT RotateEx (
        double Angle,
        double CenterX,
        double CenterY );
    HRESULT Skew (
        double AngleX,
        double AngleY );
    HRESULT SkewEx (
        double AngleX,
        double AngleY,
        double CenterX,
        double CenterY );
    HRESULT UngroupAll ( );
    HRESULT Flip (
        enum cdrFlipAxes Axes );
    double GetPositionX ( );
    void PutPositionX (
        double pVal );
    double GetPositionY ( );
    void PutPositionY (
        double pVal );
    double GetSizeWidth ( );
    void PutSizeWidth (
        double pVal );
    double GetSizeHeight ( );
    void PutSizeHeight (
        double pVal );
    double GetRotationCenterX ( );
    void PutRotationCenterX (
        double pVal );
    double GetRotationCenterY ( );
    void PutRotationCenterY (
        double pVal );
    HRESULT AddToPowerClip (
        struct IVGShape * Shape,
        enum cdrTriState CenterInContainer );
    HRESULT RemoveFromContainer (
        long Level );
    HRESULT AddRange (
        struct IVGShapeRange * ShapeRange );
    HRESULT SetPosition (
        double PositionX,
        double PositionY );
    HRESULT SetSize (
        double Width,
        double Height );
    IVGShapePtr ConvertToBitmapEx (
        enum cdrImageType Mode,
        VARIANT_BOOL Dithered,
        VARIANT_BOOL Transparent,
        long Resolution,
        enum cdrAntiAliasingType AntiAliasing,
        VARIANT_BOOL UseColorProfile,
        VARIANT_BOOL AlwaysOverprintBlack,
        long OverprintBlackLimit );
    IVGShapePtr Combine ( );
    HRESULT SetBoundingBox (
        double x,
        double y,
        double Width,
        double Height,
        VARIANT_BOOL KeepAspect,
        enum cdrReferencePoint ReferencePoint );
    HRESULT ApplyNoFill ( );
    HRESULT ApplyUniformFill (
        struct IVGColor * Color );
    HRESULT ApplyFountainFill (
        struct IVGColor * StartColor,
        struct IVGColor * EndColor,
        enum cdrFountainFillType Type,
        double Angle,
        long Steps,
        long EdgePad,
        long MidPoint,
        enum cdrFountainFillBlendType BlendType,
        double CenterOffsetX,
        double CenterOffsetY );
    HRESULT ApplyPatternFill (
        enum cdrPatternFillType Type,
        _bstr_t FileName,
        long PatternCanvasIndex,
        struct IVGColor * FrontColor,
        struct IVGColor * EndColor,
        VARIANT_BOOL TransformWithShape );
    HRESULT ApplyTextureFill (
        _bstr_t TextureName,
        _bstr_t LibraryName );
    HRESULT ApplyPostscriptFill (
        const _variant_t & IndexOrName );
    IVGShapeRangePtr ConvertOutlineToObject ( );
    HRESULT SetOutlineProperties (
        double Width,
        struct IVGOutlineStyle * Style,
        struct IVGColor * Color,
        struct IVGArrowHead * StartArrow,
        struct IVGArrowHead * EndArrow,
        enum cdrTriState BehindFill,
        enum cdrTriState ScaleWithShape,
        enum cdrOutlineLineCaps LineCaps,
        enum cdrOutlineLineJoin LineJoin,
        double NibAngle,
        long NibStretch,
        double DashDotLength,
        double PenWidth,
        double MiterLimit );
    HRESULT CreateSelection ( );
    HRESULT RemoveFromSelection ( );
    HRESULT SetRotationCenter (
        double x,
        double y );
    HRESULT Stretch (
        double StretchX,
        double StretchY,
        VARIANT_BOOL StretchCharactersSize );
    HRESULT StretchEx (
        double CenterX,
        double CenterY,
        double StretchX,
        double StretchY,
        VARIANT_BOOL StretchCharactersSize );
    HRESULT SetSizeEx (
        double CenterX,
        double CenterY,
        double Width,
        double Height );
    HRESULT GetBoundingBox (
        double * x,
        double * y,
        double * Width,
        double * Height,
        VARIANT_BOOL UseOutline );
    HRESULT RestoreCloneLink (
        enum cdrCloneLinkType LinkToRestore );
    HRESULT ClearEffect (
        enum cdrEffectType Type );
    HRESULT RemoveRange (
        struct IVGShapeRange * Range );
    HRESULT DeleteItem (
        long Index );
    _variant_t CustomCommand (
        _bstr_t ComponentID,
        _bstr_t CommandID,
        SAFEARRAY * * Parameters );
    HRESULT AlignToShape (
        enum cdrAlignType Type,
        struct IVGShape * Shape,
        enum cdrTextAlignOrigin TextAlignOrigin );
    HRESULT AlignToShapeRange (
        enum cdrAlignType Type,
        struct IVGShapeRange * ShapeRange,
        enum cdrTextAlignOrigin TextAlignOrigin );
    HRESULT AlignToPage (
        enum cdrAlignType Type,
        enum cdrTextAlignOrigin TextAlignOrigin );
    HRESULT AlignToPageCenter (
        enum cdrAlignType Type,
        enum cdrTextAlignOrigin TextAlignOrigin );
    HRESULT AlignToGrid (
        enum cdrAlignType Type,
        enum cdrTextAlignOrigin TextAlignOrigin );
    HRESULT AlignToPoint (
        enum cdrAlignType Type,
        double x,
        double y,
        enum cdrTextAlignOrigin TextAlignOrigin );
    HRESULT Distribute (
        enum cdrDistributeType Type,
        VARIANT_BOOL PageExtent );
    IVGShapePtr ConvertToSymbol (
        _bstr_t Name );
    HRESULT Ungroup ( );
    IVGShapeRangePtr UngroupEx ( );
    IVGShapeRangePtr UngroupAllEx ( );
    IVGShapeRangePtr Range (
        SAFEARRAY * * IndexArray );
    IVGShapeRangePtr All ( );
    IVGShapeRangePtr AllExcluding (
        SAFEARRAY * * IndexArray );
    HRESULT BreakApart ( );
    IVGShapeRangePtr BreakApartEx ( );
    HRESULT MoveToLayer (
        struct IVGLayer * Layer );
    IVGShapeRangePtr CopyToLayer (
        struct IVGLayer * Layer );
    HRESULT ClearTransformations ( );
    HRESULT Lock ( );
    HRESULT Unlock ( );
    HRESULT AlignRangeToShape (
        enum cdrAlignType Type,
        struct IVGShape * Shape );
    HRESULT AlignRangeToShapeRange (
        enum cdrAlignType Type,
        struct IVGShapeRange * ShapeRange );
    HRESULT AlignRangeToPage (
        enum cdrAlignType Type );
    HRESULT AlignRangeToPageCenter (
        enum cdrAlignType Type );
    HRESULT AlignRangeToGrid (
        enum cdrAlignType Type );
    HRESULT AlignRangeToPoint (
        enum cdrAlignType Type,
        double x,
        double y );
    HRESULT ApplyEffectInvert ( );
    HRESULT ApplyEffectPosterize (
        long Level );
    HRESULT ApplyEffectBCI (
        long Brighness,
        long Contrast,
        long Intensity );
    HRESULT ApplyEffectColorBalance (
        long CyanRed,
        long MagentaGreen,
        long YellowBlue,
        VARIANT_BOOL ApplyToShadows,
        VARIANT_BOOL ApplyToMidtones,
        VARIANT_BOOL ApplyToHighlights,
        VARIANT_BOOL PreserveLuminance );
    HRESULT ApplyEffectGamma (
        double Gamma );
    HRESULT ApplyEffectHSL (
        const _variant_t & Hue,
        const _variant_t & Saturation,
        const _variant_t & Lightness );
    HRESULT AffineTransform (
        double d11,
        double d12,
        double d21,
        double d22,
        double CenterX,
        double CenterY );
    HRESULT ApplyFill (
        struct IVGFill * Fill );
    HRESULT ApplyOutline (
        struct IVGOutline * Outline );
    IVGShapeRangePtr GetReverseRange ( );
    HRESULT Fillet (
        double Radius,
        VARIANT_BOOL CombineSmoothSegments );
    HRESULT Chamfer (
        double DistanceA,
        double DistanceB,
        VARIANT_BOOL CombineSmoothSegments );
    HRESULT Scallop (
        double Radius,
        VARIANT_BOOL CombineSmoothSegments );
    HRESULT SetFillMode (
        enum cdrFillMode Mode );
    HRESULT ApplyCustomHatchFill (
        double Angle,
        double Spacing,
        double Shift,
        double OriginX,
        double OriginY,
        double Width,
        struct IVGColor * Color,
        struct IVGOutlineStyle * Style,
        double DashDotLength,
        double PenWidth,
        struct IVGColor * BackColor,
        VARIANT_BOOL TransformWithShape,
        VARIANT_BOOL ScaleLinesWithShape,
        VARIANT_BOOL UseWorldCoordinates,
        double FillScale,
        double LineScale,
        double FillAngle,
        double FillSkew );
    HRESULT ApplyHatchFill (
        _bstr_t LibraryName,
        const _variant_t & HatchNameOrIndex,
        struct IVGColor * BackColor,
        VARIANT_BOOL TransformWithShape,
        VARIANT_BOOL ScaleLinesWithShape,
        VARIANT_BOOL UseWorldCoordinates,
        double FillScale,
        double LineScale,
        double FillAngle,
        double FillSkew );
    double GetLeftX ( );
    double GetRightX ( );
    double GetTopY ( );
    double GetBottomY ( );
    IVGShapesPtr GetShapes ( );
    IVGShapePtr GetFirstShape ( );
    IVGShapePtr GetLastShape ( );
    IVGShapeRangePtr StepAndRepeat (
        long NumCopies,
        double DistanceX,
        double DistanceY,
        enum cdrDistanceMode ModeX,
        enum cdrDirection DirectionX,
        enum cdrDistanceMode ModeY,
        enum cdrDirection DirectionY );
    VARIANT_BOOL Exists (
        struct IVGShape * Shape );
    VARIANT_BOOL ExistsAnyOfType (
        SAFEARRAY * * TypeList );
    long CountAnyOfType (
        SAFEARRAY * * TypeList );
    IVGShapeRangePtr FindAnyOfType (
        SAFEARRAY * * TypeList );
    IVGShapeRangePtr GetLinkedShapes (
        enum cdrShapeLinkType LinkType );
    IVGRectPtr GetBoundingBox ( );
    HRESULT GetPositionEx (
        enum cdrReferencePoint ReferencePoint,
        double * x,
        double * y );
    HRESULT SetPositionEx (
        enum cdrReferencePoint ReferencePoint,
        double x,
        double y );
    double GetCenterX ( );
    void PutCenterX (
        double pVal );
    double GetCenterY ( );
    void PutCenterY (
        double pVal );
    void PutLeftX (
        double pVal );
    void PutRightX (
        double pVal );
    void PutTopY (
        double pVal );
    void PutBottomY (
        double pVal );
    VARIANT_BOOL CopyPropertiesFrom (
        struct IVGShape * Source,
        enum cdrCopyProperties Properties );
    enum cdrOverprintState GetOverprintFillState ( );
    enum cdrOverprintState GetOverprintOutlineState ( );
    HRESULT Sort (
        _bstr_t CompareExpression,
        long StartIndex,
        long EndIndex,
        const _variant_t & Data = vtMissing );
    HRESULT SetPixelAlignedRendering (
        VARIANT_BOOL PixelAligned );
    IVGDocumentPtr CreateDocumentFrom (
        VARIANT_BOOL TemporaryDocument );
    HRESULT AlignAndDistribute (
        enum cdrAlignDistributeH MethodH,
        enum cdrAlignDistributeV MethodV,
        enum cdrAlignShapesTo AlignTo,
        enum cdrDistributeArea DistributeArea,
        VARIANT_BOOL UseOutline,
        enum cdrTextAlignOrigin TextAlignOrigin,
        double PointX,
        double PointY,
        struct IVGRect * DistributeRect );
    HRESULT SetOutlinePropertiesEx (
        double Width,
        struct IVGOutlineStyle * Style,
        struct IVGColor * Color,
        struct IVGArrowHead * StartArrow,
        struct IVGArrowHead * EndArrow,
        enum cdrTriState BehindFill,
        enum cdrTriState ScaleWithShape,
        enum cdrOutlineLineCaps LineCaps,
        enum cdrOutlineLineJoin LineJoin,
        double NibAngle,
        long NibStretch,
        double DashDotLength,
        double PenWidth,
        double MiterLimit,
        enum cdrOutlineJustification Justification );
    IVGShapePtr CreateBoundary (
        double x,
        double y,
        VARIANT_BOOL PlaceOnTop,
        VARIANT_BOOL DeleteSource );
    IVGShapeRangePtr EqualDivide (
        long Divisions,
        double Gap,
        VARIANT_BOOL Group,
        VARIANT_BOOL Combine,
        VARIANT_BOOL DeleteSource );
    IVGShapeRangePtr Project (
        enum cdrProjectPlane Plane,
        enum cdrReferencePoint ReferencePoint,
        VARIANT_BOOL ApplyToDuplicate );
    IVGShapeRangePtr Unproject (
        enum cdrProjectPlane Plane,
        enum cdrReferencePoint ReferencePoint,
        VARIANT_BOOL ApplyToDuplicate );
    HRESULT Show ( );
    HRESULT Hide ( );
    IVGShapeRangePtr GetToolShapes (
        _bstr_t ShapeGuid );
    HRESULT ModifyToolShapeProperties (
        struct IVGProperties * ShapePropertiesToModify );
    IVGShapeRangePtr CreateParallelCurves (
        long Count,
        double distanceBetweenCurves );
    SAFEARRAY * GetColorTypes ( );
    SAFEARRAY * GetColors (
        long MaxBitmapColors );
    HRESULT FlattenEffects ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct IVGApplication * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ struct IVGApplication * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT IndexOrName,
        /*[out,retval]*/ struct IVGShape * * ppVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * pVal ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ struct IVGShape * Shape ) = 0;
      virtual HRESULT __stdcall raw_Remove (
        /*[in]*/ long Index ) = 0;
      virtual HRESULT __stdcall raw_IndexOf (
        /*[in]*/ struct IVGShape * Shape,
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_AddToSelection ( ) = 0;
      virtual HRESULT __stdcall raw_ConvertToCurves ( ) = 0;
      virtual HRESULT __stdcall raw_ConvertToBitmap (
        /*[in]*/ long BitDepth,
        /*[in]*/ VARIANT_BOOL Grayscale,
        /*[in]*/ VARIANT_BOOL Dithered,
        /*[in]*/ VARIANT_BOOL TransparentBG,
        /*[in]*/ long Resolution,
        /*[in]*/ enum cdrAntiAliasingType AntiAliasing,
        /*[in]*/ VARIANT_BOOL UseColorProfile,
        /*[in]*/ VARIANT_BOOL MultiChannel,
        /*[in]*/ VARIANT_BOOL AlwaysOverprintBlack,
        /*[in]*/ long OverprintBlackLimit,
        /*[out,retval]*/ struct IVGShape * * ppRet ) = 0;
      virtual HRESULT __stdcall raw_Copy ( ) = 0;
      virtual HRESULT __stdcall raw_Cut ( ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall raw_GetPosition (
        /*[out]*/ double * PositionX,
        /*[out]*/ double * PositionY ) = 0;
      virtual HRESULT __stdcall raw_GetSize (
        /*[out]*/ double * Width,
        /*[out]*/ double * Height ) = 0;
      virtual HRESULT __stdcall raw_Move (
        /*[in]*/ double DeltaX,
        /*[in]*/ double DeltaY ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[in]*/ double OffsetX,
        /*[in]*/ double OffsetY,
        /*[out,retval]*/ struct IVGShapeRange * * ppRet ) = 0;
      virtual HRESULT __stdcall raw_Clone (
        /*[in]*/ double OffsetX,
        /*[in]*/ double OffsetY,
        /*[out,retval]*/ struct IVGShapeRange * * ppRet ) = 0;
      virtual HRESULT __stdcall raw_Group (
        /*[out,retval]*/ struct IVGShape * * ppRet ) = 0;
      virtual HRESULT __stdcall raw_RemoveAll ( ) = 0;
      virtual HRESULT __stdcall raw_OrderToFront ( ) = 0;
      virtual HRESULT __stdcall raw_OrderToBack ( ) = 0;
      virtual HRESULT __stdcall raw_OrderForwardOne ( ) = 0;
      virtual HRESULT __stdcall raw_OrderBackOne ( ) = 0;
      virtual HRESULT __stdcall raw_OrderFrontOf (
        /*[in]*/ struct IVGShape * Shape ) = 0;
      virtual HRESULT __stdcall raw_OrderBackOf (
        /*[in]*/ struct IVGShape * Shape ) = 0;
      virtual HRESULT __stdcall raw_OrderReverse ( ) = 0;
      virtual HRESULT __stdcall raw_Rotate (
        /*[in]*/ double Angle ) = 0;
      virtual HRESULT __stdcall raw_RotateEx (
        /*[in]*/ double Angle,
        /*[in]*/ double CenterX,
        /*[in]*/ double CenterY ) = 0;
      virtual HRESULT __stdcall raw_Skew (
        /*[in]*/ double AngleX,
        /*[in]*/ double AngleY ) = 0;
      virtual HRESULT __stdcall raw_SkewEx (
        /*[in]*/ double AngleX,
        /*[in]*/ double AngleY,
        /*[in]*/ double CenterX,
        /*[in]*/ double CenterY ) = 0;
      virtual HRESULT __stdcall raw_UngroupAll ( ) = 0;
      virtual HRESULT __stdcall raw_Flip (
        /*[in]*/ enum cdrFlipAxes Axes ) = 0;
      virtual HRESULT __stdcall get_PositionX (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_PositionX (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_PositionY (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_PositionY (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_SizeWidth (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_SizeWidth (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_SizeHeight (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_SizeHeight (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_RotationCenterX (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_RotationCenterX (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_RotationCenterY (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_RotationCenterY (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall raw_AddToPowerClip (
        /*[in]*/ struct IVGShape * Shape,
        /*[in]*/ enum cdrTriState CenterInContainer ) = 0;
      virtual HRESULT __stdcall raw_RemoveFromContainer (
        /*[in]*/ long Level ) = 0;
      virtual HRESULT __stdcall raw_AddRange (
        /*[in]*/ struct IVGShapeRange * ShapeRange ) = 0;
      virtual HRESULT __stdcall raw_SetPosition (
        /*[in]*/ double PositionX,
        /*[in]*/ double PositionY ) = 0;
      virtual HRESULT __stdcall raw_SetSize (
        /*[in]*/ double Width,
        /*[in]*/ double Height ) = 0;
      virtual HRESULT __stdcall raw_ConvertToBitmapEx (
        /*[in]*/ enum cdrImageType Mode,
        /*[in]*/ VARIANT_BOOL Dithered,
        /*[in]*/ VARIANT_BOOL Transparent,
        /*[in]*/ long Resolution,
        /*[in]*/ enum cdrAntiAliasingType AntiAliasing,
        /*[in]*/ VARIANT_BOOL UseColorProfile,
        /*[in]*/ VARIANT_BOOL AlwaysOverprintBlack,
        /*[in]*/ long OverprintBlackLimit,
        /*[out,retval]*/ struct IVGShape * * ppRet ) = 0;
      virtual HRESULT __stdcall raw_Combine (
        /*[out,retval]*/ struct IVGShape * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_SetBoundingBox (
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[in]*/ double Width,
        /*[in]*/ double Height,
        /*[in]*/ VARIANT_BOOL KeepAspect,
        /*[in]*/ enum cdrReferencePoint ReferencePoint ) = 0;
      virtual HRESULT __stdcall raw_ApplyNoFill ( ) = 0;
      virtual HRESULT __stdcall raw_ApplyUniformFill (
        /*[in]*/ struct IVGColor * Color ) = 0;
      virtual HRESULT __stdcall raw_ApplyFountainFill (
        /*[in]*/ struct IVGColor * StartColor,
        /*[in]*/ struct IVGColor * EndColor,
        /*[in]*/ enum cdrFountainFillType Type,
        /*[in]*/ double Angle,
        /*[in]*/ long Steps,
        /*[in]*/ long EdgePad,
        /*[in]*/ long MidPoint,
        /*[in]*/ enum cdrFountainFillBlendType BlendType,
        /*[in]*/ double CenterOffsetX,
        /*[in]*/ double CenterOffsetY ) = 0;
      virtual HRESULT __stdcall raw_ApplyPatternFill (
        /*[in]*/ enum cdrPatternFillType Type,
        /*[in]*/ BSTR FileName,
        /*[in]*/ long PatternCanvasIndex,
        /*[in]*/ struct IVGColor * FrontColor,
        /*[in]*/ struct IVGColor * EndColor,
        /*[in]*/ VARIANT_BOOL TransformWithShape ) = 0;
      virtual HRESULT __stdcall raw_ApplyTextureFill (
        /*[in]*/ BSTR TextureName,
        /*[in]*/ BSTR LibraryName ) = 0;
      virtual HRESULT __stdcall raw_ApplyPostscriptFill (
        /*[in]*/ VARIANT IndexOrName ) = 0;
      virtual HRESULT __stdcall raw_ConvertOutlineToObject (
        /*[out,retval]*/ struct IVGShapeRange * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_SetOutlineProperties (
        /*[in]*/ double Width,
        /*[in]*/ struct IVGOutlineStyle * Style,
        /*[in]*/ struct IVGColor * Color,
        /*[in]*/ struct IVGArrowHead * StartArrow,
        /*[in]*/ struct IVGArrowHead * EndArrow,
        /*[in]*/ enum cdrTriState BehindFill,
        /*[in]*/ enum cdrTriState ScaleWithShape,
        /*[in]*/ enum cdrOutlineLineCaps LineCaps,
        /*[in]*/ enum cdrOutlineLineJoin LineJoin,
        /*[in]*/ double NibAngle,
        /*[in]*/ long NibStretch,
        /*[in]*/ double DashDotLength,
        /*[in]*/ double PenWidth,
        /*[in]*/ double MiterLimit ) = 0;
      virtual HRESULT __stdcall raw_CreateSelection ( ) = 0;
      virtual HRESULT __stdcall raw_RemoveFromSelection ( ) = 0;
      virtual HRESULT __stdcall raw_SetRotationCenter (
        /*[in]*/ double x,
        /*[in]*/ double y ) = 0;
      virtual HRESULT __stdcall raw_Stretch (
        /*[in]*/ double StretchX,
        /*[in]*/ double StretchY,
        /*[in]*/ VARIANT_BOOL StretchCharactersSize ) = 0;
      virtual HRESULT __stdcall raw_StretchEx (
        /*[in]*/ double CenterX,
        /*[in]*/ double CenterY,
        /*[in]*/ double StretchX,
        /*[in]*/ double StretchY,
        /*[in]*/ VARIANT_BOOL StretchCharactersSize ) = 0;
      virtual HRESULT __stdcall raw_SetSizeEx (
        /*[in]*/ double CenterX,
        /*[in]*/ double CenterY,
        /*[in]*/ double Width,
        /*[in]*/ double Height ) = 0;
      virtual HRESULT __stdcall raw_GetBoundingBox (
        /*[out]*/ double * x,
        /*[out]*/ double * y,
        /*[out]*/ double * Width,
        /*[out]*/ double * Height,
        /*[in]*/ VARIANT_BOOL UseOutline ) = 0;
      virtual HRESULT __stdcall raw_RestoreCloneLink (
        /*[in]*/ enum cdrCloneLinkType LinkToRestore ) = 0;
      virtual HRESULT __stdcall raw_ClearEffect (
        /*[in]*/ enum cdrEffectType Type ) = 0;
      virtual HRESULT __stdcall raw_RemoveRange (
        /*[in]*/ struct IVGShapeRange * Range ) = 0;
      virtual HRESULT __stdcall raw_DeleteItem (
        /*[in]*/ long Index ) = 0;
      virtual HRESULT __stdcall raw_CustomCommand (
        /*[in]*/ BSTR ComponentID,
        /*[in]*/ BSTR CommandID,
        /*[in]*/ SAFEARRAY * * Parameters,
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall raw_AlignToShape (
        /*[in]*/ enum cdrAlignType Type,
        /*[in]*/ struct IVGShape * Shape,
        /*[in]*/ enum cdrTextAlignOrigin TextAlignOrigin ) = 0;
      virtual HRESULT __stdcall raw_AlignToShapeRange (
        /*[in]*/ enum cdrAlignType Type,
        /*[in]*/ struct IVGShapeRange * ShapeRange,
        /*[in]*/ enum cdrTextAlignOrigin TextAlignOrigin ) = 0;
      virtual HRESULT __stdcall raw_AlignToPage (
        /*[in]*/ enum cdrAlignType Type,
        /*[in]*/ enum cdrTextAlignOrigin TextAlignOrigin ) = 0;
      virtual HRESULT __stdcall raw_AlignToPageCenter (
        /*[in]*/ enum cdrAlignType Type,
        /*[in]*/ enum cdrTextAlignOrigin TextAlignOrigin ) = 0;
      virtual HRESULT __stdcall raw_AlignToGrid (
        /*[in]*/ enum cdrAlignType Type,
        /*[in]*/ enum cdrTextAlignOrigin TextAlignOrigin ) = 0;
      virtual HRESULT __stdcall raw_AlignToPoint (
        /*[in]*/ enum cdrAlignType Type,
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[in]*/ enum cdrTextAlignOrigin TextAlignOrigin ) = 0;
      virtual HRESULT __stdcall raw_Distribute (
        /*[in]*/ enum cdrDistributeType Type,
        /*[in]*/ VARIANT_BOOL PageExtent ) = 0;
      virtual HRESULT __stdcall raw_ConvertToSymbol (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ struct IVGShape * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_Ungroup ( ) = 0;
      virtual HRESULT __stdcall raw_UngroupEx (
        /*[out,retval]*/ struct IVGShapeRange * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_UngroupAllEx (
        /*[out,retval]*/ struct IVGShapeRange * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_Range (
        /*[in]*/ SAFEARRAY * * IndexArray,
        /*[out,retval]*/ struct IVGShapeRange * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_All (
        /*[out,retval]*/ struct IVGShapeRange * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_AllExcluding (
        /*[in]*/ SAFEARRAY * * IndexArray,
        /*[out,retval]*/ struct IVGShapeRange * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_BreakApart ( ) = 0;
      virtual HRESULT __stdcall raw_BreakApartEx (
        /*[out,retval]*/ struct IVGShapeRange * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_MoveToLayer (
        /*[in]*/ struct IVGLayer * Layer ) = 0;
      virtual HRESULT __stdcall raw_CopyToLayer (
        /*[in]*/ struct IVGLayer * Layer,
        /*[out,retval]*/ struct IVGShapeRange * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_ClearTransformations ( ) = 0;
      virtual HRESULT __stdcall raw_Lock ( ) = 0;
      virtual HRESULT __stdcall raw_Unlock ( ) = 0;
      virtual HRESULT __stdcall raw_AlignRangeToShape (
        /*[in]*/ enum cdrAlignType Type,
        /*[in]*/ struct IVGShape * Shape ) = 0;
      virtual HRESULT __stdcall raw_AlignRangeToShapeRange (
        /*[in]*/ enum cdrAlignType Type,
        /*[in]*/ struct IVGShapeRange * ShapeRange ) = 0;
      virtual HRESULT __stdcall raw_AlignRangeToPage (
        /*[in]*/ enum cdrAlignType Type ) = 0;
      virtual HRESULT __stdcall raw_AlignRangeToPageCenter (
        /*[in]*/ enum cdrAlignType Type ) = 0;
      virtual HRESULT __stdcall raw_AlignRangeToGrid (
        /*[in]*/ enum cdrAlignType Type ) = 0;
      virtual HRESULT __stdcall raw_AlignRangeToPoint (
        /*[in]*/ enum cdrAlignType Type,
        /*[in]*/ double x,
        /*[in]*/ double y ) = 0;
      virtual HRESULT __stdcall raw_ApplyEffectInvert ( ) = 0;
      virtual HRESULT __stdcall raw_ApplyEffectPosterize (
        /*[in]*/ long Level ) = 0;
      virtual HRESULT __stdcall raw_ApplyEffectBCI (
        /*[in]*/ long Brighness,
        /*[in]*/ long Contrast,
        /*[in]*/ long Intensity ) = 0;
      virtual HRESULT __stdcall raw_ApplyEffectColorBalance (
        /*[in]*/ long CyanRed,
        /*[in]*/ long MagentaGreen,
        /*[in]*/ long YellowBlue,
        /*[in]*/ VARIANT_BOOL ApplyToShadows,
        /*[in]*/ VARIANT_BOOL ApplyToMidtones,
        /*[in]*/ VARIANT_BOOL ApplyToHighlights,
        /*[in]*/ VARIANT_BOOL PreserveLuminance ) = 0;
      virtual HRESULT __stdcall raw_ApplyEffectGamma (
        /*[in]*/ double Gamma ) = 0;
      virtual HRESULT __stdcall raw_ApplyEffectHSL (
        /*[in]*/ VARIANT Hue,
        /*[in]*/ VARIANT Saturation,
        /*[in]*/ VARIANT Lightness ) = 0;
      virtual HRESULT __stdcall raw_AffineTransform (
        /*[in]*/ double d11,
        /*[in]*/ double d12,
        /*[in]*/ double d21,
        /*[in]*/ double d22,
        /*[in]*/ double CenterX,
        /*[in]*/ double CenterY ) = 0;
      virtual HRESULT __stdcall raw_ApplyFill (
        /*[in]*/ struct IVGFill * Fill ) = 0;
      virtual HRESULT __stdcall raw_ApplyOutline (
        /*[in]*/ struct IVGOutline * Outline ) = 0;
      virtual HRESULT __stdcall get_ReverseRange (
        /*[out,retval]*/ struct IVGShapeRange * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_Fillet (
        /*[in]*/ double Radius,
        /*[in]*/ VARIANT_BOOL CombineSmoothSegments ) = 0;
      virtual HRESULT __stdcall raw_Chamfer (
        /*[in]*/ double DistanceA,
        /*[in]*/ double DistanceB,
        /*[in]*/ VARIANT_BOOL CombineSmoothSegments ) = 0;
      virtual HRESULT __stdcall raw_Scallop (
        /*[in]*/ double Radius,
        /*[in]*/ VARIANT_BOOL CombineSmoothSegments ) = 0;
      virtual HRESULT __stdcall raw_SetFillMode (
        /*[in]*/ enum cdrFillMode Mode ) = 0;
      virtual HRESULT __stdcall raw_ApplyCustomHatchFill (
        /*[in]*/ double Angle,
        /*[in]*/ double Spacing,
        /*[in]*/ double Shift,
        /*[in]*/ double OriginX,
        /*[in]*/ double OriginY,
        /*[in]*/ double Width,
        /*[in]*/ struct IVGColor * Color,
        /*[in]*/ struct IVGOutlineStyle * Style,
        /*[in]*/ double DashDotLength,
        /*[in]*/ double PenWidth,
        /*[in]*/ struct IVGColor * BackColor,
        /*[in]*/ VARIANT_BOOL TransformWithShape,
        /*[in]*/ VARIANT_BOOL ScaleLinesWithShape,
        /*[in]*/ VARIANT_BOOL UseWorldCoordinates,
        /*[in]*/ double FillScale,
        /*[in]*/ double LineScale,
        /*[in]*/ double FillAngle,
        /*[in]*/ double FillSkew ) = 0;
      virtual HRESULT __stdcall raw_ApplyHatchFill (
        /*[in]*/ BSTR LibraryName,
        /*[in]*/ VARIANT HatchNameOrIndex,
        /*[in]*/ struct IVGColor * BackColor,
        /*[in]*/ VARIANT_BOOL TransformWithShape,
        /*[in]*/ VARIANT_BOOL ScaleLinesWithShape,
        /*[in]*/ VARIANT_BOOL UseWorldCoordinates,
        /*[in]*/ double FillScale,
        /*[in]*/ double LineScale,
        /*[in]*/ double FillAngle,
        /*[in]*/ double FillSkew ) = 0;
      virtual HRESULT __stdcall get_LeftX (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_RightX (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_TopY (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_BottomY (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_Shapes (
        /*[out,retval]*/ struct IVGShapes * * ppVal ) = 0;
      virtual HRESULT __stdcall get_FirstShape (
        /*[out,retval]*/ struct IVGShape * * ppVal ) = 0;
      virtual HRESULT __stdcall get_LastShape (
        /*[out,retval]*/ struct IVGShape * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_StepAndRepeat (
        /*[in]*/ long NumCopies,
        /*[in]*/ double DistanceX,
        /*[in]*/ double DistanceY,
        /*[in]*/ enum cdrDistanceMode ModeX,
        /*[in]*/ enum cdrDirection DirectionX,
        /*[in]*/ enum cdrDistanceMode ModeY,
        /*[in]*/ enum cdrDirection DirectionY,
        /*[out,retval]*/ struct IVGShapeRange * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_Exists (
        /*[in]*/ struct IVGShape * Shape,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_ExistsAnyOfType (
        /*[in]*/ SAFEARRAY * * TypeList,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_CountAnyOfType (
        /*[in]*/ SAFEARRAY * * TypeList,
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_FindAnyOfType (
        /*[in]*/ SAFEARRAY * * TypeList,
        /*[out,retval]*/ struct IVGShapeRange * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_GetLinkedShapes (
        /*[in]*/ enum cdrShapeLinkType LinkType,
        /*[out,retval]*/ struct IVGShapeRange * * ppVal ) = 0;
      virtual HRESULT __stdcall get_BoundingBox (
        /*[out,retval]*/ struct IVGRect * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_GetPositionEx (
        /*[in]*/ enum cdrReferencePoint ReferencePoint,
        /*[out]*/ double * x,
        /*[out]*/ double * y ) = 0;
      virtual HRESULT __stdcall raw_SetPositionEx (
        /*[in]*/ enum cdrReferencePoint ReferencePoint,
        /*[in]*/ double x,
        /*[in]*/ double y ) = 0;
      virtual HRESULT __stdcall get_CenterX (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_CenterX (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_CenterY (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_CenterY (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall put_LeftX (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall put_RightX (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall put_TopY (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall put_BottomY (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall raw_CopyPropertiesFrom (
        /*[in]*/ struct IVGShape * Source,
        /*[in]*/ enum cdrCopyProperties Properties,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetOverprintFillState (
        /*[out,retval]*/ enum cdrOverprintState * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetOverprintOutlineState (
        /*[out,retval]*/ enum cdrOverprintState * pVal ) = 0;
      virtual HRESULT __stdcall raw_Sort (
        /*[in]*/ BSTR CompareExpression,
        /*[in]*/ long StartIndex,
        /*[in]*/ long EndIndex,
        /*[in]*/ VARIANT Data = vtMissing ) = 0;
      virtual HRESULT __stdcall raw_SetPixelAlignedRendering (
        /*[in]*/ VARIANT_BOOL PixelAligned ) = 0;
      virtual HRESULT __stdcall raw_CreateDocumentFrom (
        /*[in]*/ VARIANT_BOOL TemporaryDocument,
        /*[out,retval]*/ struct IVGDocument * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_AlignAndDistribute (
        /*[in]*/ enum cdrAlignDistributeH MethodH,
        /*[in]*/ enum cdrAlignDistributeV MethodV,
        /*[in]*/ enum cdrAlignShapesTo AlignTo,
        /*[in]*/ enum cdrDistributeArea DistributeArea,
        /*[in]*/ VARIANT_BOOL UseOutline,
        /*[in]*/ enum cdrTextAlignOrigin TextAlignOrigin,
        /*[in]*/ double PointX,
        /*[in]*/ double PointY,
        /*[in]*/ struct IVGRect * DistributeRect ) = 0;
      virtual HRESULT __stdcall raw_SetOutlinePropertiesEx (
        /*[in]*/ double Width,
        /*[in]*/ struct IVGOutlineStyle * Style,
        /*[in]*/ struct IVGColor * Color,
        /*[in]*/ struct IVGArrowHead * StartArrow,
        /*[in]*/ struct IVGArrowHead * EndArrow,
        /*[in]*/ enum cdrTriState BehindFill,
        /*[in]*/ enum cdrTriState ScaleWithShape,
        /*[in]*/ enum cdrOutlineLineCaps LineCaps,
        /*[in]*/ enum cdrOutlineLineJoin LineJoin,
        /*[in]*/ double NibAngle,
        /*[in]*/ long NibStretch,
        /*[in]*/ double DashDotLength,
        /*[in]*/ double PenWidth,
        /*[in]*/ double MiterLimit,
        /*[in]*/ enum cdrOutlineJustification Justification ) = 0;
      virtual HRESULT __stdcall raw_CreateBoundary (
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[in]*/ VARIANT_BOOL PlaceOnTop,
        /*[in]*/ VARIANT_BOOL DeleteSource,
        /*[out,retval]*/ struct IVGShape * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_EqualDivide (
        /*[in]*/ long Divisions,
        /*[in]*/ double Gap,
        /*[in]*/ VARIANT_BOOL Group,
        /*[in]*/ VARIANT_BOOL Combine,
        /*[in]*/ VARIANT_BOOL DeleteSource,
        /*[out,retval]*/ struct IVGShapeRange * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_Project (
        /*[in]*/ enum cdrProjectPlane Plane,
        /*[in]*/ enum cdrReferencePoint ReferencePoint,
        /*[in]*/ VARIANT_BOOL ApplyToDuplicate,
        /*[out,retval]*/ struct IVGShapeRange * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Unproject (
        /*[in]*/ enum cdrProjectPlane Plane,
        /*[in]*/ enum cdrReferencePoint ReferencePoint,
        /*[in]*/ VARIANT_BOOL ApplyToDuplicate,
        /*[out,retval]*/ struct IVGShapeRange * * ppRetVal ) = 0;
      virtual HRESULT __stdcall raw_Show ( ) = 0;
      virtual HRESULT __stdcall raw_Hide ( ) = 0;
      virtual HRESULT __stdcall raw_GetToolShapes (
        /*[in]*/ BSTR ShapeGuid,
        /*[out,retval]*/ struct IVGShapeRange * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_ModifyToolShapeProperties (
        /*[in]*/ struct IVGProperties * ShapePropertiesToModify ) = 0;
      virtual HRESULT __stdcall raw_CreateParallelCurves (
        /*[in]*/ long Count,
        /*[in]*/ double distanceBetweenCurves,
        /*[out,retval]*/ struct IVGShapeRange * * ppParallels ) = 0;
      virtual HRESULT __stdcall raw_GetColorTypes (
        /*[out,retval]*/ SAFEARRAY * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_GetColors (
        /*[in]*/ long MaxBitmapColors,
        /*[out,retval]*/ SAFEARRAY * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_FlattenEffects ( ) = 0;
};

struct __declspec(uuid("b0580053-9aa4-44fd-9547-4f91eb757ac4"))
IVGPowerClip : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    IVGApplicationPtr Application;
    __declspec(property(get=GetParent))
    IVGShapePtr Parent;
    __declspec(property(get=GetShapes))
    IVGShapesPtr Shapes;
    __declspec(property(get=GetContentsLocked,put=PutContentsLocked))
    VARIANT_BOOL ContentsLocked;

    //
    // Wrapper methods for error-handling
    //

    IVGApplicationPtr GetApplication ( );
    IVGShapePtr GetParent ( );
    IVGShapesPtr GetShapes ( );
    VARIANT_BOOL GetContentsLocked ( );
    void PutContentsLocked (
        VARIANT_BOOL pVal );
    HRESULT EnterEditMode ( );
    HRESULT LeaveEditMode ( );
    IVGShapeRangePtr ExtractShapes ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct IVGApplication * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ struct IVGShape * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Shapes (
        /*[out,retval]*/ struct IVGShapes * * ppVal ) = 0;
      virtual HRESULT __stdcall get_ContentsLocked (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_ContentsLocked (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall raw_EnterEditMode ( ) = 0;
      virtual HRESULT __stdcall raw_LeaveEditMode ( ) = 0;
      virtual HRESULT __stdcall raw_ExtractShapes (
        /*[out,retval]*/ struct IVGShapeRange * * ppVal ) = 0;
};

struct __declspec(uuid("b0580038-9aa4-44fd-9547-4f91eb757ac4"))
IVGFill : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetType))
    enum cdrFillType Type;
    __declspec(property(get=GetUniformColor,put=PutUniformColor))
    IVGColorPtr UniformColor;
    __declspec(property(get=GetFountain,put=PutFountain))
    IVGFountainFillPtr Fountain;
    __declspec(property(get=GetPattern,put=PutPattern))
    IVGPatternFillPtr Pattern;
    __declspec(property(get=GetTexture,put=PutTexture))
    IVGTextureFillPtr Texture;
    __declspec(property(get=GetPostScript,put=PutPostScript))
    IVGPostScriptFillPtr PostScript;
    __declspec(property(get=GetPSScreen))
    IVGPSScreenOptionsPtr PSScreen;
    __declspec(property(get=GetHatch,put=PutHatch))
    IVGHatchFillPtr Hatch;

    //
    // Wrapper methods for error-handling
    //

    enum cdrFillType GetType ( );
    IVGColorPtr GetUniformColor ( );
    void PutUniformColor (
        struct IVGColor * ppVal );
    IVGFountainFillPtr GetFountain ( );
    void PutFountain (
        struct IVGFountainFill * ppVal );
    IVGPatternFillPtr GetPattern ( );
    void PutPattern (
        struct IVGPatternFill * ppVal );
    IVGTextureFillPtr GetTexture ( );
    void PutTexture (
        struct IVGTextureFill * ppVal );
    IVGPostScriptFillPtr GetPostScript ( );
    void PutPostScript (
        struct IVGPostScriptFill * ppVal );
    HRESULT ApplyNoFill ( );
    HRESULT ApplyUniformFill (
        struct IVGColor * Color );
    IVGFountainFillPtr ApplyFountainFill (
        struct IVGColor * StartColor,
        struct IVGColor * EndColor,
        enum cdrFountainFillType Type,
        double Angle,
        long Steps,
        long EdgePad,
        long MidPoint,
        enum cdrFountainFillBlendType BlendType,
        double CenterOffsetX,
        double CenterOffsetY );
    IVGPatternFillPtr ApplyPatternFill (
        enum cdrPatternFillType Type,
        _bstr_t FileName,
        long PatternCanvasIndex,
        struct IVGColor * FrontColor,
        struct IVGColor * EndColor,
        VARIANT_BOOL TransformWithShape );
    IVGTextureFillPtr ApplyTextureFill (
        _bstr_t TextureName,
        _bstr_t LibraryName );
    IVGPostScriptFillPtr ApplyPostscriptFill (
        const _variant_t & IndexOrName );
    IVGFillPtr GetCopy ( );
    HRESULT CopyAssign (
        struct IVGFill * SourceFill );
    VARIANT_BOOL UserAssign (
        enum cdrFillType FillType,
        enum cdrPatternFillType PatternType,
        long ParentWindowHandle );
    IVGPSScreenOptionsPtr GetPSScreen ( );
    IVGHatchFillPtr GetHatch ( );
    void PutHatch (
        struct IVGHatchFill * ppVal );
    VARIANT_BOOL CompareWith (
        struct IVGFill * Fill );
    IVGHatchFillPtr ApplyCustomHatchFill (
        double Angle,
        double Spacing,
        double Shift,
        double OriginX,
        double OriginY,
        double Width,
        struct IVGColor * Color,
        struct IVGOutlineStyle * Style,
        double DashDotLength,
        double PenWidth,
        struct IVGColor * BackColor,
        VARIANT_BOOL TransformWithShape,
        VARIANT_BOOL ScaleLinesWithShape,
        VARIANT_BOOL UseWorldCoordinates,
        double FillScale,
        double LineScale,
        double FillAngle,
        double FillSkew );
    IVGHatchFillPtr ApplyHatchFill (
        _bstr_t LibraryName,
        const _variant_t & HatchNameOrIndex,
        struct IVGColor * BackColor,
        VARIANT_BOOL TransformWithShape,
        VARIANT_BOOL ScaleLinesWithShape,
        VARIANT_BOOL UseWorldCoordinates,
        double FillScale,
        double LineScale,
        double FillAngle,
        double FillSkew );
    _bstr_t ToString ( );
    VARIANT_BOOL StringAssign (
        _bstr_t FillString );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum cdrFillType * Type ) = 0;
      virtual HRESULT __stdcall get_UniformColor (
        /*[out,retval]*/ struct IVGColor * * ppVal ) = 0;
      virtual HRESULT __stdcall put_UniformColor (
        /*[in]*/ struct IVGColor * ppVal ) = 0;
      virtual HRESULT __stdcall get_Fountain (
        /*[out,retval]*/ struct IVGFountainFill * * ppVal ) = 0;
      virtual HRESULT __stdcall put_Fountain (
        /*[in]*/ struct IVGFountainFill * ppVal ) = 0;
      virtual HRESULT __stdcall get_Pattern (
        /*[out,retval]*/ struct IVGPatternFill * * ppVal ) = 0;
      virtual HRESULT __stdcall put_Pattern (
        /*[in]*/ struct IVGPatternFill * ppVal ) = 0;
      virtual HRESULT __stdcall get_Texture (
        /*[out,retval]*/ struct IVGTextureFill * * ppVal ) = 0;
      virtual HRESULT __stdcall put_Texture (
        /*[in]*/ struct IVGTextureFill * ppVal ) = 0;
      virtual HRESULT __stdcall get_PostScript (
        /*[out,retval]*/ struct IVGPostScriptFill * * ppVal ) = 0;
      virtual HRESULT __stdcall put_PostScript (
        /*[in]*/ struct IVGPostScriptFill * ppVal ) = 0;
      virtual HRESULT __stdcall raw_ApplyNoFill ( ) = 0;
      virtual HRESULT __stdcall raw_ApplyUniformFill (
        /*[in]*/ struct IVGColor * Color ) = 0;
      virtual HRESULT __stdcall raw_ApplyFountainFill (
        /*[in]*/ struct IVGColor * StartColor,
        /*[in]*/ struct IVGColor * EndColor,
        /*[in]*/ enum cdrFountainFillType Type,
        /*[in]*/ double Angle,
        /*[in]*/ long Steps,
        /*[in]*/ long EdgePad,
        /*[in]*/ long MidPoint,
        /*[in]*/ enum cdrFountainFillBlendType BlendType,
        /*[in]*/ double CenterOffsetX,
        /*[in]*/ double CenterOffsetY,
        /*[out,retval]*/ struct IVGFountainFill * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_ApplyPatternFill (
        /*[in]*/ enum cdrPatternFillType Type,
        /*[in]*/ BSTR FileName,
        /*[in]*/ long PatternCanvasIndex,
        /*[in]*/ struct IVGColor * FrontColor,
        /*[in]*/ struct IVGColor * EndColor,
        /*[in]*/ VARIANT_BOOL TransformWithShape,
        /*[out,retval]*/ struct IVGPatternFill * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_ApplyTextureFill (
        /*[in]*/ BSTR TextureName,
        /*[in]*/ BSTR LibraryName,
        /*[out,retval]*/ struct IVGTextureFill * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_ApplyPostscriptFill (
        /*[in]*/ VARIANT IndexOrName,
        /*[out,retval]*/ struct IVGPostScriptFill * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_GetCopy (
        /*[out,retval]*/ struct IVGFill * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_CopyAssign (
        /*[in]*/ struct IVGFill * SourceFill ) = 0;
      virtual HRESULT __stdcall raw_UserAssign (
        /*[in]*/ enum cdrFillType FillType,
        /*[in]*/ enum cdrPatternFillType PatternType,
        /*[in]*/ long ParentWindowHandle,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_PSScreen (
        /*[out,retval]*/ struct IVGPSScreenOptions * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Hatch (
        /*[out,retval]*/ struct IVGHatchFill * * ppVal ) = 0;
      virtual HRESULT __stdcall put_Hatch (
        /*[in]*/ struct IVGHatchFill * ppVal ) = 0;
      virtual HRESULT __stdcall raw_CompareWith (
        /*[in]*/ struct IVGFill * Fill,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_ApplyCustomHatchFill (
        /*[in]*/ double Angle,
        /*[in]*/ double Spacing,
        /*[in]*/ double Shift,
        /*[in]*/ double OriginX,
        /*[in]*/ double OriginY,
        /*[in]*/ double Width,
        /*[in]*/ struct IVGColor * Color,
        /*[in]*/ struct IVGOutlineStyle * Style,
        /*[in]*/ double DashDotLength,
        /*[in]*/ double PenWidth,
        /*[in]*/ struct IVGColor * BackColor,
        /*[in]*/ VARIANT_BOOL TransformWithShape,
        /*[in]*/ VARIANT_BOOL ScaleLinesWithShape,
        /*[in]*/ VARIANT_BOOL UseWorldCoordinates,
        /*[in]*/ double FillScale,
        /*[in]*/ double LineScale,
        /*[in]*/ double FillAngle,
        /*[in]*/ double FillSkew,
        /*[out,retval]*/ struct IVGHatchFill * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_ApplyHatchFill (
        /*[in]*/ BSTR LibraryName,
        /*[in]*/ VARIANT HatchNameOrIndex,
        /*[in]*/ struct IVGColor * BackColor,
        /*[in]*/ VARIANT_BOOL TransformWithShape,
        /*[in]*/ VARIANT_BOOL ScaleLinesWithShape,
        /*[in]*/ VARIANT_BOOL UseWorldCoordinates,
        /*[in]*/ double FillScale,
        /*[in]*/ double LineScale,
        /*[in]*/ double FillAngle,
        /*[in]*/ double FillSkew,
        /*[out,retval]*/ struct IVGHatchFill * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_ToString (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall raw_StringAssign (
        /*[in]*/ BSTR FillString,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
};

struct __declspec(uuid("b058009f-9aa4-44fd-9547-4f91eb757ac4"))
IVGHatchFills : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IVGFillPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IVGFillPtr GetItem (
        const _variant_t & IndexOrName );
    long GetCount ( );
    IUnknownPtr Get_NewEnum ( );
    IVGFillPtr Find (
        _bstr_t Name );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT IndexOrName,
        /*[out,retval]*/ struct IVGFill * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * pVal ) = 0;
      virtual HRESULT __stdcall raw_Find (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ struct IVGFill * * ppVal ) = 0;
};

struct __declspec(uuid("b058009e-9aa4-44fd-9547-4f91eb757ac4"))
IVGHatchLibrary : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetFills))
    IVGHatchFillsPtr Fills;
    __declspec(property(get=GetActive))
    VARIANT_BOOL Active;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetDisplayName))
    _bstr_t DisplayName;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetName ( );
    IVGHatchFillsPtr GetFills ( );
    VARIANT_BOOL GetActive ( );
    long GetIndex ( );
    HRESULT Activate ( );
    _bstr_t GetDisplayName ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_Fills (
        /*[out,retval]*/ struct IVGHatchFills * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Active (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_Index (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_Activate ( ) = 0;
      virtual HRESULT __stdcall get_DisplayName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
};

struct __declspec(uuid("b058009a-9aa4-44fd-9547-4f91eb757ac4"))
IVGHatchFill : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBackColor,put=PutBackColor))
    IVGColorPtr BackColor;
    __declspec(property(get=GetHasBackground))
    VARIANT_BOOL HasBackground;
    __declspec(property(get=GetTransformWithShape,put=PutTransformWithShape))
    VARIANT_BOOL TransformWithShape;
    __declspec(property(get=GetScaleLinesWithShape,put=PutScaleLinesWithShape))
    VARIANT_BOOL ScaleLinesWithShape;
    __declspec(property(get=GetUseWorldCoordinates,put=PutUseWorldCoordinates))
    VARIANT_BOOL UseWorldCoordinates;
    __declspec(property(get=GetLibraryName))
    _bstr_t LibraryName;
    __declspec(property(get=GetHatchName))
    _bstr_t HatchName;
    __declspec(property(get=GetPatterns))
    IVGHatchPatternsPtr Patterns;
    __declspec(property(get=GetFillScaleX,put=PutFillScaleX))
    double FillScaleX;
    __declspec(property(get=GetFillScaleY,put=PutFillScaleY))
    double FillScaleY;
    __declspec(property(get=GetRotationAngle,put=PutRotationAngle))
    double RotationAngle;
    __declspec(property(get=GetSkewAngle,put=PutSkewAngle))
    double SkewAngle;
    __declspec(property(get=GetIsFromLibrary))
    VARIANT_BOOL IsFromLibrary;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetLibrary))
    IVGHatchLibraryPtr Library;

    //
    // Wrapper methods for error-handling
    //

    IVGColorPtr GetBackColor ( );
    void PutBackColor (
        struct IVGColor * ppVal );
    VARIANT_BOOL GetHasBackground ( );
    VARIANT_BOOL GetTransformWithShape ( );
    void PutTransformWithShape (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetScaleLinesWithShape ( );
    void PutScaleLinesWithShape (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetUseWorldCoordinates ( );
    void PutUseWorldCoordinates (
        VARIANT_BOOL pVal );
    _bstr_t GetLibraryName ( );
    _bstr_t GetHatchName ( );
    IVGHatchPatternsPtr GetPatterns ( );
    double GetFillScaleX ( );
    void PutFillScaleX (
        double pVal );
    double GetFillScaleY ( );
    void PutFillScaleY (
        double pVal );
    double GetRotationAngle ( );
    void PutRotationAngle (
        double pVal );
    double GetSkewAngle ( );
    void PutSkewAngle (
        double pVal );
    HRESULT SetNoBackColor ( );
    HRESULT SetFillScale (
        double FillScale );
    double GetFillScale ( );
    HRESULT SetLineScale (
        double LineScale );
    double GetLineScale ( );
    IVGHatchPatternPtr AddPattern (
        double Angle,
        double Spacing,
        double Shift,
        double OriginX,
        double OriginY,
        double Width,
        struct IVGColor * Color,
        struct IVGOutlineStyle * Style,
        double DashDotLength,
        double PenWidth );
    HRESULT AddToLibrary (
        _bstr_t LibraryName,
        _bstr_t HatchName );
    HRESULT Select (
        _bstr_t LibraryName,
        const _variant_t & HatchNameOrIndex,
        struct IVGColor * BackColor,
        VARIANT_BOOL TransformWithShape,
        VARIANT_BOOL ScaleLinesWithShape,
        VARIANT_BOOL UseWorldCoordinates,
        double FillScale,
        double LineScale,
        double FillAngle,
        double FillSkew );
    VARIANT_BOOL GetIsFromLibrary ( );
    long GetIndex ( );
    IVGHatchLibraryPtr GetLibrary ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_BackColor (
        /*[out,retval]*/ struct IVGColor * * ppVal ) = 0;
      virtual HRESULT __stdcall put_BackColor (
        /*[in]*/ struct IVGColor * ppVal ) = 0;
      virtual HRESULT __stdcall get_HasBackground (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_TransformWithShape (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_TransformWithShape (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_ScaleLinesWithShape (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_ScaleLinesWithShape (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_UseWorldCoordinates (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_UseWorldCoordinates (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_LibraryName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_HatchName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_Patterns (
        /*[out,retval]*/ struct IVGHatchPatterns * * ppVal ) = 0;
      virtual HRESULT __stdcall get_FillScaleX (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_FillScaleX (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_FillScaleY (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_FillScaleY (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_RotationAngle (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_RotationAngle (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_SkewAngle (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_SkewAngle (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall raw_SetNoBackColor ( ) = 0;
      virtual HRESULT __stdcall raw_SetFillScale (
        /*[in]*/ double FillScale ) = 0;
      virtual HRESULT __stdcall raw_GetFillScale (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetLineScale (
        /*[in]*/ double LineScale ) = 0;
      virtual HRESULT __stdcall raw_GetLineScale (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall raw_AddPattern (
        /*[in]*/ double Angle,
        /*[in]*/ double Spacing,
        /*[in]*/ double Shift,
        /*[in]*/ double OriginX,
        /*[in]*/ double OriginY,
        /*[in]*/ double Width,
        /*[in]*/ struct IVGColor * Color,
        /*[in]*/ struct IVGOutlineStyle * Style,
        /*[in]*/ double DashDotLength,
        /*[in]*/ double PenWidth,
        /*[out,retval]*/ struct IVGHatchPattern * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_AddToLibrary (
        /*[in]*/ BSTR LibraryName,
        /*[in]*/ BSTR HatchName ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[in]*/ BSTR LibraryName,
        /*[in]*/ VARIANT HatchNameOrIndex,
        /*[in]*/ struct IVGColor * BackColor,
        /*[in]*/ VARIANT_BOOL TransformWithShape,
        /*[in]*/ VARIANT_BOOL ScaleLinesWithShape,
        /*[in]*/ VARIANT_BOOL UseWorldCoordinates,
        /*[in]*/ double FillScale,
        /*[in]*/ double LineScale,
        /*[in]*/ double FillAngle,
        /*[in]*/ double FillSkew ) = 0;
      virtual HRESULT __stdcall get_IsFromLibrary (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_Index (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_Library (
        /*[out,retval]*/ struct IVGHatchLibrary * * ppVal ) = 0;
};

struct __declspec(uuid("b0580064-9aa4-44fd-9547-4f91eb757ac4"))
IVGStructFontProperties : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetStyle,put=PutStyle))
    enum cdrFontStyle Style;
    __declspec(property(get=GetSize,put=PutSize))
    float Size;
    __declspec(property(get=GetUnderline,put=PutUnderline))
    enum cdrFontLine Underline;
    __declspec(property(get=GetOverscore,put=PutOverscore))
    enum cdrFontLine Overscore;
    __declspec(property(get=GetStrikethru,put=PutStrikethru))
    enum cdrFontLine Strikethru;
    __declspec(property(get=GetUppercase,put=PutUppercase))
    enum cdrFontCase Uppercase;
    __declspec(property(get=GetPosition,put=PutPosition))
    enum cdrFontPosition Position;
    __declspec(property(get=GetRangeKerning,put=PutRangeKerning))
    long RangeKerning;
    __declspec(property(get=GetFill,put=PutFill))
    IVGFillPtr Fill;
    __declspec(property(get=GetOutline,put=PutOutline))
    IVGOutlinePtr Outline;

    //
    // Wrapper methods for error-handling
    //

    void PutName (
        _bstr_t pVal );
    _bstr_t GetName ( );
    void PutStyle (
        enum cdrFontStyle pVal );
    enum cdrFontStyle GetStyle ( );
    void PutSize (
        float pVal );
    float GetSize ( );
    void PutUnderline (
        enum cdrFontLine pVal );
    enum cdrFontLine GetUnderline ( );
    void PutOverscore (
        enum cdrFontLine pVal );
    enum cdrFontLine GetOverscore ( );
    void PutStrikethru (
        enum cdrFontLine pVal );
    enum cdrFontLine GetStrikethru ( );
    void PutUppercase (
        enum cdrFontCase pVal );
    enum cdrFontCase GetUppercase ( );
    void PutPosition (
        enum cdrFontPosition pVal );
    enum cdrFontPosition GetPosition ( );
    void PutRangeKerning (
        long pVal );
    long GetRangeKerning ( );
    void PutFill (
        struct IVGFill * ppVal );
    IVGFillPtr GetFill ( );
    void PutOutline (
        struct IVGOutline * ppVal );
    IVGOutlinePtr GetOutline ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Style (
        /*[in]*/ enum cdrFontStyle pVal ) = 0;
      virtual HRESULT __stdcall get_Style (
        /*[out,retval]*/ enum cdrFontStyle * pVal ) = 0;
      virtual HRESULT __stdcall put_Size (
        /*[in]*/ float pVal ) = 0;
      virtual HRESULT __stdcall get_Size (
        /*[out,retval]*/ float * pVal ) = 0;
      virtual HRESULT __stdcall put_Underline (
        /*[in]*/ enum cdrFontLine pVal ) = 0;
      virtual HRESULT __stdcall get_Underline (
        /*[out,retval]*/ enum cdrFontLine * pVal ) = 0;
      virtual HRESULT __stdcall put_Overscore (
        /*[in]*/ enum cdrFontLine pVal ) = 0;
      virtual HRESULT __stdcall get_Overscore (
        /*[out,retval]*/ enum cdrFontLine * pVal ) = 0;
      virtual HRESULT __stdcall put_Strikethru (
        /*[in]*/ enum cdrFontLine pVal ) = 0;
      virtual HRESULT __stdcall get_Strikethru (
        /*[out,retval]*/ enum cdrFontLine * pVal ) = 0;
      virtual HRESULT __stdcall put_Uppercase (
        /*[in]*/ enum cdrFontCase pVal ) = 0;
      virtual HRESULT __stdcall get_Uppercase (
        /*[out,retval]*/ enum cdrFontCase * pVal ) = 0;
      virtual HRESULT __stdcall put_Position (
        /*[in]*/ enum cdrFontPosition pVal ) = 0;
      virtual HRESULT __stdcall get_Position (
        /*[out,retval]*/ enum cdrFontPosition * pVal ) = 0;
      virtual HRESULT __stdcall put_RangeKerning (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_RangeKerning (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_Fill (
        /*[in]*/ struct IVGFill * ppVal ) = 0;
      virtual HRESULT __stdcall get_Fill (
        /*[out,retval]*/ struct IVGFill * * ppVal ) = 0;
      virtual HRESULT __stdcall put_Outline (
        /*[in]*/ struct IVGOutline * ppVal ) = 0;
      virtual HRESULT __stdcall get_Outline (
        /*[out,retval]*/ struct IVGOutline * * ppVal ) = 0;
};

struct __declspec(uuid("b058009d-9aa4-44fd-9547-4f91eb757ac4"))
IVGHatchLibraries : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IVGHatchLibraryPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetActiveLibrary))
    IVGHatchLibraryPtr ActiveLibrary;
    __declspec(property(get=GetDefaultLibrary))
    IVGHatchLibraryPtr DefaultLibrary;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IVGHatchLibraryPtr GetItem (
        const _variant_t & IndexOrName );
    long GetCount ( );
    IVGHatchLibraryPtr Find (
        _bstr_t Name );
    IUnknownPtr Get_NewEnum ( );
    IVGHatchLibraryPtr GetActiveLibrary ( );
    IVGHatchLibraryPtr GetDefaultLibrary ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT IndexOrName,
        /*[out,retval]*/ struct IVGHatchLibrary * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_Find (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ struct IVGHatchLibrary * * ppVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * pVal ) = 0;
      virtual HRESULT __stdcall get_ActiveLibrary (
        /*[out,retval]*/ struct IVGHatchLibrary * * ppVal ) = 0;
      virtual HRESULT __stdcall get_DefaultLibrary (
        /*[out,retval]*/ struct IVGHatchLibrary * * ppVal ) = 0;
};

struct __declspec(uuid("b0580071-9aa4-44fd-9547-4f91eb757ac4"))
IVGText : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetType))
    enum cdrTextType Type;
    __declspec(property(get=GetFramesInLink))
    long FramesInLink;
    __declspec(property(get=GetUnusedFramesInLink))
    long UnusedFramesInLink;
    __declspec(property(get=GetOverflow))
    VARIANT_BOOL Overflow;
    __declspec(property(get=GetFontProperties,put=PutFontProperties))
    IVGStructFontPropertiesPtr FontProperties[];
    __declspec(property(get=GetSelection))
    IVGTextRangePtr Selection;
    __declspec(property(get=GetFontPropertiesInRange,put=PutFontPropertiesInRange))
    IVGStructFontPropertiesPtr FontPropertiesInRange[][][];
    __declspec(property(get=GetIsEditing))
    VARIANT_BOOL IsEditing;
    __declspec(property(get=GetAlignProperties,put=PutAlignProperties))
    IVGStructAlignPropertiesPtr AlignProperties[];
    __declspec(property(get=GetFrame))
    IVGTextFramePtr Frame;
    __declspec(property(get=GetAlignPropertiesInRange,put=PutAlignPropertiesInRange))
    IVGStructAlignPropertiesPtr AlignPropertiesInRange[][][];
    __declspec(property(get=GetFrames))
    IVGTextFramesPtr Frames;
    __declspec(property(get=GetSpaceProperties,put=PutSpaceProperties))
    IVGStructSpacePropertiesPtr SpaceProperties[];
    __declspec(property(get=GetIsArtisticText))
    VARIANT_BOOL IsArtisticText;
    __declspec(property(get=GetSpacePropertiesInRange,put=PutSpacePropertiesInRange))
    IVGStructSpacePropertiesPtr SpacePropertiesInRange[][][];
    __declspec(property(get=GetHyphenationSettings,put=PutHyphenationSettings))
    IVGStructHyphenationSettingsPtr HyphenationSettings[];
    __declspec(property(get=GetHyphenationSettingsInRange,put=PutHyphenationSettingsInRange))
    IVGStructHyphenationSettingsPtr HyphenationSettingsInRange[][][];
    __declspec(property(get=GetContents,put=PutContents))
    _bstr_t Contents[];
    __declspec(property(get=GetIsHTMLCompatible))
    VARIANT_BOOL IsHTMLCompatible;
    __declspec(property(get=GetStory))
    IVGTextRangePtr Story;

    //
    // Wrapper methods for error-handling
    //

    enum cdrTextType GetType ( );
    long GetFramesInLink ( );
    long GetUnusedFramesInLink ( );
    VARIANT_BOOL GetOverflow ( );
    IVGStructFontPropertiesPtr GetFontProperties (
        enum cdrTextFrames Frames );
    void PutFontProperties (
        enum cdrTextFrames Frames,
        struct IVGStructFontProperties * ppVal );
    IVGStructFontPropertiesPtr GetFontPropertiesInRange (
        long StartIndex,
        long Count,
        enum cdrTextIndexingType IndexingType );
    void PutFontPropertiesInRange (
        long StartIndex,
        long Count,
        enum cdrTextIndexingType IndexingType,
        struct IVGStructFontProperties * ppVal );
    IVGStructAlignPropertiesPtr GetAlignProperties (
        enum cdrTextFrames Frames );
    void PutAlignProperties (
        enum cdrTextFrames Frames,
        struct IVGStructAlignProperties * ppVal );
    IVGStructAlignPropertiesPtr GetAlignPropertiesInRange (
        long StartIndex,
        long Count,
        enum cdrTextIndexingType IndexingType );
    void PutAlignPropertiesInRange (
        long StartIndex,
        long Count,
        enum cdrTextIndexingType IndexingType,
        struct IVGStructAlignProperties * ppVal );
    IVGStructSpacePropertiesPtr GetSpaceProperties (
        enum cdrTextFrames Frames );
    void PutSpaceProperties (
        enum cdrTextFrames Frames,
        struct IVGStructSpaceProperties * ppVal );
    IVGStructSpacePropertiesPtr GetSpacePropertiesInRange (
        long StartIndex,
        long Count,
        enum cdrTextIndexingType IndexingType );
    void PutSpacePropertiesInRange (
        long StartIndex,
        long Count,
        enum cdrTextIndexingType IndexingType,
        struct IVGStructSpaceProperties * ppVal );
    IVGStructHyphenationSettingsPtr GetHyphenationSettings (
        enum cdrTextFrames Frames );
    void PutHyphenationSettings (
        enum cdrTextFrames Frames,
        struct IVGStructHyphenationSettings * ppVal );
    IVGStructHyphenationSettingsPtr GetHyphenationSettingsInRange (
        long StartIndex,
        long Count,
        enum cdrTextIndexingType IndexingType );
    void PutHyphenationSettingsInRange (
        long StartIndex,
        long Count,
        enum cdrTextIndexingType IndexingType,
        struct IVGStructHyphenationSettings * ppVal );
    _bstr_t GetContents (
        enum cdrTextFrames Frames );
    void PutContents (
        enum cdrTextFrames Frames,
        _bstr_t pVal );
    IVGEffectPtr FitToPath (
        struct IVGShape * Path );
    long Find (
        _bstr_t Text,
        VARIANT_BOOL CaseSensitive,
        long StartIndex,
        VARIANT_BOOL WrapAround,
        enum cdrTextIndexingType IndexingType );
    HRESULT Replace (
        _bstr_t OldText,
        _bstr_t NewText,
        VARIANT_BOOL CaseSensitive,
        long StartIndex,
        VARIANT_BOOL ReplaceAll,
        VARIANT_BOOL WrapAround,
        enum cdrTextIndexingType IndexingType );
    HRESULT ImportFromFile (
        _bstr_t FileName,
        long StartIndex,
        enum cdrTextIndexingType IndexingType );
    HRESULT ExportToFile (
        _bstr_t FileName,
        long StartIndex,
        long Count,
        enum cdrTextIndexingType IndexingType );
    HRESULT ConvertToArtistic ( );
    HRESULT ConvertToParagraph ( );
    VARIANT_BOOL GetIsHTMLCompatible ( );
    VARIANT_BOOL MakeHTMLCompatible (
        VARIANT_BOOL HTML );
    IVGTextRangePtr GetStory ( );
    IVGTextRangePtr GetSelection ( );
    IVGTextRangePtr Range (
        long Start,
        long End );
    VARIANT_BOOL GetIsEditing ( );
    HRESULT BeginEdit ( );
    IVGTextFramePtr GetFrame ( );
    IVGTextFramesPtr GetFrames ( );
    VARIANT_BOOL GetIsArtisticText ( );
    HRESULT FitTextToFrame ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum cdrTextType * pVal ) = 0;
      virtual HRESULT __stdcall get_FramesInLink (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_UnusedFramesInLink (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_Overflow (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_FontProperties (
        /*[in]*/ enum cdrTextFrames Frames,
        /*[out,retval]*/ struct IVGStructFontProperties * * ppVal ) = 0;
      virtual HRESULT __stdcall put_FontProperties (
        /*[in]*/ enum cdrTextFrames Frames,
        /*[in]*/ struct IVGStructFontProperties * ppVal ) = 0;
      virtual HRESULT __stdcall get_FontPropertiesInRange (
        /*[in]*/ long StartIndex,
        /*[in]*/ long Count,
        /*[in]*/ enum cdrTextIndexingType IndexingType,
        /*[out,retval]*/ struct IVGStructFontProperties * * ppVal ) = 0;
      virtual HRESULT __stdcall put_FontPropertiesInRange (
        /*[in]*/ long StartIndex,
        /*[in]*/ long Count,
        /*[in]*/ enum cdrTextIndexingType IndexingType,
        /*[in]*/ struct IVGStructFontProperties * ppVal ) = 0;
      virtual HRESULT __stdcall get_AlignProperties (
        /*[in]*/ enum cdrTextFrames Frames,
        /*[out,retval]*/ struct IVGStructAlignProperties * * ppVal ) = 0;
      virtual HRESULT __stdcall put_AlignProperties (
        /*[in]*/ enum cdrTextFrames Frames,
        /*[in]*/ struct IVGStructAlignProperties * ppVal ) = 0;
      virtual HRESULT __stdcall get_AlignPropertiesInRange (
        /*[in]*/ long StartIndex,
        /*[in]*/ long Count,
        /*[in]*/ enum cdrTextIndexingType IndexingType,
        /*[out,retval]*/ struct IVGStructAlignProperties * * ppVal ) = 0;
      virtual HRESULT __stdcall put_AlignPropertiesInRange (
        /*[in]*/ long StartIndex,
        /*[in]*/ long Count,
        /*[in]*/ enum cdrTextIndexingType IndexingType,
        /*[in]*/ struct IVGStructAlignProperties * ppVal ) = 0;
      virtual HRESULT __stdcall get_SpaceProperties (
        /*[in]*/ enum cdrTextFrames Frames,
        /*[out,retval]*/ struct IVGStructSpaceProperties * * ppVal ) = 0;
      virtual HRESULT __stdcall put_SpaceProperties (
        /*[in]*/ enum cdrTextFrames Frames,
        /*[in]*/ struct IVGStructSpaceProperties * ppVal ) = 0;
      virtual HRESULT __stdcall get_SpacePropertiesInRange (
        /*[in]*/ long StartIndex,
        /*[in]*/ long Count,
        /*[in]*/ enum cdrTextIndexingType IndexingType,
        /*[out,retval]*/ struct IVGStructSpaceProperties * * ppVal ) = 0;
      virtual HRESULT __stdcall put_SpacePropertiesInRange (
        /*[in]*/ long StartIndex,
        /*[in]*/ long Count,
        /*[in]*/ enum cdrTextIndexingType IndexingType,
        /*[in]*/ struct IVGStructSpaceProperties * ppVal ) = 0;
      virtual HRESULT __stdcall get_HyphenationSettings (
        /*[in]*/ enum cdrTextFrames Frames,
        /*[out,retval]*/ struct IVGStructHyphenationSettings * * ppVal ) = 0;
      virtual HRESULT __stdcall put_HyphenationSettings (
        /*[in]*/ enum cdrTextFrames Frames,
        /*[in]*/ struct IVGStructHyphenationSettings * ppVal ) = 0;
      virtual HRESULT __stdcall get_HyphenationSettingsInRange (
        /*[in]*/ long StartIndex,
        /*[in]*/ long Count,
        /*[in]*/ enum cdrTextIndexingType IndexingType,
        /*[out,retval]*/ struct IVGStructHyphenationSettings * * ppVal ) = 0;
      virtual HRESULT __stdcall put_HyphenationSettingsInRange (
        /*[in]*/ long StartIndex,
        /*[in]*/ long Count,
        /*[in]*/ enum cdrTextIndexingType IndexingType,
        /*[in]*/ struct IVGStructHyphenationSettings * ppVal ) = 0;
      virtual HRESULT __stdcall get_Contents (
        /*[in]*/ enum cdrTextFrames Frames,
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Contents (
        /*[in]*/ enum cdrTextFrames Frames,
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall raw_FitToPath (
        /*[in]*/ struct IVGShape * Path,
        /*[out,retval]*/ struct IVGEffect * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_Find (
        /*[in]*/ BSTR Text,
        /*[in]*/ VARIANT_BOOL CaseSensitive,
        /*[in]*/ long StartIndex,
        /*[in]*/ VARIANT_BOOL WrapAround,
        /*[in]*/ enum cdrTextIndexingType IndexingType,
        /*[out,retval]*/ long * IndexFound ) = 0;
      virtual HRESULT __stdcall raw_Replace (
        /*[in]*/ BSTR OldText,
        /*[in]*/ BSTR NewText,
        /*[in]*/ VARIANT_BOOL CaseSensitive,
        /*[in]*/ long StartIndex,
        /*[in]*/ VARIANT_BOOL ReplaceAll,
        /*[in]*/ VARIANT_BOOL WrapAround,
        /*[in]*/ enum cdrTextIndexingType IndexingType ) = 0;
      virtual HRESULT __stdcall raw_ImportFromFile (
        /*[in]*/ BSTR FileName,
        /*[in]*/ long StartIndex,
        /*[in]*/ enum cdrTextIndexingType IndexingType ) = 0;
      virtual HRESULT __stdcall raw_ExportToFile (
        /*[in]*/ BSTR FileName,
        /*[in]*/ long StartIndex,
        /*[in]*/ long Count,
        /*[in]*/ enum cdrTextIndexingType IndexingType ) = 0;
      virtual HRESULT __stdcall raw_ConvertToArtistic ( ) = 0;
      virtual HRESULT __stdcall raw_ConvertToParagraph ( ) = 0;
      virtual HRESULT __stdcall get_IsHTMLCompatible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_MakeHTMLCompatible (
        /*[in]*/ VARIANT_BOOL HTML,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_Story (
        /*[out,retval]*/ struct IVGTextRange * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Selection (
        /*[out,retval]*/ struct IVGTextRange * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_Range (
        /*[in]*/ long Start,
        /*[in]*/ long End,
        /*[out,retval]*/ struct IVGTextRange * * ppVal ) = 0;
      virtual HRESULT __stdcall get_IsEditing (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_BeginEdit ( ) = 0;
      virtual HRESULT __stdcall get_Frame (
        /*[out,retval]*/ struct IVGTextFrame * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Frames (
        /*[out,retval]*/ struct IVGTextFrames * * ppVal ) = 0;
      virtual HRESULT __stdcall get_IsArtisticText (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_FitTextToFrame ( ) = 0;
};

struct __declspec(uuid("b0580026-9aa4-44fd-9547-4f91eb757ac4"))
IVGEffect : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    IVGApplicationPtr Application;
    __declspec(property(get=GetParent))
    IVGEffectsPtr Parent;
    __declspec(property(get=GetType))
    enum cdrEffectType Type;
    __declspec(property(get=GetBlend))
    IVGEffectBlendPtr Blend;
    __declspec(property(get=GetControlPath))
    IVGEffectControlPathPtr ControlPath;
    __declspec(property(get=GetExtrude))
    IVGEffectExtrudePtr Extrude;
    __declspec(property(get=GetEnvelope))
    IVGEffectEnvelopePtr Envelope;
    __declspec(property(get=GetTextOnPath))
    IVGEffectTextOnPathPtr TextOnPath;
    __declspec(property(get=GetDropShadow))
    IVGEffectDropShadowPtr DropShadow;
    __declspec(property(get=GetContour))
    IVGEffectContourPtr Contour;
    __declspec(property(get=GetDistortion))
    IVGEffectDistortionPtr Distortion;
    __declspec(property(get=GetLens))
    IVGEffectLensPtr Lens;
    __declspec(property(get=GetPerspective))
    IVGEffectPerspectivePtr Perspective;
    __declspec(property(get=GetClones))
    IVGEffectsPtr Clones;
    __declspec(property(get=GetCloneParent))
    IVGEffectPtr CloneParent;
    __declspec(property(get=GetCustom))
    IVGCustomEffectPtr Custom;
    __declspec(property(get=GetInnerShadow))
    IVGEffectInnerShadowPtr InnerShadow;

    //
    // Wrapper methods for error-handling
    //

    IVGApplicationPtr GetApplication ( );
    IVGEffectsPtr GetParent ( );
    enum cdrEffectType GetType ( );
    IVGEffectBlendPtr GetBlend ( );
    IVGEffectControlPathPtr GetControlPath ( );
    IVGEffectExtrudePtr GetExtrude ( );
    IVGEffectEnvelopePtr GetEnvelope ( );
    IVGEffectTextOnPathPtr GetTextOnPath ( );
    IVGEffectDropShadowPtr GetDropShadow ( );
    IVGEffectContourPtr GetContour ( );
    IVGEffectDistortionPtr GetDistortion ( );
    IVGEffectLensPtr GetLens ( );
    IVGEffectPerspectivePtr GetPerspective ( );
    IVGEffectsPtr GetClones ( );
    IVGEffectPtr GetCloneParent ( );
    HRESULT Clear ( );
    IVGShapeRangePtr Separate ( );
    IVGCustomEffectPtr GetCustom ( );
    IVGEffectInnerShadowPtr GetInnerShadow ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct IVGApplication * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ struct IVGEffects * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum cdrEffectType * pVal ) = 0;
      virtual HRESULT __stdcall get_Blend (
        /*[out,retval]*/ struct IVGEffectBlend * * ppVal ) = 0;
      virtual HRESULT __stdcall get_ControlPath (
        /*[out,retval]*/ struct IVGEffectControlPath * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Extrude (
        /*[out,retval]*/ struct IVGEffectExtrude * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Envelope (
        /*[out,retval]*/ struct IVGEffectEnvelope * * pVal ) = 0;
      virtual HRESULT __stdcall get_TextOnPath (
        /*[out,retval]*/ struct IVGEffectTextOnPath * * ppVal ) = 0;
      virtual HRESULT __stdcall get_DropShadow (
        /*[out,retval]*/ struct IVGEffectDropShadow * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Contour (
        /*[out,retval]*/ struct IVGEffectContour * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Distortion (
        /*[out,retval]*/ struct IVGEffectDistortion * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Lens (
        /*[out,retval]*/ struct IVGEffectLens * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Perspective (
        /*[out,retval]*/ struct IVGEffectPerspective * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Clones (
        /*[out,retval]*/ struct IVGEffects * * ppVal ) = 0;
      virtual HRESULT __stdcall get_CloneParent (
        /*[out,retval]*/ struct IVGEffect * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_Clear ( ) = 0;
      virtual HRESULT __stdcall raw_Separate (
        /*[out,retval]*/ struct IVGShapeRange * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Custom (
        /*[out,retval]*/ struct IVGCustomEffect * * ppVal ) = 0;
      virtual HRESULT __stdcall get_InnerShadow (
        /*[out,retval]*/ struct IVGEffectInnerShadow * * ppVal ) = 0;
};

struct __declspec(uuid("b0580036-9aa4-44fd-9547-4f91eb757ac4"))
IVGEffects : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    IVGApplicationPtr Application;
    __declspec(property(get=GetParent))
    IVGShapePtr Parent;
    __declspec(property(get=GetItem))
    IVGEffectPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetBlendEffects))
    IVGEffectsPtr BlendEffects;
    __declspec(property(get=GetCustomEffects))
    IVGEffectsPtr CustomEffects;
    __declspec(property(get=GetDistortionEffects))
    IVGEffectsPtr DistortionEffects;
    __declspec(property(get=GetEnvelopeEffects))
    IVGEffectsPtr EnvelopeEffects;
    __declspec(property(get=GetPerspectiveEffects))
    IVGEffectsPtr PerspectiveEffects;
    __declspec(property(get=GetContourEffect))
    IVGEffectPtr ContourEffect;
    __declspec(property(get=GetControlPathEffect))
    IVGEffectPtr ControlPathEffect;
    __declspec(property(get=GetDropShadowEffect))
    IVGEffectPtr DropShadowEffect;
    __declspec(property(get=GetExtrudeEffect))
    IVGEffectPtr ExtrudeEffect;
    __declspec(property(get=GetLensEffect))
    IVGEffectPtr LensEffect;
    __declspec(property(get=GetTextOnPathEffect))
    IVGEffectPtr TextOnPathEffect;
    __declspec(property(get=GetInnerShadowEffect))
    IVGEffectPtr InnerShadowEffect;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IVGApplicationPtr GetApplication ( );
    IVGShapePtr GetParent ( );
    IVGEffectPtr GetItem (
        long Index );
    IUnknownPtr Get_NewEnum ( );
    long GetCount ( );
    IVGEffectsPtr GetBlendEffects ( );
    IVGEffectsPtr GetCustomEffects ( );
    IVGEffectsPtr GetDistortionEffects ( );
    IVGEffectsPtr GetEnvelopeEffects ( );
    IVGEffectsPtr GetPerspectiveEffects ( );
    IVGEffectPtr GetContourEffect ( );
    IVGEffectPtr GetControlPathEffect ( );
    IVGEffectPtr GetDropShadowEffect ( );
    IVGEffectPtr GetExtrudeEffect ( );
    IVGEffectPtr GetLensEffect ( );
    IVGEffectPtr GetTextOnPathEffect ( );
    IVGEffectPtr GetInnerShadowEffect ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct IVGApplication * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ struct IVGShape * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IVGEffect * * ppVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * pVal ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_BlendEffects (
        /*[out,retval]*/ struct IVGEffects * * ppVal ) = 0;
      virtual HRESULT __stdcall get_CustomEffects (
        /*[out,retval]*/ struct IVGEffects * * ppVal ) = 0;
      virtual HRESULT __stdcall get_DistortionEffects (
        /*[out,retval]*/ struct IVGEffects * * ppVal ) = 0;
      virtual HRESULT __stdcall get_EnvelopeEffects (
        /*[out,retval]*/ struct IVGEffects * * ppVal ) = 0;
      virtual HRESULT __stdcall get_PerspectiveEffects (
        /*[out,retval]*/ struct IVGEffects * * ppVal ) = 0;
      virtual HRESULT __stdcall get_ContourEffect (
        /*[out,retval]*/ struct IVGEffect * * ppVal ) = 0;
      virtual HRESULT __stdcall get_ControlPathEffect (
        /*[out,retval]*/ struct IVGEffect * * ppVal ) = 0;
      virtual HRESULT __stdcall get_DropShadowEffect (
        /*[out,retval]*/ struct IVGEffect * * ppVal ) = 0;
      virtual HRESULT __stdcall get_ExtrudeEffect (
        /*[out,retval]*/ struct IVGEffect * * ppVal ) = 0;
      virtual HRESULT __stdcall get_LensEffect (
        /*[out,retval]*/ struct IVGEffect * * ppVal ) = 0;
      virtual HRESULT __stdcall get_TextOnPathEffect (
        /*[out,retval]*/ struct IVGEffect * * ppVal ) = 0;
      virtual HRESULT __stdcall get_InnerShadowEffect (
        /*[out,retval]*/ struct IVGEffect * * ppVal ) = 0;
};

struct __declspec(uuid("b0580027-9aa4-44fd-9547-4f91eb757ac4"))
IVGEffectBlend : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    IVGApplicationPtr Application;
    __declspec(property(get=GetParent))
    IVGEffectPtr Parent;
    __declspec(property(get=GetStartShape,put=PutStartShape))
    IVGShapePtr StartShape;
    __declspec(property(get=GetEndShape,put=PutEndShape))
    IVGShapePtr EndShape;
    __declspec(property(get=GetBlendGroup))
    IVGShapePtr BlendGroup;
    __declspec(property(get=GetPath,put=PutPath))
    IVGShapePtr Path;
    __declspec(property(get=GetStartShapeOffset,put=PutStartShapeOffset))
    double StartShapeOffset;
    __declspec(property(get=GetEndShapeOffset,put=PutEndShapeOffset))
    double EndShapeOffset;
    __declspec(property(get=GetMode,put=PutMode))
    enum cdrBlendMode Mode;
    __declspec(property(get=GetSteps,put=PutSteps))
    long Steps;
    __declspec(property(get=GetSpacing,put=PutSpacing))
    double Spacing;
    __declspec(property(get=GetAngle,put=PutAngle))
    double Angle;
    __declspec(property(get=GetLoop,put=PutLoop))
    VARIANT_BOOL Loop;
    __declspec(property(get=GetFullPath,put=PutFullPath))
    VARIANT_BOOL FullPath;
    __declspec(property(get=GetRotateShapes,put=PutRotateShapes))
    VARIANT_BOOL RotateShapes;
    __declspec(property(get=GetColorBlendType,put=PutColorBlendType))
    enum cdrFountainFillBlendType ColorBlendType;
    __declspec(property(get=GetSpacingAcceleration,put=PutSpacingAcceleration))
    long SpacingAcceleration;
    __declspec(property(get=GetColorAcceleration,put=PutColorAcceleration))
    long ColorAcceleration;
    __declspec(property(get=GetLinkAcceleration,put=PutLinkAcceleration))
    VARIANT_BOOL LinkAcceleration;
    __declspec(property(get=GetAccelerateSize,put=PutAccelerateSize))
    VARIANT_BOOL AccelerateSize;
    __declspec(property(get=GetMapNodes,put=PutMapNodes))
    VARIANT_BOOL MapNodes;
    __declspec(property(get=GetStartPoint,put=PutStartPoint))
    IVGSnapPointPtr StartPoint;
    __declspec(property(get=GetEndPoint,put=PutEndPoint))
    IVGSnapPointPtr EndPoint;

    //
    // Wrapper methods for error-handling
    //

    IVGApplicationPtr GetApplication ( );
    IVGEffectPtr GetParent ( );
    IVGShapePtr GetStartShape ( );
    void PutStartShape (
        struct IVGShape * ppVal );
    IVGShapePtr GetEndShape ( );
    void PutEndShape (
        struct IVGShape * ppVal );
    IVGShapePtr GetBlendGroup ( );
    IVGShapePtr GetPath ( );
    void PutPath (
        struct IVGShape * ppVal );
    double GetStartShapeOffset ( );
    void PutStartShapeOffset (
        double pVal );
    double GetEndShapeOffset ( );
    void PutEndShapeOffset (
        double pVal );
    enum cdrBlendMode GetMode ( );
    void PutMode (
        enum cdrBlendMode pVal );
    long GetSteps ( );
    void PutSteps (
        long pVal );
    double GetSpacing ( );
    void PutSpacing (
        double pVal );
    double GetAngle ( );
    void PutAngle (
        double pVal );
    VARIANT_BOOL GetLoop ( );
    void PutLoop (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetFullPath ( );
    void PutFullPath (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetRotateShapes ( );
    void PutRotateShapes (
        VARIANT_BOOL pVal );
    enum cdrFountainFillBlendType GetColorBlendType ( );
    void PutColorBlendType (
        enum cdrFountainFillBlendType pVal );
    long GetSpacingAcceleration ( );
    void PutSpacingAcceleration (
        long pVal );
    long GetColorAcceleration ( );
    void PutColorAcceleration (
        long pVal );
    VARIANT_BOOL GetLinkAcceleration ( );
    void PutLinkAcceleration (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetAccelerateSize ( );
    void PutAccelerateSize (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetMapNodes ( );
    void PutMapNodes (
        VARIANT_BOOL pVal );
    IVGSnapPointPtr GetStartPoint ( );
    void PutStartPoint (
        struct IVGSnapPoint * ppVal );
    IVGSnapPointPtr GetEndPoint ( );
    void PutEndPoint (
        struct IVGSnapPoint * ppVal );
    IVGShapePtr Split (
        long StepNo );
    VARIANT_BOOL FuseStart ( );
    VARIANT_BOOL FuseEnd ( );
    VARIANT_BOOL CopyFrom (
        struct IVGEffectBlend * Source );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct IVGApplication * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ struct IVGEffect * * ppVal ) = 0;
      virtual HRESULT __stdcall get_StartShape (
        /*[out,retval]*/ struct IVGShape * * ppVal ) = 0;
      virtual HRESULT __stdcall put_StartShape (
        /*[in]*/ struct IVGShape * ppVal ) = 0;
      virtual HRESULT __stdcall get_EndShape (
        /*[out,retval]*/ struct IVGShape * * ppVal ) = 0;
      virtual HRESULT __stdcall put_EndShape (
        /*[in]*/ struct IVGShape * ppVal ) = 0;
      virtual HRESULT __stdcall get_BlendGroup (
        /*[out,retval]*/ struct IVGShape * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ struct IVGShape * * ppVal ) = 0;
      virtual HRESULT __stdcall put_Path (
        /*[in]*/ struct IVGShape * ppVal ) = 0;
      virtual HRESULT __stdcall get_StartShapeOffset (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_StartShapeOffset (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_EndShapeOffset (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_EndShapeOffset (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Mode (
        /*[out,retval]*/ enum cdrBlendMode * pVal ) = 0;
      virtual HRESULT __stdcall put_Mode (
        /*[in]*/ enum cdrBlendMode pVal ) = 0;
      virtual HRESULT __stdcall get_Steps (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_Steps (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_Spacing (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Spacing (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Angle (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Angle (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Loop (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_Loop (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_FullPath (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_FullPath (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_RotateShapes (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_RotateShapes (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_ColorBlendType (
        /*[out,retval]*/ enum cdrFountainFillBlendType * pVal ) = 0;
      virtual HRESULT __stdcall put_ColorBlendType (
        /*[in]*/ enum cdrFountainFillBlendType pVal ) = 0;
      virtual HRESULT __stdcall get_SpacingAcceleration (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_SpacingAcceleration (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_ColorAcceleration (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_ColorAcceleration (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_LinkAcceleration (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_LinkAcceleration (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_AccelerateSize (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_AccelerateSize (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_MapNodes (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_MapNodes (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_StartPoint (
        /*[out,retval]*/ struct IVGSnapPoint * * ppVal ) = 0;
      virtual HRESULT __stdcall put_StartPoint (
        /*[in]*/ struct IVGSnapPoint * ppVal ) = 0;
      virtual HRESULT __stdcall get_EndPoint (
        /*[out,retval]*/ struct IVGSnapPoint * * ppVal ) = 0;
      virtual HRESULT __stdcall put_EndPoint (
        /*[in]*/ struct IVGSnapPoint * ppVal ) = 0;
      virtual HRESULT __stdcall raw_Split (
        /*[in]*/ long StepNo,
        /*[out,retval]*/ struct IVGShape * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_FuseStart (
        /*[out,retval]*/ VARIANT_BOOL * pbVal ) = 0;
      virtual HRESULT __stdcall raw_FuseEnd (
        /*[out,retval]*/ VARIANT_BOOL * pbVal ) = 0;
      virtual HRESULT __stdcall raw_CopyFrom (
        /*[in]*/ struct IVGEffectBlend * Source,
        /*[out,retval]*/ VARIANT_BOOL * pbVal ) = 0;
};

struct __declspec(uuid("b0580029-9aa4-44fd-9547-4f91eb757ac4"))
IVGEffectControlPath : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    IVGApplicationPtr Application;
    __declspec(property(get=GetParent))
    IVGEffectPtr Parent;
    __declspec(property(get=GetEffects))
    IVGEffectsPtr Effects;

    //
    // Wrapper methods for error-handling
    //

    IVGApplicationPtr GetApplication ( );
    IVGEffectPtr GetParent ( );
    IVGEffectsPtr GetEffects ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct IVGApplication * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ struct IVGEffect * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Effects (
        /*[out,retval]*/ struct IVGEffects * * ppVal ) = 0;
};

struct __declspec(uuid("b058002c-9aa4-44fd-9547-4f91eb757ac4"))
IVGEffectEnvelope : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    IVGApplicationPtr Application;
    __declspec(property(get=GetParent))
    IVGEffectPtr Parent;
    __declspec(property(get=GetContainer,put=PutContainer))
    IVGCurvePtr Container;
    __declspec(property(get=GetMode,put=PutMode))
    enum cdrEnvelopeMode Mode;
    __declspec(property(get=GetKeepLines,put=PutKeepLines))
    VARIANT_BOOL KeepLines;
    __declspec(property(get=GetCornerIndices,put=PutCornerIndices))
    _variant_t CornerIndices;

    //
    // Wrapper methods for error-handling
    //

    IVGApplicationPtr GetApplication ( );
    IVGEffectPtr GetParent ( );
    IVGCurvePtr GetContainer ( );
    void PutContainer (
        struct IVGCurve * pVal );
    enum cdrEnvelopeMode GetMode ( );
    void PutMode (
        enum cdrEnvelopeMode pVal );
    VARIANT_BOOL GetKeepLines ( );
    void PutKeepLines (
        VARIANT_BOOL pVal );
    HRESULT Select (
        long PresetIndex );
    HRESULT CopyFrom (
        struct IVGEffectEnvelope * Source );
    VARIANT_BOOL CreateFrom (
        struct IVGShape * Shape );
    VARIANT_BOOL CopyFromShape (
        struct IVGShape * Source,
        enum cdrEnvelopeMode Mode,
        VARIANT_BOOL KeepLines,
        enum cdrEnvelopeCopyMode CopyMode,
        const _variant_t & CornerIndices = vtMissing );
    VARIANT_BOOL CopyFromCurve (
        struct IVGCurve * Source,
        enum cdrEnvelopeMode Mode,
        VARIANT_BOOL KeepLines,
        enum cdrEnvelopeCopyMode CopyMode,
        const _variant_t & CornerIndices = vtMissing );
    _variant_t GetCornerIndices ( );
    void PutCornerIndices (
        const _variant_t & pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct IVGApplication * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ struct IVGEffect * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Container (
        /*[out,retval]*/ struct IVGCurve * * pVal ) = 0;
      virtual HRESULT __stdcall put_Container (
        /*[in]*/ struct IVGCurve * pVal ) = 0;
      virtual HRESULT __stdcall get_Mode (
        /*[out,retval]*/ enum cdrEnvelopeMode * pVal ) = 0;
      virtual HRESULT __stdcall put_Mode (
        /*[in]*/ enum cdrEnvelopeMode pVal ) = 0;
      virtual HRESULT __stdcall get_KeepLines (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_KeepLines (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[in]*/ long PresetIndex ) = 0;
      virtual HRESULT __stdcall raw_CopyFrom (
        /*[in]*/ struct IVGEffectEnvelope * Source ) = 0;
      virtual HRESULT __stdcall raw_CreateFrom (
        /*[in]*/ struct IVGShape * Shape,
        /*[out,retval]*/ VARIANT_BOOL * Success ) = 0;
      virtual HRESULT __stdcall raw_CopyFromShape (
        /*[in]*/ struct IVGShape * Source,
        /*[in]*/ enum cdrEnvelopeMode Mode,
        /*[in]*/ VARIANT_BOOL KeepLines,
        /*[in]*/ enum cdrEnvelopeCopyMode CopyMode,
        /*[in]*/ VARIANT CornerIndices,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_CopyFromCurve (
        /*[in]*/ struct IVGCurve * Source,
        /*[in]*/ enum cdrEnvelopeMode Mode,
        /*[in]*/ VARIANT_BOOL KeepLines,
        /*[in]*/ enum cdrEnvelopeCopyMode CopyMode,
        /*[in]*/ VARIANT CornerIndices,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_CornerIndices (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_CornerIndices (
        /*[in]*/ VARIANT pVal ) = 0;
};

struct __declspec(uuid("b0580033-9aa4-44fd-9547-4f91eb757ac4"))
IVGEffectTextOnPath : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    IVGApplicationPtr Application;
    __declspec(property(get=GetParent))
    IVGEffectPtr Parent;
    __declspec(property(get=GetText,put=PutText))
    IVGShapePtr Text;
    __declspec(property(get=GetPath,put=PutPath))
    IVGShapePtr Path;
    __declspec(property(get=GetDistanceFromPath,put=PutDistanceFromPath))
    double DistanceFromPath;
    __declspec(property(get=GetOffset,put=PutOffset))
    double Offset;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    enum cdrFittedOrientation Orientation;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    enum cdrFittedPlacement Placement;
    __declspec(property(get=GetPlaceOnOtherSide,put=PutPlaceOnOtherSide))
    VARIANT_BOOL PlaceOnOtherSide;
    __declspec(property(get=GetQuadrant,put=PutQuadrant))
    enum cdrFittedQuadrant Quadrant;
    __declspec(property(get=GetVertPlacement,put=PutVertPlacement))
    enum cdrFittedVertPlacement VertPlacement;

    //
    // Wrapper methods for error-handling
    //

    IVGApplicationPtr GetApplication ( );
    IVGEffectPtr GetParent ( );
    IVGShapePtr GetText ( );
    void PutText (
        struct IVGShape * ppVal );
    IVGShapePtr GetPath ( );
    void PutPath (
        struct IVGShape * ppVal );
    double GetDistanceFromPath ( );
    void PutDistanceFromPath (
        double pVal );
    double GetOffset ( );
    void PutOffset (
        double pVal );
    enum cdrFittedOrientation GetOrientation ( );
    void PutOrientation (
        enum cdrFittedOrientation pVal );
    enum cdrFittedPlacement GetPlacement ( );
    void PutPlacement (
        enum cdrFittedPlacement pVal );
    VARIANT_BOOL GetPlaceOnOtherSide ( );
    void PutPlaceOnOtherSide (
        VARIANT_BOOL pVal );
    enum cdrFittedQuadrant GetQuadrant ( );
    void PutQuadrant (
        enum cdrFittedQuadrant pVal );
    enum cdrFittedVertPlacement GetVertPlacement ( );
    void PutVertPlacement (
        enum cdrFittedVertPlacement pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct IVGApplication * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ struct IVGEffect * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ struct IVGShape * * ppVal ) = 0;
      virtual HRESULT __stdcall put_Text (
        /*[in]*/ struct IVGShape * ppVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ struct IVGShape * * ppVal ) = 0;
      virtual HRESULT __stdcall put_Path (
        /*[in]*/ struct IVGShape * ppVal ) = 0;
      virtual HRESULT __stdcall get_DistanceFromPath (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_DistanceFromPath (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Offset (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Offset (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Orientation (
        /*[out,retval]*/ enum cdrFittedOrientation * pVal ) = 0;
      virtual HRESULT __stdcall put_Orientation (
        /*[in]*/ enum cdrFittedOrientation pVal ) = 0;
      virtual HRESULT __stdcall get_Placement (
        /*[out,retval]*/ enum cdrFittedPlacement * pVal ) = 0;
      virtual HRESULT __stdcall put_Placement (
        /*[in]*/ enum cdrFittedPlacement pVal ) = 0;
      virtual HRESULT __stdcall get_PlaceOnOtherSide (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_PlaceOnOtherSide (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Quadrant (
        /*[out,retval]*/ enum cdrFittedQuadrant * pVal ) = 0;
      virtual HRESULT __stdcall put_Quadrant (
        /*[in]*/ enum cdrFittedQuadrant pVal ) = 0;
      virtual HRESULT __stdcall get_VertPlacement (
        /*[out,retval]*/ enum cdrFittedVertPlacement * pVal ) = 0;
      virtual HRESULT __stdcall put_VertPlacement (
        /*[in]*/ enum cdrFittedVertPlacement pVal ) = 0;
};

struct __declspec(uuid("b058002b-9aa4-44fd-9547-4f91eb757ac4"))
IVGEffectDropShadow : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    IVGApplicationPtr Application;
    __declspec(property(get=GetParent))
    IVGEffectPtr Parent;
    __declspec(property(get=GetOffsetX,put=PutOffsetX))
    double OffsetX;
    __declspec(property(get=GetOffsetY,put=PutOffsetY))
    double OffsetY;
    __declspec(property(get=GetOpacity,put=PutOpacity))
    long Opacity;
    __declspec(property(get=GetFeather,put=PutFeather))
    long Feather;
    __declspec(property(get=GetFeatherType,put=PutFeatherType))
    enum cdrFeatherType FeatherType;
    __declspec(property(get=GetFeatherEdge,put=PutFeatherEdge))
    enum cdrEdgeType FeatherEdge;
    __declspec(property(get=GetType,put=PutType))
    enum cdrDropShadowType Type;
    __declspec(property(get=GetPerspectiveAngle,put=PutPerspectiveAngle))
    double PerspectiveAngle;
    __declspec(property(get=GetPerspectiveStretch,put=PutPerspectiveStretch))
    double PerspectiveStretch;
    __declspec(property(get=GetFade,put=PutFade))
    long Fade;
    __declspec(property(get=GetColor,put=PutColor))
    IVGColorPtr Color;
    __declspec(property(get=GetShadowGroup))
    IVGShapePtr ShadowGroup;
    __declspec(property(get=GetMergeMode,put=PutMergeMode))
    enum cdrMergeMode MergeMode;

    //
    // Wrapper methods for error-handling
    //

    IVGApplicationPtr GetApplication ( );
    IVGEffectPtr GetParent ( );
    double GetOffsetX ( );
    void PutOffsetX (
        double pVal );
    double GetOffsetY ( );
    void PutOffsetY (
        double pVal );
    long GetOpacity ( );
    void PutOpacity (
        long pVal );
    long GetFeather ( );
    void PutFeather (
        long pVal );
    enum cdrFeatherType GetFeatherType ( );
    void PutFeatherType (
        enum cdrFeatherType pVal );
    enum cdrEdgeType GetFeatherEdge ( );
    void PutFeatherEdge (
        enum cdrEdgeType pVal );
    enum cdrDropShadowType GetType ( );
    void PutType (
        enum cdrDropShadowType pVal );
    double GetPerspectiveAngle ( );
    void PutPerspectiveAngle (
        double pVal );
    double GetPerspectiveStretch ( );
    void PutPerspectiveStretch (
        double pVal );
    long GetFade ( );
    void PutFade (
        long pVal );
    IVGColorPtr GetColor ( );
    void PutColor (
        struct IVGColor * ppVal );
    HRESULT SetOffset (
        double OffsetX,
        double OffsetY );
    IVGShapePtr GetShadowGroup ( );
    enum cdrMergeMode GetMergeMode ( );
    void PutMergeMode (
        enum cdrMergeMode pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct IVGApplication * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ struct IVGEffect * * ppVal ) = 0;
      virtual HRESULT __stdcall get_OffsetX (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_OffsetX (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_OffsetY (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_OffsetY (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Opacity (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_Opacity (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_Feather (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_Feather (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_FeatherType (
        /*[out,retval]*/ enum cdrFeatherType * pVal ) = 0;
      virtual HRESULT __stdcall put_FeatherType (
        /*[in]*/ enum cdrFeatherType pVal ) = 0;
      virtual HRESULT __stdcall get_FeatherEdge (
        /*[out,retval]*/ enum cdrEdgeType * pVal ) = 0;
      virtual HRESULT __stdcall put_FeatherEdge (
        /*[in]*/ enum cdrEdgeType pVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum cdrDropShadowType * pVal ) = 0;
      virtual HRESULT __stdcall put_Type (
        /*[in]*/ enum cdrDropShadowType pVal ) = 0;
      virtual HRESULT __stdcall get_PerspectiveAngle (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_PerspectiveAngle (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_PerspectiveStretch (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_PerspectiveStretch (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Fade (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_Fade (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ struct IVGColor * * ppVal ) = 0;
      virtual HRESULT __stdcall put_Color (
        /*[in]*/ struct IVGColor * ppVal ) = 0;
      virtual HRESULT __stdcall raw_SetOffset (
        /*[in]*/ double OffsetX,
        /*[in]*/ double OffsetY ) = 0;
      virtual HRESULT __stdcall get_ShadowGroup (
        /*[out,retval]*/ struct IVGShape * * ppVal ) = 0;
      virtual HRESULT __stdcall get_MergeMode (
        /*[out,retval]*/ enum cdrMergeMode * pVal ) = 0;
      virtual HRESULT __stdcall put_MergeMode (
        /*[in]*/ enum cdrMergeMode pVal ) = 0;
};

struct __declspec(uuid("b0580028-9aa4-44fd-9547-4f91eb757ac4"))
IVGEffectContour : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    IVGApplicationPtr Application;
    __declspec(property(get=GetParent))
    IVGEffectPtr Parent;
    __declspec(property(get=GetDirection,put=PutDirection))
    enum cdrContourDirection Direction;
    __declspec(property(get=GetOffset,put=PutOffset))
    double Offset;
    __declspec(property(get=GetSteps,put=PutSteps))
    long Steps;
    __declspec(property(get=GetColorBlendType,put=PutColorBlendType))
    enum cdrFountainFillBlendType ColorBlendType;
    __declspec(property(get=GetOutlineColor,put=PutOutlineColor))
    IVGColorPtr OutlineColor;
    __declspec(property(get=GetFillColor,put=PutFillColor))
    IVGColorPtr FillColor;
    __declspec(property(get=GetFillColorTo,put=PutFillColorTo))
    IVGColorPtr FillColorTo;
    __declspec(property(get=GetLinkAcceleration,put=PutLinkAcceleration))
    VARIANT_BOOL LinkAcceleration;
    __declspec(property(get=GetColorAcceleration,put=PutColorAcceleration))
    long ColorAcceleration;
    __declspec(property(get=GetSpacingAcceleration,put=PutSpacingAcceleration))
    long SpacingAcceleration;
    __declspec(property(get=GetContourGroup))
    IVGShapePtr ContourGroup;
    __declspec(property(get=GetEndCapType,put=PutEndCapType))
    enum cdrContourEndCapType EndCapType;
    __declspec(property(get=GetCornerType,put=PutCornerType))
    enum cdrContourCornerType CornerType;
    __declspec(property(get=GetMiterLimit,put=PutMiterLimit))
    double MiterLimit;

    //
    // Wrapper methods for error-handling
    //

    IVGApplicationPtr GetApplication ( );
    IVGEffectPtr GetParent ( );
    enum cdrContourDirection GetDirection ( );
    void PutDirection (
        enum cdrContourDirection pVal );
    double GetOffset ( );
    void PutOffset (
        double pVal );
    long GetSteps ( );
    void PutSteps (
        long pVal );
    enum cdrFountainFillBlendType GetColorBlendType ( );
    void PutColorBlendType (
        enum cdrFountainFillBlendType pVal );
    IVGColorPtr GetOutlineColor ( );
    void PutOutlineColor (
        struct IVGColor * ppVal );
    IVGColorPtr GetFillColor ( );
    void PutFillColor (
        struct IVGColor * ppVal );
    IVGColorPtr GetFillColorTo ( );
    void PutFillColorTo (
        struct IVGColor * ppVal );
    VARIANT_BOOL GetLinkAcceleration ( );
    void PutLinkAcceleration (
        VARIANT_BOOL pVal );
    long GetColorAcceleration ( );
    void PutColorAcceleration (
        long pVal );
    long GetSpacingAcceleration ( );
    void PutSpacingAcceleration (
        long pVal );
    IVGShapePtr GetContourGroup ( );
    enum cdrContourEndCapType GetEndCapType ( );
    void PutEndCapType (
        enum cdrContourEndCapType pVal );
    enum cdrContourCornerType GetCornerType ( );
    void PutCornerType (
        enum cdrContourCornerType pVal );
    double GetMiterLimit ( );
    void PutMiterLimit (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct IVGApplication * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ struct IVGEffect * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Direction (
        /*[out,retval]*/ enum cdrContourDirection * pVal ) = 0;
      virtual HRESULT __stdcall put_Direction (
        /*[in]*/ enum cdrContourDirection pVal ) = 0;
      virtual HRESULT __stdcall get_Offset (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Offset (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Steps (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_Steps (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_ColorBlendType (
        /*[out,retval]*/ enum cdrFountainFillBlendType * pVal ) = 0;
      virtual HRESULT __stdcall put_ColorBlendType (
        /*[in]*/ enum cdrFountainFillBlendType pVal ) = 0;
      virtual HRESULT __stdcall get_OutlineColor (
        /*[out,retval]*/ struct IVGColor * * ppVal ) = 0;
      virtual HRESULT __stdcall put_OutlineColor (
        /*[in]*/ struct IVGColor * ppVal ) = 0;
      virtual HRESULT __stdcall get_FillColor (
        /*[out,retval]*/ struct IVGColor * * ppVal ) = 0;
      virtual HRESULT __stdcall put_FillColor (
        /*[in]*/ struct IVGColor * ppVal ) = 0;
      virtual HRESULT __stdcall get_FillColorTo (
        /*[out,retval]*/ struct IVGColor * * ppVal ) = 0;
      virtual HRESULT __stdcall put_FillColorTo (
        /*[in]*/ struct IVGColor * ppVal ) = 0;
      virtual HRESULT __stdcall get_LinkAcceleration (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_LinkAcceleration (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_ColorAcceleration (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_ColorAcceleration (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_SpacingAcceleration (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_SpacingAcceleration (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_ContourGroup (
        /*[out,retval]*/ struct IVGShape * * ppVal ) = 0;
      virtual HRESULT __stdcall get_EndCapType (
        /*[out,retval]*/ enum cdrContourEndCapType * pVal ) = 0;
      virtual HRESULT __stdcall put_EndCapType (
        /*[in]*/ enum cdrContourEndCapType pVal ) = 0;
      virtual HRESULT __stdcall get_CornerType (
        /*[out,retval]*/ enum cdrContourCornerType * pVal ) = 0;
      virtual HRESULT __stdcall put_CornerType (
        /*[in]*/ enum cdrContourCornerType pVal ) = 0;
      virtual HRESULT __stdcall get_MiterLimit (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_MiterLimit (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("b0580030-9aa4-44fd-9547-4f91eb757ac4"))
IVGEffectLens : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    IVGApplicationPtr Application;
    __declspec(property(get=GetParent))
    IVGEffectPtr Parent;
    __declspec(property(get=GetViewPointY,put=PutViewPointY))
    double ViewPointY;
    __declspec(property(get=GetRemoveFace,put=PutRemoveFace))
    VARIANT_BOOL RemoveFace;
    __declspec(property(get=GetShapes))
    IVGShapesPtr Shapes;
    __declspec(property(get=GetFrozen))
    VARIANT_BOOL Frozen;
    __declspec(property(get=GetType,put=PutType))
    enum cdrLensType Type;
    __declspec(property(get=GetPaletteRotation,put=PutPaletteRotation))
    long PaletteRotation;
    __declspec(property(get=GetRate,put=PutRate))
    long Rate;
    __declspec(property(get=GetColor,put=PutColor))
    IVGColorPtr Color;
    __declspec(property(get=GetOutlineColor,put=PutOutlineColor))
    IVGColorPtr OutlineColor;
    __declspec(property(get=GetFillColor,put=PutFillColor))
    IVGColorPtr FillColor;
    __declspec(property(get=GetFromColor,put=PutFromColor))
    IVGColorPtr FromColor;
    __declspec(property(get=GetToColor,put=PutToColor))
    IVGColorPtr ToColor;
    __declspec(property(get=GetUseOutlineColor,put=PutUseOutlineColor))
    VARIANT_BOOL UseOutlineColor;
    __declspec(property(get=GetUseFillColor,put=PutUseFillColor))
    VARIANT_BOOL UseFillColor;
    __declspec(property(get=GetColorMapPalette,put=PutColorMapPalette))
    enum cdrFountainFillBlendType ColorMapPalette;
    __declspec(property(get=GetMagnification,put=PutMagnification))
    double Magnification;
    __declspec(property(get=GetUseViewPoint,put=PutUseViewPoint))
    VARIANT_BOOL UseViewPoint;
    __declspec(property(get=GetViewPointX,put=PutViewPointX))
    double ViewPointX;

    //
    // Wrapper methods for error-handling
    //

    IVGApplicationPtr GetApplication ( );
    IVGEffectPtr GetParent ( );
    HRESULT Freeze ( );
    HRESULT Unfreeze ( );
    IVGShapeRangePtr Ungroup ( );
    IVGShapesPtr GetShapes ( );
    VARIANT_BOOL GetFrozen ( );
    enum cdrLensType GetType ( );
    void PutType (
        enum cdrLensType pVal );
    long GetRate ( );
    void PutRate (
        long pVal );
    IVGColorPtr GetColor ( );
    void PutColor (
        struct IVGColor * ppVal );
    IVGColorPtr GetOutlineColor ( );
    void PutOutlineColor (
        struct IVGColor * ppVal );
    IVGColorPtr GetFillColor ( );
    void PutFillColor (
        struct IVGColor * ppVal );
    IVGColorPtr GetFromColor ( );
    void PutFromColor (
        struct IVGColor * ppVal );
    IVGColorPtr GetToColor ( );
    void PutToColor (
        struct IVGColor * ppVal );
    VARIANT_BOOL GetUseOutlineColor ( );
    void PutUseOutlineColor (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetUseFillColor ( );
    void PutUseFillColor (
        VARIANT_BOOL pVal );
    enum cdrFountainFillBlendType GetColorMapPalette ( );
    void PutColorMapPalette (
        enum cdrFountainFillBlendType pVal );
    double GetMagnification ( );
    void PutMagnification (
        double pVal );
    VARIANT_BOOL GetUseViewPoint ( );
    void PutUseViewPoint (
        VARIANT_BOOL pVal );
    double GetViewPointX ( );
    void PutViewPointX (
        double pVal );
    double GetViewPointY ( );
    void PutViewPointY (
        double pVal );
    VARIANT_BOOL GetRemoveFace ( );
    void PutRemoveFace (
        VARIANT_BOOL pVal );
    long GetPaletteRotation ( );
    void PutPaletteRotation (
        long pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct IVGApplication * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ struct IVGEffect * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_Freeze ( ) = 0;
      virtual HRESULT __stdcall raw_Unfreeze ( ) = 0;
      virtual HRESULT __stdcall raw_Ungroup (
        /*[out,retval]*/ struct IVGShapeRange * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Shapes (
        /*[out,retval]*/ struct IVGShapes * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Frozen (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum cdrLensType * pVal ) = 0;
      virtual HRESULT __stdcall put_Type (
        /*[in]*/ enum cdrLensType pVal ) = 0;
      virtual HRESULT __stdcall get_Rate (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_Rate (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ struct IVGColor * * ppVal ) = 0;
      virtual HRESULT __stdcall put_Color (
        /*[in]*/ struct IVGColor * ppVal ) = 0;
      virtual HRESULT __stdcall get_OutlineColor (
        /*[out,retval]*/ struct IVGColor * * ppVal ) = 0;
      virtual HRESULT __stdcall put_OutlineColor (
        /*[in]*/ struct IVGColor * ppVal ) = 0;
      virtual HRESULT __stdcall get_FillColor (
        /*[out,retval]*/ struct IVGColor * * ppVal ) = 0;
      virtual HRESULT __stdcall put_FillColor (
        /*[in]*/ struct IVGColor * ppVal ) = 0;
      virtual HRESULT __stdcall get_FromColor (
        /*[out,retval]*/ struct IVGColor * * ppVal ) = 0;
      virtual HRESULT __stdcall put_FromColor (
        /*[in]*/ struct IVGColor * ppVal ) = 0;
      virtual HRESULT __stdcall get_ToColor (
        /*[out,retval]*/ struct IVGColor * * ppVal ) = 0;
      virtual HRESULT __stdcall put_ToColor (
        /*[in]*/ struct IVGColor * ppVal ) = 0;
      virtual HRESULT __stdcall get_UseOutlineColor (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_UseOutlineColor (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_UseFillColor (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_UseFillColor (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_ColorMapPalette (
        /*[out,retval]*/ enum cdrFountainFillBlendType * pVal ) = 0;
      virtual HRESULT __stdcall put_ColorMapPalette (
        /*[in]*/ enum cdrFountainFillBlendType pVal ) = 0;
      virtual HRESULT __stdcall get_Magnification (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Magnification (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_UseViewPoint (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_UseViewPoint (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_ViewPointX (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_ViewPointX (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_ViewPointY (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_ViewPointY (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_RemoveFace (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_RemoveFace (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_PaletteRotation (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_PaletteRotation (
        /*[in]*/ long pVal ) = 0;
};

struct __declspec(uuid("b0580031-9aa4-44fd-9547-4f91eb757ac4"))
IVGEffectPerspective : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    IVGApplicationPtr Application;
    __declspec(property(get=GetParent))
    IVGEffectPtr Parent;
    __declspec(property(get=GetUseHorizVanishingPoint,put=PutUseHorizVanishingPoint))
    VARIANT_BOOL UseHorizVanishingPoint;
    __declspec(property(get=GetUseVertVanishingPoint,put=PutUseVertVanishingPoint))
    VARIANT_BOOL UseVertVanishingPoint;
    __declspec(property(get=GetHorizVanishingPointX,put=PutHorizVanishingPointX))
    double HorizVanishingPointX;
    __declspec(property(get=GetHorizVanishingPointY,put=PutHorizVanishingPointY))
    double HorizVanishingPointY;
    __declspec(property(get=GetVertVanishingPointX,put=PutVertVanishingPointX))
    double VertVanishingPointX;
    __declspec(property(get=GetVertVanishingPointY,put=PutVertVanishingPointY))
    double VertVanishingPointY;

    //
    // Wrapper methods for error-handling
    //

    IVGApplicationPtr GetApplication ( );
    IVGEffectPtr GetParent ( );
    VARIANT_BOOL GetUseHorizVanishingPoint ( );
    void PutUseHorizVanishingPoint (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetUseVertVanishingPoint ( );
    void PutUseVertVanishingPoint (
        VARIANT_BOOL pVal );
    double GetHorizVanishingPointX ( );
    void PutHorizVanishingPointX (
        double pVal );
    double GetHorizVanishingPointY ( );
    void PutHorizVanishingPointY (
        double pVal );
    double GetVertVanishingPointX ( );
    void PutVertVanishingPointX (
        double pVal );
    double GetVertVanishingPointY ( );
    void PutVertVanishingPointY (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct IVGApplication * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ struct IVGEffect * * ppVal ) = 0;
      virtual HRESULT __stdcall get_UseHorizVanishingPoint (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_UseHorizVanishingPoint (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_UseVertVanishingPoint (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_UseVertVanishingPoint (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_HorizVanishingPointX (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_HorizVanishingPointX (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_HorizVanishingPointY (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_HorizVanishingPointY (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_VertVanishingPointX (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_VertVanishingPointX (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_VertVanishingPointY (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_VertVanishingPointY (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("b05800db-9aa4-44fd-9547-4f91eb757ac4"))
IVGEffectInnerShadow : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    IVGApplicationPtr Application;
    __declspec(property(get=GetParent))
    IVGEffectPtr Parent;
    __declspec(property(get=GetOffsetX,put=PutOffsetX))
    double OffsetX;
    __declspec(property(get=GetOffsetY,put=PutOffsetY))
    double OffsetY;
    __declspec(property(get=GetOpacity,put=PutOpacity))
    long Opacity;
    __declspec(property(get=GetFeather,put=PutFeather))
    long Feather;
    __declspec(property(get=GetFeatherType,put=PutFeatherType))
    enum cdrFeatherType FeatherType;
    __declspec(property(get=GetFeatherEdge,put=PutFeatherEdge))
    enum cdrEdgeType FeatherEdge;
    __declspec(property(get=GetColor,put=PutColor))
    IVGColorPtr Color;
    __declspec(property(get=GetShadowGroup))
    IVGShapePtr ShadowGroup;
    __declspec(property(get=GetMergeMode,put=PutMergeMode))
    enum cdrMergeMode MergeMode;
    __declspec(property(get=GetDepth,put=PutDepth))
    double Depth;

    //
    // Wrapper methods for error-handling
    //

    IVGApplicationPtr GetApplication ( );
    IVGEffectPtr GetParent ( );
    double GetOffsetX ( );
    void PutOffsetX (
        double pVal );
    double GetOffsetY ( );
    void PutOffsetY (
        double pVal );
    long GetOpacity ( );
    void PutOpacity (
        long pVal );
    long GetFeather ( );
    void PutFeather (
        long pVal );
    enum cdrFeatherType GetFeatherType ( );
    void PutFeatherType (
        enum cdrFeatherType pVal );
    enum cdrEdgeType GetFeatherEdge ( );
    void PutFeatherEdge (
        enum cdrEdgeType pVal );
    IVGColorPtr GetColor ( );
    void PutColor (
        struct IVGColor * ppVal );
    HRESULT SetOffset (
        double OffsetX,
        double OffsetY );
    IVGShapePtr GetShadowGroup ( );
    enum cdrMergeMode GetMergeMode ( );
    void PutMergeMode (
        enum cdrMergeMode pVal );
    double GetDepth ( );
    void PutDepth (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct IVGApplication * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ struct IVGEffect * * ppVal ) = 0;
      virtual HRESULT __stdcall get_OffsetX (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_OffsetX (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_OffsetY (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_OffsetY (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Opacity (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_Opacity (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_Feather (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_Feather (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_FeatherType (
        /*[out,retval]*/ enum cdrFeatherType * pVal ) = 0;
      virtual HRESULT __stdcall put_FeatherType (
        /*[in]*/ enum cdrFeatherType pVal ) = 0;
      virtual HRESULT __stdcall get_FeatherEdge (
        /*[out,retval]*/ enum cdrEdgeType * pVal ) = 0;
      virtual HRESULT __stdcall put_FeatherEdge (
        /*[in]*/ enum cdrEdgeType pVal ) = 0;
      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ struct IVGColor * * ppVal ) = 0;
      virtual HRESULT __stdcall put_Color (
        /*[in]*/ struct IVGColor * ppVal ) = 0;
      virtual HRESULT __stdcall raw_SetOffset (
        /*[in]*/ double OffsetX,
        /*[in]*/ double OffsetY ) = 0;
      virtual HRESULT __stdcall get_ShadowGroup (
        /*[out,retval]*/ struct IVGShape * * ppVal ) = 0;
      virtual HRESULT __stdcall get_MergeMode (
        /*[out,retval]*/ enum cdrMergeMode * pVal ) = 0;
      virtual HRESULT __stdcall put_MergeMode (
        /*[in]*/ enum cdrMergeMode pVal ) = 0;
      virtual HRESULT __stdcall get_Depth (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Depth (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("b058002d-9aa4-44fd-9547-4f91eb757ac4"))
IVGEffectExtrude : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    IVGApplicationPtr Application;
    __declspec(property(get=GetParent))
    IVGEffectPtr Parent;
    __declspec(property(get=GetType,put=PutType))
    enum cdrExtrudeType Type;
    __declspec(property(get=GetVanishingPoint,put=PutVanishingPoint))
    IVGExtrudeVanishingPointPtr VanishingPoint;
    __declspec(property(get=GetDepth,put=PutDepth))
    long Depth;
    __declspec(property(get=GetAngleX,put=PutAngleX))
    double AngleX;
    __declspec(property(get=GetAngleY,put=PutAngleY))
    double AngleY;
    __declspec(property(get=GetAngleZ,put=PutAngleZ))
    double AngleZ;
    __declspec(property(get=GetShading,put=PutShading))
    enum cdrExtrudeShading Shading;
    __declspec(property(get=GetBaseColor,put=PutBaseColor))
    IVGColorPtr BaseColor;
    __declspec(property(get=GetShadingColor,put=PutShadingColor))
    IVGColorPtr ShadingColor;
    __declspec(property(get=GetUseBevel,put=PutUseBevel))
    VARIANT_BOOL UseBevel;
    __declspec(property(get=GetShowBevelOnly,put=PutShowBevelOnly))
    VARIANT_BOOL ShowBevelOnly;
    __declspec(property(get=GetBevelDepth,put=PutBevelDepth))
    double BevelDepth;
    __declspec(property(get=GetBevelAngle,put=PutBevelAngle))
    double BevelAngle;
    __declspec(property(get=GetUseExtrudeColorForBevel,put=PutUseExtrudeColorForBevel))
    VARIANT_BOOL UseExtrudeColorForBevel;
    __declspec(property(get=GetBevelColor,put=PutBevelColor))
    IVGColorPtr BevelColor;
    __declspec(property(get=GetLightPresent,put=PutLightPresent))
    VARIANT_BOOL LightPresent[];
    __declspec(property(get=GetLightPosition,put=PutLightPosition))
    enum cdrExtrudeLightPosition LightPosition[];
    __declspec(property(get=GetLightIntensity,put=PutLightIntensity))
    long LightIntensity[];
    __declspec(property(get=GetUseFullColorRange,put=PutUseFullColorRange))
    VARIANT_BOOL UseFullColorRange;
    __declspec(property(get=GetFaceVisible))
    VARIANT_BOOL FaceVisible;
    __declspec(property(get=GetFaceShape))
    IVGShapePtr FaceShape;
    __declspec(property(get=GetBevelGroup))
    IVGShapePtr BevelGroup;
    __declspec(property(get=GetExtrudeGroup))
    IVGShapePtr ExtrudeGroup;

    //
    // Wrapper methods for error-handling
    //

    IVGApplicationPtr GetApplication ( );
    IVGEffectPtr GetParent ( );
    enum cdrExtrudeType GetType ( );
    void PutType (
        enum cdrExtrudeType pVal );
    IVGExtrudeVanishingPointPtr GetVanishingPoint ( );
    void PutVanishingPoint (
        struct IVGExtrudeVanishingPoint * ppVal );
    long GetDepth ( );
    void PutDepth (
        long pVal );
    double GetAngleX ( );
    void PutAngleX (
        double pVal );
    double GetAngleY ( );
    void PutAngleY (
        double pVal );
    double GetAngleZ ( );
    void PutAngleZ (
        double pVal );
    enum cdrExtrudeShading GetShading ( );
    void PutShading (
        enum cdrExtrudeShading pVal );
    IVGColorPtr GetBaseColor ( );
    void PutBaseColor (
        struct IVGColor * ppVal );
    IVGColorPtr GetShadingColor ( );
    void PutShadingColor (
        struct IVGColor * ppVal );
    VARIANT_BOOL GetUseBevel ( );
    void PutUseBevel (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetShowBevelOnly ( );
    void PutShowBevelOnly (
        VARIANT_BOOL pVal );
    double GetBevelDepth ( );
    void PutBevelDepth (
        double pVal );
    double GetBevelAngle ( );
    void PutBevelAngle (
        double pVal );
    VARIANT_BOOL GetUseExtrudeColorForBevel ( );
    void PutUseExtrudeColorForBevel (
        VARIANT_BOOL pVal );
    IVGColorPtr GetBevelColor ( );
    void PutBevelColor (
        struct IVGColor * ppVal );
    VARIANT_BOOL GetLightPresent (
        long Index );
    void PutLightPresent (
        long Index,
        VARIANT_BOOL pVal );
    enum cdrExtrudeLightPosition GetLightPosition (
        long Index );
    void PutLightPosition (
        long Index,
        enum cdrExtrudeLightPosition pVal );
    long GetLightIntensity (
        long Index );
    void PutLightIntensity (
        long Index,
        long pVal );
    VARIANT_BOOL GetUseFullColorRange ( );
    void PutUseFullColorRange (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetFaceVisible ( );
    IVGShapePtr GetFaceShape ( );
    IVGShapePtr GetBevelGroup ( );
    IVGShapePtr GetExtrudeGroup ( );
    HRESULT Rotate (
        double AngleX,
        double AngleY,
        double AngleZ );
    HRESULT SetBevel (
        double Depth,
        double Angle,
        VARIANT_BOOL ShowBevelOnly );
    HRESULT SetLight (
        long Index,
        enum cdrExtrudeLightPosition Position,
        long LightIntensity );
    HRESULT CopyFrom (
        struct IVGEffectExtrude * Source );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct IVGApplication * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ struct IVGEffect * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum cdrExtrudeType * pVal ) = 0;
      virtual HRESULT __stdcall put_Type (
        /*[in]*/ enum cdrExtrudeType pVal ) = 0;
      virtual HRESULT __stdcall get_VanishingPoint (
        /*[out,retval]*/ struct IVGExtrudeVanishingPoint * * ppVal ) = 0;
      virtual HRESULT __stdcall put_VanishingPoint (
        /*[in]*/ struct IVGExtrudeVanishingPoint * ppVal ) = 0;
      virtual HRESULT __stdcall get_Depth (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_Depth (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_AngleX (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_AngleX (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_AngleY (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_AngleY (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_AngleZ (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_AngleZ (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Shading (
        /*[out,retval]*/ enum cdrExtrudeShading * pVal ) = 0;
      virtual HRESULT __stdcall put_Shading (
        /*[in]*/ enum cdrExtrudeShading pVal ) = 0;
      virtual HRESULT __stdcall get_BaseColor (
        /*[out,retval]*/ struct IVGColor * * ppVal ) = 0;
      virtual HRESULT __stdcall put_BaseColor (
        /*[in]*/ struct IVGColor * ppVal ) = 0;
      virtual HRESULT __stdcall get_ShadingColor (
        /*[out,retval]*/ struct IVGColor * * ppVal ) = 0;
      virtual HRESULT __stdcall put_ShadingColor (
        /*[in]*/ struct IVGColor * ppVal ) = 0;
      virtual HRESULT __stdcall get_UseBevel (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_UseBevel (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_ShowBevelOnly (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_ShowBevelOnly (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_BevelDepth (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_BevelDepth (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_BevelAngle (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_BevelAngle (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_UseExtrudeColorForBevel (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_UseExtrudeColorForBevel (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_BevelColor (
        /*[out,retval]*/ struct IVGColor * * ppVal ) = 0;
      virtual HRESULT __stdcall put_BevelColor (
        /*[in]*/ struct IVGColor * ppVal ) = 0;
      virtual HRESULT __stdcall get_LightPresent (
        /*[in]*/ long Index,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_LightPresent (
        /*[in]*/ long Index,
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_LightPosition (
        /*[in]*/ long Index,
        /*[out,retval]*/ enum cdrExtrudeLightPosition * pVal ) = 0;
      virtual HRESULT __stdcall put_LightPosition (
        /*[in]*/ long Index,
        /*[in]*/ enum cdrExtrudeLightPosition pVal ) = 0;
      virtual HRESULT __stdcall get_LightIntensity (
        /*[in]*/ long Index,
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_LightIntensity (
        /*[in]*/ long Index,
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_UseFullColorRange (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_UseFullColorRange (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_FaceVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_FaceShape (
        /*[out,retval]*/ struct IVGShape * * ppVal ) = 0;
      virtual HRESULT __stdcall get_BevelGroup (
        /*[out,retval]*/ struct IVGShape * * ppVal ) = 0;
      virtual HRESULT __stdcall get_ExtrudeGroup (
        /*[out,retval]*/ struct IVGShape * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_Rotate (
        /*[in]*/ double AngleX,
        /*[in]*/ double AngleY,
        /*[in]*/ double AngleZ ) = 0;
      virtual HRESULT __stdcall raw_SetBevel (
        /*[in]*/ double Depth,
        /*[in]*/ double Angle,
        /*[in]*/ VARIANT_BOOL ShowBevelOnly ) = 0;
      virtual HRESULT __stdcall raw_SetLight (
        /*[in]*/ long Index,
        /*[in]*/ enum cdrExtrudeLightPosition Position,
        /*[in]*/ long LightIntensity ) = 0;
      virtual HRESULT __stdcall raw_CopyFrom (
        /*[in]*/ struct IVGEffectExtrude * Source ) = 0;
};

struct __declspec(uuid("b058002e-9aa4-44fd-9547-4f91eb757ac4"))
IVGExtrudeVanishingPoint : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    IVGApplicationPtr Application;
    __declspec(property(get=GetParent))
    IVGEffectExtrudePtr Parent;
    __declspec(property(get=GetType,put=PutType))
    enum cdrExtrudeVPType Type;
    __declspec(property(get=GetPositionX,put=PutPositionX))
    double PositionX;
    __declspec(property(get=GetPositionY,put=PutPositionY))
    double PositionY;
    __declspec(property(get=GetEffects))
    IVGEffectsPtr Effects;

    //
    // Wrapper methods for error-handling
    //

    IVGApplicationPtr GetApplication ( );
    IVGEffectExtrudePtr GetParent ( );
    enum cdrExtrudeVPType GetType ( );
    void PutType (
        enum cdrExtrudeVPType pVal );
    double GetPositionX ( );
    void PutPositionX (
        double pVal );
    double GetPositionY ( );
    void PutPositionY (
        double pVal );
    IVGEffectsPtr GetEffects ( );
    VARIANT_BOOL Share (
        struct IVGEffectExtrude * Source );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct IVGApplication * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ struct IVGEffectExtrude * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum cdrExtrudeVPType * pVal ) = 0;
      virtual HRESULT __stdcall put_Type (
        /*[in]*/ enum cdrExtrudeVPType pVal ) = 0;
      virtual HRESULT __stdcall get_PositionX (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_PositionX (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_PositionY (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_PositionY (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Effects (
        /*[out,retval]*/ struct IVGEffects * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_Share (
        /*[in]*/ struct IVGEffectExtrude * Source,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
};

struct __declspec(uuid("b058002a-9aa4-44fd-9547-4f91eb757ac4"))
IVGEffectDistortion : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    IVGApplicationPtr Application;
    __declspec(property(get=GetParent))
    IVGEffectPtr Parent;
    __declspec(property(get=GetType,put=PutType))
    enum cdrDistortionType Type;
    __declspec(property(get=GetOriginX,put=PutOriginX))
    double OriginX;
    __declspec(property(get=GetOriginY,put=PutOriginY))
    double OriginY;
    __declspec(property(get=GetPushPull,put=PutPushPull))
    IVGEffectPushPullDistortionPtr PushPull;
    __declspec(property(get=GetZipper,put=PutZipper))
    IVGEffectZipperDistortionPtr Zipper;
    __declspec(property(get=GetTwister,put=PutTwister))
    IVGEffectTwisterDistortionPtr Twister;
    __declspec(property(get=GetCustom))
    IVGEffectCustomDistortionPtr Custom;

    //
    // Wrapper methods for error-handling
    //

    IVGApplicationPtr GetApplication ( );
    IVGEffectPtr GetParent ( );
    enum cdrDistortionType GetType ( );
    void PutType (
        enum cdrDistortionType pVal );
    double GetOriginX ( );
    void PutOriginX (
        double pVal );
    double GetOriginY ( );
    void PutOriginY (
        double pVal );
    IVGEffectPushPullDistortionPtr GetPushPull ( );
    void PutPushPull (
        struct IVGEffectPushPullDistortion * ppVal );
    IVGEffectZipperDistortionPtr GetZipper ( );
    void PutZipper (
        struct IVGEffectZipperDistortion * ppVal );
    IVGEffectTwisterDistortionPtr GetTwister ( );
    void PutTwister (
        struct IVGEffectTwisterDistortion * ppVal );
    HRESULT CenterDistortion ( );
    IVGEffectCustomDistortionPtr GetCustom ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct IVGApplication * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ struct IVGEffect * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum cdrDistortionType * pVal ) = 0;
      virtual HRESULT __stdcall put_Type (
        /*[in]*/ enum cdrDistortionType pVal ) = 0;
      virtual HRESULT __stdcall get_OriginX (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_OriginX (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_OriginY (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_OriginY (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_PushPull (
        /*[out,retval]*/ struct IVGEffectPushPullDistortion * * ppVal ) = 0;
      virtual HRESULT __stdcall put_PushPull (
        /*[in]*/ struct IVGEffectPushPullDistortion * ppVal ) = 0;
      virtual HRESULT __stdcall get_Zipper (
        /*[out,retval]*/ struct IVGEffectZipperDistortion * * ppVal ) = 0;
      virtual HRESULT __stdcall put_Zipper (
        /*[in]*/ struct IVGEffectZipperDistortion * ppVal ) = 0;
      virtual HRESULT __stdcall get_Twister (
        /*[out,retval]*/ struct IVGEffectTwisterDistortion * * ppVal ) = 0;
      virtual HRESULT __stdcall put_Twister (
        /*[in]*/ struct IVGEffectTwisterDistortion * ppVal ) = 0;
      virtual HRESULT __stdcall raw_CenterDistortion ( ) = 0;
      virtual HRESULT __stdcall get_Custom (
        /*[out,retval]*/ struct IVGEffectCustomDistortion * * ppVal ) = 0;
};

struct __declspec(uuid("b0580032-9aa4-44fd-9547-4f91eb757ac4"))
IVGEffectPushPullDistortion : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    IVGApplicationPtr Application;
    __declspec(property(get=GetParent))
    IVGEffectDistortionPtr Parent;
    __declspec(property(get=GetAmplitude,put=PutAmplitude))
    long Amplitude;

    //
    // Wrapper methods for error-handling
    //

    IVGApplicationPtr GetApplication ( );
    IVGEffectDistortionPtr GetParent ( );
    long GetAmplitude ( );
    void PutAmplitude (
        long pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct IVGApplication * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ struct IVGEffectDistortion * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Amplitude (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_Amplitude (
        /*[in]*/ long pVal ) = 0;
};

struct __declspec(uuid("b0580035-9aa4-44fd-9547-4f91eb757ac4"))
IVGEffectZipperDistortion : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    IVGApplicationPtr Application;
    __declspec(property(get=GetParent))
    IVGEffectDistortionPtr Parent;
    __declspec(property(get=GetAmplitude,put=PutAmplitude))
    long Amplitude;
    __declspec(property(get=GetFrequency,put=PutFrequency))
    long Frequency;
    __declspec(property(get=GetRandom,put=PutRandom))
    VARIANT_BOOL Random;
    __declspec(property(get=GetSmooth,put=PutSmooth))
    VARIANT_BOOL Smooth;
    __declspec(property(get=GetLocal,put=PutLocal))
    VARIANT_BOOL Local;

    //
    // Wrapper methods for error-handling
    //

    IVGApplicationPtr GetApplication ( );
    IVGEffectDistortionPtr GetParent ( );
    long GetAmplitude ( );
    void PutAmplitude (
        long pVal );
    long GetFrequency ( );
    void PutFrequency (
        long pVal );
    VARIANT_BOOL GetRandom ( );
    void PutRandom (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetSmooth ( );
    void PutSmooth (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetLocal ( );
    void PutLocal (
        VARIANT_BOOL pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct IVGApplication * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ struct IVGEffectDistortion * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Amplitude (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_Amplitude (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_Frequency (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_Frequency (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_Random (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_Random (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Smooth (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_Smooth (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Local (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_Local (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
};

struct __declspec(uuid("b0580034-9aa4-44fd-9547-4f91eb757ac4"))
IVGEffectTwisterDistortion : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    IVGApplicationPtr Application;
    __declspec(property(get=GetParent))
    IVGEffectDistortionPtr Parent;
    __declspec(property(get=GetAngle,put=PutAngle))
    double Angle;

    //
    // Wrapper methods for error-handling
    //

    IVGApplicationPtr GetApplication ( );
    IVGEffectDistortionPtr GetParent ( );
    double GetAngle ( );
    void PutAngle (
        double pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct IVGApplication * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ struct IVGEffectDistortion * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Angle (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Angle (
        /*[in]*/ double pVal ) = 0;
};

struct __declspec(uuid("b0580078-9aa4-44fd-9547-4f91eb757ac4"))
IVGTextRange : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetDropCapDistanceFromText,put=PutDropCapDistanceFromText))
    double DropCapDistanceFromText;
    __declspec(property(get=GetWideText,put=PutWideText))
    _bstr_t WideText;
    __declspec(property(get=GetDropCapHangingIndent,put=PutDropCapHangingIndent))
    VARIANT_BOOL DropCapHangingIndent;
    __declspec(property(get=GetCharacters))
    IVGTextCharactersPtr Characters;
    __declspec(property(get=GetWords))
    IVGTextWordsPtr Words;
    __declspec(property(get=GetLines))
    IVGTextLinesPtr Lines;
    __declspec(property(get=GetParagraphs))
    IVGTextParagraphsPtr Paragraphs;
    __declspec(property(get=GetStart,put=PutStart))
    long Start;
    __declspec(property(get=GetBulletFont,put=PutBulletFont))
    _bstr_t BulletFont;
    __declspec(property(get=GetEnd,put=PutEnd))
    long End;
    __declspec(property(get=GetBulletSymbol,put=PutBulletSymbol))
    _bstr_t BulletSymbol;
    __declspec(property(get=GetLength,put=PutLength))
    long Length;
    __declspec(property(get=GetBulletSize,put=PutBulletSize))
    float BulletSize;
    __declspec(property(get=GetBulletBaselineShift,put=PutBulletBaselineShift))
    float BulletBaselineShift;
    __declspec(property(get=GetStyle,put=PutStyle))
    enum cdrFontStyle Style;
    __declspec(property(get=GetBulletHorizontalPosition,put=PutBulletHorizontalPosition))
    double BulletHorizontalPosition;
    __declspec(property(get=GetBold,put=PutBold))
    VARIANT_BOOL Bold;
    __declspec(property(get=GetBulletHangingIndent,put=PutBulletHangingIndent))
    VARIANT_BOOL BulletHangingIndent;
    __declspec(property(get=GetItalic,put=PutItalic))
    VARIANT_BOOL Italic;
    __declspec(property(get=GetIsEmpty))
    VARIANT_BOOL IsEmpty;
    __declspec(property(get=GetUnderline,put=PutUnderline))
    enum cdrFontLine Underline;
    __declspec(property(get=GetHyphenateAllCapWords,put=PutHyphenateAllCapWords))
    VARIANT_BOOL HyphenateAllCapWords;
    __declspec(property(get=GetStrikethru,put=PutStrikethru))
    enum cdrFontLine Strikethru;
    __declspec(property(get=GetOverscore,put=PutOverscore))
    enum cdrFontLine Overscore;
    __declspec(property(get=GetBaselines))
    IVGCurvePtr Baselines;
    __declspec(property(get=GetFont,put=PutFont))
    _bstr_t Font;
    __declspec(property(get=GetTextLineRects))
    IVGCurvePtr TextLineRects;
    __declspec(property(get=GetSize,put=PutSize))
    float Size;
    __declspec(property(get=GetCharBackFill))
    IVGFillPtr CharBackFill;
    __declspec(property(get=GetPosition,put=PutPosition))
    enum cdrFontPosition Position;
    __declspec(property(get=GetCase,put=PutCase))
    enum cdrFontCase Case;
    __declspec(property(get=GetTextFormatter,put=PutTextFormatter))
    long TextFormatter;
    __declspec(property(get=GetCharAngle,put=PutCharAngle))
    float CharAngle;
    __declspec(property(get=GetObjectStyle))
    IVGStylePtr ObjectStyle;
    __declspec(property(get=GetAlignment,put=PutAlignment))
    enum cdrAlignment Alignment;
    __declspec(property(get=GetIndentLevelStyles))
    IVGTextIndentLevelStylesPtr IndentLevelStyles;
    __declspec(property(get=GetFirstLineIndent,put=PutFirstLineIndent))
    double FirstLineIndent;
    __declspec(property(get=GetIndentLevel,put=PutIndentLevel))
    long IndentLevel;
    __declspec(property(get=GetHorizShift,put=PutHorizShift))
    long HorizShift;
    __declspec(property(get=GetVariableAxes))
    IVGTextVariableAxesPtr VariableAxes;
    __declspec(property(get=GetVertShift,put=PutVertShift))
    long VertShift;
    __declspec(property(get=GetLeftIndent,put=PutLeftIndent))
    double LeftIndent;
    __declspec(property(get=GetRightIndent,put=PutRightIndent))
    double RightIndent;
    __declspec(property(get=GetMinWordSpacing,put=PutMinWordSpacing))
    float MinWordSpacing;
    __declspec(property(get=GetMaxWordSpacing,put=PutMaxWordSpacing))
    float MaxWordSpacing;
    __declspec(property(get=GetMaxCharSpacing,put=PutMaxCharSpacing))
    float MaxCharSpacing;
    __declspec(property(get=GetParaSpacingBefore,put=PutParaSpacingBefore))
    float ParaSpacingBefore;
    __declspec(property(get=GetParaSpacingAfter,put=PutParaSpacingAfter))
    float ParaSpacingAfter;
    __declspec(property(get=GetCharSpacing,put=PutCharSpacing))
    float CharSpacing;
    __declspec(property(get=GetLineSpacing,put=PutLineSpacing))
    float LineSpacing;
    __declspec(property(get=GetLineSpacingType))
    enum cdrLineSpacingType LineSpacingType;
    __declspec(property(get=GetWordSpacing,put=PutWordSpacing))
    float WordSpacing;
    __declspec(property(get=GetAutoHyphenate,put=PutAutoHyphenate))
    enum cdrTriState AutoHyphenate;
    __declspec(property(get=GetHyphenHotZone,put=PutHyphenHotZone))
    double HyphenHotZone;
    __declspec(property(get=GetHyphenMinCharsBefore,put=PutHyphenMinCharsBefore))
    long HyphenMinCharsBefore;
    __declspec(property(get=GetHyphenMinCharsAfter,put=PutHyphenMinCharsAfter))
    long HyphenMinCharsAfter;
    __declspec(property(get=GetHyphenMinWordLength,put=PutHyphenMinWordLength))
    long HyphenMinWordLength;
    __declspec(property(get=GetHyphenateCapitals,put=PutHyphenateCapitals))
    VARIANT_BOOL HyphenateCapitals;
    __declspec(property(get=GetLanguageID,put=PutLanguageID))
    enum cdrTextLanguage LanguageID;
    __declspec(property(get=GetCharSet,put=PutCharSet))
    enum cdrTextCharSet CharSet;
    __declspec(property(get=GetColumns))
    IVGTextColumnsPtr Columns;
    __declspec(property(get=GetFrames))
    IVGTextFramesPtr Frames;
    __declspec(property(get=GetFill))
    IVGFillPtr Fill;
    __declspec(property(get=GetOutline))
    IVGOutlinePtr Outline;
    __declspec(property(get=GetRangeKerning,put=PutRangeKerning))
    long RangeKerning;
    __declspec(property(get=GetTabs))
    IVGTextTabPositionsPtr Tabs;
    __declspec(property(get=GetEffect))
    enum cdrTextEffect Effect;
    __declspec(property(get=GetDropCapLinesDropped,put=PutDropCapLinesDropped))
    long DropCapLinesDropped;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetText ( );
    void PutText (
        _bstr_t ppVal );
    _bstr_t GetWideText ( );
    void PutWideText (
        _bstr_t ppVal );
    IVGTextCharactersPtr GetCharacters ( );
    IVGTextWordsPtr GetWords ( );
    IVGTextLinesPtr GetLines ( );
    IVGTextParagraphsPtr GetParagraphs ( );
    long GetStart ( );
    void PutStart (
        long pVal );
    long GetEnd ( );
    void PutEnd (
        long pVal );
    long GetLength ( );
    void PutLength (
        long pVal );
    IVGTextRangePtr Duplicate ( );
    enum cdrFontStyle GetStyle ( );
    void PutStyle (
        enum cdrFontStyle pVal );
    VARIANT_BOOL GetBold ( );
    void PutBold (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetItalic ( );
    void PutItalic (
        VARIANT_BOOL pVal );
    enum cdrFontLine GetUnderline ( );
    void PutUnderline (
        enum cdrFontLine pVal );
    enum cdrFontLine GetStrikethru ( );
    void PutStrikethru (
        enum cdrFontLine pVal );
    enum cdrFontLine GetOverscore ( );
    void PutOverscore (
        enum cdrFontLine pVal );
    _bstr_t GetFont ( );
    void PutFont (
        _bstr_t pVal );
    float GetSize ( );
    void PutSize (
        float pVal );
    enum cdrFontPosition GetPosition ( );
    void PutPosition (
        enum cdrFontPosition pVal );
    enum cdrFontCase GetCase ( );
    void PutCase (
        enum cdrFontCase pVal );
    float GetCharAngle ( );
    void PutCharAngle (
        float pVal );
    enum cdrAlignment GetAlignment ( );
    void PutAlignment (
        enum cdrAlignment pVal );
    double GetFirstLineIndent ( );
    void PutFirstLineIndent (
        double pVal );
    long GetHorizShift ( );
    void PutHorizShift (
        long pVal );
    long GetVertShift ( );
    void PutVertShift (
        long pVal );
    double GetLeftIndent ( );
    void PutLeftIndent (
        double pVal );
    double GetRightIndent ( );
    void PutRightIndent (
        double pVal );
    float GetMinWordSpacing ( );
    void PutMinWordSpacing (
        float pVal );
    float GetMaxWordSpacing ( );
    void PutMaxWordSpacing (
        float pVal );
    float GetMaxCharSpacing ( );
    void PutMaxCharSpacing (
        float pVal );
    float GetParaSpacingBefore ( );
    void PutParaSpacingBefore (
        float pVal );
    float GetParaSpacingAfter ( );
    void PutParaSpacingAfter (
        float pVal );
    float GetCharSpacing ( );
    void PutCharSpacing (
        float pVal );
    float GetLineSpacing ( );
    void PutLineSpacing (
        float pVal );
    enum cdrLineSpacingType GetLineSpacingType ( );
    float GetWordSpacing ( );
    void PutWordSpacing (
        float pVal );
    enum cdrTriState GetAutoHyphenate ( );
    void PutAutoHyphenate (
        enum cdrTriState pVal );
    double GetHyphenHotZone ( );
    void PutHyphenHotZone (
        double pVal );
    long GetHyphenMinCharsBefore ( );
    void PutHyphenMinCharsBefore (
        long pVal );
    long GetHyphenMinCharsAfter ( );
    void PutHyphenMinCharsAfter (
        long pVal );
    long GetHyphenMinWordLength ( );
    void PutHyphenMinWordLength (
        long pVal );
    VARIANT_BOOL GetHyphenateCapitals ( );
    void PutHyphenateCapitals (
        VARIANT_BOOL pVal );
    HRESULT Delete ( );
    HRESULT Select ( );
    HRESULT Copy ( );
    IVGTextRangePtr Paste ( );
    HRESULT ChangeCase (
        enum cdrTextChangeCase Case );
    HRESULT SetRange (
        long Start,
        long End );
    enum cdrTextLanguage GetLanguageID ( );
    void PutLanguageID (
        enum cdrTextLanguage pVal );
    enum cdrTextCharSet GetCharSet ( );
    void PutCharSet (
        enum cdrTextCharSet pVal );
    IVGTextRangePtr InsertBefore (
        _bstr_t Text,
        enum cdrTextLanguage LanguageID,
        enum cdrTextCharSet CharSet,
        _bstr_t Font );
    IVGTextRangePtr InsertBeforeWide (
        _bstr_t Text,
        enum cdrTextLanguage LanguageID,
        enum cdrTextCharSet CharSet,
        _bstr_t Font );
    IVGTextRangePtr InsertAfter (
        _bstr_t Text,
        enum cdrTextLanguage LanguageID,
        enum cdrTextCharSet CharSet,
        _bstr_t Font );
    IVGTextRangePtr InsertAfterWide (
        _bstr_t Text,
        enum cdrTextLanguage LanguageID,
        enum cdrTextCharSet CharSet,
        _bstr_t Font );
    IVGTextRangePtr Replace (
        _bstr_t Text,
        enum cdrTextLanguage LanguageID,
        enum cdrTextCharSet CharSet,
        _bstr_t Font );
    IVGTextRangePtr ReplaceWide (
        _bstr_t Text,
        enum cdrTextLanguage LanguageID,
        enum cdrTextCharSet CharSet,
        _bstr_t Font );
    IVGTextRangePtr Range (
        long Start,
        long End );
    HRESULT SetLineSpacing (
        enum cdrLineSpacingType Type,
        float LineSpacing,
        float ParaBefore,
        float ParaAfter );
    IVGTextColumnsPtr GetColumns ( );
    IVGTextFramesPtr GetFrames ( );
    HRESULT Collapse (
        VARIANT_BOOL ToEnd );
    HRESULT Combine (
        struct IVGTextRange * Range );
    VARIANT_BOOL InRange (
        struct IVGTextRange * Range );
    VARIANT_BOOL IsSame (
        struct IVGTextRange * Range );
    IVGFillPtr GetFill ( );
    IVGOutlinePtr GetOutline ( );
    long GetRangeKerning ( );
    void PutRangeKerning (
        long pVal );
    IVGTextTabPositionsPtr GetTabs ( );
    enum cdrTextEffect GetEffect ( );
    long GetDropCapLinesDropped ( );
    void PutDropCapLinesDropped (
        long pVal );
    double GetDropCapDistanceFromText ( );
    void PutDropCapDistanceFromText (
        double pVal );
    VARIANT_BOOL GetDropCapHangingIndent ( );
    void PutDropCapHangingIndent (
        VARIANT_BOOL pVal );
    _bstr_t GetBulletFont ( );
    void PutBulletFont (
        _bstr_t pVal );
    _bstr_t GetBulletSymbol ( );
    void PutBulletSymbol (
        _bstr_t pVal );
    float GetBulletSize ( );
    void PutBulletSize (
        float pVal );
    float GetBulletBaselineShift ( );
    void PutBulletBaselineShift (
        float pVal );
    double GetBulletHorizontalPosition ( );
    void PutBulletHorizontalPosition (
        double pVal );
    VARIANT_BOOL GetBulletHangingIndent ( );
    void PutBulletHangingIndent (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetIsEmpty ( );
    HRESULT ApplyNoEffect ( );
    HRESULT ApplyBulletEffect (
        _bstr_t Symbol,
        _bstr_t Font,
        float Size,
        float BaselineShift,
        double HorizontalPosition,
        VARIANT_BOOL HangingIndent );
    HRESULT ApplyDropCapEffect (
        long LinesDropped,
        double DistanceFromText,
        VARIANT_BOOL HangingIndent );
    VARIANT_BOOL GetHyphenateAllCapWords ( );
    void PutHyphenateAllCapWords (
        VARIANT_BOOL pVal );
    IVGTextRangesPtr EnumRanges (
        enum cdrTextPropertySet PropertyFilter );
    _variant_t Evaluate (
        _bstr_t Expression );
    IVGTextRangesPtr FindRanges (
        _bstr_t Query );
    IVGCurvePtr GetBaselines ( );
    HRESULT Straighten ( );
    HRESULT AlignToBaseline ( );
    IVGCurvePtr GetTextLineRects ( );
    IVGFillPtr GetCharBackFill ( );
    HRESULT CopyAttributes (
        struct IVGTextRange * SourceRange );
    long GetOpenTypeFeature (
        _bstr_t Feature );
    HRESULT SetOpenTypeFeature (
        _bstr_t Feature,
        long State );
    long GetTextFormatter ( );
    void PutTextFormatter (
        long pVal );
    HRESULT ApplyStyle (
        _bstr_t StyleName );
    IVGStylePtr GetObjectStyle ( );
    IVGTextIndentLevelStylesPtr GetIndentLevelStyles ( );
    long GetIndentLevel ( );
    void PutIndentLevel (
        long pVal );
    IVGTextVariableAxesPtr GetVariableAxes ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ BSTR * ppVal ) = 0;
      virtual HRESULT __stdcall put_Text (
        /*[in]*/ BSTR ppVal ) = 0;
      virtual HRESULT __stdcall get_WideText (
        /*[out,retval]*/ BSTR * ppVal ) = 0;
      virtual HRESULT __stdcall put_WideText (
        /*[in]*/ BSTR ppVal ) = 0;
      virtual HRESULT __stdcall get_Characters (
        /*[out,retval]*/ struct IVGTextCharacters * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Words (
        /*[out,retval]*/ struct IVGTextWords * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Lines (
        /*[out,retval]*/ struct IVGTextLines * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Paragraphs (
        /*[out,retval]*/ struct IVGTextParagraphs * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Start (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_Start (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_End (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_End (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_Length (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_Length (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[out,retval]*/ struct IVGTextRange * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Style (
        /*[out,retval]*/ enum cdrFontStyle * pVal ) = 0;
      virtual HRESULT __stdcall put_Style (
        /*[in]*/ enum cdrFontStyle pVal ) = 0;
      virtual HRESULT __stdcall get_Bold (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_Bold (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Italic (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_Italic (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Underline (
        /*[out,retval]*/ enum cdrFontLine * pVal ) = 0;
      virtual HRESULT __stdcall put_Underline (
        /*[in]*/ enum cdrFontLine pVal ) = 0;
      virtual HRESULT __stdcall get_Strikethru (
        /*[out,retval]*/ enum cdrFontLine * pVal ) = 0;
      virtual HRESULT __stdcall put_Strikethru (
        /*[in]*/ enum cdrFontLine pVal ) = 0;
      virtual HRESULT __stdcall get_Overscore (
        /*[out,retval]*/ enum cdrFontLine * pVal ) = 0;
      virtual HRESULT __stdcall put_Overscore (
        /*[in]*/ enum cdrFontLine pVal ) = 0;
      virtual HRESULT __stdcall get_Font (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Font (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Size (
        /*[out,retval]*/ float * pVal ) = 0;
      virtual HRESULT __stdcall put_Size (
        /*[in]*/ float pVal ) = 0;
      virtual HRESULT __stdcall get_Position (
        /*[out,retval]*/ enum cdrFontPosition * pVal ) = 0;
      virtual HRESULT __stdcall put_Position (
        /*[in]*/ enum cdrFontPosition pVal ) = 0;
      virtual HRESULT __stdcall get_Case (
        /*[out,retval]*/ enum cdrFontCase * pVal ) = 0;
      virtual HRESULT __stdcall put_Case (
        /*[in]*/ enum cdrFontCase pVal ) = 0;
      virtual HRESULT __stdcall get_CharAngle (
        /*[out,retval]*/ float * pVal ) = 0;
      virtual HRESULT __stdcall put_CharAngle (
        /*[in]*/ float pVal ) = 0;
      virtual HRESULT __stdcall get_Alignment (
        /*[out,retval]*/ enum cdrAlignment * pVal ) = 0;
      virtual HRESULT __stdcall put_Alignment (
        /*[in]*/ enum cdrAlignment pVal ) = 0;
      virtual HRESULT __stdcall get_FirstLineIndent (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_FirstLineIndent (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_HorizShift (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_HorizShift (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_VertShift (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_VertShift (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_LeftIndent (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_LeftIndent (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_RightIndent (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_RightIndent (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_MinWordSpacing (
        /*[out,retval]*/ float * pVal ) = 0;
      virtual HRESULT __stdcall put_MinWordSpacing (
        /*[in]*/ float pVal ) = 0;
      virtual HRESULT __stdcall get_MaxWordSpacing (
        /*[out,retval]*/ float * pVal ) = 0;
      virtual HRESULT __stdcall put_MaxWordSpacing (
        /*[in]*/ float pVal ) = 0;
      virtual HRESULT __stdcall get_MaxCharSpacing (
        /*[out,retval]*/ float * pVal ) = 0;
      virtual HRESULT __stdcall put_MaxCharSpacing (
        /*[in]*/ float pVal ) = 0;
      virtual HRESULT __stdcall get_ParaSpacingBefore (
        /*[out,retval]*/ float * pVal ) = 0;
      virtual HRESULT __stdcall put_ParaSpacingBefore (
        /*[in]*/ float pVal ) = 0;
      virtual HRESULT __stdcall get_ParaSpacingAfter (
        /*[out,retval]*/ float * pVal ) = 0;
      virtual HRESULT __stdcall put_ParaSpacingAfter (
        /*[in]*/ float pVal ) = 0;
      virtual HRESULT __stdcall get_CharSpacing (
        /*[out,retval]*/ float * pVal ) = 0;
      virtual HRESULT __stdcall put_CharSpacing (
        /*[in]*/ float pVal ) = 0;
      virtual HRESULT __stdcall get_LineSpacing (
        /*[out,retval]*/ float * pVal ) = 0;
      virtual HRESULT __stdcall put_LineSpacing (
        /*[in]*/ float pVal ) = 0;
      virtual HRESULT __stdcall get_LineSpacingType (
        /*[out,retval]*/ enum cdrLineSpacingType * pVal ) = 0;
      virtual HRESULT __stdcall get_WordSpacing (
        /*[out,retval]*/ float * pVal ) = 0;
      virtual HRESULT __stdcall put_WordSpacing (
        /*[in]*/ float pVal ) = 0;
      virtual HRESULT __stdcall get_AutoHyphenate (
        /*[out,retval]*/ enum cdrTriState * pVal ) = 0;
      virtual HRESULT __stdcall put_AutoHyphenate (
        /*[in]*/ enum cdrTriState pVal ) = 0;
      virtual HRESULT __stdcall get_HyphenHotZone (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_HyphenHotZone (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_HyphenMinCharsBefore (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_HyphenMinCharsBefore (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_HyphenMinCharsAfter (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_HyphenMinCharsAfter (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_HyphenMinWordLength (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_HyphenMinWordLength (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_HyphenateCapitals (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_HyphenateCapitals (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall raw_Select ( ) = 0;
      virtual HRESULT __stdcall raw_Copy ( ) = 0;
      virtual HRESULT __stdcall raw_Paste (
        /*[out,retval]*/ struct IVGTextRange * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_ChangeCase (
        /*[in]*/ enum cdrTextChangeCase Case ) = 0;
      virtual HRESULT __stdcall raw_SetRange (
        /*[in]*/ long Start,
        /*[in]*/ long End ) = 0;
      virtual HRESULT __stdcall get_LanguageID (
        /*[out,retval]*/ enum cdrTextLanguage * pVal ) = 0;
      virtual HRESULT __stdcall put_LanguageID (
        /*[in]*/ enum cdrTextLanguage pVal ) = 0;
      virtual HRESULT __stdcall get_CharSet (
        /*[out,retval]*/ enum cdrTextCharSet * pVal ) = 0;
      virtual HRESULT __stdcall put_CharSet (
        /*[in]*/ enum cdrTextCharSet pVal ) = 0;
      virtual HRESULT __stdcall raw_InsertBefore (
        /*[in]*/ BSTR Text,
        /*[in]*/ enum cdrTextLanguage LanguageID,
        /*[in]*/ enum cdrTextCharSet CharSet,
        /*[in]*/ BSTR Font,
        /*[out,retval]*/ struct IVGTextRange * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_InsertBeforeWide (
        /*[in]*/ BSTR Text,
        /*[in]*/ enum cdrTextLanguage LanguageID,
        /*[in]*/ enum cdrTextCharSet CharSet,
        /*[in]*/ BSTR Font,
        /*[out,retval]*/ struct IVGTextRange * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_InsertAfter (
        /*[in]*/ BSTR Text,
        /*[in]*/ enum cdrTextLanguage LanguageID,
        /*[in]*/ enum cdrTextCharSet CharSet,
        /*[in]*/ BSTR Font,
        /*[out,retval]*/ struct IVGTextRange * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_InsertAfterWide (
        /*[in]*/ BSTR Text,
        /*[in]*/ enum cdrTextLanguage LanguageID,
        /*[in]*/ enum cdrTextCharSet CharSet,
        /*[in]*/ BSTR Font,
        /*[out,retval]*/ struct IVGTextRange * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_Replace (
        /*[in]*/ BSTR Text,
        /*[in]*/ enum cdrTextLanguage LanguageID,
        /*[in]*/ enum cdrTextCharSet CharSet,
        /*[in]*/ BSTR Font,
        /*[out,retval]*/ struct IVGTextRange * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_ReplaceWide (
        /*[in]*/ BSTR Text,
        /*[in]*/ enum cdrTextLanguage LanguageID,
        /*[in]*/ enum cdrTextCharSet CharSet,
        /*[in]*/ BSTR Font,
        /*[out,retval]*/ struct IVGTextRange * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_Range (
        /*[in]*/ long Start,
        /*[in]*/ long End,
        /*[out,retval]*/ struct IVGTextRange * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_SetLineSpacing (
        /*[in]*/ enum cdrLineSpacingType Type,
        /*[in]*/ float LineSpacing,
        /*[in]*/ float ParaBefore,
        /*[in]*/ float ParaAfter ) = 0;
      virtual HRESULT __stdcall get_Columns (
        /*[out,retval]*/ struct IVGTextColumns * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Frames (
        /*[out,retval]*/ struct IVGTextFrames * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_Collapse (
        /*[in]*/ VARIANT_BOOL ToEnd ) = 0;
      virtual HRESULT __stdcall raw_Combine (
        /*[in]*/ struct IVGTextRange * Range ) = 0;
      virtual HRESULT __stdcall raw_InRange (
        /*[in]*/ struct IVGTextRange * Range,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_IsSame (
        /*[in]*/ struct IVGTextRange * Range,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_Fill (
        /*[out,retval]*/ struct IVGFill * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Outline (
        /*[out,retval]*/ struct IVGOutline * * ppVal ) = 0;
      virtual HRESULT __stdcall get_RangeKerning (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_RangeKerning (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_Tabs (
        /*[out,retval]*/ struct IVGTextTabPositions * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Effect (
        /*[out,retval]*/ enum cdrTextEffect * pVal ) = 0;
      virtual HRESULT __stdcall get_DropCapLinesDropped (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_DropCapLinesDropped (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_DropCapDistanceFromText (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_DropCapDistanceFromText (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_DropCapHangingIndent (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_DropCapHangingIndent (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_BulletFont (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_BulletFont (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_BulletSymbol (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_BulletSymbol (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_BulletSize (
        /*[out,retval]*/ float * pVal ) = 0;
      virtual HRESULT __stdcall put_BulletSize (
        /*[in]*/ float pVal ) = 0;
      virtual HRESULT __stdcall get_BulletBaselineShift (
        /*[out,retval]*/ float * pVal ) = 0;
      virtual HRESULT __stdcall put_BulletBaselineShift (
        /*[in]*/ float pVal ) = 0;
      virtual HRESULT __stdcall get_BulletHorizontalPosition (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_BulletHorizontalPosition (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_BulletHangingIndent (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_BulletHangingIndent (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_IsEmpty (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_ApplyNoEffect ( ) = 0;
      virtual HRESULT __stdcall raw_ApplyBulletEffect (
        /*[in]*/ BSTR Symbol,
        /*[in]*/ BSTR Font,
        /*[in]*/ float Size,
        /*[in]*/ float BaselineShift,
        /*[in]*/ double HorizontalPosition,
        /*[in]*/ VARIANT_BOOL HangingIndent ) = 0;
      virtual HRESULT __stdcall raw_ApplyDropCapEffect (
        /*[in]*/ long LinesDropped,
        /*[in]*/ double DistanceFromText,
        /*[in]*/ VARIANT_BOOL HangingIndent ) = 0;
      virtual HRESULT __stdcall get_HyphenateAllCapWords (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_HyphenateAllCapWords (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall raw_EnumRanges (
        /*[in]*/ enum cdrTextPropertySet PropertyFilter,
        /*[out,retval]*/ struct IVGTextRanges * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_Evaluate (
        /*[in]*/ BSTR Expression,
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall raw_FindRanges (
        /*[in]*/ BSTR Query,
        /*[out,retval]*/ struct IVGTextRanges * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Baselines (
        /*[out,retval]*/ struct IVGCurve * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_Straighten ( ) = 0;
      virtual HRESULT __stdcall raw_AlignToBaseline ( ) = 0;
      virtual HRESULT __stdcall get_TextLineRects (
        /*[out,retval]*/ struct IVGCurve * * ppVal ) = 0;
      virtual HRESULT __stdcall get_CharBackFill (
        /*[out,retval]*/ struct IVGFill * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_CopyAttributes (
        /*[in]*/ struct IVGTextRange * SourceRange ) = 0;
      virtual HRESULT __stdcall raw_GetOpenTypeFeature (
        /*[in]*/ BSTR Feature,
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetOpenTypeFeature (
        /*[in]*/ BSTR Feature,
        /*[in]*/ long State ) = 0;
      virtual HRESULT __stdcall get_TextFormatter (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_TextFormatter (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall raw_ApplyStyle (
        /*[in]*/ BSTR StyleName ) = 0;
      virtual HRESULT __stdcall get_ObjectStyle (
        /*[out,retval]*/ struct IVGStyle * * ppVal ) = 0;
      virtual HRESULT __stdcall get_IndentLevelStyles (
        /*[out,retval]*/ struct IVGTextIndentLevelStyles * * ppVal ) = 0;
      virtual HRESULT __stdcall get_IndentLevel (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_IndentLevel (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_VariableAxes (
        /*[out,retval]*/ struct IVGTextVariableAxes * * ppVal ) = 0;
};

struct __declspec(uuid("b0580072-9aa4-44fd-9547-4f91eb757ac4"))
IVGTextCharacters : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IVGTextRangePtr Item[][];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetAll))
    IVGTextRangePtr All;
    __declspec(property(get=GetFirst))
    IVGTextRangePtr First;
    __declspec(property(get=GetLast))
    IVGTextRangePtr Last;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IUnknownPtr Get_NewEnum ( );
    IVGTextRangePtr GetItem (
        long Index,
        long Count );
    long GetCount ( );
    IVGTextRangePtr GetAll ( );
    IVGTextRangePtr GetFirst ( );
    IVGTextRangePtr GetLast ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * pVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[in]*/ long Count,
        /*[out,retval]*/ struct IVGTextRange * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_All (
        /*[out,retval]*/ struct IVGTextRange * * ppVal ) = 0;
      virtual HRESULT __stdcall get_First (
        /*[out,retval]*/ struct IVGTextRange * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Last (
        /*[out,retval]*/ struct IVGTextRange * * ppVal ) = 0;
};

struct __declspec(uuid("b058007c-9aa4-44fd-9547-4f91eb757ac4"))
IVGTextWords : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IVGTextRangePtr Item[][];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetAll))
    IVGTextRangePtr All;
    __declspec(property(get=GetFirst))
    IVGTextRangePtr First;
    __declspec(property(get=GetLast))
    IVGTextRangePtr Last;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IUnknownPtr Get_NewEnum ( );
    IVGTextRangePtr GetItem (
        long Index,
        long Count );
    long GetCount ( );
    IVGTextRangePtr GetAll ( );
    IVGTextRangePtr GetFirst ( );
    IVGTextRangePtr GetLast ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * pVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[in]*/ long Count,
        /*[out,retval]*/ struct IVGTextRange * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_All (
        /*[out,retval]*/ struct IVGTextRange * * ppVal ) = 0;
      virtual HRESULT __stdcall get_First (
        /*[out,retval]*/ struct IVGTextRange * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Last (
        /*[out,retval]*/ struct IVGTextRange * * ppVal ) = 0;
};

struct __declspec(uuid("b0580076-9aa4-44fd-9547-4f91eb757ac4"))
IVGTextLines : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IVGTextRangePtr Item[][];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetAll))
    IVGTextRangePtr All;
    __declspec(property(get=GetFirst))
    IVGTextRangePtr First;
    __declspec(property(get=GetLast))
    IVGTextRangePtr Last;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IUnknownPtr Get_NewEnum ( );
    IVGTextRangePtr GetItem (
        long Index,
        long Count );
    long GetCount ( );
    IVGTextRangePtr GetAll ( );
    IVGTextRangePtr GetFirst ( );
    IVGTextRangePtr GetLast ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * pVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[in]*/ long Count,
        /*[out,retval]*/ struct IVGTextRange * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_All (
        /*[out,retval]*/ struct IVGTextRange * * ppVal ) = 0;
      virtual HRESULT __stdcall get_First (
        /*[out,retval]*/ struct IVGTextRange * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Last (
        /*[out,retval]*/ struct IVGTextRange * * ppVal ) = 0;
};

struct __declspec(uuid("b0580077-9aa4-44fd-9547-4f91eb757ac4"))
IVGTextParagraphs : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IVGTextRangePtr Item[][];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetAll))
    IVGTextRangePtr All;
    __declspec(property(get=GetFirst))
    IVGTextRangePtr First;
    __declspec(property(get=GetLast))
    IVGTextRangePtr Last;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IUnknownPtr Get_NewEnum ( );
    IVGTextRangePtr GetItem (
        long Index,
        long Count );
    long GetCount ( );
    IVGTextRangePtr GetAll ( );
    IVGTextRangePtr GetFirst ( );
    IVGTextRangePtr GetLast ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * pVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[in]*/ long Count,
        /*[out,retval]*/ struct IVGTextRange * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_All (
        /*[out,retval]*/ struct IVGTextRange * * ppVal ) = 0;
      virtual HRESULT __stdcall get_First (
        /*[out,retval]*/ struct IVGTextRange * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Last (
        /*[out,retval]*/ struct IVGTextRange * * ppVal ) = 0;
};

struct __declspec(uuid("b0580073-9aa4-44fd-9547-4f91eb757ac4"))
IVGTextColumns : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IVGTextRangePtr Item[][];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetAll))
    IVGTextRangePtr All;
    __declspec(property(get=GetFirst))
    IVGTextRangePtr First;
    __declspec(property(get=GetLast))
    IVGTextRangePtr Last;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IUnknownPtr Get_NewEnum ( );
    IVGTextRangePtr GetItem (
        long Index,
        long Count );
    long GetCount ( );
    IVGTextRangePtr GetAll ( );
    IVGTextRangePtr GetFirst ( );
    IVGTextRangePtr GetLast ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * pVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[in]*/ long Count,
        /*[out,retval]*/ struct IVGTextRange * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_All (
        /*[out,retval]*/ struct IVGTextRange * * ppVal ) = 0;
      virtual HRESULT __stdcall get_First (
        /*[out,retval]*/ struct IVGTextRange * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Last (
        /*[out,retval]*/ struct IVGTextRange * * ppVal ) = 0;
};

struct __declspec(uuid("b0580074-9aa4-44fd-9547-4f91eb757ac4"))
IVGTextFrame : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetRange))
    IVGTextRangePtr Range;
    __declspec(property(get=GetPrevious))
    IVGTextFramePtr Previous;
    __declspec(property(get=GetNext))
    IVGTextFramePtr Next;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetEmpty))
    VARIANT_BOOL Empty;
    __declspec(property(get=GetIsFirst))
    VARIANT_BOOL IsFirst;
    __declspec(property(get=GetIsLast))
    VARIANT_BOOL IsLast;
    __declspec(property(get=GetVerticalAlignment,put=PutVerticalAlignment))
    enum cdrVerticalAlignment VerticalAlignment;
    __declspec(property(get=GetMulticolumn))
    VARIANT_BOOL Multicolumn;
    __declspec(property(get=GetColumnCount))
    long ColumnCount;
    __declspec(property(get=GetColumnWidth))
    double ColumnWidth[];
    __declspec(property(get=GetColumnGutter))
    double ColumnGutter[];
    __declspec(property(get=GetContainer))
    IVGShapePtr Container;
    __declspec(property(get=GetIsInsideContainer))
    VARIANT_BOOL IsInsideContainer;
    __declspec(property(get=GetIsFittedToPath))
    VARIANT_BOOL IsFittedToPath;
    __declspec(property(get=GetPath))
    IVGShapePtr Path;
    __declspec(property(get=GetFrameShape))
    IVGShapePtr FrameShape;
    __declspec(property(get=GetFill,put=PutFill))
    IVGFillPtr Fill;
    __declspec(property(get=GetOutline,put=PutOutline))
    IVGOutlinePtr Outline;

    //
    // Wrapper methods for error-handling
    //

    IVGTextRangePtr GetRange ( );
    IVGTextFramePtr GetPrevious ( );
    IVGTextFramePtr GetNext ( );
    long GetIndex ( );
    VARIANT_BOOL GetEmpty ( );
    VARIANT_BOOL GetIsFirst ( );
    VARIANT_BOOL GetIsLast ( );
    enum cdrVerticalAlignment GetVerticalAlignment ( );
    void PutVerticalAlignment (
        enum cdrVerticalAlignment pVal );
    VARIANT_BOOL GetMulticolumn ( );
    long GetColumnCount ( );
    double GetColumnWidth (
        long Index );
    double GetColumnGutter (
        long Index );
    HRESULT SetColumns (
        long NumColumns,
        VARIANT_BOOL EqualColumns,
        SAFEARRAY * * WidthsAndGutters );
    HRESULT LinkTo (
        struct IVGShape * Shape );
    HRESULT UnLink ( );
    IVGShapePtr GetContainer ( );
    VARIANT_BOOL GetIsInsideContainer ( );
    VARIANT_BOOL GetIsFittedToPath ( );
    IVGShapePtr GetPath ( );
    IVGShapePtr GetFrameShape ( );
    IVGFillPtr GetFill ( );
    void PutFill (
        struct IVGFill * ppVal );
    IVGOutlinePtr GetOutline ( );
    void PutOutline (
        struct IVGOutline * ppVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Range (
        /*[out,retval]*/ struct IVGTextRange * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Previous (
        /*[out,retval]*/ struct IVGTextFrame * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Next (
        /*[out,retval]*/ struct IVGTextFrame * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Index (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_Empty (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_IsFirst (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_IsLast (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_VerticalAlignment (
        /*[out,retval]*/ enum cdrVerticalAlignment * pVal ) = 0;
      virtual HRESULT __stdcall put_VerticalAlignment (
        /*[in]*/ enum cdrVerticalAlignment pVal ) = 0;
      virtual HRESULT __stdcall get_Multicolumn (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_ColumnCount (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_ColumnWidth (
        /*[in]*/ long Index,
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_ColumnGutter (
        /*[in]*/ long Index,
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetColumns (
        /*[in]*/ long NumColumns,
        /*[in]*/ VARIANT_BOOL EqualColumns,
        /*[in]*/ SAFEARRAY * * WidthsAndGutters ) = 0;
      virtual HRESULT __stdcall raw_LinkTo (
        /*[in]*/ struct IVGShape * Shape ) = 0;
      virtual HRESULT __stdcall raw_UnLink ( ) = 0;
      virtual HRESULT __stdcall get_Container (
        /*[out,retval]*/ struct IVGShape * * ppVal ) = 0;
      virtual HRESULT __stdcall get_IsInsideContainer (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_IsFittedToPath (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ struct IVGShape * * ppVal ) = 0;
      virtual HRESULT __stdcall get_FrameShape (
        /*[out,retval]*/ struct IVGShape * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Fill (
        /*[out,retval]*/ struct IVGFill * * ppVal ) = 0;
      virtual HRESULT __stdcall put_Fill (
        /*[in]*/ struct IVGFill * ppVal ) = 0;
      virtual HRESULT __stdcall get_Outline (
        /*[out,retval]*/ struct IVGOutline * * ppVal ) = 0;
      virtual HRESULT __stdcall put_Outline (
        /*[in]*/ struct IVGOutline * ppVal ) = 0;
};

struct __declspec(uuid("b0580075-9aa4-44fd-9547-4f91eb757ac4"))
IVGTextFrames : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IVGTextFramePtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetRange))
    IVGTextRangePtr Range[][];
    __declspec(property(get=GetAll))
    IVGTextRangePtr All;
    __declspec(property(get=GetFirst))
    IVGTextFramePtr First;
    __declspec(property(get=GetLast))
    IVGTextFramePtr Last;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IUnknownPtr Get_NewEnum ( );
    IVGTextFramePtr GetItem (
        long Index );
    long GetCount ( );
    IVGTextRangePtr GetRange (
        long Index,
        long Count );
    IVGTextRangePtr GetAll ( );
    IVGTextFramePtr GetFirst ( );
    IVGTextFramePtr GetLast ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * pVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IVGTextFrame * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_Range (
        /*[in]*/ long Index,
        /*[in]*/ long Count,
        /*[out,retval]*/ struct IVGTextRange * * ppVal ) = 0;
      virtual HRESULT __stdcall get_All (
        /*[out,retval]*/ struct IVGTextRange * * ppVal ) = 0;
      virtual HRESULT __stdcall get_First (
        /*[out,retval]*/ struct IVGTextFrame * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Last (
        /*[out,retval]*/ struct IVGTextFrame * * ppVal ) = 0;
};

struct __declspec(uuid("b05800a4-9aa4-44fd-9547-4f91eb757ac4"))
IVGTextRanges : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IVGTextRangePtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetFirst))
    IVGTextRangePtr First;
    __declspec(property(get=GetLast))
    IVGTextRangePtr Last;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IUnknownPtr Get_NewEnum ( );
    IVGTextRangePtr GetItem (
        long Index );
    long GetCount ( );
    IVGTextRangePtr GetFirst ( );
    IVGTextRangePtr GetLast ( );
    IVGTextRangesPtr Reverse ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * pVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IVGTextRange * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_First (
        /*[out,retval]*/ struct IVGTextRange * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Last (
        /*[out,retval]*/ struct IVGTextRange * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_Reverse (
        /*[out,retval]*/ struct IVGTextRanges * * ppVal ) = 0;
};

struct __declspec(uuid("b05800b8-9aa4-44fd-9547-4f91eb757ac4"))
IVGStyle : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCategoryName))
    _bstr_t CategoryName;
    __declspec(property(get=GetOutline))
    IVGStyleOutlinePtr Outline;
    __declspec(property(get=GetFill))
    IVGStyleFillPtr Fill;
    __declspec(property(get=GetCharacter))
    IVGStyleCharacterPtr Character;
    __declspec(property(get=GetParagraph))
    IVGStyleParagraphPtr Paragraph;
    __declspec(property(get=GetFrame))
    IVGStyleFramePtr Frame;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDisplayName))
    _bstr_t DisplayName;
    __declspec(property(get=GetIsStyleSet))
    VARIANT_BOOL IsStyleSet;
    __declspec(property(get=GetIsObjectDefaults))
    VARIANT_BOOL IsObjectDefaults;
    __declspec(property(get=GetDisplayCategoryName))
    _bstr_t DisplayCategoryName;
    __declspec(property(get=GetBasedOn))
    IVGStylePtr BasedOn;
    __declspec(property(get=GetDerivedStyles))
    IVGStylesPtr DerivedStyles;
    __declspec(property(get=GetTransparency))
    IVGStyleTransparencyPtr Transparency;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetCategoryName ( );
    SAFEARRAY * GetAllPropertyNames ( );
    SAFEARRAY * GetOverridePropertyNames ( );
    VARIANT_BOOL IsPropertyInherited (
        _bstr_t Name );
    _variant_t GetProperty (
        _bstr_t Name );
    HRESULT SetProperty (
        _bstr_t Name,
        const _variant_t & Value );
    VARIANT_BOOL ClearProperty (
        _bstr_t Name );
    IVGStyleOutlinePtr GetOutline ( );
    IVGStyleFillPtr GetFill ( );
    IVGStyleCharacterPtr GetCharacter ( );
    IVGStyleParagraphPtr GetParagraph ( );
    IVGStyleFramePtr GetFrame ( );
    _bstr_t GetName ( );
    _bstr_t GetDisplayName ( );
    VARIANT_BOOL GetIsStyleSet ( );
    VARIANT_BOOL GetIsObjectDefaults ( );
    _bstr_t GetDisplayCategoryName ( );
    IVGStylePtr GetBasedOn ( );
    IVGStylesPtr GetDerivedStyles ( );
    _bstr_t ToString ( );
    VARIANT_BOOL StringAssign (
        _bstr_t StyleString );
    _bstr_t GetPropertyAsString (
        _bstr_t Name );
    VARIANT_BOOL SetPropertyAsString (
        _bstr_t Name,
        _bstr_t Value );
    VARIANT_BOOL Rename (
        _bstr_t NewName );
    VARIANT_BOOL SetBasedOn (
        _bstr_t NewParent );
    VARIANT_BOOL Delete ( );
    HRESULT Assign (
        struct IVGStyle * pVal );
    IVGStylePtr GetCopy ( );
    IVGStyleTransparencyPtr GetTransparency ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_CategoryName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetAllPropertyNames (
        /*[out,retval]*/ SAFEARRAY * * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetOverridePropertyNames (
        /*[out,retval]*/ SAFEARRAY * * pVal ) = 0;
      virtual HRESULT __stdcall raw_IsPropertyInherited (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetProperty (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetProperty (
        /*[in]*/ BSTR Name,
        /*[in]*/ VARIANT Value ) = 0;
      virtual HRESULT __stdcall raw_ClearProperty (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_Outline (
        /*[out,retval]*/ struct IVGStyleOutline * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Fill (
        /*[out,retval]*/ struct IVGStyleFill * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Character (
        /*[out,retval]*/ struct IVGStyleCharacter * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Paragraph (
        /*[out,retval]*/ struct IVGStyleParagraph * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Frame (
        /*[out,retval]*/ struct IVGStyleFrame * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_DisplayName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_IsStyleSet (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_IsObjectDefaults (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_DisplayCategoryName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_BasedOn (
        /*[out,retval]*/ struct IVGStyle * * ppVal ) = 0;
      virtual HRESULT __stdcall get_DerivedStyles (
        /*[out,retval]*/ struct IVGStyles * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_ToString (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall raw_StringAssign (
        /*[in]*/ BSTR StyleString,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetPropertyAsString (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetPropertyAsString (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Value,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_Rename (
        /*[in]*/ BSTR NewName,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetBasedOn (
        /*[in]*/ BSTR NewParent,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_Assign (
        /*[in]*/ struct IVGStyle * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetCopy (
        /*[out,retval]*/ struct IVGStyle * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Transparency (
        /*[out,retval]*/ struct IVGStyleTransparency * * ppVal ) = 0;
};

struct __declspec(uuid("b05800bb-9aa4-44fd-9547-4f91eb757ac4"))
IVGStyleOutline : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetStyle))
    IVGStylePtr Style;
    __declspec(property(get=GetType,put=PutType))
    enum cdrOutlineType Type;
    __declspec(property(get=GetOverprint,put=PutOverprint))
    VARIANT_BOOL Overprint;
    __declspec(property(get=GetBehindFill,put=PutBehindFill))
    VARIANT_BOOL BehindFill;
    __declspec(property(get=GetScaleWithShape,put=PutScaleWithShape))
    VARIANT_BOOL ScaleWithShape;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetColor,put=PutColor))
    IVGColorPtr Color;
    __declspec(property(get=GetOverlapArrow,put=PutOverlapArrow))
    VARIANT_BOOL OverlapArrow;
    __declspec(property(get=GetShareArrow,put=PutShareArrow))
    VARIANT_BOOL ShareArrow;
    __declspec(property(get=GetMiterLimit,put=PutMiterLimit))
    double MiterLimit;
    __declspec(property(get=GetNibStretch,put=PutNibStretch))
    long NibStretch;
    __declspec(property(get=GetNibAngle,put=PutNibAngle))
    double NibAngle;
    __declspec(property(get=GetWidelineWidth,put=PutWidelineWidth))
    double WidelineWidth;
    __declspec(property(get=GetLineCaps,put=PutLineCaps))
    enum cdrOutlineLineCaps LineCaps;
    __declspec(property(get=GetLineJoin,put=PutLineJoin))
    enum cdrOutlineLineJoin LineJoin;
    __declspec(property(get=GetJustification,put=PutJustification))
    enum cdrOutlineJustification Justification;
    __declspec(property(get=GetAdjustDashes,put=PutAdjustDashes))
    enum cdrOutlineDashAdjust AdjustDashes;

    //
    // Wrapper methods for error-handling
    //

    IVGStylePtr GetStyle ( );
    enum cdrOutlineType GetType ( );
    void PutType (
        enum cdrOutlineType pVal );
    VARIANT_BOOL GetOverprint ( );
    void PutOverprint (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetBehindFill ( );
    void PutBehindFill (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetScaleWithShape ( );
    void PutScaleWithShape (
        VARIANT_BOOL pVal );
    double GetWidth ( );
    void PutWidth (
        double pVal );
    IVGColorPtr GetColor ( );
    void PutColor (
        struct IVGColor * ppVal );
    VARIANT_BOOL GetOverlapArrow ( );
    void PutOverlapArrow (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetShareArrow ( );
    void PutShareArrow (
        VARIANT_BOOL pVal );
    double GetMiterLimit ( );
    void PutMiterLimit (
        double pVal );
    long GetNibStretch ( );
    void PutNibStretch (
        long pVal );
    double GetNibAngle ( );
    void PutNibAngle (
        double pVal );
    double GetWidelineWidth ( );
    void PutWidelineWidth (
        double pVal );
    enum cdrOutlineLineCaps GetLineCaps ( );
    void PutLineCaps (
        enum cdrOutlineLineCaps pVal );
    enum cdrOutlineLineJoin GetLineJoin ( );
    void PutLineJoin (
        enum cdrOutlineLineJoin pVal );
    enum cdrOutlineJustification GetJustification ( );
    void PutJustification (
        enum cdrOutlineJustification pVal );
    enum cdrOutlineDashAdjust GetAdjustDashes ( );
    void PutAdjustDashes (
        enum cdrOutlineDashAdjust pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Style (
        /*[out,retval]*/ struct IVGStyle * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum cdrOutlineType * pVal ) = 0;
      virtual HRESULT __stdcall put_Type (
        /*[in]*/ enum cdrOutlineType pVal ) = 0;
      virtual HRESULT __stdcall get_Overprint (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_Overprint (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_BehindFill (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_BehindFill (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_ScaleWithShape (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_ScaleWithShape (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ struct IVGColor * * ppVal ) = 0;
      virtual HRESULT __stdcall put_Color (
        /*[in]*/ struct IVGColor * ppVal ) = 0;
      virtual HRESULT __stdcall get_OverlapArrow (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_OverlapArrow (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_ShareArrow (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_ShareArrow (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_MiterLimit (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_MiterLimit (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_NibStretch (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_NibStretch (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_NibAngle (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_NibAngle (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_WidelineWidth (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_WidelineWidth (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_LineCaps (
        /*[out,retval]*/ enum cdrOutlineLineCaps * pVal ) = 0;
      virtual HRESULT __stdcall put_LineCaps (
        /*[in]*/ enum cdrOutlineLineCaps pVal ) = 0;
      virtual HRESULT __stdcall get_LineJoin (
        /*[out,retval]*/ enum cdrOutlineLineJoin * pVal ) = 0;
      virtual HRESULT __stdcall put_LineJoin (
        /*[in]*/ enum cdrOutlineLineJoin pVal ) = 0;
      virtual HRESULT __stdcall get_Justification (
        /*[out,retval]*/ enum cdrOutlineJustification * pVal ) = 0;
      virtual HRESULT __stdcall put_Justification (
        /*[in]*/ enum cdrOutlineJustification pVal ) = 0;
      virtual HRESULT __stdcall get_AdjustDashes (
        /*[out,retval]*/ enum cdrOutlineDashAdjust * pVal ) = 0;
      virtual HRESULT __stdcall put_AdjustDashes (
        /*[in]*/ enum cdrOutlineDashAdjust pVal ) = 0;
};

struct __declspec(uuid("b05800bc-9aa4-44fd-9547-4f91eb757ac4"))
IVGStyleFill : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetStyle))
    IVGStylePtr Style;
    __declspec(property(get=GetType,put=PutType))
    enum cdrFillStyleType Type;
    __declspec(property(get=GetFountainAnisotropic,put=PutFountainAnisotropic))
    VARIANT_BOOL FountainAnisotropic;
    __declspec(property(get=GetOverprint,put=PutOverprint))
    VARIANT_BOOL Overprint;
    __declspec(property(get=GetFountainSpreadMethod,put=PutFountainSpreadMethod))
    enum cdrFountainFillSpreadMethod FountainSpreadMethod;
    __declspec(property(get=GetWindingFill,put=PutWindingFill))
    VARIANT_BOOL WindingFill;
    __declspec(property(get=GetPrimaryOpacity,put=PutPrimaryOpacity))
    unsigned char PrimaryOpacity;
    __declspec(property(get=GetFountainFillType,put=PutFountainFillType))
    enum cdrFountainFillType FountainFillType;
    __declspec(property(get=GetSecondaryOpacity,put=PutSecondaryOpacity))
    unsigned char SecondaryOpacity;
    __declspec(property(get=GetEdgePad,put=PutEdgePad))
    long EdgePad;
    __declspec(property(get=GetMergeMode,put=PutMergeMode))
    enum cdrMergeMode MergeMode;
    __declspec(property(get=GetFountainCenterOffsetX,put=PutFountainCenterOffsetX))
    long FountainCenterOffsetX;
    __declspec(property(get=GetFountainCenterOffsetY,put=PutFountainCenterOffsetY))
    long FountainCenterOffsetY;
    __declspec(property(get=GetFountainSteps,put=PutFountainSteps))
    long FountainSteps;
    __declspec(property(get=GetFountainBlendType,put=PutFountainBlendType))
    enum cdrFountainFillBlendType FountainBlendType;
    __declspec(property(get=GetMidPoint,put=PutMidPoint))
    long MidPoint;
    __declspec(property(get=GetFlipColors,put=PutFlipColors))
    VARIANT_BOOL FlipColors;
    __declspec(property(get=GetPostScriptName,put=PutPostScriptName))
    _bstr_t PostScriptName;
    __declspec(property(get=GetTileWidth,put=PutTileWidth))
    double TileWidth;
    __declspec(property(get=GetTileHeight,put=PutTileHeight))
    double TileHeight;
    __declspec(property(get=GetTileOriginX,put=PutTileOriginX))
    double TileOriginX;
    __declspec(property(get=GetTileOriginY,put=PutTileOriginY))
    double TileOriginY;
    __declspec(property(get=GetTileOffsetType,put=PutTileOffsetType))
    enum cdrTileOffsetType TileOffsetType;
    __declspec(property(get=GetTileOffset,put=PutTileOffset))
    long TileOffset;
    __declspec(property(get=GetRotationAngle,put=PutRotationAngle))
    double RotationAngle;
    __declspec(property(get=GetSkewAngle,put=PutSkewAngle))
    double SkewAngle;
    __declspec(property(get=GetMirrorFill,put=PutMirrorFill))
    VARIANT_BOOL MirrorFill;
    __declspec(property(get=GetTransformWithShape,put=PutTransformWithShape))
    VARIANT_BOOL TransformWithShape;
    __declspec(property(get=GetPrimaryColor))
    IVGColorPtr PrimaryColor;
    __declspec(property(get=GetSecondaryColor))
    IVGColorPtr SecondaryColor;
    __declspec(property(get=GetMirrorFillX,put=PutMirrorFillX))
    VARIANT_BOOL MirrorFillX;
    __declspec(property(get=GetMirrorFillY,put=PutMirrorFillY))
    VARIANT_BOOL MirrorFillY;
    __declspec(property(get=GetFountainCenterXOffset,put=PutFountainCenterXOffset))
    double FountainCenterXOffset;
    __declspec(property(get=GetFountainCenterYOffset,put=PutFountainCenterYOffset))
    double FountainCenterYOffset;
    __declspec(property(get=GetFountainBlendAcceleration,put=PutFountainBlendAcceleration))
    double FountainBlendAcceleration;
    __declspec(property(get=GetFountainScaleX,put=PutFountainScaleX))
    double FountainScaleX;
    __declspec(property(get=GetFountainScaleY,put=PutFountainScaleY))
    double FountainScaleY;

    //
    // Wrapper methods for error-handling
    //

    IVGStylePtr GetStyle ( );
    enum cdrFillStyleType GetType ( );
    void PutType (
        enum cdrFillStyleType pVal );
    VARIANT_BOOL GetOverprint ( );
    void PutOverprint (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetWindingFill ( );
    void PutWindingFill (
        VARIANT_BOOL pVal );
    enum cdrFountainFillType GetFountainFillType ( );
    void PutFountainFillType (
        enum cdrFountainFillType pVal );
    long GetEdgePad ( );
    void PutEdgePad (
        long pVal );
    long GetFountainCenterOffsetX ( );
    void PutFountainCenterOffsetX (
        long pVal );
    long GetFountainCenterOffsetY ( );
    void PutFountainCenterOffsetY (
        long pVal );
    long GetFountainSteps ( );
    void PutFountainSteps (
        long pVal );
    enum cdrFountainFillBlendType GetFountainBlendType ( );
    void PutFountainBlendType (
        enum cdrFountainFillBlendType pVal );
    long GetMidPoint ( );
    void PutMidPoint (
        long pVal );
    VARIANT_BOOL GetFlipColors ( );
    void PutFlipColors (
        VARIANT_BOOL pVal );
    _bstr_t GetPostScriptName ( );
    void PutPostScriptName (
        _bstr_t pVal );
    double GetTileWidth ( );
    void PutTileWidth (
        double pVal );
    double GetTileHeight ( );
    void PutTileHeight (
        double pVal );
    double GetTileOriginX ( );
    void PutTileOriginX (
        double pVal );
    double GetTileOriginY ( );
    void PutTileOriginY (
        double pVal );
    enum cdrTileOffsetType GetTileOffsetType ( );
    void PutTileOffsetType (
        enum cdrTileOffsetType pVal );
    long GetTileOffset ( );
    void PutTileOffset (
        long pVal );
    double GetRotationAngle ( );
    void PutRotationAngle (
        double pVal );
    double GetSkewAngle ( );
    void PutSkewAngle (
        double pVal );
    VARIANT_BOOL GetMirrorFill ( );
    void PutMirrorFill (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetTransformWithShape ( );
    void PutTransformWithShape (
        VARIANT_BOOL pVal );
    IVGColorPtr GetPrimaryColor ( );
    IVGColorPtr GetSecondaryColor ( );
    VARIANT_BOOL GetMirrorFillX ( );
    void PutMirrorFillX (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetMirrorFillY ( );
    void PutMirrorFillY (
        VARIANT_BOOL pVal );
    double GetFountainCenterXOffset ( );
    void PutFountainCenterXOffset (
        double pVal );
    double GetFountainCenterYOffset ( );
    void PutFountainCenterYOffset (
        double pVal );
    double GetFountainBlendAcceleration ( );
    void PutFountainBlendAcceleration (
        double pVal );
    double GetFountainScaleX ( );
    void PutFountainScaleX (
        double pVal );
    double GetFountainScaleY ( );
    void PutFountainScaleY (
        double pVal );
    VARIANT_BOOL GetFountainAnisotropic ( );
    void PutFountainAnisotropic (
        VARIANT_BOOL pVal );
    enum cdrFountainFillSpreadMethod GetFountainSpreadMethod ( );
    void PutFountainSpreadMethod (
        enum cdrFountainFillSpreadMethod pVal );
    unsigned char GetPrimaryOpacity ( );
    void PutPrimaryOpacity (
        unsigned char pVal );
    unsigned char GetSecondaryOpacity ( );
    void PutSecondaryOpacity (
        unsigned char pVal );
    enum cdrMergeMode GetMergeMode ( );
    void PutMergeMode (
        enum cdrMergeMode pVal );
    VARIANT_BOOL SaveFill (
        _bstr_t FileName,
        struct IVGFillMetadata * Metadata );
    VARIANT_BOOL LoadFill (
        _bstr_t FileName,
        struct IVGFillMetadata * * Metadata );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Style (
        /*[out,retval]*/ struct IVGStyle * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum cdrFillStyleType * pVal ) = 0;
      virtual HRESULT __stdcall put_Type (
        /*[in]*/ enum cdrFillStyleType pVal ) = 0;
      virtual HRESULT __stdcall get_Overprint (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_Overprint (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_WindingFill (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_WindingFill (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_FountainFillType (
        /*[out,retval]*/ enum cdrFountainFillType * pVal ) = 0;
      virtual HRESULT __stdcall put_FountainFillType (
        /*[in]*/ enum cdrFountainFillType pVal ) = 0;
      virtual HRESULT __stdcall get_EdgePad (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_EdgePad (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_FountainCenterOffsetX (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_FountainCenterOffsetX (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_FountainCenterOffsetY (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_FountainCenterOffsetY (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_FountainSteps (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_FountainSteps (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_FountainBlendType (
        /*[out,retval]*/ enum cdrFountainFillBlendType * pVal ) = 0;
      virtual HRESULT __stdcall put_FountainBlendType (
        /*[in]*/ enum cdrFountainFillBlendType pVal ) = 0;
      virtual HRESULT __stdcall get_MidPoint (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_MidPoint (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_FlipColors (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_FlipColors (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_PostScriptName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_PostScriptName (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_TileWidth (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_TileWidth (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_TileHeight (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_TileHeight (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_TileOriginX (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_TileOriginX (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_TileOriginY (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_TileOriginY (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_TileOffsetType (
        /*[out,retval]*/ enum cdrTileOffsetType * pVal ) = 0;
      virtual HRESULT __stdcall put_TileOffsetType (
        /*[in]*/ enum cdrTileOffsetType pVal ) = 0;
      virtual HRESULT __stdcall get_TileOffset (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_TileOffset (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_RotationAngle (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_RotationAngle (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_SkewAngle (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_SkewAngle (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_MirrorFill (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_MirrorFill (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_TransformWithShape (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_TransformWithShape (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_PrimaryColor (
        /*[out,retval]*/ struct IVGColor * * ppVal ) = 0;
      virtual HRESULT __stdcall get_SecondaryColor (
        /*[out,retval]*/ struct IVGColor * * ppVal ) = 0;
      virtual HRESULT __stdcall get_MirrorFillX (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_MirrorFillX (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_MirrorFillY (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_MirrorFillY (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_FountainCenterXOffset (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_FountainCenterXOffset (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_FountainCenterYOffset (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_FountainCenterYOffset (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_FountainBlendAcceleration (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_FountainBlendAcceleration (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_FountainScaleX (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_FountainScaleX (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_FountainScaleY (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_FountainScaleY (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_FountainAnisotropic (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_FountainAnisotropic (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_FountainSpreadMethod (
        /*[out,retval]*/ enum cdrFountainFillSpreadMethod * pVal ) = 0;
      virtual HRESULT __stdcall put_FountainSpreadMethod (
        /*[in]*/ enum cdrFountainFillSpreadMethod pVal ) = 0;
      virtual HRESULT __stdcall get_PrimaryOpacity (
        /*[out,retval]*/ unsigned char * pVal ) = 0;
      virtual HRESULT __stdcall put_PrimaryOpacity (
        /*[in]*/ unsigned char pVal ) = 0;
      virtual HRESULT __stdcall get_SecondaryOpacity (
        /*[out,retval]*/ unsigned char * pVal ) = 0;
      virtual HRESULT __stdcall put_SecondaryOpacity (
        /*[in]*/ unsigned char pVal ) = 0;
      virtual HRESULT __stdcall get_MergeMode (
        /*[out,retval]*/ enum cdrMergeMode * pVal ) = 0;
      virtual HRESULT __stdcall put_MergeMode (
        /*[in]*/ enum cdrMergeMode pVal ) = 0;
      virtual HRESULT __stdcall raw_SaveFill (
        /*[in]*/ BSTR FileName,
        /*[in]*/ struct IVGFillMetadata * Metadata,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_LoadFill (
        /*[in]*/ BSTR FileName,
        /*[out]*/ struct IVGFillMetadata * * Metadata,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
};

struct __declspec(uuid("b05800bd-9aa4-44fd-9547-4f91eb757ac4"))
IVGStyleCharacter : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetStyle))
    IVGStylePtr Style;

    //
    // Wrapper methods for error-handling
    //

    IVGStylePtr GetStyle ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Style (
        /*[out,retval]*/ struct IVGStyle * * ppVal ) = 0;
};

struct __declspec(uuid("b05800be-9aa4-44fd-9547-4f91eb757ac4"))
IVGStyleParagraph : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetStyle))
    IVGStylePtr Style;

    //
    // Wrapper methods for error-handling
    //

    IVGStylePtr GetStyle ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Style (
        /*[out,retval]*/ struct IVGStyle * * ppVal ) = 0;
};

struct __declspec(uuid("b05800bf-9aa4-44fd-9547-4f91eb757ac4"))
IVGStyleFrame : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetStyle))
    IVGStylePtr Style;

    //
    // Wrapper methods for error-handling
    //

    IVGStylePtr GetStyle ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Style (
        /*[out,retval]*/ struct IVGStyle * * ppVal ) = 0;
};

struct __declspec(uuid("b05800b9-9aa4-44fd-9547-4f91eb757ac4"))
IVGStyles : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetItem))
    IVGStylePtr Item[];
    __declspec(property(get=GetFirst))
    IVGStylePtr First;
    __declspec(property(get=GetLast))
    IVGStylePtr Last;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    IVGStylePtr GetItem (
        long Index );
    IUnknownPtr Get_NewEnum ( );
    IVGStylePtr Find (
        _bstr_t Name );
    IVGStylePtr GetFirst ( );
    IVGStylePtr GetLast ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IVGStyle * * ppVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * pVal ) = 0;
      virtual HRESULT __stdcall raw_Find (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ struct IVGStyle * * ppVal ) = 0;
      virtual HRESULT __stdcall get_First (
        /*[out,retval]*/ struct IVGStyle * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Last (
        /*[out,retval]*/ struct IVGStyle * * ppVal ) = 0;
};

struct __declspec(uuid("b05800d7-9aa4-44fd-9547-4f91eb757ac4"))
IVGStyleTransparency : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetStyle))
    IVGStylePtr Style;
    __declspec(property(get=GetFill))
    IVGStyleFillPtr Fill;
    __declspec(property(get=GetMode,put=PutMode))
    enum cdrMergeMode Mode;
    __declspec(property(get=GetUniformTransparency,put=PutUniformTransparency))
    double UniformTransparency;
    __declspec(property(get=GetWhiteTransparency,put=PutWhiteTransparency))
    double WhiteTransparency;
    __declspec(property(get=GetBlackTransparency,put=PutBlackTransparency))
    double BlackTransparency;
    __declspec(property(get=GetAppliesTo,put=PutAppliesTo))
    enum cdrTransparencyAppliedTo AppliesTo;

    //
    // Wrapper methods for error-handling
    //

    IVGStylePtr GetStyle ( );
    IVGStyleFillPtr GetFill ( );
    enum cdrMergeMode GetMode ( );
    void PutMode (
        enum cdrMergeMode pVal );
    double GetUniformTransparency ( );
    void PutUniformTransparency (
        double pVal );
    double GetWhiteTransparency ( );
    void PutWhiteTransparency (
        double pVal );
    double GetBlackTransparency ( );
    void PutBlackTransparency (
        double pVal );
    enum cdrTransparencyAppliedTo GetAppliesTo ( );
    void PutAppliesTo (
        enum cdrTransparencyAppliedTo pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Style (
        /*[out,retval]*/ struct IVGStyle * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Fill (
        /*[out,retval]*/ struct IVGStyleFill * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Mode (
        /*[out,retval]*/ enum cdrMergeMode * pVal ) = 0;
      virtual HRESULT __stdcall put_Mode (
        /*[in]*/ enum cdrMergeMode pVal ) = 0;
      virtual HRESULT __stdcall get_UniformTransparency (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_UniformTransparency (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_WhiteTransparency (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_WhiteTransparency (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_BlackTransparency (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_BlackTransparency (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_AppliesTo (
        /*[out,retval]*/ enum cdrTransparencyAppliedTo * pVal ) = 0;
      virtual HRESULT __stdcall put_AppliesTo (
        /*[in]*/ enum cdrTransparencyAppliedTo pVal ) = 0;
};

struct __declspec(uuid("b05800d6-9aa4-44fd-9547-4f91eb757ac4"))
IVGToolShape : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT OnGenerateShape (
        struct IVGLayer * Parent,
        struct IVGProperties * ObjectProperties,
        struct IVGStyle * pStyleAttributes,
        struct IVGTransformMatrix * pTransformation,
        VARIANT_BOOL IsPreviewOnly );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_OnGenerateShape (
        /*[in]*/ struct IVGLayer * Parent,
        /*[in]*/ struct IVGProperties * ObjectProperties,
        /*[in]*/ struct IVGStyle * pStyleAttributes,
        /*[in]*/ struct IVGTransformMatrix * pTransformation,
        /*[in]*/ VARIANT_BOOL IsPreviewOnly ) = 0;
};

struct __declspec(uuid("b05800ba-9aa4-44fd-9547-4f91eb757ac4"))
IVGStyleSheet : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetStyles))
    IVGStylesPtr Styles;
    __declspec(property(get=GetStyleSets))
    IVGStylesPtr StyleSets;
    __declspec(property(get=GetObjectDefaults))
    IVGStylesPtr ObjectDefaults;
    __declspec(property(get=GetAllStyles))
    IVGStylesPtr AllStyles;
    __declspec(property(get=GetAllStyleSets))
    IVGStylesPtr AllStyleSets;
    __declspec(property(get=GetAllColorStyles))
    IVGColorsPtr AllColorStyles;

    //
    // Wrapper methods for error-handling
    //

    IVGStylesPtr GetStyles ( );
    IVGStylesPtr GetStyleSets ( );
    IVGStylesPtr GetObjectDefaults ( );
    IVGStylesPtr GetAllStyles ( );
    IVGStylesPtr GetAllStyleSets ( );
    IVGStylePtr FindStyle (
        _bstr_t Name );
    IVGStylesPtr CreateStyleFromShape (
        struct IVGShape * Shape,
        _bstr_t Category,
        _bstr_t Name,
        VARIANT_BOOL ReplaceExisting );
    IVGStylesPtr CreateStyleFromShapeRange (
        struct IVGShapeRange * ShapeRange,
        _bstr_t Category,
        _bstr_t Name,
        VARIANT_BOOL ReplaceExisting );
    IVGStylesPtr CreateStyleFromTextRange (
        struct IVGTextRange * TextRange,
        _bstr_t Category,
        _bstr_t Name,
        VARIANT_BOOL ReplaceExisting );
    IVGStylesPtr CreateStyleSetFromShape (
        struct IVGShape * Shape,
        _bstr_t Name,
        VARIANT_BOOL ReplaceExisting );
    IVGStylesPtr CreateStyleSetFromShapeRange (
        struct IVGShapeRange * ShapeRange,
        _bstr_t Name,
        VARIANT_BOOL ReplaceExisting );
    IVGStylesPtr CreateStyleSetFromTextRange (
        struct IVGTextRange * TextRange,
        _bstr_t Name,
        VARIANT_BOOL ReplaceExisting );
    IVGStylePtr CreateStyle (
        _bstr_t Category,
        _bstr_t BasedOn,
        _bstr_t Name,
        VARIANT_BOOL ReplaceExisting );
    IVGStylePtr CreateStyleSet (
        _bstr_t BasedOn,
        _bstr_t Name,
        VARIANT_BOOL ReplaceExisting );
    VARIANT_BOOL Export (
        _bstr_t FileName,
        VARIANT_BOOL Styles,
        VARIANT_BOOL StyleSets,
        VARIANT_BOOL ObjectDefaults,
        VARIANT_BOOL ColorStyles );
    VARIANT_BOOL Import (
        _bstr_t FileName,
        VARIANT_BOOL MergeStyles,
        VARIANT_BOOL Styles,
        VARIANT_BOOL StyleSets,
        VARIANT_BOOL ObjectDefaults,
        VARIANT_BOOL ColorStyles );
    IVGColorsPtr GetAllColorStyles ( );
    IVGColorPtr CreateColorStyle (
        _bstr_t Name,
        struct IVGColor * Color,
        long HarmonyIndex,
        long IndexInHarmony,
        VARIANT_BOOL ReplaceExisting );
    HRESULT DeleteAllColorStyles ( );
    HRESULT DeleteColorStyle (
        _bstr_t Name );
    HRESULT RenameColorStyle (
        _bstr_t OldName,
        _bstr_t NewName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Styles (
        /*[out,retval]*/ struct IVGStyles * * ppVal ) = 0;
      virtual HRESULT __stdcall get_StyleSets (
        /*[out,retval]*/ struct IVGStyles * * ppVal ) = 0;
      virtual HRESULT __stdcall get_ObjectDefaults (
        /*[out,retval]*/ struct IVGStyles * * ppVal ) = 0;
      virtual HRESULT __stdcall get_AllStyles (
        /*[out,retval]*/ struct IVGStyles * * ppVal ) = 0;
      virtual HRESULT __stdcall get_AllStyleSets (
        /*[out,retval]*/ struct IVGStyles * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_FindStyle (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ struct IVGStyle * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_CreateStyleFromShape (
        /*[in]*/ struct IVGShape * Shape,
        /*[in]*/ BSTR Category,
        /*[in]*/ BSTR Name,
        /*[in]*/ VARIANT_BOOL ReplaceExisting,
        /*[out,retval]*/ struct IVGStyles * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_CreateStyleFromShapeRange (
        /*[in]*/ struct IVGShapeRange * ShapeRange,
        /*[in]*/ BSTR Category,
        /*[in]*/ BSTR Name,
        /*[in]*/ VARIANT_BOOL ReplaceExisting,
        /*[out,retval]*/ struct IVGStyles * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_CreateStyleFromTextRange (
        /*[in]*/ struct IVGTextRange * TextRange,
        /*[in]*/ BSTR Category,
        /*[in]*/ BSTR Name,
        /*[in]*/ VARIANT_BOOL ReplaceExisting,
        /*[out,retval]*/ struct IVGStyles * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_CreateStyleSetFromShape (
        /*[in]*/ struct IVGShape * Shape,
        /*[in]*/ BSTR Name,
        /*[in]*/ VARIANT_BOOL ReplaceExisting,
        /*[out,retval]*/ struct IVGStyles * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_CreateStyleSetFromShapeRange (
        /*[in]*/ struct IVGShapeRange * ShapeRange,
        /*[in]*/ BSTR Name,
        /*[in]*/ VARIANT_BOOL ReplaceExisting,
        /*[out,retval]*/ struct IVGStyles * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_CreateStyleSetFromTextRange (
        /*[in]*/ struct IVGTextRange * TextRange,
        /*[in]*/ BSTR Name,
        /*[in]*/ VARIANT_BOOL ReplaceExisting,
        /*[out,retval]*/ struct IVGStyles * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_CreateStyle (
        /*[in]*/ BSTR Category,
        /*[in]*/ BSTR BasedOn,
        /*[in]*/ BSTR Name,
        /*[in]*/ VARIANT_BOOL ReplaceExisting,
        /*[out,retval]*/ struct IVGStyle * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_CreateStyleSet (
        /*[in]*/ BSTR BasedOn,
        /*[in]*/ BSTR Name,
        /*[in]*/ VARIANT_BOOL ReplaceExisting,
        /*[out,retval]*/ struct IVGStyle * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR FileName,
        /*[in]*/ VARIANT_BOOL Styles,
        /*[in]*/ VARIANT_BOOL StyleSets,
        /*[in]*/ VARIANT_BOOL ObjectDefaults,
        /*[in]*/ VARIANT_BOOL ColorStyles,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_Import (
        /*[in]*/ BSTR FileName,
        /*[in]*/ VARIANT_BOOL MergeStyles,
        /*[in]*/ VARIANT_BOOL Styles,
        /*[in]*/ VARIANT_BOOL StyleSets,
        /*[in]*/ VARIANT_BOOL ObjectDefaults,
        /*[in]*/ VARIANT_BOOL ColorStyles,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_AllColorStyles (
        /*[out,retval]*/ struct IVGColors * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_CreateColorStyle (
        /*[in]*/ BSTR Name,
        /*[in]*/ struct IVGColor * Color,
        /*[in]*/ long HarmonyIndex,
        /*[in]*/ long IndexInHarmony,
        /*[in]*/ VARIANT_BOOL ReplaceExisting,
        /*[out,retval]*/ struct IVGColor * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_DeleteAllColorStyles ( ) = 0;
      virtual HRESULT __stdcall raw_DeleteColorStyle (
        /*[in]*/ BSTR Name ) = 0;
      virtual HRESULT __stdcall raw_RenameColorStyle (
        /*[in]*/ BSTR OldName,
        /*[in]*/ BSTR NewName ) = 0;
};

struct __declspec(uuid("b0580020-9aa4-44fd-9547-4f91eb757ac4"))
IVGDataItems : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    IVGApplicationPtr Application;
    __declspec(property(get=GetParent))
    IVGShapePtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetItem))
    IVGDataItemPtr Item[];
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IVGApplicationPtr GetApplication ( );
    IVGShapePtr GetParent ( );
    long GetCount ( );
    IVGDataItemPtr GetItem (
        const _variant_t & IndexOrName );
    IUnknownPtr Get_NewEnum ( );
    IVGDataItemPtr Add (
        struct IVGDataField * DataField,
        const _variant_t & Value = vtMissing );
    HRESULT CopyFrom (
        struct IVGShape * Shape );
    HRESULT Clear ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct IVGApplication * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ struct IVGShape * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT IndexOrName,
        /*[out,retval]*/ struct IVGDataItem * * ppVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * pVal ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ struct IVGDataField * DataField,
        /*[in]*/ VARIANT Value,
        /*[out,retval]*/ struct IVGDataItem * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_CopyFrom (
        /*[in]*/ struct IVGShape * Shape ) = 0;
      virtual HRESULT __stdcall raw_Clear ( ) = 0;
};

struct __declspec(uuid("b058001f-9aa4-44fd-9547-4f91eb757ac4"))
IVGDataItem : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    IVGApplicationPtr Application;
    __declspec(property(get=GetParent))
    IVGDataItemsPtr Parent;
    __declspec(property(get=GetValue,put=PutValue))
    _variant_t Value;
    __declspec(property(get=GetDataField))
    IVGDataFieldPtr DataField;
    __declspec(property(get=GetFormattedValue))
    _bstr_t FormattedValue;

    //
    // Wrapper methods for error-handling
    //

    IVGApplicationPtr GetApplication ( );
    IVGDataItemsPtr GetParent ( );
    _variant_t GetValue ( );
    void PutValue (
        const _variant_t & pVal );
    IVGDataFieldPtr GetDataField ( );
    HRESULT Clear ( );
    _bstr_t GetFormattedValue ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct IVGApplication * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ struct IVGDataItems * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Value (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall put_Value (
        /*[in]*/ VARIANT pVal ) = 0;
      virtual HRESULT __stdcall get_DataField (
        /*[out,retval]*/ struct IVGDataField * * pVal ) = 0;
      virtual HRESULT __stdcall raw_Clear ( ) = 0;
      virtual HRESULT __stdcall get_FormattedValue (
        /*[out,retval]*/ BSTR * pbstrValue ) = 0;
};

struct __declspec(uuid("b058001d-9aa4-44fd-9547-4f91eb757ac4"))
IVGDataField : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    IVGApplicationPtr Application;
    __declspec(property(get=GetParent))
    IVGDataFieldsPtr Parent;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetFormatType))
    enum cdrDataFormatType FormatType;
    __declspec(property(get=GetFormat,put=PutFormat))
    _bstr_t Format;
    __declspec(property(get=GetFieldWidth,put=PutFieldWidth))
    long FieldWidth;
    __declspec(property(get=GetAppDefault,put=PutAppDefault))
    VARIANT_BOOL AppDefault;
    __declspec(property(get=GetDocDefault,put=PutDocDefault))
    VARIANT_BOOL DocDefault;
    __declspec(property(get=GetSummarizeGroup,put=PutSummarizeGroup))
    VARIANT_BOOL SummarizeGroup;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetTarget,put=PutTarget))
    _bstr_t Target;
    __declspec(property(get=GetDefaultValue,put=PutDefaultValue))
    _bstr_t DefaultValue;
    __declspec(property(get=GetConstraint,put=PutConstraint))
    _bstr_t Constraint;
    __declspec(property(get=GetDataType,put=PutDataType))
    enum cdrDataType DataType;
    __declspec(property(get=GetParentName,put=PutParentName))
    _bstr_t ParentName;
    __declspec(property(get=GetElementName,put=PutElementName))
    _bstr_t ElementName;

    //
    // Wrapper methods for error-handling
    //

    IVGApplicationPtr GetApplication ( );
    IVGDataFieldsPtr GetParent ( );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t pVal );
    enum cdrDataFormatType GetFormatType ( );
    _bstr_t GetFormat ( );
    void PutFormat (
        _bstr_t pVal );
    long GetFieldWidth ( );
    void PutFieldWidth (
        long pVal );
    VARIANT_BOOL GetAppDefault ( );
    void PutAppDefault (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetDocDefault ( );
    void PutDocDefault (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetSummarizeGroup ( );
    void PutSummarizeGroup (
        VARIANT_BOOL pVal );
    HRESULT Delete ( );
    HRESULT Reorder (
        long NewIndex );
    long GetIndex ( );
    _bstr_t GetTarget ( );
    void PutTarget (
        _bstr_t pVal );
    _bstr_t GetDefaultValue ( );
    void PutDefaultValue (
        _bstr_t pVal );
    _bstr_t GetConstraint ( );
    void PutConstraint (
        _bstr_t pVal );
    enum cdrDataType GetDataType ( );
    void PutDataType (
        enum cdrDataType pVal );
    _bstr_t GetParentName ( );
    void PutParentName (
        _bstr_t pVal );
    _bstr_t GetElementName ( );
    void PutElementName (
        _bstr_t pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct IVGApplication * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ struct IVGDataFields * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_FormatType (
        /*[out,retval]*/ enum cdrDataFormatType * pVal ) = 0;
      virtual HRESULT __stdcall get_Format (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Format (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_FieldWidth (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_FieldWidth (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_AppDefault (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_AppDefault (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_DocDefault (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_DocDefault (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_SummarizeGroup (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_SummarizeGroup (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall raw_Reorder (
        /*[in]*/ long NewIndex ) = 0;
      virtual HRESULT __stdcall get_Index (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_Target (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Target (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_DefaultValue (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_DefaultValue (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Constraint (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Constraint (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_DataType (
        /*[out,retval]*/ enum cdrDataType * pVal ) = 0;
      virtual HRESULT __stdcall put_DataType (
        /*[in]*/ enum cdrDataType pVal ) = 0;
      virtual HRESULT __stdcall get_ParentName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ParentName (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ElementName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ElementName (
        /*[in]*/ BSTR pVal ) = 0;
};

struct __declspec(uuid("b058001e-9aa4-44fd-9547-4f91eb757ac4"))
IVGDataFields : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    IVGApplicationPtr Application;
    __declspec(property(get=GetParent))
    IVGDocumentPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetItem))
    IVGDataFieldPtr Item[];
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IVGApplicationPtr GetApplication ( );
    IVGDocumentPtr GetParent ( );
    long GetCount ( );
    IVGDataFieldPtr GetItem (
        const _variant_t & IndexOrName );
    IUnknownPtr Get_NewEnum ( );
    IVGDataFieldPtr Add (
        _bstr_t Name,
        _bstr_t Format,
        VARIANT_BOOL AppDefault,
        VARIANT_BOOL DocDefault,
        VARIANT_BOOL SummarizeGroup );
    IVGDataFieldPtr AddEx (
        _bstr_t Name,
        enum cdrDataType DataType,
        _bstr_t DefaultValue,
        _bstr_t Constraint,
        _bstr_t Target,
        _bstr_t Format,
        VARIANT_BOOL AppDefault,
        VARIANT_BOOL DocDefault,
        VARIANT_BOOL SummarizeGroup,
        long FieldWidth );
    VARIANT_BOOL IsPresent (
        _bstr_t FieldName );
    IVGDataFieldPtr AddEx2 (
        _bstr_t ParentName,
        _bstr_t ElementName,
        _bstr_t Name,
        enum cdrDataType DataType,
        _bstr_t DefaultValue,
        _bstr_t Constraint,
        _bstr_t Target,
        _bstr_t Format,
        VARIANT_BOOL AppDefault,
        VARIANT_BOOL DocDefault,
        VARIANT_BOOL SummarizeGroup,
        long FieldWidth );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct IVGApplication * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ struct IVGDocument * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT IndexOrName,
        /*[out,retval]*/ struct IVGDataField * * ppVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * pVal ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Format,
        /*[in]*/ VARIANT_BOOL AppDefault,
        /*[in]*/ VARIANT_BOOL DocDefault,
        /*[in]*/ VARIANT_BOOL SummarizeGroup,
        /*[out,retval]*/ struct IVGDataField * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_AddEx (
        /*[in]*/ BSTR Name,
        /*[in]*/ enum cdrDataType DataType,
        /*[in]*/ BSTR DefaultValue,
        /*[in]*/ BSTR Constraint,
        /*[in]*/ BSTR Target,
        /*[in]*/ BSTR Format,
        /*[in]*/ VARIANT_BOOL AppDefault,
        /*[in]*/ VARIANT_BOOL DocDefault,
        /*[in]*/ VARIANT_BOOL SummarizeGroup,
        /*[in]*/ long FieldWidth,
        /*[out,retval]*/ struct IVGDataField * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_IsPresent (
        /*[in]*/ BSTR FieldName,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_AddEx2 (
        /*[in]*/ BSTR ParentName,
        /*[in]*/ BSTR ElementName,
        /*[in]*/ BSTR Name,
        /*[in]*/ enum cdrDataType DataType,
        /*[in]*/ BSTR DefaultValue,
        /*[in]*/ BSTR Constraint,
        /*[in]*/ BSTR Target,
        /*[in]*/ BSTR Format,
        /*[in]*/ VARIANT_BOOL AppDefault,
        /*[in]*/ VARIANT_BOOL DocDefault,
        /*[in]*/ VARIANT_BOOL SummarizeGroup,
        /*[in]*/ long FieldWidth,
        /*[out,retval]*/ struct IVGDataField * * ppVal ) = 0;
};

struct __declspec(uuid("b058006c-9aa4-44fd-9547-4f91eb757ac4"))
IVGSymbol : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetDefinition))
    IVGSymbolDefinitionPtr Definition;

    //
    // Wrapper methods for error-handling
    //

    IVGSymbolDefinitionPtr GetDefinition ( );
    IVGShapeRangePtr RevertToShapes ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Definition (
        /*[out,retval]*/ struct IVGSymbolDefinition * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_RevertToShapes (
        /*[out,retval]*/ struct IVGShapeRange * * ppVal ) = 0;
};

struct __declspec(uuid("b058006d-9aa4-44fd-9547-4f91eb757ac4"))
IVGSymbolDefinition : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetDescription,put=PutDescription))
    _bstr_t Description;
    __declspec(property(get=GetLinked))
    VARIANT_BOOL Linked;
    __declspec(property(get=GetLinkLibraryPath))
    _bstr_t LinkLibraryPath;
    __declspec(property(get=GetNested))
    VARIANT_BOOL Nested;
    __declspec(property(get=GetHasLinks))
    VARIANT_BOOL HasLinks;
    __declspec(property(get=GetIsLinkBroken))
    VARIANT_BOOL IsLinkBroken;
    __declspec(property(get=GetIsLinkUpdated))
    VARIANT_BOOL IsLinkUpdated;
    __declspec(property(get=GetHasBrokenLinks))
    VARIANT_BOOL HasBrokenLinks;
    __declspec(property(get=GetHasUpdatedLinks))
    VARIANT_BOOL HasUpdatedLinks;
    __declspec(property(get=GetNestedSymbols))
    IVGSymbolDefinitionsPtr NestedSymbols;
    __declspec(property(get=GetEditable))
    VARIANT_BOOL Editable;
    __declspec(property(get=GetInstanceCount))
    long InstanceCount;
    __declspec(property(get=GetInstances))
    IVGShapeRangePtr Instances;
    __declspec(property(get=GetType))
    enum cdrSymbolType Type;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetName ( );
    void PutName (
        _bstr_t pVal );
    _bstr_t GetDescription ( );
    void PutDescription (
        _bstr_t pVal );
    VARIANT_BOOL GetLinked ( );
    _bstr_t GetLinkLibraryPath ( );
    VARIANT_BOOL GetNested ( );
    VARIANT_BOOL GetHasLinks ( );
    VARIANT_BOOL GetIsLinkBroken ( );
    VARIANT_BOOL GetIsLinkUpdated ( );
    VARIANT_BOOL GetHasBrokenLinks ( );
    VARIANT_BOOL GetHasUpdatedLinks ( );
    IVGSymbolDefinitionsPtr GetNestedSymbols ( );
    VARIANT_BOOL GetEditable ( );
    long GetInstanceCount ( );
    IVGShapeRangePtr GetInstances ( );
    HRESULT EnterEditMode ( );
    HRESULT LeaveEditMode ( );
    HRESULT Delete ( );
    HRESULT Copy ( );
    IVGSymbolDefinitionPtr Duplicate (
        _bstr_t Name );
    HRESULT BreakLink ( );
    HRESULT UpdateLinks ( );
    HRESULT FixLink (
        _bstr_t LibraryPath );
    enum cdrSymbolType GetType ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Description (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Linked (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_LinkLibraryPath (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_Nested (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_HasLinks (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_IsLinkBroken (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_IsLinkUpdated (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_HasBrokenLinks (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_HasUpdatedLinks (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_NestedSymbols (
        /*[out,retval]*/ struct IVGSymbolDefinitions * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Editable (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_InstanceCount (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_Instances (
        /*[out,retval]*/ struct IVGShapeRange * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_EnterEditMode ( ) = 0;
      virtual HRESULT __stdcall raw_LeaveEditMode ( ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall raw_Copy ( ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ struct IVGSymbolDefinition * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_BreakLink ( ) = 0;
      virtual HRESULT __stdcall raw_UpdateLinks ( ) = 0;
      virtual HRESULT __stdcall raw_FixLink (
        /*[in]*/ BSTR LibraryPath ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum cdrSymbolType * pVal ) = 0;
};

struct __declspec(uuid("b058006e-9aa4-44fd-9547-4f91eb757ac4"))
IVGSymbolDefinitions : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IVGSymbolDefinitionPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IVGSymbolDefinitionPtr GetItem (
        const _variant_t & IndexOrName );
    long GetCount ( );
    IUnknownPtr Get_NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT IndexOrName,
        /*[out,retval]*/ struct IVGSymbolDefinition * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * pVal ) = 0;
};

struct __declspec(uuid("b0580070-9aa4-44fd-9547-4f91eb757ac4"))
IVGSymbolLibrary : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetSymbols))
    IVGSymbolDefinitionsPtr Symbols;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetFilePath))
    _bstr_t FilePath;
    __declspec(property(get=GetReadOnly))
    VARIANT_BOOL ReadOnly;

    //
    // Wrapper methods for error-handling
    //

    IVGSymbolDefinitionsPtr GetSymbols ( );
    _bstr_t GetName ( );
    _bstr_t GetFilePath ( );
    VARIANT_BOOL GetReadOnly ( );
    HRESULT Delete ( );
    HRESULT PurgeUnusedSymbols ( );
    IVGSymbolDefinitionPtr Paste (
        _bstr_t Name );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Symbols (
        /*[out,retval]*/ struct IVGSymbolDefinitions * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_FilePath (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_ReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall raw_PurgeUnusedSymbols ( ) = 0;
      virtual HRESULT __stdcall raw_Paste (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ struct IVGSymbolDefinition * * ppVal ) = 0;
};

struct __declspec(uuid("b058006f-9aa4-44fd-9547-4f91eb757ac4"))
IVGSymbolLibraries : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IVGSymbolLibraryPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IVGSymbolLibraryPtr GetItem (
        const _variant_t & IndexOrName );
    long GetCount ( );
    IVGSymbolLibraryPtr Add (
        _bstr_t FileName,
        VARIANT_BOOL CopyLocally );
    long AddFromFolder (
        _bstr_t Folder,
        VARIANT_BOOL Recursive,
        VARIANT_BOOL CopyLocally );
    IUnknownPtr Get_NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT IndexOrName,
        /*[out,retval]*/ struct IVGSymbolLibrary * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ BSTR FileName,
        /*[in]*/ VARIANT_BOOL CopyLocally,
        /*[out,retval]*/ struct IVGSymbolLibrary * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_AddFromFolder (
        /*[in]*/ BSTR Folder,
        /*[in]*/ VARIANT_BOOL Recursive,
        /*[in]*/ VARIANT_BOOL CopyLocally,
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * pVal ) = 0;
};

struct __declspec(uuid("b058008f-9aa4-44fd-9547-4f91eb757ac4"))
IVGTreeNode : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetType))
    enum cdrTreeNodeType Type;
    __declspec(property(get=GetShapeType))
    enum cdrShapeType ShapeType;
    __declspec(property(get=GetShape))
    IVGShapePtr Shape;
    __declspec(property(get=GetVirtualShape))
    IVGShapePtr VirtualShape;
    __declspec(property(get=GetPage))
    IVGPagePtr Page;
    __declspec(property(get=GetLayer))
    IVGLayerPtr Layer;
    __declspec(property(get=GetDocument))
    IVGDocumentPtr Document;
    __declspec(property(get=GetNext))
    IVGTreeNodePtr Next;
    __declspec(property(get=GetPrevious))
    IVGTreeNodePtr Previous;
    __declspec(property(get=GetParent))
    IVGTreeNodePtr Parent;
    __declspec(property(get=GetFirstChild))
    IVGTreeNodePtr FirstChild;
    __declspec(property(get=GetLastChild))
    IVGTreeNodePtr LastChild;
    __declspec(property(get=GetChildren))
    IVGTreeNodesPtr Children;
    __declspec(property(get=GetIsGroupChild))
    VARIANT_BOOL IsGroupChild;
    __declspec(property(get=GetSelected))
    VARIANT_BOOL Selected;
    __declspec(property(get=GetNextSelected))
    IVGTreeNodePtr NextSelected;
    __declspec(property(get=GetHandle))
    long Handle;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;

    //
    // Wrapper methods for error-handling
    //

    enum cdrTreeNodeType GetType ( );
    enum cdrShapeType GetShapeType ( );
    IVGShapePtr GetShape ( );
    IVGShapePtr GetVirtualShape ( );
    IVGPagePtr GetPage ( );
    IVGLayerPtr GetLayer ( );
    IVGDocumentPtr GetDocument ( );
    IVGTreeNodePtr GetNext ( );
    IVGTreeNodePtr GetPrevious ( );
    IVGTreeNodePtr GetParent ( );
    IVGTreeNodePtr GetFirstChild ( );
    IVGTreeNodePtr GetLastChild ( );
    IVGTreeNodesPtr GetChildren ( );
    VARIANT_BOOL GetIsGroupChild ( );
    VARIANT_BOOL GetSelected ( );
    IVGTreeNodePtr GetNextSelected ( );
    VARIANT_BOOL UnLink ( );
    VARIANT_BOOL LinkBefore (
        struct IVGTreeNode * TreeNode );
    VARIANT_BOOL LinkAfter (
        struct IVGTreeNode * TreeNode );
    VARIANT_BOOL LinkAsChildOf (
        struct IVGTreeNode * TreeNode );
    VARIANT_BOOL MoveToFirst ( );
    VARIANT_BOOL MoveToLast ( );
    VARIANT_BOOL MoveBefore (
        struct IVGTreeNode * TreeNode );
    VARIANT_BOOL MoveAfter (
        struct IVGTreeNode * TreeNode );
    VARIANT_BOOL IsDescendentOf (
        struct IVGTreeNode * TreeNode );
    HRESULT Delete ( );
    IVGTreeNodePtr GetCopy ( );
    HRESULT SwapData (
        struct IVGTreeNode * TreeNode );
    HRESULT SwapGroupData (
        struct IVGTreeNode * GroupNode );
    long GetHandle ( );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum cdrTreeNodeType * pVal ) = 0;
      virtual HRESULT __stdcall get_ShapeType (
        /*[out,retval]*/ enum cdrShapeType * pVal ) = 0;
      virtual HRESULT __stdcall get_Shape (
        /*[out,retval]*/ struct IVGShape * * ppVal ) = 0;
      virtual HRESULT __stdcall get_VirtualShape (
        /*[out,retval]*/ struct IVGShape * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Page (
        /*[out,retval]*/ struct IVGPage * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Layer (
        /*[out,retval]*/ struct IVGLayer * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Document (
        /*[out,retval]*/ struct IVGDocument * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Next (
        /*[out,retval]*/ struct IVGTreeNode * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Previous (
        /*[out,retval]*/ struct IVGTreeNode * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ struct IVGTreeNode * * ppVal ) = 0;
      virtual HRESULT __stdcall get_FirstChild (
        /*[out,retval]*/ struct IVGTreeNode * * ppVal ) = 0;
      virtual HRESULT __stdcall get_LastChild (
        /*[out,retval]*/ struct IVGTreeNode * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Children (
        /*[out,retval]*/ struct IVGTreeNodes * * ppVal ) = 0;
      virtual HRESULT __stdcall get_IsGroupChild (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_Selected (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_NextSelected (
        /*[out,retval]*/ struct IVGTreeNode * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_UnLink (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_LinkBefore (
        /*[in]*/ struct IVGTreeNode * TreeNode,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_LinkAfter (
        /*[in]*/ struct IVGTreeNode * TreeNode,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_LinkAsChildOf (
        /*[in]*/ struct IVGTreeNode * TreeNode,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_MoveToFirst (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_MoveToLast (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_MoveBefore (
        /*[in]*/ struct IVGTreeNode * TreeNode,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_MoveAfter (
        /*[in]*/ struct IVGTreeNode * TreeNode,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_IsDescendentOf (
        /*[in]*/ struct IVGTreeNode * TreeNode,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall raw_GetCopy (
        /*[out,retval]*/ struct IVGTreeNode * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_SwapData (
        /*[in]*/ struct IVGTreeNode * TreeNode ) = 0;
      virtual HRESULT __stdcall raw_SwapGroupData (
        /*[in]*/ struct IVGTreeNode * GroupNode ) = 0;
      virtual HRESULT __stdcall get_Handle (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR pVal ) = 0;
};

struct __declspec(uuid("b0580090-9aa4-44fd-9547-4f91eb757ac4"))
IVGTreeNodes : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IVGTreeNodePtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IVGTreeNodePtr GetItem (
        long Index );
    long GetCount ( );
    IUnknownPtr Get_NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IVGTreeNode * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * pVal ) = 0;
};

struct __declspec(uuid("b05800a5-9aa4-44fd-9547-4f91eb757ac4"))
IVGSpread : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetSizeWidth))
    double SizeWidth;
    __declspec(property(get=GetSizeHeight))
    double SizeHeight;
    __declspec(property(get=GetLeftX))
    double LeftX;
    __declspec(property(get=GetRightX))
    double RightX;
    __declspec(property(get=GetTopY))
    double TopY;
    __declspec(property(get=GetBottomY))
    double BottomY;
    __declspec(property(get=GetCenterX))
    double CenterX;
    __declspec(property(get=GetCenterY))
    double CenterY;
    __declspec(property(get=GetBoundingBox))
    IVGRectPtr BoundingBox;
    __declspec(property(get=GetPages))
    IVGPagesPtr Pages;
    __declspec(property(get=GetNext))
    IVGSpreadPtr Next;
    __declspec(property(get=GetPrevious))
    IVGSpreadPtr Previous;
    __declspec(property(get=GetLayers))
    IVGLayersPtr Layers;
    __declspec(property(get=GetAllLayers))
    IVGLayersPtr AllLayers;
    __declspec(property(get=GetActiveLayer))
    IVGLayerPtr ActiveLayer;
    __declspec(property(get=GetShapes))
    IVGShapesPtr Shapes;
    __declspec(property(get=GetSelectableShapes))
    IVGShapesPtr SelectableShapes;
    __declspec(property(get=GetGuides))
    IVGShapeRangePtr Guides[];
    __declspec(property(get=GetTreeNode))
    IVGTreeNodePtr TreeNode;
    __declspec(property(get=GetGuidesLayer))
    IVGLayerPtr GuidesLayer;
    __declspec(property(get=GetDesktopLayer))
    IVGLayerPtr DesktopLayer;
    __declspec(property(get=GetGridLayer))
    IVGLayerPtr GridLayer;

    //
    // Wrapper methods for error-handling
    //

    long GetIndex ( );
    double GetSizeWidth ( );
    double GetSizeHeight ( );
    double GetLeftX ( );
    double GetRightX ( );
    double GetTopY ( );
    double GetBottomY ( );
    double GetCenterX ( );
    double GetCenterY ( );
    IVGRectPtr GetBoundingBox ( );
    HRESULT GetBoundingBox (
        double * x,
        double * y,
        double * Width,
        double * Height );
    IVGPagesPtr GetPages ( );
    IVGSpreadPtr GetNext ( );
    IVGSpreadPtr GetPrevious ( );
    IVGLayersPtr GetLayers ( );
    IVGLayersPtr GetAllLayers ( );
    IVGLayerPtr GetActiveLayer ( );
    IVGShapesPtr GetShapes ( );
    IVGShapesPtr GetSelectableShapes ( );
    IVGLayerPtr CreateLayer (
        _bstr_t LayerName );
    IVGShapeRangePtr GetGuides (
        enum cdrGuideType Type );
    IVGTreeNodePtr GetTreeNode ( );
    IVGLayerPtr GetGuidesLayer ( );
    IVGLayerPtr GetDesktopLayer ( );
    IVGLayerPtr GetGridLayer ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Index (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_SizeWidth (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_SizeHeight (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_LeftX (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_RightX (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_TopY (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_BottomY (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_CenterX (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_CenterY (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_BoundingBox (
        /*[out,retval]*/ struct IVGRect * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_GetBoundingBox (
        /*[out]*/ double * x,
        /*[out]*/ double * y,
        /*[out]*/ double * Width,
        /*[out]*/ double * Height ) = 0;
      virtual HRESULT __stdcall get_Pages (
        /*[out,retval]*/ struct IVGPages * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Next (
        /*[out,retval]*/ struct IVGSpread * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Previous (
        /*[out,retval]*/ struct IVGSpread * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Layers (
        /*[out,retval]*/ struct IVGLayers * * ppVal ) = 0;
      virtual HRESULT __stdcall get_AllLayers (
        /*[out,retval]*/ struct IVGLayers * * ppVal ) = 0;
      virtual HRESULT __stdcall get_ActiveLayer (
        /*[out,retval]*/ struct IVGLayer * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Shapes (
        /*[out,retval]*/ struct IVGShapes * * ppVal ) = 0;
      virtual HRESULT __stdcall get_SelectableShapes (
        /*[out,retval]*/ struct IVGShapes * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_CreateLayer (
        /*[in]*/ BSTR LayerName,
        /*[out,retval]*/ struct IVGLayer * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Guides (
        /*[in]*/ enum cdrGuideType Type,
        /*[out,retval]*/ struct IVGShapeRange * * ppVal ) = 0;
      virtual HRESULT __stdcall get_TreeNode (
        /*[out,retval]*/ struct IVGTreeNode * * ppVal ) = 0;
      virtual HRESULT __stdcall get_GuidesLayer (
        /*[out,retval]*/ struct IVGLayer * * ppVal ) = 0;
      virtual HRESULT __stdcall get_DesktopLayer (
        /*[out,retval]*/ struct IVGLayer * * ppVal ) = 0;
      virtual HRESULT __stdcall get_GridLayer (
        /*[out,retval]*/ struct IVGLayer * * ppVal ) = 0;
};

struct __declspec(uuid("b058008e-9aa4-44fd-9547-4f91eb757ac4"))
IVGTreeManager : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetVirtualLayer))
    IVGLayerPtr VirtualLayer;
    __declspec(property(get=GetSelectedNodeCount))
    long SelectedNodeCount;
    __declspec(property(get=GetFirstSelectedNode))
    IVGTreeNodePtr FirstSelectedNode;

    //
    // Wrapper methods for error-handling
    //

    IVGLayerPtr GetVirtualLayer ( );
    long GetSelectedNodeCount ( );
    IVGTreeNodePtr GetFirstSelectedNode ( );
    IVGTreeNodePtr CreateGroupNode ( );
    IVGTreeNodePtr CleanGroupNode (
        struct IVGTreeNode * GroupNode );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_VirtualLayer (
        /*[out,retval]*/ struct IVGLayer * * ppVal ) = 0;
      virtual HRESULT __stdcall get_SelectedNodeCount (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_FirstSelectedNode (
        /*[out,retval]*/ struct IVGTreeNode * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_CreateGroupNode (
        /*[out,retval]*/ struct IVGTreeNode * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_CleanGroupNode (
        /*[in]*/ struct IVGTreeNode * GroupNode,
        /*[out,retval]*/ struct IVGTreeNode * * ppVal ) = 0;
};

struct __declspec(uuid("b05800a6-9aa4-44fd-9547-4f91eb757ac4"))
IVGSpreads : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IVGSpreadPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetFirst))
    IVGSpreadPtr First;
    __declspec(property(get=GetLast))
    IVGSpreadPtr Last;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IVGSpreadPtr GetItem (
        long Index );
    long GetCount ( );
    IUnknownPtr Get_NewEnum ( );
    IVGSpreadPtr GetFirst ( );
    IVGSpreadPtr GetLast ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IVGSpread * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * pVal ) = 0;
      virtual HRESULT __stdcall get_First (
        /*[out,retval]*/ struct IVGSpread * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Last (
        /*[out,retval]*/ struct IVGSpread * * ppVal ) = 0;
};

struct __declspec(uuid("b05800e6-9aa4-44fd-9547-4f91eb757ac4"))
IVGPageMarkup : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetPageGuid))
    _bstr_t PageGuid;
    __declspec(property(get=GetThreads))
    IVGCommentThreadsPtr Threads;
    __declspec(property(get=GetPage))
    IVGPagePtr Page;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetPageGuid ( );
    IVGCommentThreadsPtr GetThreads ( );
    IVGPagePtr GetPage ( );
    IVGCommentPtr CreateHotspot (
        _bstr_t Text,
        double x,
        double y,
        struct IVGCommentAuthor * Author );
    IVGCommentPtr CreateRectangle (
        _bstr_t Text,
        double x,
        double y,
        double Width,
        double Height,
        long OutlineWidth,
        struct IVGColor * FillColor,
        struct IVGColor * OutlineColor,
        struct IVGCommentAuthor * Author );
    IVGCommentPtr CreateEllipse (
        _bstr_t Text,
        double x,
        double y,
        double RadiusX,
        double RadiusY,
        long OutlineWidth,
        struct IVGColor * FillColor,
        struct IVGColor * OutlineColor,
        struct IVGCommentAuthor * Author );
    IVGCommentPtr CreateArrow (
        _bstr_t Text,
        double x,
        double y,
        double VectorX,
        double VectorY,
        long OutlineWidth,
        struct IVGColor * OutlineColor,
        struct IVGCommentAuthor * Author );
    IVGCommentPtr CreateFreehand (
        _bstr_t Text,
        struct IVGCurve * Curve,
        long OutlineWidth,
        struct IVGColor * OutlineColor,
        struct IVGCommentAuthor * Author );
    IVGCommentPtr CreateHighlight (
        _bstr_t Text,
        struct IVGCurve * Curve,
        long OutlineWidth,
        struct IVGColor * OutlineColor,
        struct IVGCommentAuthor * Author );
    IVGCommentPtr CreateCollaborativeText (
        _bstr_t Text,
        struct IVGShape * Shape,
        struct IVGColor * OutlineColor,
        struct IVGCommentAuthor * Author );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_PageGuid (
        /*[out,retval]*/ BSTR * pRet ) = 0;
      virtual HRESULT __stdcall get_Threads (
        /*[out,retval]*/ struct IVGCommentThreads * * pRet ) = 0;
      virtual HRESULT __stdcall get_Page (
        /*[out,retval]*/ struct IVGPage * * pRet ) = 0;
      virtual HRESULT __stdcall raw_CreateHotspot (
        /*[in]*/ BSTR Text,
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[in]*/ struct IVGCommentAuthor * Author,
        /*[out,retval]*/ struct IVGComment * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_CreateRectangle (
        /*[in]*/ BSTR Text,
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[in]*/ double Width,
        /*[in]*/ double Height,
        /*[in]*/ long OutlineWidth,
        /*[in]*/ struct IVGColor * FillColor,
        /*[in]*/ struct IVGColor * OutlineColor,
        /*[in]*/ struct IVGCommentAuthor * Author,
        /*[out,retval]*/ struct IVGComment * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_CreateEllipse (
        /*[in]*/ BSTR Text,
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[in]*/ double RadiusX,
        /*[in]*/ double RadiusY,
        /*[in]*/ long OutlineWidth,
        /*[in]*/ struct IVGColor * FillColor,
        /*[in]*/ struct IVGColor * OutlineColor,
        /*[in]*/ struct IVGCommentAuthor * Author,
        /*[out,retval]*/ struct IVGComment * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_CreateArrow (
        /*[in]*/ BSTR Text,
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[in]*/ double VectorX,
        /*[in]*/ double VectorY,
        /*[in]*/ long OutlineWidth,
        /*[in]*/ struct IVGColor * OutlineColor,
        /*[in]*/ struct IVGCommentAuthor * Author,
        /*[out,retval]*/ struct IVGComment * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_CreateFreehand (
        /*[in]*/ BSTR Text,
        /*[in]*/ struct IVGCurve * Curve,
        /*[in]*/ long OutlineWidth,
        /*[in]*/ struct IVGColor * OutlineColor,
        /*[in]*/ struct IVGCommentAuthor * Author,
        /*[out,retval]*/ struct IVGComment * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_CreateHighlight (
        /*[in]*/ BSTR Text,
        /*[in]*/ struct IVGCurve * Curve,
        /*[in]*/ long OutlineWidth,
        /*[in]*/ struct IVGColor * OutlineColor,
        /*[in]*/ struct IVGCommentAuthor * Author,
        /*[out,retval]*/ struct IVGComment * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_CreateCollaborativeText (
        /*[in]*/ BSTR Text,
        /*[in]*/ struct IVGShape * Shape,
        /*[in]*/ struct IVGColor * OutlineColor,
        /*[in]*/ struct IVGCommentAuthor * Author,
        /*[out,retval]*/ struct IVGComment * * ppVal ) = 0;
};

struct __declspec(uuid("b05800ec-9aa4-44fd-9547-4f91eb757ac4"))
IVGCommentThreads : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IVGCommentThreadPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetFirst))
    IVGCommentThreadPtr First;
    __declspec(property(get=GetLast))
    IVGCommentThreadPtr Last;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IVGCommentThreadPtr GetItem (
        const _variant_t & IndexOrGuid );
    IUnknownPtr Get_NewEnum ( );
    long GetCount ( );
    IVGCommentThreadPtr GetFirst ( );
    IVGCommentThreadPtr GetLast ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT IndexOrGuid,
        /*[out,retval]*/ struct IVGCommentThread * * ppVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * pVal ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_First (
        /*[out,retval]*/ struct IVGCommentThread * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Last (
        /*[out,retval]*/ struct IVGCommentThread * * ppVal ) = 0;
};

struct __declspec(uuid("b05800e7-9aa4-44fd-9547-4f91eb757ac4"))
IVGCommentThread : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetTarget))
    IVGCommentTargetPtr Target;
    __declspec(property(get=GetComments))
    IVGCommentsPtr Comments;
    __declspec(property(get=GetStatus))
    enum cdrCommentStatus Status;
    __declspec(property(get=GetPageMarkup))
    IVGPageMarkupPtr PageMarkup;
    __declspec(property(get=GetAnnotation))
    IVGCommentAnnotationPtr Annotation;

    //
    // Wrapper methods for error-handling
    //

    IVGCommentTargetPtr GetTarget ( );
    IVGCommentsPtr GetComments ( );
    enum cdrCommentStatus GetStatus ( );
    IVGCommentPtr Reply (
        _bstr_t Text,
        struct IVGCommentAuthor * Author );
    HRESULT Resolve (
        struct IVGCommentAuthor * Author );
    HRESULT Reopen (
        struct IVGCommentAuthor * Author );
    HRESULT Delete ( );
    IVGPageMarkupPtr GetPageMarkup ( );
    IVGCommentAnnotationPtr GetAnnotation ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Target (
        /*[out,retval]*/ struct IVGCommentTarget * * pRet ) = 0;
      virtual HRESULT __stdcall get_Comments (
        /*[out,retval]*/ struct IVGComments * * pRet ) = 0;
      virtual HRESULT __stdcall get_Status (
        /*[out,retval]*/ enum cdrCommentStatus * pRet ) = 0;
      virtual HRESULT __stdcall raw_Reply (
        /*[in]*/ BSTR Text,
        /*[in]*/ struct IVGCommentAuthor * Author,
        /*[out,retval]*/ struct IVGComment * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_Resolve (
        /*[in]*/ struct IVGCommentAuthor * Author ) = 0;
      virtual HRESULT __stdcall raw_Reopen (
        /*[in]*/ struct IVGCommentAuthor * Author ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall get_PageMarkup (
        /*[out,retval]*/ struct IVGPageMarkup * * pRet ) = 0;
      virtual HRESULT __stdcall get_Annotation (
        /*[out,retval]*/ struct IVGCommentAnnotation * * pRet ) = 0;
};

struct __declspec(uuid("b05800e9-9aa4-44fd-9547-4f91eb757ac4"))
IVGComment : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetCreationTime,put=PutCreationTime))
    DATE CreationTime;
    __declspec(property(get=GetModificationTime,put=PutModificationTime))
    DATE ModificationTime;
    __declspec(property(get=GetGuid))
    _bstr_t Guid;
    __declspec(property(get=GetThread))
    IVGCommentThreadPtr Thread;
    __declspec(property(get=GetOnlineID,put=PutOnlineID))
    _bstr_t OnlineID;

    //
    // Wrapper methods for error-handling
    //

    IVGCommentAuthorPtr GetAuthor ( );
    void PutRefAuthor (
        struct IVGCommentAuthor * * pRet );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t pRet );
    DATE GetCreationTime ( );
    void PutCreationTime (
        DATE pRet );
    DATE GetModificationTime ( );
    void PutModificationTime (
        DATE pRet );
    _bstr_t GetGuid ( );
    IVGCommentThreadPtr GetThread ( );
    _bstr_t GetOnlineID ( );
    void PutOnlineID (
        _bstr_t pRet );
    HRESULT Delete ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Author (
        /*[out,retval]*/ struct IVGCommentAuthor * * pRet ) = 0;
      virtual HRESULT __stdcall putref_Author (
        /*[in]*/ struct IVGCommentAuthor * * pRet ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ BSTR * pRet ) = 0;
      virtual HRESULT __stdcall put_Text (
        /*[in]*/ BSTR pRet ) = 0;
      virtual HRESULT __stdcall get_CreationTime (
        /*[out,retval]*/ DATE * pRet ) = 0;
      virtual HRESULT __stdcall put_CreationTime (
        /*[in]*/ DATE pRet ) = 0;
      virtual HRESULT __stdcall get_ModificationTime (
        /*[out,retval]*/ DATE * pRet ) = 0;
      virtual HRESULT __stdcall put_ModificationTime (
        /*[in]*/ DATE pRet ) = 0;
      virtual HRESULT __stdcall get_Guid (
        /*[out,retval]*/ BSTR * pRet ) = 0;
      virtual HRESULT __stdcall get_Thread (
        /*[out,retval]*/ struct IVGCommentThread * * pRet ) = 0;
      virtual HRESULT __stdcall get_OnlineID (
        /*[out,retval]*/ BSTR * pRet ) = 0;
      virtual HRESULT __stdcall put_OnlineID (
        /*[in]*/ BSTR pRet ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
};

struct __declspec(uuid("b05800e4-9aa4-44fd-9547-4f91eb757ac4"))
IVGComments : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IVGCommentPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetFirst))
    IVGCommentPtr First;
    __declspec(property(get=GetLast))
    IVGCommentPtr Last;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IVGCommentPtr GetItem (
        const _variant_t & IndexOrGuid );
    IUnknownPtr Get_NewEnum ( );
    long GetCount ( );
    IVGCommentPtr GetFirst ( );
    IVGCommentPtr GetLast ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT IndexOrGuid,
        /*[out,retval]*/ struct IVGComment * * ppVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * pVal ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_First (
        /*[out,retval]*/ struct IVGComment * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Last (
        /*[out,retval]*/ struct IVGComment * * ppVal ) = 0;
};

struct __declspec(uuid("b05800e0-9aa4-44fd-9547-4f91eb757ac4"))
IVGDocumentMarkup : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    IVGCommentPtr FindComment (
        _bstr_t Guid );
    IVGCommentThreadPtr FindThread (
        _bstr_t Guid );
    IVGPagePtr FindPage (
        _bstr_t Guid );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_FindComment (
        /*[in]*/ BSTR Guid,
        /*[out,retval]*/ struct IVGComment * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_FindThread (
        /*[in]*/ BSTR Guid,
        /*[out,retval]*/ struct IVGCommentThread * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_FindPage (
        /*[in]*/ BSTR Guid,
        /*[out,retval]*/ struct IVGPage * * ppVal ) = 0;
};

struct __declspec(uuid("b0580081-9aa4-44fd-9547-4f91eb757ac4"))
IVGWindow : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    IDispatchPtr Application;
    __declspec(property(get=GetParent))
    IVGWindowsPtr Parent;
    __declspec(property(get=GetFullScreen,put=PutFullScreen))
    VARIANT_BOOL FullScreen;
    __declspec(property(get=GetPage))
    IDispatchPtr Page;
    __declspec(property(get=GetActive))
    VARIANT_BOOL Active;
    __declspec(property(get=GetCaption))
    _bstr_t Caption;
    __declspec(property(get=GetHeight,put=PutHeight))
    long Height;
    __declspec(property(get=GetWidth,put=PutWidth))
    long Width;
    __declspec(property(get=GetLeft,put=PutLeft))
    long Left;
    __declspec(property(get=GetTop,put=PutTop))
    long Top;
    __declspec(property(get=GetWindowState,put=PutWindowState))
    enum cdrWindowState WindowState;
    __declspec(property(get=GetPrevious))
    IVGWindowPtr Previous;
    __declspec(property(get=GetNext))
    IVGWindowPtr Next;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetDocument))
    IVGDocumentPtr Document;
    __declspec(property(get=GetActiveView))
    IVGActiveViewPtr ActiveView;
    __declspec(property(get=GetHandle))
    long Handle;
    __declspec(property(get=GetViewWindow))
    ICUIViewWindowPtr ViewWindow;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetApplication ( );
    IVGWindowsPtr GetParent ( );
    HRESULT Activate ( );
    HRESULT Close ( );
    VARIANT_BOOL GetFullScreen ( );
    void PutFullScreen (
        VARIANT_BOOL FullScreen );
    IDispatchPtr GetPage ( );
    VARIANT_BOOL GetActive ( );
    _bstr_t GetCaption ( );
    long GetHeight ( );
    void PutHeight (
        long pVal );
    long GetWidth ( );
    void PutWidth (
        long pVal );
    long GetLeft ( );
    void PutLeft (
        long pVal );
    long GetTop ( );
    void PutTop (
        long pVal );
    enum cdrWindowState GetWindowState ( );
    void PutWindowState (
        enum cdrWindowState pVal );
    IVGWindowPtr GetPrevious ( );
    IVGWindowPtr GetNext ( );
    long GetIndex ( );
    IVGWindowPtr NewWindow ( );
    HRESULT Refresh ( );
    IVGDocumentPtr GetDocument ( );
    IVGActiveViewPtr GetActiveView ( );
    HRESULT ScreenToDocument (
        long XScreen,
        long YScreen,
        double * XDoc,
        double * YDoc );
    HRESULT DocumentToScreen (
        double XDoc,
        double YDoc,
        long * XScreen,
        long * YScreen );
    long GetHandle ( );
    ICUIViewWindowPtr GetViewWindow ( );
    double ScreenDistanceToDocumentDistance (
        double ScreenDistance );
    double DocumentDistanceToScreenDistance (
        double DocumentDistance );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ IDispatch * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ struct IVGWindows * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_Activate ( ) = 0;
      virtual HRESULT __stdcall raw_Close ( ) = 0;
      virtual HRESULT __stdcall get_FullScreen (
        /*[out,retval]*/ VARIANT_BOOL * FullScreen ) = 0;
      virtual HRESULT __stdcall put_FullScreen (
        /*[in]*/ VARIANT_BOOL FullScreen ) = 0;
      virtual HRESULT __stdcall get_Page (
        /*[out,retval]*/ IDispatch * * Page ) = 0;
      virtual HRESULT __stdcall get_Active (
        /*[out,retval]*/ VARIANT_BOOL * pActive ) = 0;
      virtual HRESULT __stdcall get_Caption (
        /*[out,retval]*/ BSTR * pbstrName ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_WindowState (
        /*[out,retval]*/ enum cdrWindowState * pVal ) = 0;
      virtual HRESULT __stdcall put_WindowState (
        /*[in]*/ enum cdrWindowState pVal ) = 0;
      virtual HRESULT __stdcall get_Previous (
        /*[out,retval]*/ struct IVGWindow * * pWindow ) = 0;
      virtual HRESULT __stdcall get_Next (
        /*[out,retval]*/ struct IVGWindow * * pWindow ) = 0;
      virtual HRESULT __stdcall get_Index (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_NewWindow (
        /*[out,retval]*/ struct IVGWindow * * pWindow ) = 0;
      virtual HRESULT __stdcall raw_Refresh ( ) = 0;
      virtual HRESULT __stdcall get_Document (
        /*[out,retval]*/ struct IVGDocument * * pDoc ) = 0;
      virtual HRESULT __stdcall get_ActiveView (
        /*[out,retval]*/ struct IVGActiveView * * pActiveView ) = 0;
      virtual HRESULT __stdcall raw_ScreenToDocument (
        /*[in]*/ long XScreen,
        /*[in]*/ long YScreen,
        /*[out]*/ double * XDoc,
        /*[out]*/ double * YDoc ) = 0;
      virtual HRESULT __stdcall raw_DocumentToScreen (
        /*[in]*/ double XDoc,
        /*[in]*/ double YDoc,
        /*[out]*/ long * XScreen,
        /*[out]*/ long * YScreen ) = 0;
      virtual HRESULT __stdcall get_Handle (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_ViewWindow (
        /*[out,retval]*/ struct ICUIViewWindow * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_ScreenDistanceToDocumentDistance (
        /*[in]*/ double ScreenDistance,
        /*[out,retval]*/ double * DocumentDistance ) = 0;
      virtual HRESULT __stdcall raw_DocumentDistanceToScreenDistance (
        /*[in]*/ double DocumentDistance,
        /*[out,retval]*/ double * ScreenDistance ) = 0;
};

struct __declspec(uuid("b0580082-9aa4-44fd-9547-4f91eb757ac4"))
IVGWindows : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    IDispatchPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetItem))
    IVGWindowPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    IVGWindowPtr GetItem (
        long Index );
    IUnknownPtr Get_NewEnum ( );
    long GetCount ( );
    HRESULT CloseAll ( );
    HRESULT Arrange (
        enum cdrWindowArrangeStyle Style );
    HRESULT Refresh ( );
    IVGWindowPtr FindWindow (
        _bstr_t Caption );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ IDispatch * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IVGWindow * * ppVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * pVal ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_CloseAll ( ) = 0;
      virtual HRESULT __stdcall raw_Arrange (
        /*[in]*/ enum cdrWindowArrangeStyle Style ) = 0;
      virtual HRESULT __stdcall raw_Refresh ( ) = 0;
      virtual HRESULT __stdcall raw_FindWindow (
        /*[in]*/ BSTR Caption,
        /*[out,retval]*/ struct IVGWindow * * ppVal ) = 0;
};

struct __declspec(uuid("b058000a-9aa4-44fd-9547-4f91eb757ac4"))
IVGActiveView : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    IVGApplicationPtr Application;
    __declspec(property(get=GetParent))
    IVGWindowPtr Parent;
    __declspec(property(get=GetType,put=PutType))
    enum cdrViewType Type;
    __declspec(property(get=GetOriginX,put=PutOriginX))
    double OriginX;
    __declspec(property(get=GetOriginY,put=PutOriginY))
    double OriginY;
    __declspec(property(get=GetZoom,put=PutZoom))
    double Zoom;
    __declspec(property(get=GetSimulateOverprints,put=PutSimulateOverprints))
    VARIANT_BOOL SimulateOverprints;
    __declspec(property(get=GetProofColorSettings,put=PutProofColorSettings))
    IVGProofColorSettingsPtr ProofColorSettings;
    __declspec(property(get=GetShowProofColors,put=PutShowProofColors))
    VARIANT_BOOL ShowProofColors;

    //
    // Wrapper methods for error-handling
    //

    IVGApplicationPtr GetApplication ( );
    IVGWindowPtr GetParent ( );
    enum cdrViewType GetType ( );
    void PutType (
        enum cdrViewType pType );
    double GetOriginX ( );
    void PutOriginX (
        double pVal );
    double GetOriginY ( );
    void PutOriginY (
        double pVal );
    double GetZoom ( );
    void PutZoom (
        double pVal );
    HRESULT ToFitPage ( );
    HRESULT ToFitPageWidth ( );
    HRESULT ToFitPageHeight ( );
    HRESULT ToFitShape (
        struct IVGShape * Shape );
    HRESULT ToFitSelection ( );
    HRESULT ToFitArea (
        double Left,
        double Top,
        double Right,
        double Bottom );
    HRESULT ToFitAllObjects ( );
    HRESULT ToFitShapeRange (
        struct IVGShapeRange * ShapeRange );
    HRESULT SetViewPoint (
        double x,
        double y,
        double Zoom );
    HRESULT SetActualSize ( );
    HRESULT ZoomIn ( );
    HRESULT ZoomInAtPoint (
        double x,
        double y );
    HRESULT ZoomOut ( );
    HRESULT GetViewArea (
        double * x,
        double * y,
        double * Width,
        double * Height );
    HRESULT SetViewArea (
        double x,
        double y,
        double Width,
        double Height );
    VARIANT_BOOL GetSimulateOverprints ( );
    void PutSimulateOverprints (
        VARIANT_BOOL pVal );
    IVGProofColorSettingsPtr GetProofColorSettings ( );
    void PutProofColorSettings (
        struct IVGProofColorSettings * ppVal );
    VARIANT_BOOL GetShowProofColors ( );
    void PutShowProofColors (
        VARIANT_BOOL pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct IVGApplication * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ struct IVGWindow * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum cdrViewType * pType ) = 0;
      virtual HRESULT __stdcall put_Type (
        /*[in]*/ enum cdrViewType pType ) = 0;
      virtual HRESULT __stdcall get_OriginX (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_OriginX (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_OriginY (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_OriginY (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Zoom (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Zoom (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall raw_ToFitPage ( ) = 0;
      virtual HRESULT __stdcall raw_ToFitPageWidth ( ) = 0;
      virtual HRESULT __stdcall raw_ToFitPageHeight ( ) = 0;
      virtual HRESULT __stdcall raw_ToFitShape (
        /*[in]*/ struct IVGShape * Shape ) = 0;
      virtual HRESULT __stdcall raw_ToFitSelection ( ) = 0;
      virtual HRESULT __stdcall raw_ToFitArea (
        /*[in]*/ double Left,
        /*[in]*/ double Top,
        /*[in]*/ double Right,
        /*[in]*/ double Bottom ) = 0;
      virtual HRESULT __stdcall raw_ToFitAllObjects ( ) = 0;
      virtual HRESULT __stdcall raw_ToFitShapeRange (
        /*[in]*/ struct IVGShapeRange * ShapeRange ) = 0;
      virtual HRESULT __stdcall raw_SetViewPoint (
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[in]*/ double Zoom ) = 0;
      virtual HRESULT __stdcall raw_SetActualSize ( ) = 0;
      virtual HRESULT __stdcall raw_ZoomIn ( ) = 0;
      virtual HRESULT __stdcall raw_ZoomInAtPoint (
        /*[in]*/ double x,
        /*[in]*/ double y ) = 0;
      virtual HRESULT __stdcall raw_ZoomOut ( ) = 0;
      virtual HRESULT __stdcall raw_GetViewArea (
        /*[out]*/ double * x,
        /*[out]*/ double * y,
        /*[out]*/ double * Width,
        /*[out]*/ double * Height ) = 0;
      virtual HRESULT __stdcall raw_SetViewArea (
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[in]*/ double Width,
        /*[in]*/ double Height ) = 0;
      virtual HRESULT __stdcall get_SimulateOverprints (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_SimulateOverprints (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_ProofColorSettings (
        /*[out,retval]*/ struct IVGProofColorSettings * * ppVal ) = 0;
      virtual HRESULT __stdcall put_ProofColorSettings (
        /*[in]*/ struct IVGProofColorSettings * ppVal ) = 0;
      virtual HRESULT __stdcall get_ShowProofColors (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_ShowProofColors (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
};

struct __declspec(uuid("b0580083-9aa4-44fd-9547-4f91eb757ac4"))
IVGWorkspace : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    IDispatchPtr Application;
    __declspec(property(get=GetParent))
    IVGWorkspacesPtr Parent;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetDefault))
    VARIANT_BOOL Default;
    __declspec(property(get=GetActive))
    VARIANT_BOOL Active;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetApplication ( );
    IVGWorkspacesPtr GetParent ( );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    VARIANT_BOOL GetDefault ( );
    HRESULT Activate ( );
    VARIANT_BOOL GetActive ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ IDispatch * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ struct IVGWorkspaces * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * Name ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * Description ) = 0;
      virtual HRESULT __stdcall get_Default (
        /*[out,retval]*/ VARIANT_BOOL * Default ) = 0;
      virtual HRESULT __stdcall raw_Activate ( ) = 0;
      virtual HRESULT __stdcall get_Active (
        /*[out,retval]*/ VARIANT_BOOL * Current ) = 0;
};

struct __declspec(uuid("b0580084-9aa4-44fd-9547-4f91eb757ac4"))
IVGWorkspaces : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    IDispatchPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetItem))
    IVGWorkspacePtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    IVGWorkspacePtr GetItem (
        const _variant_t & IndexOrName );
    IUnknownPtr Get_NewEnum ( );
    long GetCount ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ IDispatch * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT IndexOrName,
        /*[out,retval]*/ struct IVGWorkspace * * ppVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * pVal ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pVal ) = 0;
};

struct __declspec(uuid("b0580056-9aa4-44fd-9547-4f91eb757ac4"))
IVGRecentFiles : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IVGRecentFilePtr Item[];
    __declspec(property(get=GetApplication))
    IDispatchPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetMaximum))
    long Maximum;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IVGRecentFilePtr Add (
        _bstr_t Name,
        _bstr_t Path );
    IDispatchPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    IVGRecentFilePtr GetItem (
        long Index );
    IUnknownPtr Get_NewEnum ( );
    long GetCount ( );
    long GetMaximum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Path,
        /*[out,retval]*/ struct IVGRecentFile * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ IDispatch * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IVGRecentFile * * ppVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * pVal ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_Maximum (
        /*[out,retval]*/ long * pVal ) = 0;
};

struct __declspec(uuid("b0580055-9aa4-44fd-9547-4f91eb757ac4"))
IVGRecentFile : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    IDispatchPtr Application;
    __declspec(property(get=GetParent))
    IVGRecentFilesPtr Parent;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetPath,put=PutPath))
    _bstr_t Path;
    __declspec(property(get=GetFullName,put=PutFullName))
    _bstr_t FullName;

    //
    // Wrapper methods for error-handling
    //

    HRESULT Delete ( );
    IDispatchPtr Open ( );
    IDispatchPtr GetApplication ( );
    IVGRecentFilesPtr GetParent ( );
    long GetIndex ( );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t pVal );
    _bstr_t GetPath ( );
    void PutPath (
        _bstr_t pVal );
    _bstr_t GetFullName ( );
    void PutFullName (
        _bstr_t pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall raw_Open (
        /*[out,retval]*/ IDispatch * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ IDispatch * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ struct IVGRecentFiles * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Index (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Path (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_FullName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_FullName (
        /*[in]*/ BSTR pVal ) = 0;
};

struct __declspec(uuid("b058004b-9aa4-44fd-9547-4f91eb757ac4"))
IVGPageSizes : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IVGApplicationPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetItem))
    IVGPageSizePtr Item[];
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IVGApplicationPtr GetParent ( );
    long GetCount ( );
    IVGPageSizePtr GetItem (
        const _variant_t & IndexOrName );
    IUnknownPtr Get_NewEnum ( );
    IVGPageSizePtr Add (
        _bstr_t Name,
        double Width,
        double Height );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ struct IVGApplication * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT IndexOrName,
        /*[out,retval]*/ struct IVGPageSize * * ppVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * pVal ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ BSTR Name,
        /*[in]*/ double Width,
        /*[in]*/ double Height,
        /*[out,retval]*/ struct IVGPageSize * * ppVal ) = 0;
};

struct __declspec(uuid("b058004a-9aa4-44fd-9547-4f91eb757ac4"))
IVGPageSize : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IVGPageSizesPtr Parent;
    __declspec(property(get=GetBuiltIn))
    VARIANT_BOOL BuiltIn;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetFixedOrientation))
    VARIANT_BOOL FixedOrientation;
    __declspec(property(get=GetDefaultUnit))
    enum cdrUnit DefaultUnit;

    //
    // Wrapper methods for error-handling
    //

    IVGPageSizesPtr GetParent ( );
    VARIANT_BOOL GetBuiltIn ( );
    _bstr_t GetName ( );
    double GetWidth ( );
    void PutWidth (
        double pVal );
    double GetHeight ( );
    void PutHeight (
        double pVal );
    long GetIndex ( );
    HRESULT Delete ( );
    VARIANT_BOOL GetFixedOrientation ( );
    enum cdrUnit GetDefaultUnit ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ struct IVGPageSizes * * ppVal ) = 0;
      virtual HRESULT __stdcall get_BuiltIn (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_Index (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall get_FixedOrientation (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_DefaultUnit (
        /*[out,retval]*/ enum cdrUnit * pVal ) = 0;
};

struct __declspec(uuid("b0580080-9aa4-44fd-9547-4f91eb757ac4"))
IVGViews : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    IVGApplicationPtr Application;
    __declspec(property(get=GetParent))
    IVGDocumentPtr Parent;
    __declspec(property(get=GetItem))
    IVGViewPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IVGApplicationPtr GetApplication ( );
    IVGDocumentPtr GetParent ( );
    IVGViewPtr GetItem (
        const _variant_t & IndexOrName );
    IUnknownPtr Get_NewEnum ( );
    long GetCount ( );
    IVGViewPtr AddActiveView (
        _bstr_t Name );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct IVGApplication * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ struct IVGDocument * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT IndexOrName,
        /*[out,retval]*/ struct IVGView * * ppVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * pVal ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_AddActiveView (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ struct IVGView * * ppVal ) = 0;
};

struct __declspec(uuid("b058007f-9aa4-44fd-9547-4f91eb757ac4"))
IVGView : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    IVGApplicationPtr Application;
    __declspec(property(get=GetParent))
    IVGViewsPtr Parent;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetOriginX,put=PutOriginX))
    double OriginX;
    __declspec(property(get=GetOriginY,put=PutOriginY))
    double OriginY;
    __declspec(property(get=GetUsePage,put=PutUsePage))
    VARIANT_BOOL UsePage;
    __declspec(property(get=GetPage,put=PutPage))
    IVGPagePtr Page;
    __declspec(property(get=GetUseZoom,put=PutUseZoom))
    VARIANT_BOOL UseZoom;
    __declspec(property(get=GetZoom,put=PutZoom))
    double Zoom;

    //
    // Wrapper methods for error-handling
    //

    IVGApplicationPtr GetApplication ( );
    IVGViewsPtr GetParent ( );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t Name );
    double GetOriginX ( );
    void PutOriginX (
        double pVal );
    double GetOriginY ( );
    void PutOriginY (
        double pVal );
    VARIANT_BOOL GetUsePage ( );
    void PutUsePage (
        VARIANT_BOOL pVal );
    IVGPagePtr GetPage ( );
    void PutPage (
        struct IVGPage * Page );
    VARIANT_BOOL GetUseZoom ( );
    void PutUseZoom (
        VARIANT_BOOL pVal );
    double GetZoom ( );
    void PutZoom (
        double pVal );
    HRESULT Activate ( );
    HRESULT Delete ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct IVGApplication * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ struct IVGViews * * ppVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * Name ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR Name ) = 0;
      virtual HRESULT __stdcall get_OriginX (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_OriginX (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_OriginY (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_OriginY (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_UsePage (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_UsePage (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Page (
        /*[out,retval]*/ struct IVGPage * * Page ) = 0;
      virtual HRESULT __stdcall put_Page (
        /*[in]*/ struct IVGPage * Page ) = 0;
      virtual HRESULT __stdcall get_UseZoom (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_UseZoom (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Zoom (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_Zoom (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall raw_Activate ( ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
};

//
// Function implementation mapping
//

#pragma start_map_region("R:\lycpg64\obj\Release\vgcoreauto.tli")
__declspec(implementation_key(1)) HRESULT ICorelImportFilter::Reset ( );
__declspec(implementation_key(2)) HRESULT ICorelImportFilter::Finish ( );
__declspec(implementation_key(3)) VARIANT_BOOL ICorelImportFilter::GetHasDialog ( );
__declspec(implementation_key(4)) VARIANT_BOOL ICorelImportFilter::ShowDialog ( long hWnd );
__declspec(implementation_key(5)) HRESULT ICorelExportFilter::Reset ( );
__declspec(implementation_key(6)) HRESULT ICorelExportFilter::Finish ( );
__declspec(implementation_key(7)) VARIANT_BOOL ICorelExportFilter::GetHasDialog ( );
__declspec(implementation_key(8)) VARIANT_BOOL ICorelExportFilter::ShowDialog ( long hWnd );
__declspec(implementation_key(9)) _variant_t ICUIControlData::GetValue ( _bstr_t PropertyName );
__declspec(implementation_key(10)) long ICUIAutomation::GetNumItemsOnBar ( _bstr_t GuidBar );
__declspec(implementation_key(11)) _bstr_t ICUIAutomation::GetItem ( _bstr_t GuidBar, long Index, VARIANT_BOOL * HasSubBar );
__declspec(implementation_key(12)) long ICUIAutomation::GetItemInstanceHwnd ( _bstr_t GuidParent, _bstr_t GuidItem );
__declspec(implementation_key(13)) VARIANT_BOOL ICUIAutomation::GetSubBar ( _bstr_t GuidBar, BSTR * GuidSubBar );
__declspec(implementation_key(14)) VARIANT_BOOL ICUIAutomation::ShowBar ( _bstr_t GuidBar, VARIANT_BOOL Show );
__declspec(implementation_key(15)) _bstr_t ICUIAutomation::GetCaptionText ( _bstr_t GuidItem );
__declspec(implementation_key(16)) HRESULT ICUIAutomation::Invoke ( _bstr_t GuidItem );
__declspec(implementation_key(17)) VARIANT_BOOL ICUIAutomation::IsEnabled ( _bstr_t GuidItem );
__declspec(implementation_key(18)) VARIANT_BOOL ICUIAutomation::GetItemScreenRect ( _bstr_t GuidParent, _bstr_t GuidItem, long * TopLeftX, long * TopLeftY, long * Width, long * Height );
__declspec(implementation_key(19)) HRESULT ICUIAutomation::InvokeItem ( _bstr_t GuidItem );
__declspec(implementation_key(20)) HRESULT ICUIAutomation::InvokeDialogItem ( _bstr_t GuidDialog, _bstr_t GuidItem );
__declspec(implementation_key(21)) ICUIControlDataPtr ICUIAutomation::GetControlData ( _bstr_t Guid );
__declspec(implementation_key(22)) ICUIControlDataPtr ICUIAutomation::GetControlDataEx ( _bstr_t GuidParent, _bstr_t Guid );
__declspec(implementation_key(23)) VARIANT_BOOL ICUIAutomation::GetActiveMenuItemScreenRect ( int itemIndex, long * TopLeftX, long * TopLeftY, long * Width, long * Height );
__declspec(implementation_key(24)) _bstr_t ICUIAutomation::GetActiveMenuItemGuid ( int itemIndex );
__declspec(implementation_key(25)) _bstr_t ICUIControl::GetCaption ( );
__declspec(implementation_key(26)) void ICUIControl::PutCaption ( _bstr_t pVal );
__declspec(implementation_key(27)) _bstr_t ICUIControl::GetDescriptionText ( );
__declspec(implementation_key(28)) void ICUIControl::PutDescriptionText ( _bstr_t pVal );
__declspec(implementation_key(29)) long ICUIControl::GetHeight ( );
__declspec(implementation_key(30)) void ICUIControl::PutHeight ( long pVal );
__declspec(implementation_key(31)) long ICUIControl::GetWidth ( );
__declspec(implementation_key(32)) void ICUIControl::PutWidth ( long pVal );
__declspec(implementation_key(33)) _bstr_t ICUIControl::GetID ( );
__declspec(implementation_key(34)) _variant_t ICUIControl::GetParameter ( );
__declspec(implementation_key(35)) void ICUIControl::PutParameter ( const _variant_t & pVal );
__declspec(implementation_key(36)) _bstr_t ICUIControl::GetTag ( );
__declspec(implementation_key(37)) void ICUIControl::PutTag ( _bstr_t pVal );
__declspec(implementation_key(38)) _bstr_t ICUIControl::GetToolTipText ( );
__declspec(implementation_key(39)) void ICUIControl::PutToolTipText ( _bstr_t pVal );
__declspec(implementation_key(40)) VARIANT_BOOL ICUIControl::GetVisible ( );
__declspec(implementation_key(41)) void ICUIControl::PutVisible ( VARIANT_BOOL pVal );
__declspec(implementation_key(42)) HRESULT ICUIControl::SetIcon ( long RowIndex, long ColumnIndex );
__declspec(implementation_key(43)) HRESULT ICUIControl::SetCustomIcon ( _bstr_t ImageFile );
__declspec(implementation_key(44)) HRESULT ICUIControl::SetIcon2 ( _bstr_t Icon );
__declspec(implementation_key(45)) long ICUIControls::GetCount ( );
__declspec(implementation_key(46)) ICUIControlPtr ICUIControls::GetItem ( long Index );
__declspec(implementation_key(47)) IUnknownPtr ICUIControls::Get_NewEnum ( );
__declspec(implementation_key(48)) ICUIControlPtr ICUIControls::Add ( _bstr_t ControlID, long Index, VARIANT_BOOL Temporary );
__declspec(implementation_key(49)) ICUIControlPtr ICUIControls::AddCustomButton ( _bstr_t CategoryID, _bstr_t Command, long Index, VARIANT_BOOL Temporary );
__declspec(implementation_key(50)) ICUIControlPtr ICUIControls::AddCustomControl ( _bstr_t ClassName, _bstr_t AssemblyPath, long Index, VARIANT_BOOL Temporary );
__declspec(implementation_key(51)) ICUIControlPtr ICUIControls::AddToggleButton ( _bstr_t Guid, long Index, VARIANT_BOOL Temporary );
__declspec(implementation_key(52)) HRESULT ICUIControls::Remove ( long Index );
__declspec(implementation_key(53)) _bstr_t ICUICommandBarMode::GetName ( );
__declspec(implementation_key(54)) _bstr_t ICUICommandBarMode::GetNameLocal ( );
__declspec(implementation_key(55)) ICUIControlsPtr ICUICommandBarMode::GetControls ( );
__declspec(implementation_key(56)) ICUICommandBarModePtr ICUICommandBarModes::GetItem ( const _variant_t & IndexOrName );
__declspec(implementation_key(57)) long ICUICommandBarModes::GetCount ( );
__declspec(implementation_key(58)) IUnknownPtr ICUICommandBarModes::Get_NewEnum ( );
__declspec(implementation_key(59)) enum cuiBarType ICUICommandBar::GetType ( );
__declspec(implementation_key(60)) VARIANT_BOOL ICUICommandBar::GetVisible ( );
__declspec(implementation_key(61)) void ICUICommandBar::PutVisible ( VARIANT_BOOL pVal );
__declspec(implementation_key(62)) ICUIControlsPtr ICUICommandBar::GetControls ( );
__declspec(implementation_key(63)) ICUICommandBarModesPtr ICUICommandBar::GetModes ( );
__declspec(implementation_key(64)) VARIANT_BOOL ICUICommandBar::GetBuiltIn ( );
__declspec(implementation_key(65)) VARIANT_BOOL ICUICommandBar::GetEnabled ( );
__declspec(implementation_key(66)) void ICUICommandBar::PutEnabled ( VARIANT_BOOL pVal );
__declspec(implementation_key(67)) long ICUICommandBar::GetLeft ( );
__declspec(implementation_key(68)) void ICUICommandBar::PutLeft ( long pVal );
__declspec(implementation_key(69)) long ICUICommandBar::GetTop ( );
__declspec(implementation_key(70)) void ICUICommandBar::PutTop ( long pVal );
__declspec(implementation_key(71)) long ICUICommandBar::GetHeight ( );
__declspec(implementation_key(72)) long ICUICommandBar::GetWidth ( );
__declspec(implementation_key(73)) long ICUICommandBar::GetIndex ( );
__declspec(implementation_key(74)) _bstr_t ICUICommandBar::GetName ( );
__declspec(implementation_key(75)) void ICUICommandBar::PutName ( _bstr_t pVal );
__declspec(implementation_key(76)) _bstr_t ICUICommandBar::GetNameLocal ( );
__declspec(implementation_key(77)) void ICUICommandBar::PutNameLocal ( _bstr_t pVal );
__declspec(implementation_key(78)) enum cuiBarPosition ICUICommandBar::GetPosition ( );
__declspec(implementation_key(79)) void ICUICommandBar::PutPosition ( enum cuiBarPosition pVal );
__declspec(implementation_key(80)) enum cuiBarProtection ICUICommandBar::GetProtection ( );
__declspec(implementation_key(81)) void ICUICommandBar::PutProtection ( enum cuiBarProtection pVal );
__declspec(implementation_key(82)) HRESULT ICUICommandBar::Delete ( );
__declspec(implementation_key(83)) HRESULT ICUICommandBar::Reset ( );
__declspec(implementation_key(84)) HRESULT ICUICommandBar::ShowPopup ( const _variant_t & x, const _variant_t & y );
__declspec(implementation_key(85)) HRESULT ICUICommandBar::SetWidth ( long Width );
__declspec(implementation_key(86)) ICUICommandBarPtr ICUICommandBars::GetItem ( const _variant_t & IndexOrName );
__declspec(implementation_key(87)) long ICUICommandBars::GetCount ( );
__declspec(implementation_key(88)) IUnknownPtr ICUICommandBars::Get_NewEnum ( );
__declspec(implementation_key(89)) ICUICommandBarPtr ICUICommandBars::Add ( _bstr_t Name, enum cuiBarPosition Position, VARIANT_BOOL Temporary );
__declspec(implementation_key(90)) long ICUIScreenRect::GetLeft ( );
__declspec(implementation_key(91)) void ICUIScreenRect::PutLeft ( long pVal );
__declspec(implementation_key(92)) long ICUIScreenRect::GetRight ( );
__declspec(implementation_key(93)) void ICUIScreenRect::PutRight ( long pVal );
__declspec(implementation_key(94)) long ICUIScreenRect::GetTop ( );
__declspec(implementation_key(95)) void ICUIScreenRect::PutTop ( long pVal );
__declspec(implementation_key(96)) long ICUIScreenRect::GetBottom ( );
__declspec(implementation_key(97)) void ICUIScreenRect::PutBottom ( long pVal );
__declspec(implementation_key(98)) long ICUIScreenRect::GetWidth ( );
__declspec(implementation_key(99)) void ICUIScreenRect::PutWidth ( long pVal );
__declspec(implementation_key(100)) long ICUIScreenRect::GetHeight ( );
__declspec(implementation_key(101)) void ICUIScreenRect::PutHeight ( long pVal );
__declspec(implementation_key(102)) long ICUIScreenRect::GetCenterX ( );
__declspec(implementation_key(103)) void ICUIScreenRect::PutCenterX ( long pVal );
__declspec(implementation_key(104)) long ICUIScreenRect::GetCenterY ( );
__declspec(implementation_key(105)) void ICUIScreenRect::PutCenterY ( long pVal );
__declspec(implementation_key(106)) HRESULT ICUIScreenRect::SetPosition ( long Left, long Top, long Width, long Height );
__declspec(implementation_key(107)) HRESULT ICUIScreenRect::Resize ( long Width, long Height );
__declspec(implementation_key(108)) HRESULT ICUIScreenRect::Move ( long Left, long Top );
__declspec(implementation_key(109)) VARIANT_BOOL ICUIScreenRect::GetReadOnly ( );
__declspec(implementation_key(110)) ICUIScreenRectPtr ICUIScreenRect::GetCopy ( );
__declspec(implementation_key(111)) HRESULT ICUIScreenRect::CopyAssign ( struct ICUIScreenRect * Source );
__declspec(implementation_key(112)) HRESULT ICUIScreenRect::Offset ( long OffsetX, long OffsetY );
__declspec(implementation_key(113)) HRESULT ICUIScreenRect::Inflate ( long Left, long Top, long Right, long Bottom );
__declspec(implementation_key(114)) VARIANT_BOOL ICUIScreenRect::IsPointInside ( long x, long y );
__declspec(implementation_key(115)) ICUIScreenRectPtr ICUIScreenRect::Union ( struct ICUIScreenRect * Source );
__declspec(implementation_key(116)) ICUIScreenRectPtr ICUIScreenRect::Intersect ( struct ICUIScreenRect * Source );
__declspec(implementation_key(117)) VARIANT_BOOL ICUIScreenRect::IsEmpty ( );
__declspec(implementation_key(118)) VARIANT_BOOL ICUIBitmapImage::GetValid ( );
__declspec(implementation_key(119)) long ICUIBitmapImage::GetWidth ( );
__declspec(implementation_key(120)) long ICUIBitmapImage::GetHeight ( );
__declspec(implementation_key(121)) long ICUIImageList::GetImageCount ( );
__declspec(implementation_key(122)) VARIANT_BOOL ICUIImageList::ImageExists ( _bstr_t Key );
__declspec(implementation_key(123)) HRESULT ICUIImageList::RemoveAll ( );
__declspec(implementation_key(124)) VARIANT_BOOL ICUIImageList::AddImage ( _bstr_t Key, const _variant_t & ImageData, long MaxSize );
__declspec(implementation_key(125)) SAFEARRAY * ICUIImageList::GetImageKeys ( );
__declspec(implementation_key(126)) VARIANT_BOOL ICUIImageList::RemoveImage ( _bstr_t Key );
__declspec(implementation_key(127)) HRESULT ICUIImageList::AddBitmap ( _bstr_t Key, struct ICUIBitmapImage * Bitmap );
__declspec(implementation_key(128)) HRESULT ICUIStatusText::SetCaptionText ( _bstr_t Text );
__declspec(implementation_key(129)) HRESULT ICUIStatusText::SetBitmap ( struct ICUIBitmapImage * Bitmap );
__declspec(implementation_key(130)) VARIANT_BOOL ICUIWarning::GetEnabled ( );
__declspec(implementation_key(131)) void ICUIWarning::PutEnabled ( VARIANT_BOOL pVal );
__declspec(implementation_key(132)) _bstr_t ICUIWarning::GetID ( );
__declspec(implementation_key(133)) _bstr_t ICUIWarning::GetDescription ( );
__declspec(implementation_key(134)) _bstr_t ICUIWarning::GetText ( );
__declspec(implementation_key(135)) _bstr_t ICUIWarning::GetTitle ( );
__declspec(implementation_key(136)) long ICUIWarning::DoWarningDialog ( long unFlags, _bstr_t Text );
__declspec(implementation_key(137)) HRESULT ICUITask::RunTask ( );
__declspec(implementation_key(138)) HRESULT ICUIBackgroundTask::FinalizeTask ( );
__declspec(implementation_key(139)) HRESULT ICUIBackgroundTask::FreeTask ( );
__declspec(implementation_key(140)) HRESULT ICUIBackgroundTask::QuitTask ( );
__declspec(implementation_key(141)) _bstr_t ICUIBackgroundTask::GetName ( );
__declspec(implementation_key(142)) HRESULT ICUIRunningTask::TryAbort ( );
__declspec(implementation_key(143)) HRESULT ICUIRunningBackgroundTask::WaitUntilDone ( );
__declspec(implementation_key(144)) HRESULT ICUIRunningBackgroundTask::Reprioritize ( enum cuiTaskPriority __MIDL__ICUIRunningBackgroundTask0000 );
__declspec(implementation_key(145)) VARIANT_BOOL ICUIRunningBackgroundTask::FinalizeIfDone ( );
__declspec(implementation_key(146)) HRESULT ICUITaskManager::RunOnUIThread ( struct ICUITask * pTask );
__declspec(implementation_key(147)) ICUIRunningBackgroundTaskPtr ICUITaskManager::RunInBackground ( enum cuiTaskPriority priority, struct ICUIBackgroundTask * pTask );
__declspec(implementation_key(148)) VARIANT_BOOL IPrnVBAPrintLayout::GetUseBleedLimit ( );
__declspec(implementation_key(149)) void IPrnVBAPrintLayout::PutUseBleedLimit ( VARIANT_BOOL pVal );
__declspec(implementation_key(150)) double IPrnVBAPrintLayout::GetBleedLimit ( );
__declspec(implementation_key(151)) void IPrnVBAPrintLayout::PutBleedLimit ( double pVal );
__declspec(implementation_key(152)) VARIANT_BOOL IPrnVBAPrintLayout::GetPrintTiledPages ( );
__declspec(implementation_key(153)) void IPrnVBAPrintLayout::PutPrintTiledPages ( VARIANT_BOOL pVal );
__declspec(implementation_key(154)) VARIANT_BOOL IPrnVBAPrintLayout::GetPrintTilingMarks ( );
__declspec(implementation_key(155)) void IPrnVBAPrintLayout::PutPrintTilingMarks ( VARIANT_BOOL pVal );
__declspec(implementation_key(156)) double IPrnVBAPrintLayout::GetTileOverlap ( );
__declspec(implementation_key(157)) void IPrnVBAPrintLayout::PutTileOverlap ( double pVal );
__declspec(implementation_key(158)) enum PrnPlaceType IPrnVBAPrintLayout::GetPlacement ( );
__declspec(implementation_key(159)) void IPrnVBAPrintLayout::PutPlacement ( enum PrnPlaceType pVal );
__declspec(implementation_key(160)) _bstr_t IPrnVBAPrinter::GetName ( );
__declspec(implementation_key(161)) _bstr_t IPrnVBAPrinter::GetType ( );
__declspec(implementation_key(162)) VARIANT_BOOL IPrnVBAPrinter::GetDefault ( );
__declspec(implementation_key(163)) VARIANT_BOOL IPrnVBAPrinter::GetReady ( );
__declspec(implementation_key(164)) _bstr_t IPrnVBAPrinter::GetPort ( );
__declspec(implementation_key(165)) _bstr_t IPrnVBAPrinter::GetDescription ( );
__declspec(implementation_key(166)) VARIANT_BOOL IPrnVBAPrinter::GetPostScriptEnabled ( );
__declspec(implementation_key(167)) VARIANT_BOOL IPrnVBAPrinter::GetColorEnabled ( );
__declspec(implementation_key(168)) HRESULT IPrnVBAPrinter::ShowDialog ( );
__declspec(implementation_key(169)) VARIANT_BOOL IPrnVBAPrinter::GetPageSizeMatchingSupported ( );
__declspec(implementation_key(170)) void IPrnVBAPrinter::PutPageSizeMatchingSupported ( VARIANT_BOOL pVal );
__declspec(implementation_key(171)) IPrnVBAPrinterPtr IPrnVBAPrinters::GetItem ( long nIndex );
__declspec(implementation_key(172)) long IPrnVBAPrinters::GetCount ( );
__declspec(implementation_key(173)) IPrnVBAPrinterPtr IPrnVBAPrinters::GetDefault ( );
__declspec(implementation_key(174)) VARIANT_BOOL IPrnVBASeparationPlate::GetEnabled ( );
__declspec(implementation_key(175)) void IPrnVBASeparationPlate::PutEnabled ( VARIANT_BOOL pVal );
__declspec(implementation_key(176)) enum PrnPlateType IPrnVBASeparationPlate::GetType ( );
__declspec(implementation_key(177)) _bstr_t IPrnVBASeparationPlate::GetColor ( );
__declspec(implementation_key(178)) double IPrnVBASeparationPlate::GetFrequency ( );
__declspec(implementation_key(179)) void IPrnVBASeparationPlate::PutFrequency ( double pVal );
__declspec(implementation_key(180)) double IPrnVBASeparationPlate::GetAngle ( );
__declspec(implementation_key(181)) void IPrnVBASeparationPlate::PutAngle ( double pVal );
__declspec(implementation_key(182)) VARIANT_BOOL IPrnVBASeparationPlate::GetOverprintText ( );
__declspec(implementation_key(183)) void IPrnVBASeparationPlate::PutOverprintText ( VARIANT_BOOL pVal );
__declspec(implementation_key(184)) VARIANT_BOOL IPrnVBASeparationPlate::GetOverprintGraphic ( );
__declspec(implementation_key(185)) void IPrnVBASeparationPlate::PutOverprintGraphic ( VARIANT_BOOL pVal );
__declspec(implementation_key(186)) IPrnVBASeparationPlatePtr IPrnVBASeparationPlates::GetItem ( long Index );
__declspec(implementation_key(187)) long IPrnVBASeparationPlates::GetCount ( );
__declspec(implementation_key(188)) VARIANT_BOOL IPrnVBAPrintSeparations::GetEnabled ( );
__declspec(implementation_key(189)) void IPrnVBAPrintSeparations::PutEnabled ( VARIANT_BOOL pVal );
__declspec(implementation_key(190)) VARIANT_BOOL IPrnVBAPrintSeparations::GetInColor ( );
__declspec(implementation_key(191)) void IPrnVBAPrintSeparations::PutInColor ( VARIANT_BOOL pVal );
__declspec(implementation_key(192)) VARIANT_BOOL IPrnVBAPrintSeparations::GetHexachrome ( );
__declspec(implementation_key(193)) void IPrnVBAPrintSeparations::PutHexachrome ( VARIANT_BOOL pVal );
__declspec(implementation_key(194)) VARIANT_BOOL IPrnVBAPrintSeparations::GetSpotToCMYK ( );
__declspec(implementation_key(195)) void IPrnVBAPrintSeparations::PutSpotToCMYK ( VARIANT_BOOL pVal );
__declspec(implementation_key(196)) VARIANT_BOOL IPrnVBAPrintSeparations::GetEmptyPlates ( );
__declspec(implementation_key(197)) void IPrnVBAPrintSeparations::PutEmptyPlates ( VARIANT_BOOL pVal );
__declspec(implementation_key(198)) VARIANT_BOOL IPrnVBAPrintSeparations::GetPreserveOverprints ( );
__declspec(implementation_key(199)) void IPrnVBAPrintSeparations::PutPreserveOverprints ( VARIANT_BOOL pVal );
__declspec(implementation_key(200)) VARIANT_BOOL IPrnVBAPrintSeparations::GetAlwaysOverprintBlack ( );
__declspec(implementation_key(201)) void IPrnVBAPrintSeparations::PutAlwaysOverprintBlack ( VARIANT_BOOL pVal );
__declspec(implementation_key(202)) VARIANT_BOOL IPrnVBAPrintSeparations::GetAutoSpreading ( );
__declspec(implementation_key(203)) void IPrnVBAPrintSeparations::PutAutoSpreading ( VARIANT_BOOL pVal );
__declspec(implementation_key(204)) double IPrnVBAPrintSeparations::GetAutoSpreadAmount ( );
__declspec(implementation_key(205)) void IPrnVBAPrintSeparations::PutAutoSpreadAmount ( double pVal );
__declspec(implementation_key(206)) VARIANT_BOOL IPrnVBAPrintSeparations::GetAutoSpreadFixed ( );
__declspec(implementation_key(207)) void IPrnVBAPrintSeparations::PutAutoSpreadFixed ( VARIANT_BOOL pVal );
__declspec(implementation_key(208)) double IPrnVBAPrintSeparations::GetAutoSpreadTextAbove ( );
__declspec(implementation_key(209)) void IPrnVBAPrintSeparations::PutAutoSpreadTextAbove ( double pVal );
__declspec(implementation_key(210)) VARIANT_BOOL IPrnVBAPrintSeparations::GetAdvancedSettings ( );
__declspec(implementation_key(211)) void IPrnVBAPrintSeparations::PutAdvancedSettings ( VARIANT_BOOL pVal );
__declspec(implementation_key(212)) IPrnVBASeparationPlatesPtr IPrnVBAPrintSeparations::GetPlates ( );
__declspec(implementation_key(213)) long IPrnVBAPrintSeparations::GetResolution ( );
__declspec(implementation_key(214)) void IPrnVBAPrintSeparations::PutResolution ( long pVal );
__declspec(implementation_key(215)) _bstr_t IPrnVBAPrintSeparations::GetBasicScreen ( );
__declspec(implementation_key(216)) void IPrnVBAPrintSeparations::PutBasicScreen ( _bstr_t pVal );
__declspec(implementation_key(217)) _bstr_t IPrnVBAPrintSeparations::GetHalftoneType ( );
__declspec(implementation_key(218)) void IPrnVBAPrintSeparations::PutHalftoneType ( _bstr_t pVal );
__declspec(implementation_key(219)) _bstr_t IPrnVBAPrintSeparations::GetScreenTechnology ( );
__declspec(implementation_key(220)) void IPrnVBAPrintSeparations::PutScreenTechnology ( _bstr_t pVal );
__declspec(implementation_key(221)) VARIANT_BOOL IPrnVBAPrintPrepress::GetInvert ( );
__declspec(implementation_key(222)) void IPrnVBAPrintPrepress::PutInvert ( VARIANT_BOOL pVal );
__declspec(implementation_key(223)) VARIANT_BOOL IPrnVBAPrintPrepress::GetMirror ( );
__declspec(implementation_key(224)) void IPrnVBAPrintPrepress::PutMirror ( VARIANT_BOOL pVal );
__declspec(implementation_key(225)) VARIANT_BOOL IPrnVBAPrintPrepress::GetFileInfo ( );
__declspec(implementation_key(226)) void IPrnVBAPrintPrepress::PutFileInfo ( VARIANT_BOOL pVal );
__declspec(implementation_key(227)) _bstr_t IPrnVBAPrintPrepress::GetJobName ( );
__declspec(implementation_key(228)) void IPrnVBAPrintPrepress::PutJobName ( _bstr_t pVal );
__declspec(implementation_key(229)) VARIANT_BOOL IPrnVBAPrintPrepress::GetPageNumbers ( );
__declspec(implementation_key(230)) void IPrnVBAPrintPrepress::PutPageNumbers ( VARIANT_BOOL pVal );
__declspec(implementation_key(231)) VARIANT_BOOL IPrnVBAPrintPrepress::GetInfoWithinPage ( );
__declspec(implementation_key(232)) void IPrnVBAPrintPrepress::PutInfoWithinPage ( VARIANT_BOOL pVal );
__declspec(implementation_key(233)) VARIANT_BOOL IPrnVBAPrintPrepress::GetCropMarks ( );
__declspec(implementation_key(234)) void IPrnVBAPrintPrepress::PutCropMarks ( VARIANT_BOOL pVal );
__declspec(implementation_key(235)) VARIANT_BOOL IPrnVBAPrintPrepress::GetExteriorCropMarks ( );
__declspec(implementation_key(236)) void IPrnVBAPrintPrepress::PutExteriorCropMarks ( VARIANT_BOOL pVal );
__declspec(implementation_key(237)) VARIANT_BOOL IPrnVBAPrintPrepress::GetRegistrationMarks ( );
__declspec(implementation_key(238)) void IPrnVBAPrintPrepress::PutRegistrationMarks ( VARIANT_BOOL pVal );
__declspec(implementation_key(239)) enum PrnRegistrationStyle IPrnVBAPrintPrepress::GetRegistrationStyle ( );
__declspec(implementation_key(240)) void IPrnVBAPrintPrepress::PutRegistrationStyle ( enum PrnRegistrationStyle pVal );
__declspec(implementation_key(241)) VARIANT_BOOL IPrnVBAPrintPrepress::GetColorCalibrationBar ( );
__declspec(implementation_key(242)) void IPrnVBAPrintPrepress::PutColorCalibrationBar ( VARIANT_BOOL pVal );
__declspec(implementation_key(243)) VARIANT_BOOL IPrnVBAPrintPrepress::GetDensitometerScale ( );
__declspec(implementation_key(244)) void IPrnVBAPrintPrepress::PutDensitometerScale ( VARIANT_BOOL pVal );
__declspec(implementation_key(245)) long IPrnVBAPrintPrepress::GetDensities ( long Index );
__declspec(implementation_key(246)) void IPrnVBAPrintPrepress::PutDensities ( long Index, long pVal );
__declspec(implementation_key(247)) VARIANT_BOOL IPrnVBAPrintPrepress::GetMarksToObjects ( );
__declspec(implementation_key(248)) void IPrnVBAPrintPrepress::PutMarksToObjects ( VARIANT_BOOL pVal );
__declspec(implementation_key(249)) enum PrnPostScriptLevel IPrnVBAPrintPostScript::GetLevel ( );
__declspec(implementation_key(250)) void IPrnVBAPrintPostScript::PutLevel ( enum PrnPostScriptLevel pVal );
__declspec(implementation_key(251)) VARIANT_BOOL IPrnVBAPrintPostScript::GetConformToDSC ( );
__declspec(implementation_key(252)) void IPrnVBAPrintPostScript::PutConformToDSC ( VARIANT_BOOL pVal );
__declspec(implementation_key(253)) VARIANT_BOOL IPrnVBAPrintPostScript::GetJPEGCompression ( );
__declspec(implementation_key(254)) void IPrnVBAPrintPostScript::PutJPEGCompression ( VARIANT_BOOL pVal );
__declspec(implementation_key(255)) long IPrnVBAPrintPostScript::GetJPEGQuality ( );
__declspec(implementation_key(256)) void IPrnVBAPrintPostScript::PutJPEGQuality ( long pVal );
__declspec(implementation_key(257)) VARIANT_BOOL IPrnVBAPrintPostScript::GetMaintainOPILinks ( );
__declspec(implementation_key(258)) void IPrnVBAPrintPostScript::PutMaintainOPILinks ( VARIANT_BOOL pVal );
__declspec(implementation_key(259)) VARIANT_BOOL IPrnVBAPrintPostScript::GetResolveDCSLinks ( );
__declspec(implementation_key(260)) void IPrnVBAPrintPostScript::PutResolveDCSLinks ( VARIANT_BOOL pVal );
__declspec(implementation_key(261)) VARIANT_BOOL IPrnVBAPrintPostScript::GetDownloadType1 ( );
__declspec(implementation_key(262)) void IPrnVBAPrintPostScript::PutDownloadType1 ( VARIANT_BOOL pVal );
__declspec(implementation_key(263)) VARIANT_BOOL IPrnVBAPrintPostScript::GetTrueTypeToType1 ( );
__declspec(implementation_key(264)) void IPrnVBAPrintPostScript::PutTrueTypeToType1 ( VARIANT_BOOL pVal );
__declspec(implementation_key(265)) enum PrnPDFStartup IPrnVBAPrintPostScript::GetPDFStartup ( );
__declspec(implementation_key(266)) void IPrnVBAPrintPostScript::PutPDFStartup ( enum PrnPDFStartup pVal );
__declspec(implementation_key(267)) VARIANT_BOOL IPrnVBAPrintPostScript::GetPDFHyperlinks ( );
__declspec(implementation_key(268)) void IPrnVBAPrintPostScript::PutPDFHyperlinks ( VARIANT_BOOL pVal );
__declspec(implementation_key(269)) VARIANT_BOOL IPrnVBAPrintPostScript::GetpdfBookmarks ( );
__declspec(implementation_key(270)) void IPrnVBAPrintPostScript::PutpdfBookmarks ( VARIANT_BOOL pVal );
__declspec(implementation_key(271)) long IPrnVBAPrintPostScript::GetMaxPointsPerCurve ( );
__declspec(implementation_key(272)) void IPrnVBAPrintPostScript::PutMaxPointsPerCurve ( long pVal );
__declspec(implementation_key(273)) long IPrnVBAPrintPostScript::GetFlatness ( );
__declspec(implementation_key(274)) void IPrnVBAPrintPostScript::PutFlatness ( long pVal );
__declspec(implementation_key(275)) VARIANT_BOOL IPrnVBAPrintPostScript::GetAutoIncreaseFlatness ( );
__declspec(implementation_key(276)) void IPrnVBAPrintPostScript::PutAutoIncreaseFlatness ( VARIANT_BOOL pVal );
__declspec(implementation_key(277)) VARIANT_BOOL IPrnVBAPrintPostScript::GetAutoIncreaseFountainSteps ( );
__declspec(implementation_key(278)) void IPrnVBAPrintPostScript::PutAutoIncreaseFountainSteps ( VARIANT_BOOL pVal );
__declspec(implementation_key(279)) VARIANT_BOOL IPrnVBAPrintPostScript::GetOptimizeFountainFills ( );
__declspec(implementation_key(280)) void IPrnVBAPrintPostScript::PutOptimizeFountainFills ( VARIANT_BOOL pVal );
__declspec(implementation_key(281)) long IPrnVBAPrintPostScript::GetScreenFrequency ( );
__declspec(implementation_key(282)) void IPrnVBAPrintPostScript::PutScreenFrequency ( long pVal );
__declspec(implementation_key(283)) enum PrnPlateType IPrnVBATrapLayer::GetType ( );
__declspec(implementation_key(284)) _bstr_t IPrnVBATrapLayer::GetColor ( );
__declspec(implementation_key(285)) double IPrnVBATrapLayer::GetDensity ( );
__declspec(implementation_key(286)) void IPrnVBATrapLayer::PutDensity ( double pVal );
__declspec(implementation_key(287)) enum PrnTrapType IPrnVBATrapLayer::GetTrapType ( );
__declspec(implementation_key(288)) void IPrnVBATrapLayer::PutTrapType ( enum PrnTrapType pVal );
__declspec(implementation_key(289)) long IPrnVBATrapLayer::GetOrder ( );
__declspec(implementation_key(290)) void IPrnVBATrapLayer::PutOrder ( long pVal );
__declspec(implementation_key(291)) long IPrnVBATrapLayers::GetCount ( );
__declspec(implementation_key(292)) IPrnVBATrapLayerPtr IPrnVBATrapLayers::GetItem ( long Index );
__declspec(implementation_key(293)) VARIANT_BOOL IPrnVBAPrintTrapping::GetEnabled ( );
__declspec(implementation_key(294)) void IPrnVBAPrintTrapping::PutEnabled ( VARIANT_BOOL pVal );
__declspec(implementation_key(295)) IPrnVBATrapLayersPtr IPrnVBAPrintTrapping::GetLayers ( );
__declspec(implementation_key(296)) double IPrnVBAPrintTrapping::GetWidth ( );
__declspec(implementation_key(297)) void IPrnVBAPrintTrapping::PutWidth ( double pVal );
__declspec(implementation_key(298)) double IPrnVBAPrintTrapping::GetBlackWidth ( );
__declspec(implementation_key(299)) void IPrnVBAPrintTrapping::PutBlackWidth ( double pVal );
__declspec(implementation_key(300)) long IPrnVBAPrintTrapping::GetColorScaling ( );
__declspec(implementation_key(301)) void IPrnVBAPrintTrapping::PutColorScaling ( long pVal );
__declspec(implementation_key(302)) long IPrnVBAPrintTrapping::GetStepLimit ( );
__declspec(implementation_key(303)) void IPrnVBAPrintTrapping::PutStepLimit ( long pVal );
__declspec(implementation_key(304)) long IPrnVBAPrintTrapping::GetBlackColorLimit ( );
__declspec(implementation_key(305)) void IPrnVBAPrintTrapping::PutBlackColorLimit ( long pVal );
__declspec(implementation_key(306)) double IPrnVBAPrintTrapping::GetBlackDensityLimit ( );
__declspec(implementation_key(307)) void IPrnVBAPrintTrapping::PutBlackDensityLimit ( double pVal );
__declspec(implementation_key(308)) long IPrnVBAPrintTrapping::GetSlidingTrapLimit ( );
__declspec(implementation_key(309)) void IPrnVBAPrintTrapping::PutSlidingTrapLimit ( long pVal );
__declspec(implementation_key(310)) enum PrnImageTrap IPrnVBAPrintTrapping::GetImageTrap ( );
__declspec(implementation_key(311)) void IPrnVBAPrintTrapping::PutImageTrap ( enum PrnImageTrap pVal );
__declspec(implementation_key(312)) VARIANT_BOOL IPrnVBAPrintTrapping::GetObjectsToImage ( );
__declspec(implementation_key(313)) void IPrnVBAPrintTrapping::PutObjectsToImage ( VARIANT_BOOL pVal );
__declspec(implementation_key(314)) VARIANT_BOOL IPrnVBAPrintTrapping::GetInternalImageTrapping ( );
__declspec(implementation_key(315)) void IPrnVBAPrintTrapping::PutInternalImageTrapping ( VARIANT_BOOL pVal );
__declspec(implementation_key(316)) VARIANT_BOOL IPrnVBAPrintTrapping::GetTrapMonoBitmaps ( );
__declspec(implementation_key(317)) void IPrnVBAPrintTrapping::PutTrapMonoBitmaps ( VARIANT_BOOL pVal );
__declspec(implementation_key(318)) VARIANT_BOOL IPrnVBAPrintOptions::GetUseColorProfile ( );
__declspec(implementation_key(319)) void IPrnVBAPrintOptions::PutUseColorProfile ( VARIANT_BOOL pVal );
__declspec(implementation_key(320)) VARIANT_BOOL IPrnVBAPrintOptions::GetPrintVectors ( );
__declspec(implementation_key(321)) void IPrnVBAPrintOptions::PutPrintVectors ( VARIANT_BOOL pVal );
__declspec(implementation_key(322)) VARIANT_BOOL IPrnVBAPrintOptions::GetPrintBitmaps ( );
__declspec(implementation_key(323)) void IPrnVBAPrintOptions::PutPrintBitmaps ( VARIANT_BOOL pVal );
__declspec(implementation_key(324)) VARIANT_BOOL IPrnVBAPrintOptions::GetPrintText ( );
__declspec(implementation_key(325)) void IPrnVBAPrintOptions::PutPrintText ( VARIANT_BOOL pVal );
__declspec(implementation_key(326)) VARIANT_BOOL IPrnVBAPrintOptions::GetTextInBlack ( );
__declspec(implementation_key(327)) void IPrnVBAPrintOptions::PutTextInBlack ( VARIANT_BOOL pVal );
__declspec(implementation_key(328)) enum PrnColorMode IPrnVBAPrintOptions::GetColorMode ( );
__declspec(implementation_key(329)) void IPrnVBAPrintOptions::PutColorMode ( enum PrnColorMode pVal );
__declspec(implementation_key(330)) VARIANT_BOOL IPrnVBAPrintOptions::GetMarksToPage ( );
__declspec(implementation_key(331)) void IPrnVBAPrintOptions::PutMarksToPage ( VARIANT_BOOL pVal );
__declspec(implementation_key(332)) enum PrnBitmapColorMode IPrnVBAPrintOptions::GetBitmapColorMode ( );
__declspec(implementation_key(333)) void IPrnVBAPrintOptions::PutBitmapColorMode ( enum PrnBitmapColorMode pVal );
__declspec(implementation_key(334)) long IPrnVBAPrintOptions::GetFountainSteps ( );
__declspec(implementation_key(335)) void IPrnVBAPrintOptions::PutFountainSteps ( long pVal );
__declspec(implementation_key(336)) VARIANT_BOOL IPrnVBAPrintOptions::GetRasterizePage ( );
__declspec(implementation_key(337)) void IPrnVBAPrintOptions::PutRasterizePage ( VARIANT_BOOL pVal );
__declspec(implementation_key(338)) long IPrnVBAPrintOptions::GetRasterizeResolution ( );
__declspec(implementation_key(339)) void IPrnVBAPrintOptions::PutRasterizeResolution ( long pVal );
__declspec(implementation_key(340)) VARIANT_BOOL IPrnVBAPrintOptions::GetDownsampleColor ( );
__declspec(implementation_key(341)) void IPrnVBAPrintOptions::PutDownsampleColor ( VARIANT_BOOL pVal );
__declspec(implementation_key(342)) VARIANT_BOOL IPrnVBAPrintOptions::GetDownsampleGray ( );
__declspec(implementation_key(343)) void IPrnVBAPrintOptions::PutDownsampleGray ( VARIANT_BOOL pVal );
__declspec(implementation_key(344)) VARIANT_BOOL IPrnVBAPrintOptions::GetDownsampleMono ( );
__declspec(implementation_key(345)) void IPrnVBAPrintOptions::PutDownsampleMono ( VARIANT_BOOL pVal );
__declspec(implementation_key(346)) long IPrnVBAPrintOptions::GetColorResolution ( );
__declspec(implementation_key(347)) void IPrnVBAPrintOptions::PutColorResolution ( long pVal );
__declspec(implementation_key(348)) long IPrnVBAPrintOptions::GetGrayResolution ( );
__declspec(implementation_key(349)) void IPrnVBAPrintOptions::PutGrayResolution ( long pVal );
__declspec(implementation_key(350)) long IPrnVBAPrintOptions::GetMonoResolution ( );
__declspec(implementation_key(351)) void IPrnVBAPrintOptions::PutMonoResolution ( long pVal );
__declspec(implementation_key(352)) VARIANT_BOOL IPrnVBAPrintOptions::GetJobInformation ( );
__declspec(implementation_key(353)) void IPrnVBAPrintOptions::PutJobInformation ( VARIANT_BOOL pVal );
__declspec(implementation_key(354)) VARIANT_BOOL IPrnVBAPrintOptions::GetAppInfo ( );
__declspec(implementation_key(355)) void IPrnVBAPrintOptions::PutAppInfo ( VARIANT_BOOL pVal );
__declspec(implementation_key(356)) VARIANT_BOOL IPrnVBAPrintOptions::GetDriverInfo ( );
__declspec(implementation_key(357)) void IPrnVBAPrintOptions::PutDriverInfo ( VARIANT_BOOL pVal );
__declspec(implementation_key(358)) VARIANT_BOOL IPrnVBAPrintOptions::GetPrintJobInfo ( );
__declspec(implementation_key(359)) void IPrnVBAPrintOptions::PutPrintJobInfo ( VARIANT_BOOL pVal );
__declspec(implementation_key(360)) VARIANT_BOOL IPrnVBAPrintOptions::GetSepsInfo ( );
__declspec(implementation_key(361)) void IPrnVBAPrintOptions::PutSepsInfo ( VARIANT_BOOL pVal );
__declspec(implementation_key(362)) VARIANT_BOOL IPrnVBAPrintOptions::GetFontInfo ( );
__declspec(implementation_key(363)) void IPrnVBAPrintOptions::PutFontInfo ( VARIANT_BOOL pVal );
__declspec(implementation_key(364)) VARIANT_BOOL IPrnVBAPrintOptions::GetLinkInfo ( );
__declspec(implementation_key(365)) void IPrnVBAPrintOptions::PutLinkInfo ( VARIANT_BOOL pVal );
__declspec(implementation_key(366)) VARIANT_BOOL IPrnVBAPrintOptions::GetInRIPTrapInfo ( );
__declspec(implementation_key(367)) void IPrnVBAPrintOptions::PutInRIPTrapInfo ( VARIANT_BOOL pVal );
__declspec(implementation_key(368)) enum PrnObjectsColorMode IPrnVBAPrintOptions::GetObjectsColorMode ( );
__declspec(implementation_key(369)) void IPrnVBAPrintOptions::PutObjectsColorMode ( enum PrnObjectsColorMode pVal );
__declspec(implementation_key(370)) VARIANT_BOOL IPrnVBAPrintOptions::GetPreservePureBlack ( );
__declspec(implementation_key(371)) void IPrnVBAPrintOptions::PutPreservePureBlack ( VARIANT_BOOL pVal );
__declspec(implementation_key(372)) IPrnVBAPrinterPtr IPrnVBAPrintSettings::GetPrinter ( );
__declspec(implementation_key(373)) void IPrnVBAPrintSettings::PutRefPrinter ( struct IPrnVBAPrinter * pVal );
__declspec(implementation_key(374)) VARIANT_BOOL IPrnVBAPrintSettings::GetUsePPD ( );
__declspec(implementation_key(375)) void IPrnVBAPrintSettings::PutUsePPD ( VARIANT_BOOL pVal );
__declspec(implementation_key(376)) _bstr_t IPrnVBAPrintSettings::GetPPDFile ( );
__declspec(implementation_key(377)) void IPrnVBAPrintSettings::PutPPDFile ( _bstr_t pVal );
__declspec(implementation_key(378)) VARIANT_BOOL IPrnVBAPrintSettings::GetPrintToFile ( );
__declspec(implementation_key(379)) void IPrnVBAPrintSettings::PutPrintToFile ( VARIANT_BOOL pVal );
__declspec(implementation_key(380)) _bstr_t IPrnVBAPrintSettings::GetFileName ( );
__declspec(implementation_key(381)) void IPrnVBAPrintSettings::PutFileName ( _bstr_t pVal );
__declspec(implementation_key(382)) VARIANT_BOOL IPrnVBAPrintSettings::GetForMac ( );
__declspec(implementation_key(383)) void IPrnVBAPrintSettings::PutForMac ( VARIANT_BOOL pVal );
__declspec(implementation_key(384)) enum PrnFileMode IPrnVBAPrintSettings::GetFileMode ( );
__declspec(implementation_key(385)) void IPrnVBAPrintSettings::PutFileMode ( enum PrnFileMode pVal );
__declspec(implementation_key(386)) enum PrnPrintRange IPrnVBAPrintSettings::GetPrintRange ( );
__declspec(implementation_key(387)) void IPrnVBAPrintSettings::PutPrintRange ( enum PrnPrintRange pVal );
__declspec(implementation_key(388)) _bstr_t IPrnVBAPrintSettings::GetPageRange ( );
__declspec(implementation_key(389)) void IPrnVBAPrintSettings::PutPageRange ( _bstr_t pVal );
__declspec(implementation_key(390)) long IPrnVBAPrintSettings::GetCopies ( );
__declspec(implementation_key(391)) void IPrnVBAPrintSettings::PutCopies ( long pVal );
__declspec(implementation_key(392)) VARIANT_BOOL IPrnVBAPrintSettings::GetCollate ( );
__declspec(implementation_key(393)) void IPrnVBAPrintSettings::PutCollate ( VARIANT_BOOL pVal );
__declspec(implementation_key(394)) IPrnVBAPrintSeparationsPtr IPrnVBAPrintSettings::GetSeparations ( );
__declspec(implementation_key(395)) IPrnVBAPrintPrepressPtr IPrnVBAPrintSettings::GetPrepress ( );
__declspec(implementation_key(396)) IPrnVBAPrintPostScriptPtr IPrnVBAPrintSettings::GetPostScript ( );
__declspec(implementation_key(397)) IPrnVBAPrintTrappingPtr IPrnVBAPrintSettings::GetTrapping ( );
__declspec(implementation_key(398)) IPrnVBAPrintOptionsPtr IPrnVBAPrintSettings::GetOptions ( );
__declspec(implementation_key(399)) HRESULT IPrnVBAPrintSettings::Reset ( );
__declspec(implementation_key(400)) VARIANT_BOOL IPrnVBAPrintSettings::Load ( _bstr_t FileName );
__declspec(implementation_key(401)) VARIANT_BOOL IPrnVBAPrintSettings::Save ( _bstr_t FileName );
__declspec(implementation_key(402)) VARIANT_BOOL IPrnVBAPrintSettings::ShowDialog ( );
__declspec(implementation_key(403)) HRESULT IPrnVBAPrintSettings::SelectPrinter ( _bstr_t Name );
__declspec(implementation_key(404)) enum PrnPageSet IPrnVBAPrintSettings::GetPageSet ( );
__declspec(implementation_key(405)) void IPrnVBAPrintSettings::PutPageSet ( enum PrnPageSet pVal );
__declspec(implementation_key(406)) enum PrnPaperOrientation IPrnVBAPrintSettings::GetPaperOrientation ( );
__declspec(implementation_key(407)) void IPrnVBAPrintSettings::PutPaperOrientation ( enum PrnPaperOrientation pVal );
__declspec(implementation_key(408)) enum PrnPaperSize IPrnVBAPrintSettings::GetPaperSize ( );
__declspec(implementation_key(409)) void IPrnVBAPrintSettings::PutPaperSize ( enum PrnPaperSize pVal );
__declspec(implementation_key(410)) HRESULT IPrnVBAPrintSettings::SetPaperSize ( enum PrnPaperSize PaperSize, enum PrnPaperOrientation Orientation );
__declspec(implementation_key(411)) double IPrnVBAPrintSettings::GetPaperWidth ( );
__declspec(implementation_key(412)) double IPrnVBAPrintSettings::GetPaperHeight ( );
__declspec(implementation_key(413)) HRESULT IPrnVBAPrintSettings::SetCustomPaperSize ( double Width, double Height, enum PrnPaperOrientation Orientation );
__declspec(implementation_key(414)) IPrnVBAPrintLayoutPtr IPrnVBAPrintSettings::GetLayout ( );
__declspec(implementation_key(415)) HRESULT IPrnVBAPrintSettings::PrintOut ( );
__declspec(implementation_key(416)) HRESULT IPrnVBAPrintSettings::PrintColorProof ( IDispatch * ProofSettings );
__declspec(implementation_key(417)) enum PrnPageMatchingMode IPrnVBAPrintSettings::GetPageMatchingMode ( );
__declspec(implementation_key(418)) void IPrnVBAPrintSettings::PutPageMatchingMode ( enum PrnPageMatchingMode pVal );
__declspec(implementation_key(419)) HRESULT IPrnVBAPrintDocument::_GetPrintDocument ( INT_PTR * pDoc );
__declspec(implementation_key(420)) IPrnVBAPrintDocumentPtr IPrnVBAPrintDocuments::GetItem ( long Index );
__declspec(implementation_key(421)) long IPrnVBAPrintDocuments::GetCount ( );
__declspec(implementation_key(422)) HRESULT IPrnVBAPrintPage::_GetPrintDocument ( INT_PTR * pDoc );
__declspec(implementation_key(423)) HRESULT IPrnVBAPrintPage::_GetPrintPage ( long * pPage );
__declspec(implementation_key(424)) IPrnVBAPrintPagePtr IPrnVBAPrintPages::GetItem ( long Index );
__declspec(implementation_key(425)) long IPrnVBAPrintPages::GetCount ( );
__declspec(implementation_key(426)) IPrnVBAPrintSettingsPtr IPrnVBAPrintJob::GetSettings ( );
__declspec(implementation_key(427)) IPrnVBAPrintDocumentsPtr IPrnVBAPrintJob::GetDocuments ( );
__declspec(implementation_key(428)) IPrnVBAPrintPagesPtr IPrnVBAPrintJob::GetPages ( );
__declspec(implementation_key(429)) HRESULT IPrnVBAPrintJob::Clear ( );
__declspec(implementation_key(430)) HRESULT IPrnVBAPrintJob::PrintOut ( );
__declspec(implementation_key(431)) HRESULT IPrnVBAPrintJob::AddDocument ( struct IPrnVBAPrintDocument * Document, _bstr_t PageRange );
__declspec(implementation_key(432)) HRESULT IPrnVBAPrintJob::AddPage ( struct IPrnVBAPrintPage * Page );
__declspec(implementation_key(433)) HRESULT IPDFVBASettings::Reset ( );
__declspec(implementation_key(434)) VARIANT_BOOL IPDFVBASettings::Load ( _bstr_t SettingName );
__declspec(implementation_key(435)) VARIANT_BOOL IPDFVBASettings::Save ( _bstr_t SettingName );
__declspec(implementation_key(436)) VARIANT_BOOL IPDFVBASettings::ShowDialog ( );
__declspec(implementation_key(437)) HRESULT IPDFVBASettings::PublishToPDF ( _bstr_t FileName );
__declspec(implementation_key(438)) void IPDFVBASettings::PutPublishRange ( enum pdfExportRange pExportRange );
__declspec(implementation_key(439)) enum pdfExportRange IPDFVBASettings::GetPublishRange ( );
__declspec(implementation_key(440)) void IPDFVBASettings::PutPageRange ( _bstr_t pszExportPagesRange );
__declspec(implementation_key(441)) _bstr_t IPDFVBASettings::GetPageRange ( );
__declspec(implementation_key(442)) void IPDFVBASettings::PutAuthor ( _bstr_t pszAuthor );
__declspec(implementation_key(443)) _bstr_t IPDFVBASettings::GetAuthor ( );
__declspec(implementation_key(444)) void IPDFVBASettings::PutSubject ( _bstr_t pszSubject );
__declspec(implementation_key(445)) _bstr_t IPDFVBASettings::GetSubject ( );
__declspec(implementation_key(446)) void IPDFVBASettings::PutKeywords ( _bstr_t pszKeywords );
__declspec(implementation_key(447)) _bstr_t IPDFVBASettings::GetKeywords ( );
__declspec(implementation_key(448)) void IPDFVBASettings::PutBitmapCompression ( enum pdfBitmapCompressionType pBitmapCompressionType );
__declspec(implementation_key(449)) enum pdfBitmapCompressionType IPDFVBASettings::GetBitmapCompression ( );
__declspec(implementation_key(450)) void IPDFVBASettings::PutJPEGQualityFactor ( int pnQuality );
__declspec(implementation_key(451)) int IPDFVBASettings::GetJPEGQualityFactor ( );
__declspec(implementation_key(452)) void IPDFVBASettings::PutTextAsCurves ( VARIANT_BOOL pbTextAsCurves );
__declspec(implementation_key(453)) VARIANT_BOOL IPDFVBASettings::GetTextAsCurves ( );
__declspec(implementation_key(454)) void IPDFVBASettings::PutEmbedFonts ( VARIANT_BOOL pbEmbedFonts );
__declspec(implementation_key(455)) VARIANT_BOOL IPDFVBASettings::GetEmbedFonts ( );
__declspec(implementation_key(456)) void IPDFVBASettings::PutEmbedBaseFonts ( VARIANT_BOOL pbEmbedBaseFonts );
__declspec(implementation_key(457)) VARIANT_BOOL IPDFVBASettings::GetEmbedBaseFonts ( );
__declspec(implementation_key(458)) void IPDFVBASettings::PutTrueTypeToType1 ( VARIANT_BOOL pbTrueTypeToType1 );
__declspec(implementation_key(459)) VARIANT_BOOL IPDFVBASettings::GetTrueTypeToType1 ( );
__declspec(implementation_key(460)) void IPDFVBASettings::PutSubsetFonts ( VARIANT_BOOL pbSubsetType1Fonts );
__declspec(implementation_key(461)) VARIANT_BOOL IPDFVBASettings::GetSubsetFonts ( );
__declspec(implementation_key(462)) void IPDFVBASettings::PutSubsetPct ( long pnLevel );
__declspec(implementation_key(463)) long IPDFVBASettings::GetSubsetPct ( );
__declspec(implementation_key(464)) void IPDFVBASettings::PutCompressText ( VARIANT_BOOL pbCompressText );
__declspec(implementation_key(465)) VARIANT_BOOL IPDFVBASettings::GetCompressText ( );
__declspec(implementation_key(466)) void IPDFVBASettings::PutEncoding ( enum pdfEncodingType pEncoding );
__declspec(implementation_key(467)) enum pdfEncodingType IPDFVBASettings::GetEncoding ( );
__declspec(implementation_key(468)) void IPDFVBASettings::PutDownsampleColor ( VARIANT_BOOL pbDownsample );
__declspec(implementation_key(469)) VARIANT_BOOL IPDFVBASettings::GetDownsampleColor ( );
__declspec(implementation_key(470)) void IPDFVBASettings::PutDownsampleGray ( VARIANT_BOOL pbDownsample );
__declspec(implementation_key(471)) VARIANT_BOOL IPDFVBASettings::GetDownsampleGray ( );
__declspec(implementation_key(472)) void IPDFVBASettings::PutDownsampleMono ( VARIANT_BOOL pbDownsample );
__declspec(implementation_key(473)) VARIANT_BOOL IPDFVBASettings::GetDownsampleMono ( );
__declspec(implementation_key(474)) void IPDFVBASettings::PutColorResolution ( long pnDownsampleResolution );
__declspec(implementation_key(475)) long IPDFVBASettings::GetColorResolution ( );
__declspec(implementation_key(476)) void IPDFVBASettings::PutMonoResolution ( long pnDownsampleResolution );
__declspec(implementation_key(477)) long IPDFVBASettings::GetMonoResolution ( );
__declspec(implementation_key(478)) void IPDFVBASettings::PutGrayResolution ( long pnDownsampleResolution );
__declspec(implementation_key(479)) long IPDFVBASettings::GetGrayResolution ( );
__declspec(implementation_key(480)) void IPDFVBASettings::PutHyperlinks ( VARIANT_BOOL pbIncludeHyperlinks );
__declspec(implementation_key(481)) VARIANT_BOOL IPDFVBASettings::GetHyperlinks ( );
__declspec(implementation_key(482)) void IPDFVBASettings::PutBookmarks ( VARIANT_BOOL pbGenerateBookmarks );
__declspec(implementation_key(483)) VARIANT_BOOL IPDFVBASettings::GetBookmarks ( );
__declspec(implementation_key(484)) void IPDFVBASettings::PutThumbnails ( VARIANT_BOOL pbGenerateThumbnails );
__declspec(implementation_key(485)) VARIANT_BOOL IPDFVBASettings::GetThumbnails ( );
__declspec(implementation_key(486)) void IPDFVBASettings::PutStartup ( enum pdfDisplayOnStart pDisplayOnStart );
__declspec(implementation_key(487)) enum pdfDisplayOnStart IPDFVBASettings::GetStartup ( );
__declspec(implementation_key(488)) void IPDFVBASettings::PutComplexFillsAsBitmaps ( VARIANT_BOOL pbComplexFillsAsBitmaps );
__declspec(implementation_key(489)) VARIANT_BOOL IPDFVBASettings::GetComplexFillsAsBitmaps ( );
__declspec(implementation_key(490)) void IPDFVBASettings::PutOverprints ( VARIANT_BOOL pbPreserveOverprints );
__declspec(implementation_key(491)) VARIANT_BOOL IPDFVBASettings::GetOverprints ( );
__declspec(implementation_key(492)) void IPDFVBASettings::PutHalftones ( VARIANT_BOOL pbPreserveHalftones );
__declspec(implementation_key(493)) VARIANT_BOOL IPDFVBASettings::GetHalftones ( );
__declspec(implementation_key(494)) void IPDFVBASettings::PutSpotColors ( VARIANT_BOOL pbPreserveSpotColors );
__declspec(implementation_key(495)) VARIANT_BOOL IPDFVBASettings::GetSpotColors ( );
__declspec(implementation_key(496)) void IPDFVBASettings::PutMaintainOPILinks ( VARIANT_BOOL pbMaintainOPILinks );
__declspec(implementation_key(497)) VARIANT_BOOL IPDFVBASettings::GetMaintainOPILinks ( );
__declspec(implementation_key(498)) void IPDFVBASettings::PutFountainSteps ( long pnFountainSteps );
__declspec(implementation_key(499)) long IPDFVBASettings::GetFountainSteps ( );
__declspec(implementation_key(500)) void IPDFVBASettings::PutEPSAs ( enum pdfEPSAs peEPSAs );
__declspec(implementation_key(501)) enum pdfEPSAs IPDFVBASettings::GetEPSAs ( );
__declspec(implementation_key(502)) void IPDFVBASettings::PutpdfVersion ( enum pdfVersion pePDFVersion );
__declspec(implementation_key(503)) enum pdfVersion IPDFVBASettings::GetpdfVersion ( );
__declspec(implementation_key(504)) void IPDFVBASettings::PutIncludeBleed ( VARIANT_BOOL pbIncludeBleed );
__declspec(implementation_key(505)) VARIANT_BOOL IPDFVBASettings::GetIncludeBleed ( );
__declspec(implementation_key(506)) void IPDFVBASettings::PutBleed ( int pnBleed );
__declspec(implementation_key(507)) int IPDFVBASettings::GetBleed ( );
__declspec(implementation_key(508)) void IPDFVBASettings::PutLinearize ( VARIANT_BOOL pbLinearize );
__declspec(implementation_key(509)) VARIANT_BOOL IPDFVBASettings::GetLinearize ( );
__declspec(implementation_key(510)) void IPDFVBASettings::PutCropMarks ( VARIANT_BOOL pbCropMarks );
__declspec(implementation_key(511)) VARIANT_BOOL IPDFVBASettings::GetCropMarks ( );
__declspec(implementation_key(512)) void IPDFVBASettings::PutRegistrationMarks ( VARIANT_BOOL pbRegistrationMarks );
__declspec(implementation_key(513)) VARIANT_BOOL IPDFVBASettings::GetRegistrationMarks ( );
__declspec(implementation_key(514)) void IPDFVBASettings::PutDensitometerScales ( VARIANT_BOOL pbDensitometerScales );
__declspec(implementation_key(515)) VARIANT_BOOL IPDFVBASettings::GetDensitometerScales ( );
__declspec(implementation_key(516)) void IPDFVBASettings::PutFileInformation ( VARIANT_BOOL pbFileInformation );
__declspec(implementation_key(517)) VARIANT_BOOL IPDFVBASettings::GetFileInformation ( );
__declspec(implementation_key(518)) void IPDFVBASettings::PutColorMode ( enum pdfColorMode peColorSet );
__declspec(implementation_key(519)) enum pdfColorMode IPDFVBASettings::GetColorMode ( );
__declspec(implementation_key(520)) void IPDFVBASettings::PutUseColorProfile ( VARIANT_BOOL pbUseColorProfile );
__declspec(implementation_key(521)) VARIANT_BOOL IPDFVBASettings::GetUseColorProfile ( );
__declspec(implementation_key(522)) void IPDFVBASettings::PutColorProfile ( enum pdfColorProfile peColorProfile );
__declspec(implementation_key(523)) enum pdfColorProfile IPDFVBASettings::GetColorProfile ( );
__declspec(implementation_key(524)) void IPDFVBASettings::PutEmbedFilename ( _bstr_t pszEmbedFilename );
__declspec(implementation_key(525)) _bstr_t IPDFVBASettings::GetEmbedFilename ( );
__declspec(implementation_key(526)) void IPDFVBASettings::PutEmbedFile ( VARIANT_BOOL pbEmbedFile );
__declspec(implementation_key(527)) VARIANT_BOOL IPDFVBASettings::GetEmbedFile ( );
__declspec(implementation_key(528)) void IPDFVBASettings::PutJP2QualityFactor ( int pnQuality );
__declspec(implementation_key(529)) int IPDFVBASettings::GetJP2QualityFactor ( );
__declspec(implementation_key(530)) void IPDFVBASettings::PutTextExportMode ( enum pdfTextExportMode pExportMode );
__declspec(implementation_key(531)) enum pdfTextExportMode IPDFVBASettings::GetTextExportMode ( );
__declspec(implementation_key(532)) void IPDFVBASettings::PutPrintPermissions ( enum pdfPrintPermissions pPrintPermission );
__declspec(implementation_key(533)) enum pdfPrintPermissions IPDFVBASettings::GetPrintPermissions ( );
__declspec(implementation_key(534)) void IPDFVBASettings::PutEditPermissions ( enum pdfEditPermissions pEditPermission );
__declspec(implementation_key(535)) enum pdfEditPermissions IPDFVBASettings::GetEditPermissions ( );
__declspec(implementation_key(536)) void IPDFVBASettings::PutContentCopyingAllowed ( VARIANT_BOOL pbEnable );
__declspec(implementation_key(537)) VARIANT_BOOL IPDFVBASettings::GetContentCopyingAllowed ( );
__declspec(implementation_key(538)) void IPDFVBASettings::PutOpenPassword ( _bstr_t pszOpenPassword );
__declspec(implementation_key(539)) _bstr_t IPDFVBASettings::GetOpenPassword ( );
__declspec(implementation_key(540)) void IPDFVBASettings::PutPermissionPassword ( _bstr_t pszPermissionPassword );
__declspec(implementation_key(541)) _bstr_t IPDFVBASettings::GetPermissionPassword ( );
__declspec(implementation_key(542)) void IPDFVBASettings::PutConvertSpotColors ( VARIANT_BOOL pbConvertSpotColors );
__declspec(implementation_key(543)) VARIANT_BOOL IPDFVBASettings::GetConvertSpotColors ( );
__declspec(implementation_key(544)) void IPDFVBASettings::PutEncryptType ( enum pdfEncryptionType peEncryptType );
__declspec(implementation_key(545)) enum pdfEncryptionType IPDFVBASettings::GetEncryptType ( );
__declspec(implementation_key(546)) void IPDFVBASettings::PutOutputSpotColorsAs ( enum pdfSpotType pnConvertSpotColorsTo );
__declspec(implementation_key(547)) enum pdfSpotType IPDFVBASettings::GetOutputSpotColorsAs ( );
__declspec(implementation_key(548)) void IPDFVBASettings::PutOverprintBlackLimit ( int pnOverprintBlackLimit );
__declspec(implementation_key(549)) int IPDFVBASettings::GetOverprintBlackLimit ( );
__declspec(implementation_key(550)) void IPDFVBASettings::PutProtectedTextAsCurves ( VARIANT_BOOL pbProtectedTextAsCurves );
__declspec(implementation_key(551)) VARIANT_BOOL IPDFVBASettings::GetProtectedTextAsCurves ( );
__declspec(implementation_key(552)) long IVGRectangle::GetCornerUpperLeft ( );
__declspec(implementation_key(553)) void IVGRectangle::PutCornerUpperLeft ( long pVal );
__declspec(implementation_key(554)) long IVGRectangle::GetCornerUpperRight ( );
__declspec(implementation_key(555)) void IVGRectangle::PutCornerUpperRight ( long pVal );
__declspec(implementation_key(556)) long IVGRectangle::GetCornerLowerLeft ( );
__declspec(implementation_key(557)) void IVGRectangle::PutCornerLowerLeft ( long pVal );
__declspec(implementation_key(558)) long IVGRectangle::GetCornerLowerRight ( );
__declspec(implementation_key(559)) void IVGRectangle::PutCornerLowerRight ( long pVal );
__declspec(implementation_key(560)) VARIANT_BOOL IVGRectangle::GetEqualCorners ( );
__declspec(implementation_key(561)) double IVGRectangle::GetMaxRadius ( );
__declspec(implementation_key(562)) HRESULT IVGRectangle::SetRoundness ( long Roundness );
__declspec(implementation_key(563)) HRESULT IVGRectangle::SetRadius ( double Radius );
__declspec(implementation_key(564)) double IVGRectangle::GetRadiusUpperLeft ( );
__declspec(implementation_key(565)) void IVGRectangle::PutRadiusUpperLeft ( double pVal );
__declspec(implementation_key(566)) double IVGRectangle::GetRadiusUpperRight ( );
__declspec(implementation_key(567)) void IVGRectangle::PutRadiusUpperRight ( double pVal );
__declspec(implementation_key(568)) double IVGRectangle::GetRadiusLowerLeft ( );
__declspec(implementation_key(569)) void IVGRectangle::PutRadiusLowerLeft ( double pVal );
__declspec(implementation_key(570)) double IVGRectangle::GetRadiusLowerRight ( );
__declspec(implementation_key(571)) void IVGRectangle::PutRadiusLowerRight ( double pVal );
__declspec(implementation_key(572)) enum cdrCornerType IVGRectangle::GetCornerType ( );
__declspec(implementation_key(573)) void IVGRectangle::PutCornerType ( enum cdrCornerType pVal );
__declspec(implementation_key(574)) VARIANT_BOOL IVGRectangle::GetRelativeCornerScaling ( );
__declspec(implementation_key(575)) void IVGRectangle::PutRelativeCornerScaling ( VARIANT_BOOL pVal );
__declspec(implementation_key(576)) enum cdrEllipseType IVGEllipse::GetType ( );
__declspec(implementation_key(577)) void IVGEllipse::PutType ( enum cdrEllipseType pVal );
__declspec(implementation_key(578)) double IVGEllipse::GetStartAngle ( );
__declspec(implementation_key(579)) void IVGEllipse::PutStartAngle ( double pVal );
__declspec(implementation_key(580)) double IVGEllipse::GetEndAngle ( );
__declspec(implementation_key(581)) void IVGEllipse::PutEndAngle ( double pVal );
__declspec(implementation_key(582)) VARIANT_BOOL IVGEllipse::GetClockwise ( );
__declspec(implementation_key(583)) void IVGEllipse::PutClockwise ( VARIANT_BOOL pVal );
__declspec(implementation_key(584)) double IVGEllipse::GetCenterX ( );
__declspec(implementation_key(585)) void IVGEllipse::PutCenterX ( double pVal );
__declspec(implementation_key(586)) double IVGEllipse::GetCenterY ( );
__declspec(implementation_key(587)) void IVGEllipse::PutCenterY ( double pVal );
__declspec(implementation_key(588)) double IVGEllipse::GetHRadius ( );
__declspec(implementation_key(589)) void IVGEllipse::PutHRadius ( double pVal );
__declspec(implementation_key(590)) double IVGEllipse::GetVRadius ( );
__declspec(implementation_key(591)) void IVGEllipse::PutVRadius ( double pVal );
__declspec(implementation_key(592)) HRESULT IVGEllipse::SetCenterPosition ( double PositionX, double PositionY );
__declspec(implementation_key(593)) HRESULT IVGEllipse::GetCenterPosition ( double * PositionX, double * PositionY );
__declspec(implementation_key(594)) HRESULT IVGEllipse::SetRadius ( double HRadius, double VRadius );
__declspec(implementation_key(595)) HRESULT IVGEllipse::GetRadius ( double * HRadius, double * VRadius );
__declspec(implementation_key(596)) enum cdrPolygonType IVGPolygon::GetType ( );
__declspec(implementation_key(597)) void IVGPolygon::PutType ( enum cdrPolygonType pVal );
__declspec(implementation_key(598)) long IVGPolygon::GetSides ( );
__declspec(implementation_key(599)) void IVGPolygon::PutSides ( long pVal );
__declspec(implementation_key(600)) long IVGPolygon::GetSharpness ( );
__declspec(implementation_key(601)) void IVGPolygon::PutSharpness ( long pVal );
__declspec(implementation_key(602)) double IVGCrossPoint::GetPositionX ( );
__declspec(implementation_key(603)) double IVGCrossPoint::GetPositionY ( );
__declspec(implementation_key(604)) double IVGCrossPoint::GetOffset ( );
__declspec(implementation_key(605)) double IVGCrossPoint::GetOffset2 ( );
__declspec(implementation_key(606)) IVGCrossPointPtr IVGCrossPoints::GetItem ( long Index );
__declspec(implementation_key(607)) IUnknownPtr IVGCrossPoints::Get_NewEnum ( );
__declspec(implementation_key(608)) long IVGCrossPoints::GetCount ( );
__declspec(implementation_key(609)) void IVGStructPaletteOptions::PutNumColors ( long pVal );
__declspec(implementation_key(610)) long IVGStructPaletteOptions::GetNumColors ( );
__declspec(implementation_key(611)) void IVGStructPaletteOptions::PutDitherIntensity ( long pVal );
__declspec(implementation_key(612)) long IVGStructPaletteOptions::GetDitherIntensity ( );
__declspec(implementation_key(613)) void IVGStructPaletteOptions::PutSmoothing ( long pVal );
__declspec(implementation_key(614)) long IVGStructPaletteOptions::GetSmoothing ( );
__declspec(implementation_key(615)) void IVGStructPaletteOptions::PutDitherType ( enum cdrDitherType pVal );
__declspec(implementation_key(616)) enum cdrDitherType IVGStructPaletteOptions::GetDitherType ( );
__declspec(implementation_key(617)) void IVGStructPaletteOptions::PutPaletteType ( enum cdrImagePaletteType pVal );
__declspec(implementation_key(618)) enum cdrImagePaletteType IVGStructPaletteOptions::GetPaletteType ( );
__declspec(implementation_key(619)) void IVGStructPaletteOptions::PutImportance ( long pVal );
__declspec(implementation_key(620)) long IVGStructPaletteOptions::GetImportance ( );
__declspec(implementation_key(621)) void IVGStructPaletteOptions::PutLightness ( long pVal );
__declspec(implementation_key(622)) long IVGStructPaletteOptions::GetLightness ( );
__declspec(implementation_key(623)) void IVGStructPaletteOptions::PutToleranceA ( long pVal );
__declspec(implementation_key(624)) long IVGStructPaletteOptions::GetToleranceA ( );
__declspec(implementation_key(625)) void IVGStructPaletteOptions::PutToleranceB ( long pVal );
__declspec(implementation_key(626)) long IVGStructPaletteOptions::GetToleranceB ( );
__declspec(implementation_key(627)) void IVGStructPaletteOptions::PutColorSensitive ( VARIANT_BOOL pVal );
__declspec(implementation_key(628)) VARIANT_BOOL IVGStructPaletteOptions::GetColorSensitive ( );
__declspec(implementation_key(629)) void IVGStructPaletteOptions::PutTargetColor ( long pVal );
__declspec(implementation_key(630)) long IVGStructPaletteOptions::GetTargetColor ( );
__declspec(implementation_key(631)) void IVGStructPaletteOptions::PutPalette ( const _variant_t & pVal );
__declspec(implementation_key(632)) _variant_t IVGStructPaletteOptions::GetPalette ( );
__declspec(implementation_key(633)) long IVGOutlineStyle::GetIndex ( );
__declspec(implementation_key(634)) long IVGOutlineStyle::GetDashCount ( );
__declspec(implementation_key(635)) void IVGOutlineStyle::PutDashCount ( long pVal );
__declspec(implementation_key(636)) long IVGOutlineStyle::GetDashLength ( long Index );
__declspec(implementation_key(637)) void IVGOutlineStyle::PutDashLength ( long Index, long pVal );
__declspec(implementation_key(638)) long IVGOutlineStyle::GetGapLength ( long Index );
__declspec(implementation_key(639)) void IVGOutlineStyle::PutGapLength ( long Index, long pVal );
__declspec(implementation_key(640)) VARIANT_BOOL IVGOutlineStyle::GetEnhanced ( );
__declspec(implementation_key(641)) enum cdrPatternCanvasSize IVGPatternCanvas::GetSize ( );
__declspec(implementation_key(642)) void IVGPatternCanvas::PutSize ( enum cdrPatternCanvasSize pVal );
__declspec(implementation_key(643)) VARIANT_BOOL IVGPatternCanvas::GetPixel ( long x, long y );
__declspec(implementation_key(644)) void IVGPatternCanvas::PutPixel ( long x, long y, VARIANT_BOOL pVal );
__declspec(implementation_key(645)) long IVGPatternCanvas::GetIndex ( );
__declspec(implementation_key(646)) HRESULT IVGPatternCanvas::FillArea ( long x1, long y1, long x2, long y2, VARIANT_BOOL State );
__declspec(implementation_key(647)) HRESULT IVGPatternCanvas::CopyArea ( long x1, long y1, long x2, long y2, long x, long y );
__declspec(implementation_key(648)) HRESULT IVGPatternCanvas::FlipArea ( long x1, long y1, long x2, long y2, enum cdrFlipAxes Axes );
__declspec(implementation_key(649)) HRESULT IVGPatternCanvas::RotateArea ( long x1, long y1, long x2, long y2, double Angle );
__declspec(implementation_key(650)) HRESULT IVGPatternCanvas::Select ( long Index );
__declspec(implementation_key(651)) HRESULT IVGPatternCanvas::Clear ( );
__declspec(implementation_key(652)) HRESULT IVGPatternCanvas::PutCopy ( struct IVGPatternCanvas * PatternCanvas );
__declspec(implementation_key(653)) long IVGPatternCanvas::GetWidth ( );
__declspec(implementation_key(654)) void IVGPatternCanvas::PutWidth ( long pVal );
__declspec(implementation_key(655)) long IVGPatternCanvas::GetHeight ( );
__declspec(implementation_key(656)) void IVGPatternCanvas::PutHeight ( long pVal );
__declspec(implementation_key(657)) _bstr_t IVGPatternCanvas::GetData ( );
__declspec(implementation_key(658)) void IVGPatternCanvas::PutData ( _bstr_t pVal );
__declspec(implementation_key(659)) HRESULT IVGPatternCanvas::PSet ( short Step, long x, long y, VARIANT_BOOL Color );
__declspec(implementation_key(660)) HRESULT IVGPatternCanvas::Line ( short Flags, long x1, long y1, long x2, long y2, VARIANT_BOOL Color );
__declspec(implementation_key(661)) _bstr_t IVGTextureFillProperty::GetName ( );
__declspec(implementation_key(662)) enum cdrTexturePropertyType IVGTextureFillProperty::GetType ( );
__declspec(implementation_key(663)) _variant_t IVGTextureFillProperty::GetValue ( );
__declspec(implementation_key(664)) void IVGTextureFillProperty::PutValue ( const _variant_t & pVal );
__declspec(implementation_key(665)) long IVGTextureFillProperties::GetCount ( );
__declspec(implementation_key(666)) IVGTextureFillPropertyPtr IVGTextureFillProperties::GetItem ( const _variant_t & IndexOrName );
__declspec(implementation_key(667)) IUnknownPtr IVGTextureFillProperties::Get_NewEnum ( );
__declspec(implementation_key(668)) double IVGTextureFill::GetOriginX ( );
__declspec(implementation_key(669)) void IVGTextureFill::PutOriginX ( double pVal );
__declspec(implementation_key(670)) double IVGTextureFill::GetOriginY ( );
__declspec(implementation_key(671)) void IVGTextureFill::PutOriginY ( double pVal );
__declspec(implementation_key(672)) double IVGTextureFill::GetTileWidth ( );
__declspec(implementation_key(673)) void IVGTextureFill::PutTileWidth ( double pVal );
__declspec(implementation_key(674)) double IVGTextureFill::GetTileHeight ( );
__declspec(implementation_key(675)) void IVGTextureFill::PutTileHeight ( double pVal );
__declspec(implementation_key(676)) enum cdrTileOffsetType IVGTextureFill::GetTileOffsetType ( );
__declspec(implementation_key(677)) void IVGTextureFill::PutTileOffsetType ( enum cdrTileOffsetType pVal );
__declspec(implementation_key(678)) long IVGTextureFill::GetTileOffset ( );
__declspec(implementation_key(679)) void IVGTextureFill::PutTileOffset ( long pVal );
__declspec(implementation_key(680)) double IVGTextureFill::GetSkewAngle ( );
__declspec(implementation_key(681)) void IVGTextureFill::PutSkewAngle ( double pVal );
__declspec(implementation_key(682)) double IVGTextureFill::GetRotationAngle ( );
__declspec(implementation_key(683)) void IVGTextureFill::PutRotationAngle ( double pVal );
__declspec(implementation_key(684)) VARIANT_BOOL IVGTextureFill::GetTransformWithShape ( );
__declspec(implementation_key(685)) void IVGTextureFill::PutTransformWithShape ( VARIANT_BOOL pVal );
__declspec(implementation_key(686)) long IVGTextureFill::GetResolution ( );
__declspec(implementation_key(687)) void IVGTextureFill::PutResolution ( long pVal );
__declspec(implementation_key(688)) long IVGTextureFill::GetMaximumTileWidth ( );
__declspec(implementation_key(689)) void IVGTextureFill::PutMaximumTileWidth ( long pVal );
__declspec(implementation_key(690)) _bstr_t IVGTextureFill::GetLibraryName ( );
__declspec(implementation_key(691)) _bstr_t IVGTextureFill::GetTextureName ( );
__declspec(implementation_key(692)) _bstr_t IVGTextureFill::GetStyleName ( );
__declspec(implementation_key(693)) HRESULT IVGTextureFill::Select ( _bstr_t Texture, _bstr_t Library );
__declspec(implementation_key(694)) HRESULT IVGTextureFill::SetProperties ( SAFEARRAY * * SettingArray );
__declspec(implementation_key(695)) VARIANT_BOOL IVGTextureFill::GetMirrorFill ( );
__declspec(implementation_key(696)) void IVGTextureFill::PutMirrorFill ( VARIANT_BOOL pVal );
__declspec(implementation_key(697)) IVGTextureFillPropertiesPtr IVGTextureFill::GetProperties ( );
__declspec(implementation_key(698)) VARIANT_BOOL IVGTextureFill::GetMirrorFillX ( );
__declspec(implementation_key(699)) void IVGTextureFill::PutMirrorFillX ( VARIANT_BOOL pVal );
__declspec(implementation_key(700)) VARIANT_BOOL IVGTextureFill::GetMirrorFillY ( );
__declspec(implementation_key(701)) void IVGTextureFill::PutMirrorFillY ( VARIANT_BOOL pVal );
__declspec(implementation_key(702)) _bstr_t IVGPostScriptFill::GetName ( );
__declspec(implementation_key(703)) long IVGPostScriptFill::GetIndex ( );
__declspec(implementation_key(704)) long IVGPostScriptFill::GetProperties ( long Index );
__declspec(implementation_key(705)) void IVGPostScriptFill::PutProperties ( long Index, long pVal );
__declspec(implementation_key(706)) HRESULT IVGPostScriptFill::Select ( const _variant_t & IndexOrName );
__declspec(implementation_key(707)) HRESULT IVGPostScriptFill::SetProperties ( long Param1, long Param2, long Param3, long Param4, long Param5 );
__declspec(implementation_key(708)) long IVGPSScreenOptions::GetIndex ( );
__declspec(implementation_key(709)) _bstr_t IVGPSScreenOptions::GetName ( );
__declspec(implementation_key(710)) double IVGPSScreenOptions::GetAngle ( );
__declspec(implementation_key(711)) void IVGPSScreenOptions::PutAngle ( double pVal );
__declspec(implementation_key(712)) long IVGPSScreenOptions::GetFrequency ( );
__declspec(implementation_key(713)) void IVGPSScreenOptions::PutFrequency ( long pVal );
__declspec(implementation_key(714)) VARIANT_BOOL IVGPSScreenOptions::Select ( _bstr_t Name );
__declspec(implementation_key(715)) VARIANT_BOOL IVGPSScreenOptions::SetProperties ( const _variant_t & IndexOrName, double Angle, long Frequency );
__declspec(implementation_key(716)) _bstr_t IVGPSScreenOptions::NameByIndex ( long Index );
__declspec(implementation_key(717)) HRESULT IVGPSScreenOptions::Reset ( );
__declspec(implementation_key(718)) VARIANT_BOOL IVGPSScreenOptions::UserAssign ( long ParentWindowHandle );
__declspec(implementation_key(719)) double IVGArrowHeadOptions::GetLength ( );
__declspec(implementation_key(720)) void IVGArrowHeadOptions::PutLength ( double pVal );
__declspec(implementation_key(721)) double IVGArrowHeadOptions::GetWidth ( );
__declspec(implementation_key(722)) void IVGArrowHeadOptions::PutWidth ( double pVal );
__declspec(implementation_key(723)) double IVGArrowHeadOptions::GetOffsetX ( );
__declspec(implementation_key(724)) void IVGArrowHeadOptions::PutOffsetX ( double pVal );
__declspec(implementation_key(725)) double IVGArrowHeadOptions::GetOffsetY ( );
__declspec(implementation_key(726)) void IVGArrowHeadOptions::PutOffsetY ( double pVal );
__declspec(implementation_key(727)) VARIANT_BOOL IVGArrowHeadOptions::GetFlipHorizontal ( );
__declspec(implementation_key(728)) void IVGArrowHeadOptions::PutFlipHorizontal ( VARIANT_BOOL pVal );
__declspec(implementation_key(729)) VARIANT_BOOL IVGArrowHeadOptions::GetFlipVertical ( );
__declspec(implementation_key(730)) void IVGArrowHeadOptions::PutFlipVertical ( VARIANT_BOOL pVal );
__declspec(implementation_key(731)) HRESULT IVGArrowHeadOptions::Flip ( enum cdrFlipAxes Axes );
__declspec(implementation_key(732)) double IVGArrowHeadOptions::GetRotationAngle ( );
__declspec(implementation_key(733)) void IVGArrowHeadOptions::PutRotationAngle ( double pVal );
__declspec(implementation_key(734)) HRESULT IVGArrowHeadOptions::CopyAssign ( struct IVGArrowHeadOptions * Source );
__declspec(implementation_key(735)) IVGArrowHeadOptionsPtr IVGArrowHeadOptions::GetCopy ( );
__declspec(implementation_key(736)) VARIANT_BOOL IVGArrowHeadOptions::GetFlipVerical ( );
__declspec(implementation_key(737)) void IVGArrowHeadOptions::PutFlipVerical ( VARIANT_BOOL pVal );
__declspec(implementation_key(738)) long IVGImageTile::GetLeft ( );
__declspec(implementation_key(739)) long IVGImageTile::GetTop ( );
__declspec(implementation_key(740)) long IVGImageTile::GetRight ( );
__declspec(implementation_key(741)) long IVGImageTile::GetBottom ( );
__declspec(implementation_key(742)) long IVGImageTile::GetWidth ( );
__declspec(implementation_key(743)) long IVGImageTile::GetHeight ( );
__declspec(implementation_key(744)) long IVGImageTile::GetBytesPerTile ( );
__declspec(implementation_key(745)) long IVGImageTile::GetBytesPerLine ( );
__declspec(implementation_key(746)) long IVGImageTile::GetBytesPerPixel ( );
__declspec(implementation_key(747)) SAFEARRAY * IVGImageTile::GetPixelData ( );
__declspec(implementation_key(748)) void IVGImageTile::PutPixelData ( SAFEARRAY * * pVal );
__declspec(implementation_key(749)) VARIANT_BOOL IVGImageTile::GetReadOnly ( );
__declspec(implementation_key(750)) long IVGImageTiles::GetCount ( );
__declspec(implementation_key(751)) IVGImageTilePtr IVGImageTiles::GetItem ( long Index );
__declspec(implementation_key(752)) IUnknownPtr IVGImageTiles::Get_NewEnum ( );
__declspec(implementation_key(753)) IVGImageTilePtr IVGImageTiles::GetFirst ( );
__declspec(implementation_key(754)) IVGImageTilePtr IVGImageTiles::GetLast ( );
__declspec(implementation_key(755)) void IVGStructAlignProperties::PutAlignment ( enum cdrAlignment pVal );
__declspec(implementation_key(756)) enum cdrAlignment IVGStructAlignProperties::GetAlignment ( );
__declspec(implementation_key(757)) void IVGStructAlignProperties::PutFirstLineIndent ( double pVal );
__declspec(implementation_key(758)) double IVGStructAlignProperties::GetFirstLineIndent ( );
__declspec(implementation_key(759)) void IVGStructAlignProperties::PutLeftIndent ( double pVal );
__declspec(implementation_key(760)) double IVGStructAlignProperties::GetLeftIndent ( );
__declspec(implementation_key(761)) void IVGStructAlignProperties::PutRightIndent ( double pVal );
__declspec(implementation_key(762)) double IVGStructAlignProperties::GetRightIndent ( );
__declspec(implementation_key(763)) void IVGStructAlignProperties::PutMaxWordSpacing ( float pVal );
__declspec(implementation_key(764)) float IVGStructAlignProperties::GetMaxWordSpacing ( );
__declspec(implementation_key(765)) void IVGStructAlignProperties::PutMinWordSpacing ( float pVal );
__declspec(implementation_key(766)) float IVGStructAlignProperties::GetMinWordSpacing ( );
__declspec(implementation_key(767)) void IVGStructAlignProperties::PutMaxCharacterSpacing ( float pVal );
__declspec(implementation_key(768)) float IVGStructAlignProperties::GetMaxCharacterSpacing ( );
__declspec(implementation_key(769)) void IVGStructAlignProperties::PutHorizontalCharacterShift ( long pVal );
__declspec(implementation_key(770)) long IVGStructAlignProperties::GetHorizontalCharacterShift ( );
__declspec(implementation_key(771)) void IVGStructAlignProperties::PutVerticalCharacterShift ( long pVal );
__declspec(implementation_key(772)) long IVGStructAlignProperties::GetVerticalCharacterShift ( );
__declspec(implementation_key(773)) void IVGStructAlignProperties::PutCharacterRotation ( float pVal );
__declspec(implementation_key(774)) float IVGStructAlignProperties::GetCharacterRotation ( );
__declspec(implementation_key(775)) void IVGStructSpaceProperties::PutCharacterSpacing ( float pVal );
__declspec(implementation_key(776)) float IVGStructSpaceProperties::GetCharacterSpacing ( );
__declspec(implementation_key(777)) void IVGStructSpaceProperties::PutWordSpacing ( float pVal );
__declspec(implementation_key(778)) float IVGStructSpaceProperties::GetWordSpacing ( );
__declspec(implementation_key(779)) void IVGStructSpaceProperties::PutLineSpacing ( float pVal );
__declspec(implementation_key(780)) float IVGStructSpaceProperties::GetLineSpacing ( );
__declspec(implementation_key(781)) void IVGStructSpaceProperties::PutLineSpacingType ( enum cdrLineSpacingType pVal );
__declspec(implementation_key(782)) enum cdrLineSpacingType IVGStructSpaceProperties::GetLineSpacingType ( );
__declspec(implementation_key(783)) void IVGStructSpaceProperties::PutBeforeParagraphSpacing ( float pVal );
__declspec(implementation_key(784)) float IVGStructSpaceProperties::GetBeforeParagraphSpacing ( );
__declspec(implementation_key(785)) void IVGStructSpaceProperties::PutAfterParagraphSpacing ( float pVal );
__declspec(implementation_key(786)) float IVGStructSpaceProperties::GetAfterParagraphSpacing ( );
__declspec(implementation_key(787)) void IVGStructHyphenationSettings::PutUseAutomaticHyphenation ( VARIANT_BOOL pVal );
__declspec(implementation_key(788)) VARIANT_BOOL IVGStructHyphenationSettings::GetUseAutomaticHyphenation ( );
__declspec(implementation_key(789)) void IVGStructHyphenationSettings::PutBreakCapitalized ( VARIANT_BOOL pVal );
__declspec(implementation_key(790)) VARIANT_BOOL IVGStructHyphenationSettings::GetBreakCapitalized ( );
__declspec(implementation_key(791)) void IVGStructHyphenationSettings::PutHotZone ( double pVal );
__declspec(implementation_key(792)) double IVGStructHyphenationSettings::GetHotZone ( );
__declspec(implementation_key(793)) void IVGStructHyphenationSettings::PutMinWordLength ( long pVal );
__declspec(implementation_key(794)) long IVGStructHyphenationSettings::GetMinWordLength ( );
__declspec(implementation_key(795)) void IVGStructHyphenationSettings::PutMinCharactersBefore ( long pVal );
__declspec(implementation_key(796)) long IVGStructHyphenationSettings::GetMinCharactersBefore ( );
__declspec(implementation_key(797)) void IVGStructHyphenationSettings::PutMinCharactersAfter ( long pVal );
__declspec(implementation_key(798)) long IVGStructHyphenationSettings::GetMinCharactersAfter ( );
__declspec(implementation_key(799)) void IVGStructHyphenationSettings::PutBreakAllCapWords ( VARIANT_BOOL pVal );
__declspec(implementation_key(800)) VARIANT_BOOL IVGStructHyphenationSettings::GetBreakAllCapWords ( );
__declspec(implementation_key(801)) _bstr_t IVGUserSnapPoint::GetID ( );
__declspec(implementation_key(802)) VARIANT_BOOL IVGUserSnapPoint::GetAutoSnap ( );
__declspec(implementation_key(803)) void IVGUserSnapPoint::PutAutoSnap ( VARIANT_BOOL pVal );
__declspec(implementation_key(804)) enum cdrObjectSnapPointType IVGObjectSnapPoint::GetType ( );
__declspec(implementation_key(805)) enum cdrReferencePoint IVGBBoxSnapPoint::GetType ( );
__declspec(implementation_key(806)) long IVGEdgeSnapPoint::GetSegmentIndex ( );
__declspec(implementation_key(807)) double IVGEdgeSnapPoint::GetSegmentOffset ( );
__declspec(implementation_key(808)) _bstr_t IVGEffectCustomDistortion::GetDistortionID ( );
__declspec(implementation_key(809)) double IVGTextTabPosition::GetPosition ( );
__declspec(implementation_key(810)) void IVGTextTabPosition::PutPosition ( double pVal );
__declspec(implementation_key(811)) long IVGTextTabPosition::GetIndex ( );
__declspec(implementation_key(812)) enum cdrTextTabAlignment IVGTextTabPosition::GetAlignment ( );
__declspec(implementation_key(813)) void IVGTextTabPosition::PutAlignment ( enum cdrTextTabAlignment pVal );
__declspec(implementation_key(814)) VARIANT_BOOL IVGTextTabPosition::GetLeadered ( );
__declspec(implementation_key(815)) void IVGTextTabPosition::PutLeadered ( VARIANT_BOOL pVal );
__declspec(implementation_key(816)) HRESULT IVGTextTabPosition::Delete ( );
__declspec(implementation_key(817)) IVGTextTabPositionPtr IVGTextTabPositions::GetItem ( long Index );
__declspec(implementation_key(818)) long IVGTextTabPositions::GetCount ( );
__declspec(implementation_key(819)) IUnknownPtr IVGTextTabPositions::Get_NewEnum ( );
__declspec(implementation_key(820)) long IVGTextTabPositions::GetLeaderSpacing ( );
__declspec(implementation_key(821)) void IVGTextTabPositions::PutLeaderSpacing ( long pVal );
__declspec(implementation_key(822)) _bstr_t IVGTextTabPositions::GetLeaderCharacter ( );
__declspec(implementation_key(823)) void IVGTextTabPositions::PutLeaderCharacter ( _bstr_t pVal );
__declspec(implementation_key(824)) HRESULT IVGTextTabPositions::Clear ( );
__declspec(implementation_key(825)) IVGTextTabPositionPtr IVGTextTabPositions::Add ( double Position, enum cdrTextTabAlignment Alignment, VARIANT_BOOL Leadered );
__declspec(implementation_key(826)) HRESULT IVGTextTabPositions::AddEvery ( double Position, enum cdrTextTabAlignment Alignment, VARIANT_BOOL Leadered );
__declspec(implementation_key(827)) HRESULT IVGLocalizableString::Clear ( );
__declspec(implementation_key(828)) VARIANT_BOOL IVGLocalizableString::GetIsEmpty ( );
__declspec(implementation_key(829)) _bstr_t IVGLocalizableString::GetLangString ( _bstr_t Language );
__declspec(implementation_key(830)) HRESULT IVGLocalizableString::SetLangString ( _bstr_t Language, _bstr_t Value );
__declspec(implementation_key(831)) VARIANT_BOOL IVGLocalizableString::HasLangString ( _bstr_t Language );
__declspec(implementation_key(832)) VARIANT_BOOL IVGLocalizableString::GetHasDefaultLangString ( );
__declspec(implementation_key(833)) VARIANT_BOOL IVGLocalizableString::GetHasDefaultLangStringOnly ( );
__declspec(implementation_key(834)) VARIANT_BOOL IVGLocalizableString::GetHasNonDefaultLangStrings ( );
__declspec(implementation_key(835)) _bstr_t IVGLocalizableString::GetDefaultLangString ( );
__declspec(implementation_key(836)) void IVGLocalizableString::PutDefaultLangString ( _bstr_t pVal );
__declspec(implementation_key(837)) SAFEARRAY * IVGLocalizableString::GetLanguages ( );
__declspec(implementation_key(838)) IVGLocalizableStringPtr IVGFillMetadata::GetTitle ( );
__declspec(implementation_key(839)) IVGLocalizableStringPtr IVGFillMetadata::GetDescription ( );
__declspec(implementation_key(840)) IVGLocalizableStringPtr IVGFillMetadata::GetKeywords ( );
__declspec(implementation_key(841)) IVGLocalizableStringPtr IVGFillMetadata::GetSubject ( );
__declspec(implementation_key(842)) IVGLocalizableStringPtr IVGFillMetadata::GetCopyright ( );
__declspec(implementation_key(843)) _bstr_t IVGFillMetadata::GetCreatorTool ( );
__declspec(implementation_key(844)) DATE IVGFillMetadata::GetCreationDate ( );
__declspec(implementation_key(845)) DATE IVGFillMetadata::GetModificationDate ( );
__declspec(implementation_key(846)) _bstr_t IVGFillMetadata::GetDocumentID ( );
__declspec(implementation_key(847)) _bstr_t IVGFillMetadata::GetInstanceID ( );
__declspec(implementation_key(848)) SAFEARRAY * IVGFillMetadata::GetDerivedFrom ( );
__declspec(implementation_key(849)) IVGLocalizableStringPtr IVGFillMetadata::GetCategory ( );
__declspec(implementation_key(850)) long IVGTextIndentLevelStyle::GetLevel ( );
__declspec(implementation_key(851)) _bstr_t IVGTextIndentLevelStyle::GetFont ( );
__declspec(implementation_key(852)) void IVGTextIndentLevelStyle::PutFont ( _bstr_t pVal );
__declspec(implementation_key(853)) VARIANT_BOOL IVGTextIndentLevelStyle::GetUseParagraphFont ( );
__declspec(implementation_key(854)) void IVGTextIndentLevelStyle::PutUseParagraphFont ( VARIANT_BOOL pVal );
__declspec(implementation_key(855)) _bstr_t IVGTextIndentLevelStyle::GetSymbol ( );
__declspec(implementation_key(856)) void IVGTextIndentLevelStyle::PutSymbol ( _bstr_t pVal );
__declspec(implementation_key(857)) float IVGTextIndentLevelStyle::GetSize ( );
__declspec(implementation_key(858)) void IVGTextIndentLevelStyle::PutSize ( float pVal );
__declspec(implementation_key(859)) float IVGTextIndentLevelStyle::GetBaselineShift ( );
__declspec(implementation_key(860)) void IVGTextIndentLevelStyle::PutBaselineShift ( float pVal );
__declspec(implementation_key(861)) VARIANT_BOOL IVGTextIndentLevelStyle::GetHangingIndent ( );
__declspec(implementation_key(862)) void IVGTextIndentLevelStyle::PutHangingIndent ( VARIANT_BOOL pVal );
__declspec(implementation_key(863)) double IVGTextIndentLevelStyle::GetFirstCharIndent ( );
__declspec(implementation_key(864)) void IVGTextIndentLevelStyle::PutFirstCharIndent ( double pVal );
__declspec(implementation_key(865)) VARIANT_BOOL IVGTextIndentLevelStyle::GetFirstCharIndentIncludesBullet ( );
__declspec(implementation_key(866)) void IVGTextIndentLevelStyle::PutFirstCharIndentIncludesBullet ( VARIANT_BOOL pVal );
__declspec(implementation_key(867)) _bstr_t IVGTextIndentLevelStyle::GetFormat ( );
__declspec(implementation_key(868)) void IVGTextIndentLevelStyle::PutFormat ( _bstr_t pVal );
__declspec(implementation_key(869)) enum cdrTextIndentLevelStyle IVGTextIndentLevelStyle::GetNumberStyle ( );
__declspec(implementation_key(870)) void IVGTextIndentLevelStyle::PutNumberStyle ( enum cdrTextIndentLevelStyle pVal );
__declspec(implementation_key(871)) IUnknownPtr IVGTextIndentLevelStyles::Get_NewEnum ( );
__declspec(implementation_key(872)) IVGTextIndentLevelStylePtr IVGTextIndentLevelStyles::GetItem ( long Index );
__declspec(implementation_key(873)) long IVGTextIndentLevelStyles::GetCount ( );
__declspec(implementation_key(874)) long IVGTextVariableAxis::GetTag ( );
__declspec(implementation_key(875)) _bstr_t IVGTextVariableAxis::GetName ( );
__declspec(implementation_key(876)) double IVGTextVariableAxis::GetValue ( );
__declspec(implementation_key(877)) void IVGTextVariableAxis::PutValue ( double pVal );
__declspec(implementation_key(878)) double IVGTextVariableAxis::GetMinValue ( );
__declspec(implementation_key(879)) double IVGTextVariableAxis::GetMaxValue ( );
__declspec(implementation_key(880)) double IVGTextVariableAxis::GetDefaultValue ( );
__declspec(implementation_key(881)) IUnknownPtr IVGTextVariableAxes::Get_NewEnum ( );
__declspec(implementation_key(882)) IVGTextVariableAxisPtr IVGTextVariableAxes::GetItem ( long Index );
__declspec(implementation_key(883)) long IVGTextVariableAxes::GetCount ( );
__declspec(implementation_key(884)) enum cdrGuideType IVGGuide::GetType ( );
__declspec(implementation_key(885)) VARIANT_BOOL IVGGuide::GetPreset ( );
__declspec(implementation_key(886)) HRESULT IVGGuide::MakeEditable ( );
__declspec(implementation_key(887)) double IVGGuide::GetPoint1X ( );
__declspec(implementation_key(888)) double IVGGuide::GetPoint1Y ( );
__declspec(implementation_key(889)) double IVGGuide::GetPoint2X ( );
__declspec(implementation_key(890)) double IVGGuide::GetPoint2Y ( );
__declspec(implementation_key(891)) double IVGGuide::GetAngle ( );
__declspec(implementation_key(892)) HRESULT IVGGuide::GetPoints ( double * Point1X, double * Point1Y, double * Point2X, double * Point2Y );
__declspec(implementation_key(893)) HRESULT IVGGuide::GetPointAndAngle ( double * PointX, double * PointY, double * Angle );
__declspec(implementation_key(894)) HRESULT IVGGuide::SetPoints ( double Point1X, double Point1Y, double Point2X, double Point2Y );
__declspec(implementation_key(895)) HRESULT IVGGuide::SetPointAndAngle ( double PointX, double PointY, double Angle );
__declspec(implementation_key(896)) double IVGGuide::GetInterceptX ( );
__declspec(implementation_key(897)) double IVGGuide::GetInterceptY ( );
__declspec(implementation_key(898)) double IVGGuide::GetCenterX ( );
__declspec(implementation_key(899)) double IVGGuide::GetCenterY ( );
__declspec(implementation_key(900)) _bstr_t IVGURL::GetAddress ( );
__declspec(implementation_key(901)) void IVGURL::PutAddress ( _bstr_t pVal );
__declspec(implementation_key(902)) _bstr_t IVGURL::GetTargetFrame ( );
__declspec(implementation_key(903)) void IVGURL::PutTargetFrame ( _bstr_t pVal );
__declspec(implementation_key(904)) _bstr_t IVGURL::GetAltComment ( );
__declspec(implementation_key(905)) void IVGURL::PutAltComment ( _bstr_t pVal );
__declspec(implementation_key(906)) _bstr_t IVGURL::GetBookMark ( );
__declspec(implementation_key(907)) void IVGURL::PutBookMark ( _bstr_t pVal );
__declspec(implementation_key(908)) enum cdrURLRegion IVGURL::GetRegion ( );
__declspec(implementation_key(909)) void IVGURL::PutRegion ( enum cdrURLRegion pVal );
__declspec(implementation_key(910)) _bstr_t IVGCustomShape::GetTypeID ( );
__declspec(implementation_key(911)) _bstr_t IVGOLE::GetClassID ( );
__declspec(implementation_key(912)) _bstr_t IVGOLE::GetProgID ( );
__declspec(implementation_key(913)) enum cdrOLEType IVGOLE::GetType ( );
__declspec(implementation_key(914)) _bstr_t IVGOLE::GetFullName ( );
__declspec(implementation_key(915)) _bstr_t IVGOLE::GetShortName ( );
__declspec(implementation_key(916)) _bstr_t IVGOLE::GetServerName ( );
__declspec(implementation_key(917)) VARIANT_BOOL IVGOLE::GetModified ( );
__declspec(implementation_key(918)) VARIANT_BOOL IVGOLE::GetIsInPlaceActive ( );
__declspec(implementation_key(919)) VARIANT_BOOL IVGOLE::GetIsOpen ( );
__declspec(implementation_key(920)) VARIANT_BOOL IVGOLE::GetIsServerRunning ( );
__declspec(implementation_key(921)) long IVGOLE::GetInPlaceWindowHandle ( );
__declspec(implementation_key(922)) HRESULT IVGOLE::Edit ( );
__declspec(implementation_key(923)) HRESULT IVGOLE::Open ( );
__declspec(implementation_key(924)) HRESULT IVGOLE::Activate ( );
__declspec(implementation_key(925)) HRESULT IVGOLE::Deactivate ( );
__declspec(implementation_key(926)) HRESULT IVGOLE::DoVerb ( long VerbID );
__declspec(implementation_key(927)) VARIANT_BOOL IVGOLE::GetIsLinkUpToDate ( );
__declspec(implementation_key(928)) _bstr_t IVGOLE::GetLinkPath ( );
__declspec(implementation_key(929)) HRESULT IVGOLE::UpdateLink ( );
__declspec(implementation_key(930)) double IVGBSplineControlPoint::Getx ( );
__declspec(implementation_key(931)) void IVGBSplineControlPoint::Putx ( double pVal );
__declspec(implementation_key(932)) double IVGBSplineControlPoint::Gety ( );
__declspec(implementation_key(933)) void IVGBSplineControlPoint::Puty ( double pVal );
__declspec(implementation_key(934)) VARIANT_BOOL IVGBSplineControlPoint::GetClamped ( );
__declspec(implementation_key(935)) void IVGBSplineControlPoint::PutClamped ( VARIANT_BOOL pVal );
__declspec(implementation_key(936)) HRESULT IVGBSplineControlPoint::Move ( double x, double y );
__declspec(implementation_key(937)) HRESULT IVGBSplineControlPoint::Delete ( );
__declspec(implementation_key(938)) HRESULT IVGBSplineControlPoint::GetPosition ( double * x, double * y );
__declspec(implementation_key(939)) HRESULT IVGBSplineControlPoint::SetPosition ( double x, double y );
__declspec(implementation_key(940)) HRESULT IVGBSplineControlPoint::SetProperties ( double x, double y, VARIANT_BOOL Clamped );
__declspec(implementation_key(941)) long IVGBSplineControlPoint::GetIndex ( );
__declspec(implementation_key(942)) IVGBSplineControlPointPtr IVGBSplineControlPoints::GetFirst ( );
__declspec(implementation_key(943)) IVGBSplineControlPointPtr IVGBSplineControlPoints::GetLast ( );
__declspec(implementation_key(944)) IVGBSplineControlPointPtr IVGBSplineControlPoints::GetItem ( long Index );
__declspec(implementation_key(945)) long IVGBSplineControlPoints::GetCount ( );
__declspec(implementation_key(946)) IUnknownPtr IVGBSplineControlPoints::Get_NewEnum ( );
__declspec(implementation_key(947)) HRESULT IVGBSplineControlPoints::Resize ( long HowMany );
__declspec(implementation_key(948)) IVGBSplineControlPointsPtr IVGBSpline::GetControlPoints ( );
__declspec(implementation_key(949)) VARIANT_BOOL IVGBSpline::GetClosed ( );
__declspec(implementation_key(950)) void IVGBSpline::PutClosed ( VARIANT_BOOL pVal );
__declspec(implementation_key(951)) HRESULT IVGBSpline::InsertControlPoint ( long Index, double x, double y, VARIANT_BOOL Clamped );
__declspec(implementation_key(952)) HRESULT IVGBSpline::InsertControlPoints ( long Index, long HowMany, double x, double y, VARIANT_BOOL Clamped );
__declspec(implementation_key(953)) IVGBSplinePtr IVGBSpline::GetCopy ( );
__declspec(implementation_key(954)) HRESULT IVGBSpline::CopyAssign ( struct IVGBSpline * rhs );
__declspec(implementation_key(955)) _bstr_t IStructImportCropOptions::GetFileName ( );
__declspec(implementation_key(956)) long IStructImportCropOptions::GetFilterID ( );
__declspec(implementation_key(957)) long IStructImportCropOptions::GetCustomData ( );
__declspec(implementation_key(958)) long IStructImportCropOptions::GetImageWidth ( );
__declspec(implementation_key(959)) long IStructImportCropOptions::GetImageHeight ( );
__declspec(implementation_key(960)) long IStructImportCropOptions::GetDpiX ( );
__declspec(implementation_key(961)) long IStructImportCropOptions::GetDpiY ( );
__declspec(implementation_key(962)) long IStructImportCropOptions::GetWidth ( );
__declspec(implementation_key(963)) void IStructImportCropOptions::PutWidth ( long pVal );
__declspec(implementation_key(964)) long IStructImportCropOptions::GetHeight ( );
__declspec(implementation_key(965)) void IStructImportCropOptions::PutHeight ( long pVal );
__declspec(implementation_key(966)) long IStructImportCropOptions::GetLeft ( );
__declspec(implementation_key(967)) void IStructImportCropOptions::PutLeft ( long pVal );
__declspec(implementation_key(968)) long IStructImportCropOptions::GetTop ( );
__declspec(implementation_key(969)) void IStructImportCropOptions::PutTop ( long pVal );
__declspec(implementation_key(970)) VARIANT_BOOL IImportCropHandler::Crop ( struct IStructImportCropOptions * Options );
__declspec(implementation_key(971)) _bstr_t IStructImportResampleOptions::GetFileName ( );
__declspec(implementation_key(972)) long IStructImportResampleOptions::GetFilterID ( );
__declspec(implementation_key(973)) long IStructImportResampleOptions::GetCustomData ( );
__declspec(implementation_key(974)) long IStructImportResampleOptions::GetWidth ( );
__declspec(implementation_key(975)) void IStructImportResampleOptions::PutWidth ( long pVal );
__declspec(implementation_key(976)) long IStructImportResampleOptions::GetHeight ( );
__declspec(implementation_key(977)) void IStructImportResampleOptions::PutHeight ( long pVal );
__declspec(implementation_key(978)) long IStructImportResampleOptions::GetDpiX ( );
__declspec(implementation_key(979)) void IStructImportResampleOptions::PutDpiX ( long pVal );
__declspec(implementation_key(980)) long IStructImportResampleOptions::GetDpiY ( );
__declspec(implementation_key(981)) void IStructImportResampleOptions::PutDpiY ( long pVal );
__declspec(implementation_key(982)) VARIANT_BOOL IImportResampleHandler::Resample ( struct IStructImportResampleOptions * Options );
__declspec(implementation_key(983)) enum clrColorPolicyAction IVGColorManagementPolicy::GetActionForRGB ( );
__declspec(implementation_key(984)) void IVGColorManagementPolicy::PutActionForRGB ( enum clrColorPolicyAction pVal );
__declspec(implementation_key(985)) enum clrColorPolicyAction IVGColorManagementPolicy::GetActionForCMYK ( );
__declspec(implementation_key(986)) void IVGColorManagementPolicy::PutActionForCMYK ( enum clrColorPolicyAction pVal );
__declspec(implementation_key(987)) enum clrColorPolicyAction IVGColorManagementPolicy::GetActionForGrayscale ( );
__declspec(implementation_key(988)) void IVGColorManagementPolicy::PutActionForGrayscale ( enum clrColorPolicyAction pVal );
__declspec(implementation_key(989)) VARIANT_BOOL IVGColorManagementPolicy::GetWarnOnMismatchedProfiles ( );
__declspec(implementation_key(990)) void IVGColorManagementPolicy::PutWarnOnMismatchedProfiles ( VARIANT_BOOL pVal );
__declspec(implementation_key(991)) VARIANT_BOOL IVGColorManagementPolicy::GetWarnOnMissingProfiles ( );
__declspec(implementation_key(992)) void IVGColorManagementPolicy::PutWarnOnMissingProfiles ( VARIANT_BOOL pVal );
__declspec(implementation_key(993)) IVGColorManagementPolicyPtr IVGStructColorConversionOptions::GetColorPolicy ( );
__declspec(implementation_key(994)) _bstr_t IVGStructColorConversionOptions::GetSourceColorProfileList ( );
__declspec(implementation_key(995)) void IVGStructColorConversionOptions::PutSourceColorProfileList ( _bstr_t pVal );
__declspec(implementation_key(996)) _bstr_t IVGStructColorConversionOptions::GetTargetColorProfileList ( );
__declspec(implementation_key(997)) void IVGStructColorConversionOptions::PutTargetColorProfileList ( _bstr_t pVal );
__declspec(implementation_key(998)) IColorConversionHandlerPtr IVGStructColorConversionOptions::GetColorConversionHandler ( );
__declspec(implementation_key(999)) void IVGStructColorConversionOptions::PutRefColorConversionHandler ( struct IColorConversionHandler * * ppVal );
__declspec(implementation_key(1000)) VARIANT_BOOL IVGStructImportOptions::GetLinkBitmapExternally ( );
__declspec(implementation_key(1001)) void IVGStructImportOptions::PutLinkBitmapExternally ( VARIANT_BOOL pVal );
__declspec(implementation_key(1002)) VARIANT_BOOL IVGStructImportOptions::GetCombineMultilayerBitmaps ( );
__declspec(implementation_key(1003)) void IVGStructImportOptions::PutCombineMultilayerBitmaps ( VARIANT_BOOL pVal );
__declspec(implementation_key(1004)) VARIANT_BOOL IVGStructImportOptions::GetExtractICCProfile ( );
__declspec(implementation_key(1005)) void IVGStructImportOptions::PutExtractICCProfile ( VARIANT_BOOL pVal );
__declspec(implementation_key(1006)) _bstr_t IVGStructImportOptions::GetICCFileName ( );
__declspec(implementation_key(1007)) void IVGStructImportOptions::PutICCFileName ( _bstr_t pVal );
__declspec(implementation_key(1008)) VARIANT_BOOL IVGStructImportOptions::GetMaintainLayers ( );
__declspec(implementation_key(1009)) void IVGStructImportOptions::PutMaintainLayers ( VARIANT_BOOL pVal );
__declspec(implementation_key(1010)) VARIANT_BOOL IVGStructImportOptions::GetUseOPILinks ( );
__declspec(implementation_key(1011)) void IVGStructImportOptions::PutUseOPILinks ( VARIANT_BOOL pVal );
__declspec(implementation_key(1012)) VARIANT_BOOL IVGStructImportOptions::GetDetectWatermark ( );
__declspec(implementation_key(1013)) void IVGStructImportOptions::PutDetectWatermark ( VARIANT_BOOL pVal );
__declspec(implementation_key(1014)) enum cdrImportMode IVGStructImportOptions::GetMode ( );
__declspec(implementation_key(1015)) void IVGStructImportOptions::PutMode ( enum cdrImportMode pVal );
__declspec(implementation_key(1016)) long IVGStructImportOptions::GetCustomData ( );
__declspec(implementation_key(1017)) void IVGStructImportOptions::PutCustomData ( long pVal );
__declspec(implementation_key(1018)) long IVGStructImportOptions::GetImageIndex ( );
__declspec(implementation_key(1019)) void IVGStructImportOptions::PutImageIndex ( long pVal );
__declspec(implementation_key(1020)) IImportCropHandlerPtr IVGStructImportOptions::GetCropHandler ( );
__declspec(implementation_key(1021)) void IVGStructImportOptions::PutRefCropHandler ( struct IImportCropHandler * * ppVal );
__declspec(implementation_key(1022)) IImportResampleHandlerPtr IVGStructImportOptions::GetResampleHandler ( );
__declspec(implementation_key(1023)) void IVGStructImportOptions::PutRefResampleHandler ( struct IImportResampleHandler * * ppVal );
__declspec(implementation_key(1024)) enum cdrImportTextFormatting IVGStructImportOptions::GetTextFormatting ( );
__declspec(implementation_key(1025)) void IVGStructImportOptions::PutTextFormatting ( enum cdrImportTextFormatting pVal );
__declspec(implementation_key(1026)) enum cdrImportTableOutline IVGStructImportOptions::GetTableOutline ( );
__declspec(implementation_key(1027)) void IVGStructImportOptions::PutTableOutline ( enum cdrImportTableOutline pVal );
__declspec(implementation_key(1028)) long IVGStructImportOptions::GetCodePage ( );
__declspec(implementation_key(1029)) void IVGStructImportOptions::PutCodePage ( long pVal );
__declspec(implementation_key(1030)) long IVGStructImportOptions::GetResampleWidth ( );
__declspec(implementation_key(1031)) void IVGStructImportOptions::PutResampleWidth ( long pVal );
__declspec(implementation_key(1032)) long IVGStructImportOptions::GetResampleHeight ( );
__declspec(implementation_key(1033)) void IVGStructImportOptions::PutResampleHeight ( long pVal );
__declspec(implementation_key(1034)) long IVGStructImportOptions::GetCropLeft ( );
__declspec(implementation_key(1035)) void IVGStructImportOptions::PutCropLeft ( long pVal );
__declspec(implementation_key(1036)) long IVGStructImportOptions::GetCropTop ( );
__declspec(implementation_key(1037)) void IVGStructImportOptions::PutCropTop ( long pVal );
__declspec(implementation_key(1038)) long IVGStructImportOptions::GetCropWidth ( );
__declspec(implementation_key(1039)) void IVGStructImportOptions::PutCropWidth ( long pVal );
__declspec(implementation_key(1040)) long IVGStructImportOptions::GetCropHeight ( );
__declspec(implementation_key(1041)) void IVGStructImportOptions::PutCropHeight ( long pVal );
__declspec(implementation_key(1042)) long IVGStructImportOptions::GetResampleDpiX ( );
__declspec(implementation_key(1043)) void IVGStructImportOptions::PutResampleDpiX ( long pVal );
__declspec(implementation_key(1044)) long IVGStructImportOptions::GetResampleDpiY ( );
__declspec(implementation_key(1045)) void IVGStructImportOptions::PutResampleDpiY ( long pVal );
__declspec(implementation_key(1046)) VARIANT_BOOL IVGStructImportOptions::GetForceCMYKBlackText ( );
__declspec(implementation_key(1047)) void IVGStructImportOptions::PutForceCMYKBlackText ( VARIANT_BOOL pVal );
__declspec(implementation_key(1048)) VARIANT_BOOL IVGStructImportOptions::GetConvertTablesToText ( );
__declspec(implementation_key(1049)) void IVGStructImportOptions::PutConvertTablesToText ( VARIANT_BOOL pVal );
__declspec(implementation_key(1050)) _bstr_t IVGStructImportOptions::GetTableColumnDelimiter ( );
__declspec(implementation_key(1051)) void IVGStructImportOptions::PutTableColumnDelimiter ( _bstr_t pVal );
__declspec(implementation_key(1052)) IVGStructColorConversionOptionsPtr IVGStructImportOptions::GetColorConversionOptions ( );
__declspec(implementation_key(1053)) IVGStructColorConversionOptionsPtr IVGStructPasteOptions::GetColorConversionOptions ( );
__declspec(implementation_key(1054)) _bstr_t IVGCommentAuthor::GetEmail ( );
__declspec(implementation_key(1055)) _bstr_t IVGCommentAuthor::GetAvatar ( );
__declspec(implementation_key(1056)) enum cdrAuthorAuthentication IVGCommentAuthor::GetAuthentication ( );
__declspec(implementation_key(1057)) _bstr_t IVGCommentAuthor::GetName ( );
__declspec(implementation_key(1058)) _bstr_t IVGCommentAuthor::GetOnlineID ( );
__declspec(implementation_key(1059)) void IVGCommentAuthor::PutOnlineID ( _bstr_t pRet );
__declspec(implementation_key(1060)) double ICorelScriptTools::AngleConvert ( long FromUnit, long ToUnit, double Value );
__declspec(implementation_key(1061)) double ICorelScriptTools::ASin ( double Value );
__declspec(implementation_key(1062)) HRESULT ICorelScriptTools::BeginWaitCursor ( );
__declspec(implementation_key(1063)) HRESULT ICorelScriptTools::EndWaitCursor ( );
__declspec(implementation_key(1064)) DATE ICorelScriptTools::BuildDate ( long Year, long Month, long Day );
__declspec(implementation_key(1065)) DATE ICorelScriptTools::BuildTime ( long Hour, long Minute, long Second );
__declspec(implementation_key(1066)) long ICorelScriptTools::Dec ( _bstr_t Hex );
__declspec(implementation_key(1067)) long ICorelScriptTools::FileAttr ( _bstr_t FolderFile );
__declspec(implementation_key(1068)) _bstr_t ICorelScriptTools::FindFirstFolder ( _bstr_t SearchCriteria, long Attributes );
__declspec(implementation_key(1069)) _bstr_t ICorelScriptTools::FindNextFolder ( );
__declspec(implementation_key(1070)) _bstr_t ICorelScriptTools::FormatTime ( DATE Time, _bstr_t Format );
__declspec(implementation_key(1071)) double ICorelScriptTools::FromCentimeters ( double Value );
__declspec(implementation_key(1072)) double ICorelScriptTools::FromCiceros ( double Value );
__declspec(implementation_key(1073)) double ICorelScriptTools::FromDidots ( double Value );
__declspec(implementation_key(1074)) double ICorelScriptTools::FromInches ( double Value );
__declspec(implementation_key(1075)) double ICorelScriptTools::FromPicas ( double Value );
__declspec(implementation_key(1076)) double ICorelScriptTools::FromPoints ( double Value );
__declspec(implementation_key(1077)) long ICorelScriptTools::GetAppHandle ( );
__declspec(implementation_key(1078)) VARIANT_BOOL ICorelScriptTools::GetColor ( long * Red, long * Green, long * Blue );
__declspec(implementation_key(1079)) _bstr_t ICorelScriptTools::GetCommandLine ( );
__declspec(implementation_key(1080)) _bstr_t ICorelScriptTools::GetCurrFolder ( );
__declspec(implementation_key(1081)) HRESULT ICorelScriptTools::GetDateInfo ( DATE Date, long * Year, long * Month, long * Day, long * DayOfWeek );
__declspec(implementation_key(1082)) _bstr_t ICorelScriptTools::GetFileBox ( _bstr_t Filter, _bstr_t Title, long Type, _bstr_t File, _bstr_t Extension, _bstr_t Folder, _bstr_t Button );
__declspec(implementation_key(1083)) _bstr_t ICorelScriptTools::GetFolder ( _bstr_t InitFolder, _bstr_t Title, long ParentWindowHandle );
__declspec(implementation_key(1084)) VARIANT_BOOL ICorelScriptTools::GetFont ( BSTR * FaceName, long * PointSize, long * Weight, VARIANT_BOOL * Italic, VARIANT_BOOL * Underline, VARIANT_BOOL * StrikeOut, long * Red, long * Green, long * Blue );
__declspec(implementation_key(1085)) long ICorelScriptTools::GetProcessInfo ( long ProcessHandle );
__declspec(implementation_key(1086)) _bstr_t ICorelScriptTools::GetScriptFolder ( );
__declspec(implementation_key(1087)) _bstr_t ICorelScriptTools::GetTempFolder ( );
__declspec(implementation_key(1088)) HRESULT ICorelScriptTools::GetTimeInfo ( DATE Time, long * Hour, long * Minute, long * Second );
__declspec(implementation_key(1089)) long ICorelScriptTools::GetType ( const _variant_t & Expression );
__declspec(implementation_key(1090)) long ICorelScriptTools::GetVersion ( long Option );
__declspec(implementation_key(1091)) long ICorelScriptTools::GetWinHandle ( );
__declspec(implementation_key(1092)) VARIANT_BOOL ICorelScriptTools::Kill ( _bstr_t FileName );
__declspec(implementation_key(1093)) double ICorelScriptTools::LengthConvert ( long FromUnit, long ToUnit, double Value );
__declspec(implementation_key(1094)) double ICorelScriptTools::Log ( double Value );
__declspec(implementation_key(1095)) VARIANT_BOOL ICorelScriptTools::MkFolder ( _bstr_t Folder );
__declspec(implementation_key(1096)) _variant_t ICorelScriptTools::RegistryQuery ( long MainKey, _bstr_t SubKey, _bstr_t Value );
__declspec(implementation_key(1097)) VARIANT_BOOL ICorelScriptTools::Rename ( _bstr_t Src, _bstr_t Dst, long Overwrite );
__declspec(implementation_key(1098)) VARIANT_BOOL ICorelScriptTools::RmFolder ( _bstr_t Folder );
__declspec(implementation_key(1099)) double ICorelScriptTools::ToCentimeters ( double Value );
__declspec(implementation_key(1100)) double ICorelScriptTools::ToCiceros ( double Value );
__declspec(implementation_key(1101)) double ICorelScriptTools::ToDidots ( double Value );
__declspec(implementation_key(1102)) double ICorelScriptTools::ToInches ( double Value );
__declspec(implementation_key(1103)) double ICorelScriptTools::ToPicas ( double Value );
__declspec(implementation_key(1104)) double ICorelScriptTools::ToPoints ( double Value );
__declspec(implementation_key(1105)) IDispatchPtr IVGFontList::GetApplication ( );
__declspec(implementation_key(1106)) IDispatchPtr IVGFontList::GetParent ( );
__declspec(implementation_key(1107)) _bstr_t IVGFontList::GetItem ( long Index );
__declspec(implementation_key(1108)) IUnknownPtr IVGFontList::Get_NewEnum ( );
__declspec(implementation_key(1109)) long IVGFontList::GetCount ( );
__declspec(implementation_key(1110)) IDispatchPtr IVGAppWindow::GetApplication ( );
__declspec(implementation_key(1111)) IDispatchPtr IVGAppWindow::GetParent ( );
__declspec(implementation_key(1112)) HRESULT IVGAppWindow::Activate ( );
__declspec(implementation_key(1113)) VARIANT_BOOL IVGAppWindow::GetActive ( );
__declspec(implementation_key(1114)) _bstr_t IVGAppWindow::GetCaption ( );
__declspec(implementation_key(1115)) void IVGAppWindow::PutCaption ( _bstr_t pVal );
__declspec(implementation_key(1116)) long IVGAppWindow::GetHeight ( );
__declspec(implementation_key(1117)) void IVGAppWindow::PutHeight ( long pVal );
__declspec(implementation_key(1118)) long IVGAppWindow::GetWidth ( );
__declspec(implementation_key(1119)) void IVGAppWindow::PutWidth ( long pVal );
__declspec(implementation_key(1120)) long IVGAppWindow::GetLeft ( );
__declspec(implementation_key(1121)) void IVGAppWindow::PutLeft ( long pVal );
__declspec(implementation_key(1122)) long IVGAppWindow::GetTop ( );
__declspec(implementation_key(1123)) void IVGAppWindow::PutTop ( long pVal );
__declspec(implementation_key(1124)) enum cdrWindowState IVGAppWindow::GetWindowState ( );
__declspec(implementation_key(1125)) void IVGAppWindow::PutWindowState ( enum cdrWindowState pVal );
__declspec(implementation_key(1126)) long IVGAppWindow::GetClientWidth ( );
__declspec(implementation_key(1127)) long IVGAppWindow::GetClientHeight ( );
__declspec(implementation_key(1128)) long IVGAppWindow::GetHandle ( );
__declspec(implementation_key(1129)) IVGPatternCanvasPtr IVGPatternCanvases::GetItem ( long Index );
__declspec(implementation_key(1130)) void IVGPatternCanvases::PutItem ( long Index, struct IVGPatternCanvas * ppVal );
__declspec(implementation_key(1131)) IUnknownPtr IVGPatternCanvases::Get_NewEnum ( );
__declspec(implementation_key(1132)) long IVGPatternCanvases::GetCount ( );
__declspec(implementation_key(1133)) long IVGPatternCanvases::Add ( struct IVGPatternCanvas * PatternCanvas );
__declspec(implementation_key(1134)) HRESULT IVGPatternCanvases::Remove ( long Index );
__declspec(implementation_key(1135)) IDispatchPtr IVGClipboard::GetApplication ( );
__declspec(implementation_key(1136)) IDispatchPtr IVGClipboard::GetParent ( );
__declspec(implementation_key(1137)) VARIANT_BOOL IVGClipboard::GetValid ( );
__declspec(implementation_key(1138)) VARIANT_BOOL IVGClipboard::GetEmpty ( );
__declspec(implementation_key(1139)) HRESULT IVGClipboard::Clear ( );
__declspec(implementation_key(1140)) VARIANT_BOOL IVGClipboard::DataPresent ( _bstr_t FormatName );
__declspec(implementation_key(1141)) _bstr_t IVGGMSMacro::GetName ( );
__declspec(implementation_key(1142)) HRESULT IVGGMSMacro::Run ( );
__declspec(implementation_key(1143)) HRESULT IVGGMSMacro::Edit ( );
__declspec(implementation_key(1144)) HRESULT IVGGMSMacro::Delete ( );
__declspec(implementation_key(1145)) IUnknownPtr IVGGMSMacros::Get_NewEnum ( );
__declspec(implementation_key(1146)) IVGGMSMacroPtr IVGGMSMacros::GetItem ( const _variant_t & IndexOrName );
__declspec(implementation_key(1147)) long IVGGMSMacros::GetCount ( );
__declspec(implementation_key(1148)) IVGGMSMacroPtr IVGGMSMacros::Create ( _bstr_t Name );
__declspec(implementation_key(1149)) _bstr_t IVGGMSProject::GetName ( );
__declspec(implementation_key(1150)) void IVGGMSProject::PutName ( _bstr_t pVal );
__declspec(implementation_key(1151)) _bstr_t IVGGMSProject::GetDisplayName ( );
__declspec(implementation_key(1152)) IVGGMSMacrosPtr IVGGMSProject::GetMacros ( );
__declspec(implementation_key(1153)) HRESULT IVGGMSProject::Unload ( );
__declspec(implementation_key(1154)) _bstr_t IVGGMSProject::GetFileName ( );
__declspec(implementation_key(1155)) _bstr_t IVGGMSProject::GetFilePath ( );
__declspec(implementation_key(1156)) _bstr_t IVGGMSProject::GetFullFileName ( );
__declspec(implementation_key(1157)) VARIANT_BOOL IVGGMSProject::GetDirty ( );
__declspec(implementation_key(1158)) void IVGGMSProject::PutDirty ( VARIANT_BOOL pVal );
__declspec(implementation_key(1159)) VARIANT_BOOL IVGGMSProject::GetLocked ( );
__declspec(implementation_key(1160)) VARIANT_BOOL IVGGMSProject::GetPasswordProtected ( );
__declspec(implementation_key(1161)) IUnknownPtr IVGGMSProjects::Get_NewEnum ( );
__declspec(implementation_key(1162)) IVGGMSProjectPtr IVGGMSProjects::GetItem ( const _variant_t & IndexOrName );
__declspec(implementation_key(1163)) long IVGGMSProjects::GetCount ( );
__declspec(implementation_key(1164)) IVGGMSProjectPtr IVGGMSProjects::Load ( _bstr_t FileName, VARIANT_BOOL CopyFile, VARIANT_BOOL ForAllUsers );
__declspec(implementation_key(1165)) IVGGMSProjectPtr IVGGMSProjects::Create ( _bstr_t Name, VARIANT_BOOL ForAllUsers, _bstr_t FileName );
__declspec(implementation_key(1166)) _bstr_t IVGGMSManager::GetGMSPath ( );
__declspec(implementation_key(1167)) _variant_t IVGGMSManager::RunMacro ( _bstr_t ModuleName, _bstr_t MacroName, SAFEARRAY * * Parameters );
__declspec(implementation_key(1168)) _bstr_t IVGGMSManager::GetUserGMSPath ( );
__declspec(implementation_key(1169)) IVGGMSProjectsPtr IVGGMSManager::GetProjects ( );
__declspec(implementation_key(1170)) void IVGStructSaveAsOptions::PutFilter ( enum cdrFilter pVal );
__declspec(implementation_key(1171)) enum cdrFilter IVGStructSaveAsOptions::GetFilter ( );
__declspec(implementation_key(1172)) void IVGStructSaveAsOptions::PutVersion ( enum cdrFileVersion pVal );
__declspec(implementation_key(1173)) enum cdrFileVersion IVGStructSaveAsOptions::GetVersion ( );
__declspec(implementation_key(1174)) void IVGStructSaveAsOptions::PutThumbnailSize ( enum cdrThumbnailSize pVal );
__declspec(implementation_key(1175)) enum cdrThumbnailSize IVGStructSaveAsOptions::GetThumbnailSize ( );
__declspec(implementation_key(1176)) void IVGStructSaveAsOptions::PutRange ( enum cdrExportRange pVal );
__declspec(implementation_key(1177)) enum cdrExportRange IVGStructSaveAsOptions::GetRange ( );
__declspec(implementation_key(1178)) void IVGStructSaveAsOptions::PutOverwrite ( VARIANT_BOOL pVal );
__declspec(implementation_key(1179)) VARIANT_BOOL IVGStructSaveAsOptions::GetOverwrite ( );
__declspec(implementation_key(1180)) void IVGStructSaveAsOptions::PutEmbedICCProfile ( VARIANT_BOOL pVal );
__declspec(implementation_key(1181)) VARIANT_BOOL IVGStructSaveAsOptions::GetEmbedICCProfile ( );
__declspec(implementation_key(1182)) void IVGStructSaveAsOptions::PutEmbedVBAProject ( VARIANT_BOOL pVal );
__declspec(implementation_key(1183)) VARIANT_BOOL IVGStructSaveAsOptions::GetEmbedVBAProject ( );
__declspec(implementation_key(1184)) void IVGStructSaveAsOptions::PutIncludeCMXData ( VARIANT_BOOL pVal );
__declspec(implementation_key(1185)) VARIANT_BOOL IVGStructSaveAsOptions::GetIncludeCMXData ( );
__declspec(implementation_key(1186)) void IVGStructSaveAsOptions::PutKeepAppearance ( VARIANT_BOOL pVal );
__declspec(implementation_key(1187)) VARIANT_BOOL IVGStructSaveAsOptions::GetKeepAppearance ( );
__declspec(implementation_key(1188)) _bstr_t IVGComponent::GetComponentID ( );
__declspec(implementation_key(1189)) IUnknownPtr IVGComponents::Get_NewEnum ( );
__declspec(implementation_key(1190)) IVGComponentPtr IVGComponents::GetItem ( const _variant_t & IndexOrName );
__declspec(implementation_key(1191)) long IVGComponents::GetCount ( );
__declspec(implementation_key(1192)) VARIANT_BOOL IVGComponents::IsComponentInstalled ( _bstr_t ComponentID );
__declspec(implementation_key(1193)) HRESULT IVGAppStatus::BeginProgress ( _bstr_t Message, VARIANT_BOOL CanAbort );
__declspec(implementation_key(1194)) HRESULT IVGAppStatus::UpdateProgress ( long Step );
__declspec(implementation_key(1195)) HRESULT IVGAppStatus::SetProgressMessage ( _bstr_t Message );
__declspec(implementation_key(1196)) HRESULT IVGAppStatus::EndProgress ( );
__declspec(implementation_key(1197)) long IVGAppStatus::GetProgress ( );
__declspec(implementation_key(1198)) void IVGAppStatus::PutProgress ( long pVal );
__declspec(implementation_key(1199)) VARIANT_BOOL IVGAppStatus::GetAborted ( );
__declspec(implementation_key(1200)) long IVGStructOpenOptions::GetCodePage ( );
__declspec(implementation_key(1201)) void IVGStructOpenOptions::PutCodePage ( long pVal );
__declspec(implementation_key(1202)) IVGStructColorConversionOptionsPtr IVGStructOpenOptions::GetColorConversionOptions ( );
__declspec(implementation_key(1203)) HRESULT IVGOnScreenHandle::Show ( );
__declspec(implementation_key(1204)) HRESULT IVGOnScreenHandle::Hide ( );
__declspec(implementation_key(1205)) HRESULT IVGOnScreenHandle::SetHandleColor ( long Color );
__declspec(implementation_key(1206)) HRESULT IVGOnScreenHandle::SetPosition ( double x, double y );
__declspec(implementation_key(1207)) HRESULT IVGOnScreenHandle::UpdateHotTracking ( double MouseX, double MouseY );
__declspec(implementation_key(1208)) VARIANT_BOOL IVGOnScreenHandle::GetIsHotTracked ( );
__declspec(implementation_key(1209)) VARIANT_BOOL IVGOnScreenHandle::GetIsOnHandle ( double MouseX, double MouseY );
__declspec(implementation_key(1210)) HRESULT IVGOnScreenText::Show ( );
__declspec(implementation_key(1211)) HRESULT IVGOnScreenText::Hide ( );
__declspec(implementation_key(1212)) HRESULT IVGOnScreenText::SetTextColor ( long Color );
__declspec(implementation_key(1213)) HRESULT IVGOnScreenText::SetTextAndPosition ( _bstr_t Text, double x, double y, enum cdrOnScreenTextAlign align, double xRef, double yRef );
__declspec(implementation_key(1214)) HRESULT IVGOnScreenText::SetText ( _bstr_t Text );
__declspec(implementation_key(1215)) HRESULT IVGOnScreenText::SetPixelOffset ( long x, long y );
__declspec(implementation_key(1216)) HRESULT IVGOnScreenText::UpdatePosition ( double x, double y );
__declspec(implementation_key(1217)) HRESULT IVGToolShapeAttributes::SetCanResize ( VARIANT_BOOL val );
__declspec(implementation_key(1218)) HRESULT IVGToolShapeAttributes::SetCanRotate ( VARIANT_BOOL val );
__declspec(implementation_key(1219)) HRESULT IVGToolShapeAttributes::SetCanSkew ( VARIANT_BOOL val );
__declspec(implementation_key(1220)) HRESULT IVGToolShapeAttributes::SetCanSizeDisproportionally ( VARIANT_BOOL val );
__declspec(implementation_key(1221)) HRESULT IVGToolShapeAttributes::SetCanApplyNonlinearTransforms ( VARIANT_BOOL val );
__declspec(implementation_key(1222)) HRESULT IVGToolShapeAttributes::SetRegenerateOnTransform ( VARIANT_BOOL val );
__declspec(implementation_key(1223)) HRESULT IVGToolShapeAttributes::SetRegenerateOnStyleChange ( VARIANT_BOOL val );
__declspec(implementation_key(1224)) HRESULT IVGToolShapeAttributes::SetPropertyBarGuid ( _bstr_t val );
__declspec(implementation_key(1225)) HRESULT IVGToolShapeAttributes::SetContextMenuGuid ( _bstr_t val );
__declspec(implementation_key(1226)) HRESULT IVGToolShapeAttributes::SetObjectManagerBitmapGuid ( _bstr_t val );
__declspec(implementation_key(1227)) HRESULT IVGToolShapeAttributes::SetEditStateGuid ( _bstr_t val );
__declspec(implementation_key(1228)) HRESULT IVGToolShapeAttributes::SetDefaultShapename ( _bstr_t val );
__declspec(implementation_key(1229)) _bstr_t IVGMetadata::GetKeywords ( );
__declspec(implementation_key(1230)) void IVGMetadata::PutKeywords ( _bstr_t pVal );
__declspec(implementation_key(1231)) _bstr_t IVGMetadata::GetNotes ( );
__declspec(implementation_key(1232)) void IVGMetadata::PutNotes ( _bstr_t pVal );
__declspec(implementation_key(1233)) _bstr_t IVGMetadata::GetAuthor ( );
__declspec(implementation_key(1234)) void IVGMetadata::PutAuthor ( _bstr_t pVal );
__declspec(implementation_key(1235)) _bstr_t IVGMetadata::GetLastAuthor ( );
__declspec(implementation_key(1236)) void IVGMetadata::PutLastAuthor ( _bstr_t pVal );
__declspec(implementation_key(1237)) _bstr_t IVGMetadata::GetSubject ( );
__declspec(implementation_key(1238)) void IVGMetadata::PutSubject ( _bstr_t pVal );
__declspec(implementation_key(1239)) _bstr_t IVGMetadata::GetCopyright ( );
__declspec(implementation_key(1240)) void IVGMetadata::PutCopyright ( _bstr_t pVal );
__declspec(implementation_key(1241)) long IVGMetadata::GetRevision ( );
__declspec(implementation_key(1242)) void IVGMetadata::PutRevision ( long pVal );
__declspec(implementation_key(1243)) _bstr_t IVGMetadata::GetTemplateSided ( );
__declspec(implementation_key(1244)) void IVGMetadata::PutTemplateSided ( _bstr_t pVal );
__declspec(implementation_key(1245)) _bstr_t IVGMetadata::GetTemplateFolds ( );
__declspec(implementation_key(1246)) void IVGMetadata::PutTemplateFolds ( _bstr_t pVal );
__declspec(implementation_key(1247)) _bstr_t IVGMetadata::GetTemplateType ( );
__declspec(implementation_key(1248)) void IVGMetadata::PutTemplateType ( _bstr_t pVal );
__declspec(implementation_key(1249)) _bstr_t IVGMetadata::GetTemplateIndustry ( );
__declspec(implementation_key(1250)) void IVGMetadata::PutTemplateIndustry ( _bstr_t pVal );
__declspec(implementation_key(1251)) _bstr_t IVGMetadata::GetTitle ( );
__declspec(implementation_key(1252)) void IVGMetadata::PutTitle ( _bstr_t pVal );
__declspec(implementation_key(1253)) _bstr_t IVGMetadata::GetDocID ( );
__declspec(implementation_key(1254)) void IVGMetadata::PutDocID ( _bstr_t pVal );
__declspec(implementation_key(1255)) enum cdrTextLanguage IVGMetadata::GetDocLanguage ( );
__declspec(implementation_key(1256)) void IVGMetadata::PutDocLanguage ( enum cdrTextLanguage pVal );
__declspec(implementation_key(1257)) _bstr_t IVGMetadata::GetTemplateDesignerNotes ( );
__declspec(implementation_key(1258)) void IVGMetadata::PutTemplateDesignerNotes ( _bstr_t pVal );
__declspec(implementation_key(1259)) IVGLocalizableStringPtr IVGMetadata::GetLocalizableKeywords ( );
__declspec(implementation_key(1260)) IVGLocalizableStringPtr IVGMetadata::GetLocalizableNotes ( );
__declspec(implementation_key(1261)) IVGLocalizableStringPtr IVGMetadata::GetLocalizableTitle ( );
__declspec(implementation_key(1262)) IVGLocalizableStringPtr IVGMetadata::GetLocalizableSubject ( );
__declspec(implementation_key(1263)) IVGLocalizableStringPtr IVGMetadata::GetLocalizableCopyright ( );
__declspec(implementation_key(1264)) IVGLocalizableStringPtr IVGMetadata::GetLocalizableTemplateDesignerNotes ( );
__declspec(implementation_key(1265)) IVGLocalizableStringPtr IVGMetadata::GetCategory ( );
__declspec(implementation_key(1266)) _bstr_t _IGlobalMacroStorage::Get_CodeName ( );
__declspec(implementation_key(1267)) void _IGlobalMacroStorage::Put_CodeName ( _bstr_t pVal );
__declspec(implementation_key(1268)) HRESULT DIVGDocumentEvents::QueryClose ( VARIANT_BOOL * Cancel );
__declspec(implementation_key(1269)) HRESULT DIVGDocumentEvents::QuerySave ( VARIANT_BOOL * Cancel );
__declspec(implementation_key(1270)) HRESULT DIVGDocumentEvents::QueryPrint ( VARIANT_BOOL * Cancel );
__declspec(implementation_key(1271)) HRESULT DIVGDocumentEvents::QueryExport ( VARIANT_BOOL * Cancel );
__declspec(implementation_key(1272)) HRESULT DIVGDocumentEvents::Open ( );
__declspec(implementation_key(1273)) HRESULT DIVGDocumentEvents::Close ( );
__declspec(implementation_key(1274)) HRESULT DIVGDocumentEvents::BeforeSave ( VARIANT_BOOL SaveAs, _bstr_t FileName );
__declspec(implementation_key(1275)) HRESULT DIVGDocumentEvents::AfterSave ( VARIANT_BOOL SaveAs, _bstr_t FileName );
__declspec(implementation_key(1276)) HRESULT DIVGDocumentEvents::BeforePrint ( );
__declspec(implementation_key(1277)) HRESULT DIVGDocumentEvents::AfterPrint ( );
__declspec(implementation_key(1278)) HRESULT DIVGDocumentEvents::BeforeExport ( _bstr_t FileName, enum cdrFilter Filter, VARIANT_BOOL SaveBitmap );
__declspec(implementation_key(1279)) HRESULT DIVGDocumentEvents::AfterExport ( _bstr_t FileName, enum cdrFilter Filter, VARIANT_BOOL SaveBitmap );
__declspec(implementation_key(1280)) HRESULT DIVGDocumentEvents::LayerCreate ( struct IVGLayer * Layer );
__declspec(implementation_key(1281)) HRESULT DIVGDocumentEvents::LayerDelete ( long Count );
__declspec(implementation_key(1282)) HRESULT DIVGDocumentEvents::LayerActivate ( struct IVGLayer * Layer );
__declspec(implementation_key(1283)) HRESULT DIVGDocumentEvents::LayerChange ( struct IVGLayer * Layer );
__declspec(implementation_key(1284)) HRESULT DIVGDocumentEvents::PageCreate ( struct IVGPage * Page );
__declspec(implementation_key(1285)) HRESULT DIVGDocumentEvents::PageDelete ( long Count );
__declspec(implementation_key(1286)) HRESULT DIVGDocumentEvents::PageActivate ( struct IVGPage * Page );
__declspec(implementation_key(1287)) HRESULT DIVGDocumentEvents::PageChange ( struct IVGPage * Page );
__declspec(implementation_key(1288)) HRESULT DIVGDocumentEvents::ShapeCreate ( struct IVGShape * Shape );
__declspec(implementation_key(1289)) HRESULT DIVGDocumentEvents::ShapeDelete ( long Count );
__declspec(implementation_key(1290)) HRESULT DIVGDocumentEvents::ShapeMove ( struct IVGShape * Shape );
__declspec(implementation_key(1291)) HRESULT DIVGDocumentEvents::ShapeTransform ( struct IVGShape * Shape );
__declspec(implementation_key(1292)) HRESULT DIVGDocumentEvents::ShapeDistort ( struct IVGShape * Shape );
__declspec(implementation_key(1293)) HRESULT DIVGDocumentEvents::ShapeChange ( struct IVGShape * Shape, enum cdrShapeChangeScope Scope );
__declspec(implementation_key(1294)) HRESULT DIVGDocumentEvents::SelectionChange ( );
__declspec(implementation_key(1295)) HRESULT IVGDocumentEvents::QueryClose ( VARIANT_BOOL * Cancel );
__declspec(implementation_key(1296)) HRESULT IVGDocumentEvents::QuerySave ( VARIANT_BOOL * Cancel );
__declspec(implementation_key(1297)) HRESULT IVGDocumentEvents::QueryPrint ( VARIANT_BOOL * Cancel );
__declspec(implementation_key(1298)) HRESULT IVGDocumentEvents::QueryExport ( VARIANT_BOOL * Cancel );
__declspec(implementation_key(1299)) HRESULT IVGDocumentEvents::Open ( );
__declspec(implementation_key(1300)) HRESULT IVGDocumentEvents::Close ( );
__declspec(implementation_key(1301)) HRESULT IVGDocumentEvents::BeforeSave ( VARIANT_BOOL SaveAs, _bstr_t FileName );
__declspec(implementation_key(1302)) HRESULT IVGDocumentEvents::AfterSave ( VARIANT_BOOL SaveAs, _bstr_t FileName );
__declspec(implementation_key(1303)) HRESULT IVGDocumentEvents::BeforePrint ( );
__declspec(implementation_key(1304)) HRESULT IVGDocumentEvents::AfterPrint ( );
__declspec(implementation_key(1305)) HRESULT IVGDocumentEvents::BeforeExport ( _bstr_t FileName, enum cdrFilter Filter, VARIANT_BOOL SaveBitmap );
__declspec(implementation_key(1306)) HRESULT IVGDocumentEvents::AfterExport ( _bstr_t FileName, enum cdrFilter Filter, VARIANT_BOOL SaveBitmap );
__declspec(implementation_key(1307)) HRESULT IVGDocumentEvents::LayerCreate ( struct IVGLayer * Layer );
__declspec(implementation_key(1308)) HRESULT IVGDocumentEvents::LayerDelete ( long Count );
__declspec(implementation_key(1309)) HRESULT IVGDocumentEvents::LayerActivate ( struct IVGLayer * Layer );
__declspec(implementation_key(1310)) HRESULT IVGDocumentEvents::LayerChange ( struct IVGLayer * Layer );
__declspec(implementation_key(1311)) HRESULT IVGDocumentEvents::PageCreate ( struct IVGPage * Page );
__declspec(implementation_key(1312)) HRESULT IVGDocumentEvents::PageDelete ( long Count );
__declspec(implementation_key(1313)) HRESULT IVGDocumentEvents::PageActivate ( struct IVGPage * Page );
__declspec(implementation_key(1314)) HRESULT IVGDocumentEvents::PageChange ( struct IVGPage * Page );
__declspec(implementation_key(1315)) HRESULT IVGDocumentEvents::ShapeCreate ( struct IVGShape * Shape );
__declspec(implementation_key(1316)) HRESULT IVGDocumentEvents::ShapeDelete ( long Count );
__declspec(implementation_key(1317)) HRESULT IVGDocumentEvents::ShapeMove ( struct IVGShape * Shape );
__declspec(implementation_key(1318)) HRESULT IVGDocumentEvents::ShapeTransform ( struct IVGShape * Shape );
__declspec(implementation_key(1319)) HRESULT IVGDocumentEvents::ShapeDistort ( struct IVGShape * Shape );
__declspec(implementation_key(1320)) HRESULT IVGDocumentEvents::ShapeChange ( struct IVGShape * Shape, enum cdrShapeChangeScope Scope );
__declspec(implementation_key(1321)) HRESULT IVGDocumentEvents::SelectionChange ( );
__declspec(implementation_key(1322)) HRESULT IVGApplicationEvents::QueryDocumentClose ( struct IVGDocument * Doc, VARIANT_BOOL * Cancel );
__declspec(implementation_key(1323)) HRESULT IVGApplicationEvents::QueryDocumentSave ( struct IVGDocument * Doc, VARIANT_BOOL * Cancel );
__declspec(implementation_key(1324)) HRESULT IVGApplicationEvents::QueryDocumentPrint ( struct IVGDocument * Doc, VARIANT_BOOL * Cancel );
__declspec(implementation_key(1325)) HRESULT IVGApplicationEvents::QueryDocumentExport ( struct IVGDocument * Doc, VARIANT_BOOL * Cancel );
__declspec(implementation_key(1326)) HRESULT IVGApplicationEvents::QueryQuit ( VARIANT_BOOL * Cancel );
__declspec(implementation_key(1327)) HRESULT IVGApplicationEvents::DocumentOpen ( struct IVGDocument * Doc, _bstr_t FileName );
__declspec(implementation_key(1328)) HRESULT IVGApplicationEvents::DocumentNew ( struct IVGDocument * Doc, VARIANT_BOOL FromTemplate, _bstr_t Template, VARIANT_BOOL IncludeGraphics );
__declspec(implementation_key(1329)) HRESULT IVGApplicationEvents::DocumentClose ( struct IVGDocument * Doc );
__declspec(implementation_key(1330)) HRESULT IVGApplicationEvents::DocumentBeforeSave ( struct IVGDocument * Doc, VARIANT_BOOL SaveAs, _bstr_t FileName );
__declspec(implementation_key(1331)) HRESULT IVGApplicationEvents::DocumentAfterSave ( struct IVGDocument * Doc, VARIANT_BOOL SaveAs, _bstr_t FileName );
__declspec(implementation_key(1332)) HRESULT IVGApplicationEvents::DocumentBeforePrint ( struct IVGDocument * Doc );
__declspec(implementation_key(1333)) HRESULT IVGApplicationEvents::DocumentAfterPrint ( struct IVGDocument * Doc );
__declspec(implementation_key(1334)) HRESULT IVGApplicationEvents::DocumentBeforeExport ( struct IVGDocument * Doc, _bstr_t FileName, enum cdrFilter Filter, VARIANT_BOOL SaveBitmap );
__declspec(implementation_key(1335)) HRESULT IVGApplicationEvents::DocumentAfterExport ( struct IVGDocument * Doc, _bstr_t FileName, enum cdrFilter Filter, VARIANT_BOOL SaveBitmap );
__declspec(implementation_key(1336)) HRESULT IVGApplicationEvents::WindowActivate ( struct IVGDocument * Doc, struct IVGWindow * Window );
__declspec(implementation_key(1337)) HRESULT IVGApplicationEvents::WindowDeactivate ( struct IVGDocument * Doc, struct IVGWindow * Window );
__declspec(implementation_key(1338)) HRESULT IVGApplicationEvents::SelectionChange ( );
__declspec(implementation_key(1339)) HRESULT IVGApplicationEvents::Start ( );
__declspec(implementation_key(1340)) HRESULT IVGApplicationEvents::Quit ( );
__declspec(implementation_key(1341)) HRESULT IVGApplicationEvents::OnPluginCommand ( _bstr_t CommandID );
__declspec(implementation_key(1342)) HRESULT IVGApplicationEvents::OnUpdatePluginCommand ( _bstr_t CommandID, VARIANT_BOOL * Enabled, enum cdrCommandCheckState * Checked );
__declspec(implementation_key(1343)) HRESULT IVGApplicationEvents::OnApplicationEvent ( _bstr_t EventName, SAFEARRAY * * Parameters );
__declspec(implementation_key(1344)) HRESULT DIVGApplicationEvents::QueryDocumentClose ( struct IVGDocument * Doc, VARIANT_BOOL * Cancel );
__declspec(implementation_key(1345)) HRESULT DIVGApplicationEvents::QueryDocumentSave ( struct IVGDocument * Doc, VARIANT_BOOL * Cancel );
__declspec(implementation_key(1346)) HRESULT DIVGApplicationEvents::QueryDocumentPrint ( struct IVGDocument * Doc, VARIANT_BOOL * Cancel );
__declspec(implementation_key(1347)) HRESULT DIVGApplicationEvents::QueryDocumentExport ( struct IVGDocument * Doc, VARIANT_BOOL * Cancel );
__declspec(implementation_key(1348)) HRESULT DIVGApplicationEvents::QueryQuit ( VARIANT_BOOL * Cancel );
__declspec(implementation_key(1349)) HRESULT DIVGApplicationEvents::DocumentOpen ( struct IVGDocument * Doc, _bstr_t FileName );
__declspec(implementation_key(1350)) HRESULT DIVGApplicationEvents::DocumentNew ( struct IVGDocument * Doc, VARIANT_BOOL FromTemplate, _bstr_t Template, VARIANT_BOOL IncludeGraphics );
__declspec(implementation_key(1351)) HRESULT DIVGApplicationEvents::DocumentClose ( struct IVGDocument * Doc );
__declspec(implementation_key(1352)) HRESULT DIVGApplicationEvents::DocumentBeforeSave ( struct IVGDocument * Doc, VARIANT_BOOL SaveAs, _bstr_t FileName );
__declspec(implementation_key(1353)) HRESULT DIVGApplicationEvents::DocumentAfterSave ( struct IVGDocument * Doc, VARIANT_BOOL SaveAs, _bstr_t FileName );
__declspec(implementation_key(1354)) HRESULT DIVGApplicationEvents::DocumentBeforePrint ( struct IVGDocument * Doc );
__declspec(implementation_key(1355)) HRESULT DIVGApplicationEvents::DocumentAfterPrint ( struct IVGDocument * Doc );
__declspec(implementation_key(1356)) HRESULT DIVGApplicationEvents::DocumentBeforeExport ( struct IVGDocument * Doc, _bstr_t FileName, enum cdrFilter Filter, VARIANT_BOOL SaveBitmap );
__declspec(implementation_key(1357)) HRESULT DIVGApplicationEvents::DocumentAfterExport ( struct IVGDocument * Doc, _bstr_t FileName, enum cdrFilter Filter, VARIANT_BOOL SaveBitmap );
__declspec(implementation_key(1358)) HRESULT DIVGApplicationEvents::WindowActivate ( struct IVGDocument * Doc, struct IVGWindow * Window );
__declspec(implementation_key(1359)) HRESULT DIVGApplicationEvents::WindowDeactivate ( struct IVGDocument * Doc, struct IVGWindow * Window );
__declspec(implementation_key(1360)) HRESULT DIVGApplicationEvents::SelectionChange ( );
__declspec(implementation_key(1361)) HRESULT DIVGApplicationEvents::Start ( );
__declspec(implementation_key(1362)) HRESULT DIVGApplicationEvents::Quit ( );
__declspec(implementation_key(1363)) HRESULT DIVGApplicationEvents::OnPluginCommand ( _bstr_t CommandID );
__declspec(implementation_key(1364)) HRESULT DIVGApplicationEvents::OnUpdatePluginCommand ( _bstr_t CommandID, VARIANT_BOOL * Enabled, enum cdrCommandCheckState * Checked );
__declspec(implementation_key(1365)) HRESULT DIVGApplicationEvents::OnApplicationEvent ( _bstr_t EventName, SAFEARRAY * * Parameters );
__declspec(implementation_key(1366)) ICUICommandBarsPtr ICUIFrameWork::GetCommandBars ( );
__declspec(implementation_key(1367)) ICUICommandBarPtr ICUIFrameWork::GetMainMenu ( );
__declspec(implementation_key(1368)) ICUICommandBarPtr ICUIFrameWork::GetStatusBar ( );
__declspec(implementation_key(1369)) _bstr_t ICUIFrameWork::GetName ( );
__declspec(implementation_key(1370)) HRESULT ICUIFrameWork::ImportWorkspace ( _bstr_t FileName );
__declspec(implementation_key(1371)) ICUIAutomationPtr ICUIFrameWork::GetAutomation ( );
__declspec(implementation_key(1372)) HRESULT ICUIFrameWork::ShowDocker ( _bstr_t Guid );
__declspec(implementation_key(1373)) HRESULT ICUIFrameWork::HideDocker ( _bstr_t Guid );
__declspec(implementation_key(1374)) VARIANT_BOOL ICUIFrameWork::IsDockerVisible ( _bstr_t Guid );
__declspec(implementation_key(1375)) HRESULT ICUIFrameWork::AddDocker ( _bstr_t Guid, _bstr_t ClassName, _bstr_t AssemblyPath );
__declspec(implementation_key(1376)) HRESULT ICUIFrameWork::RemoveDocker ( _bstr_t Guid );
__declspec(implementation_key(1377)) ICUIFrameWindowsPtr ICUIFrameWork::GetFrameWindows ( );
__declspec(implementation_key(1378)) ICUIFrameWindowPtr ICUIFrameWork::GetMainFrameWindow ( );
__declspec(implementation_key(1379)) ICUIApplicationPtr ICUIFrameWork::GetApplication ( );
__declspec(implementation_key(1380)) ICUIFrameWindowPtr ICUIFrameWork::CreateFrameWindowForViewHost ( struct ICUIViewHost * ViewHostToInsert );
__declspec(implementation_key(1381)) ICUIFrameWindowPtr ICUIFrameWork::CreateFrameWindowForView ( struct ICUIViewWindow * ViewToInsert );
__declspec(implementation_key(1382)) HRESULT ICUIFrameWork::ShowDialog ( _bstr_t Guid );
__declspec(implementation_key(1383)) HRESULT ICUIFrameWork::HideDialog ( _bstr_t Guid );
__declspec(implementation_key(1384)) long ICUIFrameWork::ShowMessageBox ( _bstr_t szMessage, _bstr_t szMainInstruction, long unFlags, struct ICUIBitmapImage * pImage, _bstr_t szHelpGuid, _bstr_t szWarningName, enum cuiMessageBoxFlags eFlags, struct ICUIDataContext * pDataContext );
__declspec(implementation_key(1385)) ICUIWarningPtr ICUIFrameWork::GetWarning ( _bstr_t szWarningID, VARIANT_BOOL bHidden );
__declspec(implementation_key(1386)) ICUITaskManagerPtr ICUIFrameWork::GetTaskManager ( );
__declspec(implementation_key(1387)) long ICUIFrameWindows::GetCount ( );
__declspec(implementation_key(1388)) ICUIFrameWindowPtr ICUIFrameWindows::GetItem ( long Index );
__declspec(implementation_key(1389)) IUnknownPtr ICUIFrameWindows::Get_NewEnum ( );
__declspec(implementation_key(1390)) ICUIFrameWindowPtr ICUIFrameWindows::Find ( _bstr_t ID );
__declspec(implementation_key(1391)) ICUIFrameWindowPtr ICUIFrameWindows::GetFirst ( );
__declspec(implementation_key(1392)) ICUIFrameWindowPtr ICUIFrameWindows::GetLast ( );
__declspec(implementation_key(1393)) _bstr_t ICUIFrameWindow::GetID ( );
__declspec(implementation_key(1394)) _bstr_t ICUIFrameWindow::GetCaption ( );
__declspec(implementation_key(1395)) HRESULT ICUIFrameWindow::Minimize ( );
__declspec(implementation_key(1396)) HRESULT ICUIFrameWindow::Maximize ( );
__declspec(implementation_key(1397)) HRESULT ICUIFrameWindow::Restore ( );
__declspec(implementation_key(1398)) enum cuiWindowState ICUIFrameWindow::GetState ( );
__declspec(implementation_key(1399)) VARIANT_BOOL ICUIFrameWindow::GetIsMainFrame ( );
__declspec(implementation_key(1400)) HRESULT ICUIFrameWindow::Close ( );
__declspec(implementation_key(1401)) HRESULT ICUIFrameWindow::Activate ( );
__declspec(implementation_key(1402)) VARIANT_BOOL ICUIFrameWindow::GetIsActive ( );
__declspec(implementation_key(1403)) long ICUIFrameWindow::GetHandle ( );
__declspec(implementation_key(1404)) HRESULT ICUIFrameWindow::TileViews ( VARIANT_BOOL TileHorizontally );
__declspec(implementation_key(1405)) HRESULT ICUIFrameWindow::CombineViews ( );
__declspec(implementation_key(1406)) ICUIViewHostsPtr ICUIFrameWindow::GetViewHosts ( );
__declspec(implementation_key(1407)) ICUIDockHostsPtr ICUIFrameWindow::GetDockHosts ( );
__declspec(implementation_key(1408)) ICUIDockHostPtr ICUIFrameWindow::GetRootDockHost ( );
__declspec(implementation_key(1409)) ICUIScreenRectPtr ICUIFrameWindow::GetPosition ( );
__declspec(implementation_key(1410)) long ICUIViewHosts::GetCount ( );
__declspec(implementation_key(1411)) ICUIViewHostPtr ICUIViewHosts::GetItem ( long Index );
__declspec(implementation_key(1412)) IUnknownPtr ICUIViewHosts::Get_NewEnum ( );
__declspec(implementation_key(1413)) ICUIViewHostPtr ICUIViewHosts::Find ( _bstr_t ID );
__declspec(implementation_key(1414)) ICUIViewHostPtr ICUIViewHosts::GetFirst ( );
__declspec(implementation_key(1415)) ICUIViewHostPtr ICUIViewHosts::GetLast ( );
__declspec(implementation_key(1416)) _bstr_t ICUIViewHost::GetID ( );
__declspec(implementation_key(1417)) ICUIDockHostPtr ICUIViewHost::GetDockHost ( );
__declspec(implementation_key(1418)) ICUIViewWindowsPtr ICUIViewHost::GetViews ( );
__declspec(implementation_key(1419)) ICUIDockItemPtr ICUIViewHost::GetDockItem ( );
__declspec(implementation_key(1420)) ICUIScreenRectPtr ICUIViewHost::GetPosition ( );
__declspec(implementation_key(1421)) HRESULT ICUIViewHost::InsertView ( struct ICUIViewWindow * ViewToInsert, long Index );
__declspec(implementation_key(1422)) HRESULT ICUIViewHost::InsertViewHost ( struct ICUIViewHost * ViewHostToInsert, long Index );
__declspec(implementation_key(1423)) _bstr_t ICUIViewWindow::GetID ( );
__declspec(implementation_key(1424)) ICUIViewHostPtr ICUIViewWindow::GetViewHost ( );
__declspec(implementation_key(1425)) long ICUIViewWindow::GetIndex ( );
__declspec(implementation_key(1426)) _bstr_t ICUIViewWindow::GetKind ( );
__declspec(implementation_key(1427)) _bstr_t ICUIViewWindow::GetTitle ( );
__declspec(implementation_key(1428)) _bstr_t ICUIViewWindow::GetDescription ( );
__declspec(implementation_key(1429)) ICUIScreenRectPtr ICUIViewWindow::GetPosition ( );
__declspec(implementation_key(1430)) HRESULT ICUIViewWindow::Activate ( );
__declspec(implementation_key(1431)) HRESULT ICUIViewWindow::Close ( );
__declspec(implementation_key(1432)) IDispatchPtr ICUIViewWindow::GetAppView ( );
__declspec(implementation_key(1433)) long ICUIViewWindows::GetCount ( );
__declspec(implementation_key(1434)) ICUIViewWindowPtr ICUIViewWindows::GetItem ( long Index );
__declspec(implementation_key(1435)) IUnknownPtr ICUIViewWindows::Get_NewEnum ( );
__declspec(implementation_key(1436)) ICUIViewWindowPtr ICUIViewWindows::Find ( _bstr_t ID );
__declspec(implementation_key(1437)) ICUIViewWindowPtr ICUIViewWindows::GetFirst ( );
__declspec(implementation_key(1438)) ICUIViewWindowPtr ICUIViewWindows::GetLast ( );
__declspec(implementation_key(1439)) _bstr_t ICUIDockHost::GetID ( );
__declspec(implementation_key(1440)) enum cuiDockHostOrientation ICUIDockHost::GetOrientation ( );
__declspec(implementation_key(1441)) ICUIDockHostPtr ICUIDockHost::GetParentDockHost ( );
__declspec(implementation_key(1442)) ICUIDockItemPtr ICUIDockHost::GetDockItem ( );
__declspec(implementation_key(1443)) ICUIDockItemsPtr ICUIDockHost::GetChildren ( );
__declspec(implementation_key(1444)) HRESULT ICUIDockHost::InsertViewHost ( struct ICUIViewHost * ViewHostToInsert, long Index, enum cuiDockOperation Operation );
__declspec(implementation_key(1445)) ICUIViewHostPtr ICUIDockHost::InsertView ( struct ICUIViewWindow * ViewToInsert, long Index, enum cuiDockOperation Operation );
__declspec(implementation_key(1446)) ICUIScreenRectPtr ICUIDockHost::GetPosition ( );
__declspec(implementation_key(1447)) _bstr_t ICUIDockItem::GetID ( );
__declspec(implementation_key(1448)) enum cuiDockItemType ICUIDockItem::GetType ( );
__declspec(implementation_key(1449)) ICUIViewHostPtr ICUIDockItem::GetViewHost ( );
__declspec(implementation_key(1450)) ICUIDockHostPtr ICUIDockItem::GetDockHost ( );
__declspec(implementation_key(1451)) long ICUIDockItem::GetIndex ( );
__declspec(implementation_key(1452)) long ICUIDockItem::GetRelativeSize ( );
__declspec(implementation_key(1453)) void ICUIDockItem::PutRelativeSize ( long pVal );
__declspec(implementation_key(1454)) ICUIScreenRectPtr ICUIDockItem::GetPosition ( );
__declspec(implementation_key(1455)) long ICUIDockItems::GetCount ( );
__declspec(implementation_key(1456)) ICUIDockItemPtr ICUIDockItems::GetItem ( long Index );
__declspec(implementation_key(1457)) IUnknownPtr ICUIDockItems::Get_NewEnum ( );
__declspec(implementation_key(1458)) ICUIDockItemPtr ICUIDockItems::Find ( _bstr_t ID );
__declspec(implementation_key(1459)) ICUIDockItemPtr ICUIDockItems::GetFirst ( );
__declspec(implementation_key(1460)) ICUIDockItemPtr ICUIDockItems::GetLast ( );
__declspec(implementation_key(1461)) long ICUIDockHosts::GetCount ( );
__declspec(implementation_key(1462)) ICUIDockHostPtr ICUIDockHosts::GetItem ( long Index );
__declspec(implementation_key(1463)) IUnknownPtr ICUIDockHosts::Get_NewEnum ( );
__declspec(implementation_key(1464)) ICUIDockHostPtr ICUIDockHosts::Find ( _bstr_t ID );
__declspec(implementation_key(1465)) ICUIDockHostPtr ICUIDockHosts::GetFirst ( );
__declspec(implementation_key(1466)) ICUIDockHostPtr ICUIDockHosts::GetLast ( );
__declspec(implementation_key(1467)) ICUIDataContextPtr ICUIApplication::GetDataContext ( );
__declspec(implementation_key(1468)) VARIANT_BOOL ICUIApplication::RegisterDataSource ( _bstr_t DataSourceName, struct ICUIDataSourceFactory * Factory, _bstr_t CategoryList, VARIANT_BOOL AutoCreateInstance );
__declspec(implementation_key(1469)) VARIANT_BOOL ICUIApplication::UnregisterDataSource ( _bstr_t DataSourceName );
__declspec(implementation_key(1470)) ICUIImageListPtr ICUIApplication::CreateImageList ( );
__declspec(implementation_key(1471)) ICUIFrameWorkPtr ICUIApplication::GetFrameWork ( );
__declspec(implementation_key(1472)) ICUIScreenRectPtr ICUIApplication::CreateScreenRect ( long Left, long Top, long Width, long Height );
__declspec(implementation_key(1473)) ICUIBitmapImagePtr ICUIApplication::CreateBitmapImage ( const _variant_t & ImageData, long MaxSize );
__declspec(implementation_key(1474)) ICUIStatusTextPtr ICUIApplication::CreateStatusText ( );
__declspec(implementation_key(1475)) _bstr_t ICUIApplication::LoadLocalizedString ( _bstr_t Guid );
__declspec(implementation_key(1476)) ICUIDataSourceFactoryPtr ICUIApplication::CreateDataSourceFactory ( IDispatch * DataSourceFactoryObject );
__declspec(implementation_key(1477)) HRESULT ICUIDataSourceProxy::UpdateListeners ( _bstr_t ListenerNames );
__declspec(implementation_key(1478)) ICUIApplicationPtr ICUIDataSourceProxy::GetApplication ( );
__declspec(implementation_key(1479)) _bstr_t ICUIDataSourceProxy::GetName ( );
__declspec(implementation_key(1480)) HRESULT ICUIDataSourceProxy::InvokeMethod ( _bstr_t MethodName );
__declspec(implementation_key(1481)) _variant_t ICUIDataSourceProxy::GetProperty ( _bstr_t PropertyName );
__declspec(implementation_key(1482)) HRESULT ICUIDataSourceProxy::SetProperty ( _bstr_t PropertyName, const _variant_t & Value );
__declspec(implementation_key(1483)) ICUIDataContextPtr ICUIDataContext::CreateChildDataContext ( _bstr_t CategoryList );
__declspec(implementation_key(1484)) _bstr_t ICUIDataContext::GetCategories ( );
__declspec(implementation_key(1485)) VARIANT_BOOL ICUIDataContext::HasCategory ( _bstr_t Category );
__declspec(implementation_key(1486)) ICUIDataSourceProxyPtr ICUIDataContext::AddDataSource ( _bstr_t DataSourceName, IDispatch * DataSourceObject );
__declspec(implementation_key(1487)) VARIANT_BOOL ICUIDataContext::ShowDialog ( _bstr_t dialogID );
__declspec(implementation_key(1488)) ICUIDataSourceProxyPtr ICUIDataContext::GetDataSource ( _bstr_t DataSourceName );
__declspec(implementation_key(1489)) IDispatchPtr ICUIDataSourceFactory::CreateDataSource ( _bstr_t DataSourceName, struct ICUIDataSourceProxy * Proxy );
__declspec(implementation_key(1490)) IVGApplicationPtr IVGDocument::GetApplication ( );
__declspec(implementation_key(1491)) IVGDocumentsPtr IVGDocument::GetParent ( );
__declspec(implementation_key(1492)) _bstr_t IVGDocument::GetName ( );
__declspec(implementation_key(1493)) HRESULT IVGDocument::SaveAs ( _bstr_t FileName, struct IVGStructSaveAsOptions * Options );
__declspec(implementation_key(1494)) HRESULT IVGDocument::Save ( );
__declspec(implementation_key(1495)) IVGPagesPtr IVGDocument::GetPages ( );
__declspec(implementation_key(1496)) enum cdrReferencePoint IVGDocument::GetReferencePoint ( );
__declspec(implementation_key(1497)) void IVGDocument::PutReferencePoint ( enum cdrReferencePoint pRefPoint );
__declspec(implementation_key(1498)) VARIANT_BOOL IVGDocument::GetApplyToDuplicate ( );
__declspec(implementation_key(1499)) void IVGDocument::PutApplyToDuplicate ( VARIANT_BOOL ApplyToDuplicate );
__declspec(implementation_key(1500)) IVGPagePtr IVGDocument::GetActivePage ( );
__declspec(implementation_key(1501)) IVGLayerPtr IVGDocument::GetActiveLayer ( );
__declspec(implementation_key(1502)) IVGWindowsPtr IVGDocument::GetWindows ( );
__declspec(implementation_key(1503)) IVGWindowPtr IVGDocument::GetActiveWindow ( );
__declspec(implementation_key(1504)) HRESULT IVGDocument::Close ( );
__declspec(implementation_key(1505)) HRESULT IVGDocument::Undo ( long Levels );
__declspec(implementation_key(1506)) HRESULT IVGDocument::Redo ( long Levels );
__declspec(implementation_key(1507)) HRESULT IVGDocument::Repeat ( );
__declspec(implementation_key(1508)) HRESULT IVGDocument::Activate ( );
__declspec(implementation_key(1509)) enum cdrUnit IVGDocument::GetUnit ( );
__declspec(implementation_key(1510)) void IVGDocument::PutUnit ( enum cdrUnit pnUnit );
__declspec(implementation_key(1511)) double IVGDocument::GetDrawingOriginX ( );
__declspec(implementation_key(1512)) void IVGDocument::PutDrawingOriginX ( double plX );
__declspec(implementation_key(1513)) double IVGDocument::GetDrawingOriginY ( );
__declspec(implementation_key(1514)) void IVGDocument::PutDrawingOriginY ( double plY );
__declspec(implementation_key(1515)) IVGPagePtr IVGDocument::AddPages ( long NumberOfPages );
__declspec(implementation_key(1516)) IVGPagePtr IVGDocument::InsertPages ( long NumberOfPages, VARIANT_BOOL BeforePage, long Page );
__declspec(implementation_key(1517)) IVGShapePtr IVGDocument::Selection ( );
__declspec(implementation_key(1518)) HRESULT IVGDocument::ClearSelection ( );
__declspec(implementation_key(1519)) HRESULT IVGDocument::Export ( _bstr_t FileName, enum cdrFilter Filter, enum cdrExportRange Range, struct IVGStructExportOptions * Options, struct IVGStructPaletteOptions * PaletteOptions );
__declspec(implementation_key(1520)) HRESULT IVGDocument::ResolveAllBitmapsLinks ( );
__declspec(implementation_key(1521)) VARIANT_BOOL IVGDocument::GetDirty ( );
__declspec(implementation_key(1522)) void IVGDocument::PutDirty ( VARIANT_BOOL Dirty );
__declspec(implementation_key(1523)) long IVGDocument::GetUserClick ( double * x, double * y, long * ShiftState, long TimeOut, VARIANT_BOOL Snap, enum cdrCursorShape CursorShape );
__declspec(implementation_key(1524)) long IVGDocument::GetUserArea ( double * x1, double * y1, double * x2, double * y2, long * ShiftState, long TimeOut, VARIANT_BOOL Snap, enum cdrCursorShape CursorShape );
__declspec(implementation_key(1525)) HRESULT IVGDocument::BeginCommandGroup ( _bstr_t CommandName );
__declspec(implementation_key(1526)) HRESULT IVGDocument::EndCommandGroup ( );
__declspec(implementation_key(1527)) _bstr_t IVGDocument::GetFilePath ( );
__declspec(implementation_key(1528)) _bstr_t IVGDocument::GetFileName ( );
__declspec(implementation_key(1529)) _bstr_t IVGDocument::GetFullFileName ( );
__declspec(implementation_key(1530)) long IVGDocument::GetResolution ( );
__declspec(implementation_key(1531)) void IVGDocument::PutResolution ( long pResolution );
__declspec(implementation_key(1532)) enum cdrShapeEnumDirection IVGDocument::GetShapeEnumDirection ( );
__declspec(implementation_key(1533)) void IVGDocument::PutShapeEnumDirection ( enum cdrShapeEnumDirection peDirection );
__declspec(implementation_key(1534)) IVGShapeRangePtr IVGDocument::GetSelectionRange ( );
__declspec(implementation_key(1535)) IVGRulersPtr IVGDocument::GetRulers ( );
__declspec(implementation_key(1536)) IVGGridPtr IVGDocument::GetGrid ( );
__declspec(implementation_key(1537)) IVGViewsPtr IVGDocument::GetViews ( );
__declspec(implementation_key(1538)) IVGViewPtr IVGDocument::CreateView ( _bstr_t Name, double OriginX, double OriginY, long Zoom, struct IVGPage * Page );
__declspec(implementation_key(1539)) IVGPowerClipPtr IVGDocument::GetActivePowerClip ( );
__declspec(implementation_key(1540)) long IVGDocument::AdviseEvents ( IDispatch * EventSink );
__declspec(implementation_key(1541)) HRESULT IVGDocument::UnadviseEvents ( long Cookie );
__declspec(implementation_key(1542)) double IVGDocument::GetWorldScale ( );
__declspec(implementation_key(1543)) void IVGDocument::PutWorldScale ( double Scale );
__declspec(implementation_key(1544)) HRESULT IVGDocument::PrintOut ( );
__declspec(implementation_key(1545)) IVGShapePtr IVGDocument::GetActiveShape ( );
__declspec(implementation_key(1546)) long IVGDocument::GetCurvePrecision ( );
__declspec(implementation_key(1547)) IVGPagePtr IVGDocument::AddPagesEx ( long NumberOfPages, double Width, double Height );
__declspec(implementation_key(1548)) IVGPagePtr IVGDocument::InsertPagesEx ( long NumberOfPages, VARIANT_BOOL BeforePage, long Page, double Width, double Height );
__declspec(implementation_key(1549)) _bstr_t IVGDocument::GetTitle ( );
__declspec(implementation_key(1550)) HRESULT IVGDocument::SaveSettings ( _bstr_t Tag );
__declspec(implementation_key(1551)) HRESULT IVGDocument::RestoreSettings ( _bstr_t Tag );
__declspec(implementation_key(1552)) VARIANT_BOOL IVGDocument::GetActive ( );
__declspec(implementation_key(1553)) long IVGDocument::GetIndex ( );
__declspec(implementation_key(1554)) ICorelExportFilterPtr IVGDocument::ExportEx ( _bstr_t FileName, enum cdrFilter Filter, enum cdrExportRange Range, struct IVGStructExportOptions * Options, struct IVGStructPaletteOptions * PaletteOptions );
__declspec(implementation_key(1555)) ICorelExportFilterPtr IVGDocument::ExportBitmap ( _bstr_t FileName, enum cdrFilter Filter, enum cdrExportRange Range, enum cdrImageType ImageType, long Width, long Height, long ResolutionX, long ResolutionY, enum cdrAntiAliasingType AntiAliasingType, VARIANT_BOOL Dithered, VARIANT_BOOL Transparent, VARIANT_BOOL UseColorProfile, VARIANT_BOOL MaintainLayers, enum cdrCompressionType Compression, struct IVGStructPaletteOptions * PaletteOptions, struct IVGRect * ExportArea );
__declspec(implementation_key(1556)) VARIANT_BOOL IVGDocument::GetEditAcrossLayers ( );
__declspec(implementation_key(1557)) void IVGDocument::PutEditAcrossLayers ( VARIANT_BOOL pVal );
__declspec(implementation_key(1558)) IVGPropertiesPtr IVGDocument::GetProperties ( );
__declspec(implementation_key(1559)) void IVGDocument::PutCurvePrecision ( long lpPrec );
__declspec(implementation_key(1560)) IPrnVBAPrintSettingsPtr IVGDocument::GetPrintSettings ( );
__declspec(implementation_key(1561)) _bstr_t IVGDocument::GetKeywords ( );
__declspec(implementation_key(1562)) void IVGDocument::PutKeywords ( _bstr_t pVal );
__declspec(implementation_key(1563)) _bstr_t IVGDocument::GetNotes ( );
__declspec(implementation_key(1564)) void IVGDocument::PutNotes ( _bstr_t pVal );
__declspec(implementation_key(1565)) VARIANT_BOOL IVGDocument::GetPreserveSelection ( );
__declspec(implementation_key(1566)) void IVGDocument::PutPreserveSelection ( VARIANT_BOOL pVal );
__declspec(implementation_key(1567)) HRESULT IVGDocument::ResetSettings ( );
__declspec(implementation_key(1568)) IVGDataFieldsPtr IVGDocument::GetDataFields ( );
__declspec(implementation_key(1569)) IPDFVBASettingsPtr IVGDocument::GetPDFSettings ( );
__declspec(implementation_key(1570)) HRESULT IVGDocument::PublishToPDF ( _bstr_t FileName );
__declspec(implementation_key(1571)) IVGSelectionInformationPtr IVGDocument::GetSelectionInfo ( );
__declspec(implementation_key(1572)) IVGPageSizesPtr IVGDocument::GetPageSizes ( );
__declspec(implementation_key(1573)) IVGComponentsPtr IVGDocument::GetComponents ( );
__declspec(implementation_key(1574)) IVGSymbolLibraryPtr IVGDocument::GetSymbolLibrary ( );
__declspec(implementation_key(1575)) IVGCurvePtr IVGDocument::CreateCurve ( );
__declspec(implementation_key(1576)) IVGCurvePtr IVGDocument::CreateCurveFromArray ( SAFEARRAY * * Source, long NumElements );
__declspec(implementation_key(1577)) HRESULT IVGDocument::LoadStyleSheet ( _bstr_t FileName );
__declspec(implementation_key(1578)) HRESULT IVGDocument::SaveStyleSheet ( _bstr_t FileName );
__declspec(implementation_key(1579)) HRESULT IVGDocument::SaveStyleSheetAsDefault ( );
__declspec(implementation_key(1580)) HRESULT IVGDocument::CreateSelection ( SAFEARRAY * * ShapeArray );
__declspec(implementation_key(1581)) HRESULT IVGDocument::AddToSelection ( SAFEARRAY * * ShapeArray );
__declspec(implementation_key(1582)) HRESULT IVGDocument::RemoveFromSelection ( SAFEARRAY * * ShapeArray );
__declspec(implementation_key(1583)) IVGShapesPtr IVGDocument::GetSelectableShapes ( );
__declspec(implementation_key(1584)) double IVGDocument::ToUnits ( double Value, enum cdrUnit FromUnit );
__declspec(implementation_key(1585)) double IVGDocument::FromUnits ( double Value, enum cdrUnit ToUnit );
__declspec(implementation_key(1586)) long IVGDocument::GetResolutionX ( );
__declspec(implementation_key(1587)) void IVGDocument::PutResolutionX ( long pResolution );
__declspec(implementation_key(1588)) long IVGDocument::GetResolutionY ( );
__declspec(implementation_key(1589)) void IVGDocument::PutResolutionY ( long pResolution );
__declspec(implementation_key(1590)) IVGPagePtr IVGDocument::GetMasterPage ( );
__declspec(implementation_key(1591)) VARIANT_BOOL IVGDocument::Revert ( );
__declspec(implementation_key(1592)) _bstr_t IVGDocument::GetCodeName ( );
__declspec(implementation_key(1593)) _bstr_t IVGDocument::Get_CodeName ( );
__declspec(implementation_key(1594)) void IVGDocument::Put_CodeName ( _bstr_t pVal );
__declspec(implementation_key(1595)) void IVGDocument::PutName ( _bstr_t pbstrName );
__declspec(implementation_key(1596)) void IVGDocument::PutFullFileName ( _bstr_t pFullFileName );
__declspec(implementation_key(1597)) IVGTreeNodePtr IVGDocument::GetTreeRoot ( );
__declspec(implementation_key(1598)) IVGTreeManagerPtr IVGDocument::GetTreeManager ( );
__declspec(implementation_key(1599)) IVGShapePtr IVGDocument::LogCreateShape ( struct IVGShape * VirtualShape );
__declspec(implementation_key(1600)) IVGShapeRangePtr IVGDocument::LogCreateShapeRange ( struct IVGShapeRange * VirtualShapeRange );
__declspec(implementation_key(1601)) IVGFillPtr IVGDocument::CreateFill ( _bstr_t FillString );
__declspec(implementation_key(1602)) IVGOutlinePtr IVGDocument::CreateOutline ( _bstr_t OutlineString );
__declspec(implementation_key(1603)) IVGHatchLibrariesPtr IVGDocument::GetHatchLibraries ( );
__declspec(implementation_key(1604)) IVGShapeRangePtr IVGDocument::CreateShapeRangeFromArray ( SAFEARRAY * * ShapeArray );
__declspec(implementation_key(1605)) HRESULT IVGDocument::ClearUndoList ( );
__declspec(implementation_key(1606)) double IVGDocument::GetSourcePlatformVersion ( );
__declspec(implementation_key(1607)) void IVGDocument::PutSourcePlatformVersion ( double pVal );
__declspec(implementation_key(1608)) enum cdrFilter IVGDocument::GetSourceFormat ( );
__declspec(implementation_key(1609)) VARIANT_BOOL IVGDocument::GetIsCurrentVersion ( );
__declspec(implementation_key(1610)) enum cdrFileVersion IVGDocument::GetSourceFileVersion ( );
__declspec(implementation_key(1611)) void IVGDocument::PutSourceFileVersion ( enum cdrFileVersion pVal );
__declspec(implementation_key(1612)) IVGFillPtr IVGDocument::CreateUniformFill ( struct IVGColor * Color );
__declspec(implementation_key(1613)) IVGMetadataPtr IVGDocument::GetMetadata ( );
__declspec(implementation_key(1614)) enum cdrDocLayout IVGDocument::GetLayout ( );
__declspec(implementation_key(1615)) void IVGDocument::PutLayout ( enum cdrDocLayout pVal );
__declspec(implementation_key(1616)) VARIANT_BOOL IVGDocument::GetFacingPages ( );
__declspec(implementation_key(1617)) void IVGDocument::PutFacingPages ( VARIANT_BOOL pVal );
__declspec(implementation_key(1618)) VARIANT_BOOL IVGDocument::GetFirstPageOnRightSide ( );
__declspec(implementation_key(1619)) void IVGDocument::PutFirstPageOnRightSide ( VARIANT_BOOL pVal );
__declspec(implementation_key(1620)) HRESULT IVGDocument::SetLayout ( enum cdrDocLayout Layout, VARIANT_BOOL FacingPages, VARIANT_BOOL StartOnRightSide );
__declspec(implementation_key(1621)) IVGSpreadsPtr IVGDocument::GetSpreads ( );
__declspec(implementation_key(1622)) IVGSpreadPtr IVGDocument::GetActiveSpread ( );
__declspec(implementation_key(1623)) IVGArrowHeadPtr IVGDocument::CreateArrowHead ( struct IVGCurve * Curve );
__declspec(implementation_key(1624)) IVGArrowHeadPtr IVGDocument::CreateArrowHeadEx ( struct IVGCurve * Curve, double CenterX, double CenterY, double OutlineWidthScale, double LineOffset );
__declspec(implementation_key(1625)) VARIANT_BOOL IVGDocument::DeletePages ( long StartPage, long NumPages );
__declspec(implementation_key(1626)) IVGArrowHeadPtr IVGDocument::CreateArrowHead2 ( struct IVGCurve * Curve, _bstr_t Name );
__declspec(implementation_key(1627)) IVGArrowHeadPtr IVGDocument::CreateArrowHeadEx2 ( struct IVGCurve * Curve, _bstr_t Name, double CenterX, double CenterY, double OutlineWidthScale, double LineOffset );
__declspec(implementation_key(1628)) IVGArrowHeadOptionsPtr IVGDocument::CreateArrowHeadOptions ( double Length, double Width, double OffsetX, double OffsetY, double RotationAngle, VARIANT_BOOL FlipHorizontal, VARIANT_BOOL FlipVertical );
__declspec(implementation_key(1629)) HRESULT IVGDocument::SaveAsCopy ( _bstr_t FileName, struct IVGStructSaveAsOptions * Options );
__declspec(implementation_key(1630)) IVGSnapPointPtr IVGDocument::CreateFreeSnapPoint ( double PositionX, double PositionY );
__declspec(implementation_key(1631)) IVGBSplinePtr IVGDocument::CreateBSpline ( long NumControlPoints, VARIANT_BOOL Closed );
__declspec(implementation_key(1632)) IVGDocumentPtr IVGDocument::Duplicate ( );
__declspec(implementation_key(1633)) IVGDocumentPtr IVGDocument::Clone ( );
__declspec(implementation_key(1634)) VARIANT_BOOL IVGDocument::GetIsTemporary ( );
__declspec(implementation_key(1635)) IVGColorContextPtr IVGDocument::GetColorContext ( );
__declspec(implementation_key(1636)) HRESULT IVGDocument::AssignColorContext ( struct IVGColorContext * ColorContext );
__declspec(implementation_key(1637)) HRESULT IVGDocument::ConvertToColorContext ( struct IVGColorContext * ColorContext );
__declspec(implementation_key(1638)) HRESULT IVGDocument::PrintColorProof ( struct IVGProofColorSettings * ProofSettings );
__declspec(implementation_key(1639)) IVGPalettePtr IVGDocument::GetPalette ( );
__declspec(implementation_key(1640)) long IVGDocument::GetTextFormatter ( );
__declspec(implementation_key(1641)) void IVGDocument::PutTextFormatter ( long pVal );
__declspec(implementation_key(1642)) IVGStyleSheetPtr IVGDocument::GetStyleSheet ( );
__declspec(implementation_key(1643)) HRESULT IVGDocument::InteractiveImport ( SAFEARRAY * * FileNames );
__declspec(implementation_key(1644)) VARIANT_BOOL IVGDocument::AddColorsToDocPalette ( VARIANT_BOOL SelectedOnly, long MaxColorsPerBitmap );
__declspec(implementation_key(1645)) long IVGDocument::CreateColorStyles ( VARIANT_BOOL UseFills, VARIANT_BOOL UseOutlines, VARIANT_BOOL SelectedOnly, long NumberOfColorHarmonies, enum cdrColorType ConvertColorsTo );
__declspec(implementation_key(1646)) IVGCurvePtr IVGDocument::CreateCurveFitToPoints ( struct IVGPointRange * Points, VARIANT_BOOL UseCurrentViewForTolerance, double tolerance );
__declspec(implementation_key(1647)) IVGCurvePtr IVGDocument::CreateCurveFitToPointsAndCusps ( struct IVGPointRange * Points, SAFEARRAY * * CuspIndexArray, VARIANT_BOOL UseCurrentViewForTolerance, double tolerance );
__declspec(implementation_key(1648)) IVGColorPtr IVGDocument::SampleColorAtPoint ( double x, double y, enum cdrColorType ColorType );
__declspec(implementation_key(1649)) IVGColorPtr IVGDocument::SampleColorInArea ( double x1, double y1, double x2, double y2, long XSamples, long YSamples, enum cdrColorType ColorType );
__declspec(implementation_key(1650)) HRESULT IVGDocument::ShowAllHiddenObjects ( );
__declspec(implementation_key(1651)) HRESULT IVGDocument::InteractiveImportWithContentIdentifier ( SAFEARRAY * * FileNames, SAFEARRAY * * ContentIdentifiers );
__declspec(implementation_key(1652)) HRESULT IVGDocument::ReplaceContentByIdentifier ( SAFEARRAY * * ContentIdentifiers, SAFEARRAY * * FileNames );
__declspec(implementation_key(1653)) SAFEARRAY * IVGDocument::GetContentIdentifiers ( );
__declspec(implementation_key(1654)) _variant_t IVGDocument::CustomCommand ( _bstr_t ComponentID, _bstr_t CommandID, SAFEARRAY * * Parameters );
__declspec(implementation_key(1655)) IVGMathUtilsPtr IVGDocument::GetMath ( );
__declspec(implementation_key(1656)) IVGImagePtr IVGDocument::CreateImage ( enum cdrImageType ImageType, long Width, long Height, struct IVGColor * FillColor );
__declspec(implementation_key(1657)) IVGDocumentMarkupPtr IVGDocument::GetMarkup ( );
__declspec(implementation_key(1658)) double IVGRect::Getx ( );
__declspec(implementation_key(1659)) void IVGRect::Putx ( double pVal );
__declspec(implementation_key(1660)) double IVGRect::Gety ( );
__declspec(implementation_key(1661)) void IVGRect::Puty ( double pVal );
__declspec(implementation_key(1662)) double IVGRect::GetWidth ( );
__declspec(implementation_key(1663)) void IVGRect::PutWidth ( double pVal );
__declspec(implementation_key(1664)) double IVGRect::GetHeight ( );
__declspec(implementation_key(1665)) void IVGRect::PutHeight ( double pVal );
__declspec(implementation_key(1666)) HRESULT IVGRect::SetRect ( double x, double y, double Width, double Height );
__declspec(implementation_key(1667)) HRESULT IVGRect::GetRect ( double * x, double * y, double * Width, double * Height );
__declspec(implementation_key(1668)) HRESULT IVGRect::CopyAssign ( struct IVGRect * Source );
__declspec(implementation_key(1669)) IVGRectPtr IVGRect::GetCopy ( );
__declspec(implementation_key(1670)) IVGRectPtr IVGRect::Intersect ( struct IVGRect * Rect );
__declspec(implementation_key(1671)) VARIANT_BOOL IVGRect::GetIsEmpty ( );
__declspec(implementation_key(1672)) IVGRectPtr IVGRect::Union ( struct IVGRect * Rect );
__declspec(implementation_key(1673)) HRESULT IVGRect::Offset ( double OffsetX, double OffsetY );
__declspec(implementation_key(1674)) VARIANT_BOOL IVGRect::Inflate ( double Left, double Top, double Right, double Bottom );
__declspec(implementation_key(1675)) VARIANT_BOOL IVGRect::IsPointInside ( double x, double y );
__declspec(implementation_key(1676)) HRESULT IVGRect::Clear ( );
__declspec(implementation_key(1677)) IVGRectPtr IVGRect::ChangeContext ( struct IVGDocument * SrcDoc, struct IVGDocument * DestDoc );
__declspec(implementation_key(1678)) double IVGRect::GetLeft ( );
__declspec(implementation_key(1679)) double IVGRect::GetRight ( );
__declspec(implementation_key(1680)) double IVGRect::GetTop ( );
__declspec(implementation_key(1681)) double IVGRect::GetBottom ( );
__declspec(implementation_key(1682)) double IVGRect::GetCenterX ( );
__declspec(implementation_key(1683)) double IVGRect::GetCenterY ( );
__declspec(implementation_key(1684)) IVGApplicationPtr IVGApplication::GetApplication ( );
__declspec(implementation_key(1685)) IVGApplicationPtr IVGApplication::GetParent ( );
__declspec(implementation_key(1686)) VARIANT_BOOL IVGApplication::GetVisible ( );
__declspec(implementation_key(1687)) void IVGApplication::PutVisible ( VARIANT_BOOL pVal );
__declspec(implementation_key(1688)) IVGDocumentsPtr IVGApplication::GetDocuments ( );
__declspec(implementation_key(1689)) IVGDocumentPtr IVGApplication::GetActiveDocument ( );
__declspec(implementation_key(1690)) IVGPagePtr IVGApplication::GetActivePage ( );
__declspec(implementation_key(1691)) IVGWindowPtr IVGApplication::GetActiveWindow ( );
__declspec(implementation_key(1692)) IVGWindowsPtr IVGApplication::GetWindows ( );
__declspec(implementation_key(1693)) ICorelScriptToolsPtr IVGApplication::CorelScriptTools ( );
__declspec(implementation_key(1694)) IVGWorkspacePtr IVGApplication::GetActiveWorkspace ( );
__declspec(implementation_key(1695)) IVGWorkspacesPtr IVGApplication::GetWorkspaces ( );
__declspec(implementation_key(1696)) IVGPalettePtr IVGApplication::GetActivePalette ( );
__declspec(implementation_key(1697)) IVGPalettesPtr IVGApplication::GetPalettes ( );
__declspec(implementation_key(1698)) HRESULT IVGApplication::Quit ( );
__declspec(implementation_key(1699)) IVGColorPtr IVGApplication::CreateColor ( _bstr_t ColorString );
__declspec(implementation_key(1700)) IVGFontListPtr IVGApplication::GetFontList ( );
__declspec(implementation_key(1701)) IVGAppWindowPtr IVGApplication::GetAppWindow ( );
__declspec(implementation_key(1702)) IVGRecentFilesPtr IVGApplication::GetRecentFiles ( );
__declspec(implementation_key(1703)) IDispatchPtr IVGApplication::GetVBE ( );
__declspec(implementation_key(1704)) double IVGApplication::cdrMixedDouble ( );
__declspec(implementation_key(1705)) float IVGApplication::cdrMixedSingle ( );
__declspec(implementation_key(1706)) long IVGApplication::cdrMixedLong ( );
__declspec(implementation_key(1707)) VARIANT_BOOL IVGApplication::GetEventsEnabled ( );
__declspec(implementation_key(1708)) void IVGApplication::PutEventsEnabled ( VARIANT_BOOL pVal );
__declspec(implementation_key(1709)) IVGDocumentPtr IVGApplication::OpenDocument ( _bstr_t FileName, long CodePage );
__declspec(implementation_key(1710)) IVGDocumentPtr IVGApplication::CreateDocument ( );
__declspec(implementation_key(1711)) IVGColorPtr IVGApplication::CreateColorEx ( long ColorModel, long V1, long V2, long V3, long V4, long V5, long V6, long V7 );
__declspec(implementation_key(1712)) IVGArrowHeadsPtr IVGApplication::GetArrowHeads ( );
__declspec(implementation_key(1713)) IVGOutlineStylesPtr IVGApplication::GetOutlineStyles ( );
__declspec(implementation_key(1714)) _bstr_t IVGApplication::GetVersion ( );
__declspec(implementation_key(1715)) long IVGApplication::GetVersionMajor ( );
__declspec(implementation_key(1716)) long IVGApplication::GetVersionMinor ( );
__declspec(implementation_key(1717)) long IVGApplication::GetVersionBuild ( );
__declspec(implementation_key(1718)) _bstr_t IVGApplication::GetPath ( );
__declspec(implementation_key(1719)) _bstr_t IVGApplication::GetConfigPath ( );
__declspec(implementation_key(1720)) _bstr_t IVGApplication::GetSetupPath ( );
__declspec(implementation_key(1721)) IVGLayerPtr IVGApplication::GetActiveLayer ( );
__declspec(implementation_key(1722)) IVGShapePtr IVGApplication::GetActiveSelection ( );
__declspec(implementation_key(1723)) IVGPatternCanvasesPtr IVGApplication::GetPatternCanvases ( );
__declspec(implementation_key(1724)) IVGClipboardPtr IVGApplication::GetClipboard ( );
__declspec(implementation_key(1725)) IVGShapeRangePtr IVGApplication::GetActiveSelectionRange ( );
__declspec(implementation_key(1726)) enum cdrTools IVGApplication::GetActiveTool ( );
__declspec(implementation_key(1727)) void IVGApplication::PutActiveTool ( enum cdrTools pTool );
__declspec(implementation_key(1728)) IVGShapePtr IVGApplication::GetActiveShape ( );
__declspec(implementation_key(1729)) VARIANT_BOOL IVGApplication::GetOptimization ( );
__declspec(implementation_key(1730)) void IVGApplication::PutOptimization ( VARIANT_BOOL pVal );
__declspec(implementation_key(1731)) enum cdrPanoseMatchingType IVGApplication::GetPanoseMatching ( );
__declspec(implementation_key(1732)) void IVGApplication::PutPanoseMatching ( enum cdrPanoseMatchingType pVal );
__declspec(implementation_key(1733)) IDispatchPtr IVGApplication::GetAddIns ( );
__declspec(implementation_key(1734)) IVGColorPtr IVGApplication::CreateRGBColor ( long Red, long Green, long Blue );
__declspec(implementation_key(1735)) IVGColorPtr IVGApplication::CreateCMYColor ( long Cyan, long Magenta, long Yellow );
__declspec(implementation_key(1736)) IVGColorPtr IVGApplication::CreateCMYKColor ( long Cyan, long Magenta, long Yellow, long Black );
__declspec(implementation_key(1737)) IVGColorPtr IVGApplication::CreateGrayColor ( long GrayValue );
__declspec(implementation_key(1738)) IVGColorPtr IVGApplication::CreateHLSColor ( long Hue, long Lightness, long Saturation );
__declspec(implementation_key(1739)) IVGColorPtr IVGApplication::CreateHSBColor ( long Hue, long Saturation, long Brightness );
__declspec(implementation_key(1740)) IVGColorPtr IVGApplication::CreateBWColor ( VARIANT_BOOL White );
__declspec(implementation_key(1741)) IVGColorPtr IVGApplication::CreateYIQColor ( long y, long I, long Q );
__declspec(implementation_key(1742)) IVGColorPtr IVGApplication::CreateLabColor ( long L, long A, long B );
__declspec(implementation_key(1743)) IVGColorPtr IVGApplication::CreateFixedColor ( enum cdrPaletteID PaletteID, long PaletteIndex, long Tint );
__declspec(implementation_key(1744)) IVGColorPtr IVGApplication::CreateRegistrationColor ( );
__declspec(implementation_key(1745)) IVGSnapPointPtr IVGApplication::CreateSnapPoint ( double PositionX, double PositionY );
__declspec(implementation_key(1746)) IVGDocumentPtr IVGApplication::CreateDocumentFromTemplate ( _bstr_t Template, VARIANT_BOOL IncludeGraphics );
__declspec(implementation_key(1747)) IPrnVBAPrintersPtr IVGApplication::GetPrinters ( );
__declspec(implementation_key(1748)) IPrnVBAPrintJobPtr IVGApplication::GetPrintJob ( );
__declspec(implementation_key(1749)) ICUICommandBarsPtr IVGApplication::GetCommandBars ( );
__declspec(implementation_key(1750)) ICUICommandBarPtr IVGApplication::GetStatusBar ( );
__declspec(implementation_key(1751)) ICUICommandBarPtr IVGApplication::GetMainMenu ( );
__declspec(implementation_key(1752)) IVGGMSManagerPtr IVGApplication::GetGMSManager ( );
__declspec(implementation_key(1753)) HRESULT IVGApplication::ImportWorkspace ( _bstr_t FileName );
__declspec(implementation_key(1754)) HRESULT IVGApplication::Refresh ( );
__declspec(implementation_key(1755)) IVGStructSaveAsOptionsPtr IVGApplication::CreateStructSaveAsOptions ( );
__declspec(implementation_key(1756)) IVGStructExportOptionsPtr IVGApplication::CreateStructExportOptions ( );
__declspec(implementation_key(1757)) IVGStructImportOptionsPtr IVGApplication::CreateStructImportOptions ( );
__declspec(implementation_key(1758)) IVGStructPaletteOptionsPtr IVGApplication::CreateStructPaletteOptions ( );
__declspec(implementation_key(1759)) IVGNodeRangePtr IVGApplication::CreateNodeRange ( );
__declspec(implementation_key(1760)) IVGSegmentRangePtr IVGApplication::CreateSegmentRange ( );
__declspec(implementation_key(1761)) IVGShapeRangePtr IVGApplication::CreateShapeRange ( );
__declspec(implementation_key(1762)) IVGPatternCanvasPtr IVGApplication::CreatePatternCanvas ( );
__declspec(implementation_key(1763)) IVGCurvePtr IVGApplication::CreateCurve ( struct IVGDocument * Document );
__declspec(implementation_key(1764)) _bstr_t IVGApplication::GetUserDataPath ( );
__declspec(implementation_key(1765)) VARIANT_BOOL IVGApplication::InitializeVBA ( );
__declspec(implementation_key(1766)) _bstr_t IVGApplication::GetHelpFile ( );
__declspec(implementation_key(1767)) ICUIFrameWorkPtr IVGApplication::GetFrameWork ( );
__declspec(implementation_key(1768)) IVGStructFontPropertiesPtr IVGApplication::CreateStructFontProperties ( );
__declspec(implementation_key(1769)) IVGStructAlignPropertiesPtr IVGApplication::CreateStructAlignProperties ( );
__declspec(implementation_key(1770)) IVGStructSpacePropertiesPtr IVGApplication::CreateStructSpaceProperties ( );
__declspec(implementation_key(1771)) IVGStructHyphenationSettingsPtr IVGApplication::CreateStructHyphenationSettings ( );
__declspec(implementation_key(1772)) IVGComponentsPtr IVGApplication::GetComponents ( );
__declspec(implementation_key(1773)) IVGSymbolLibrariesPtr IVGApplication::GetSymbolLibraries ( );
__declspec(implementation_key(1774)) long IVGApplication::AdviseEvents ( IDispatch * EventSink );
__declspec(implementation_key(1775)) HRESULT IVGApplication::UnadviseEvents ( long Cookie );
__declspec(implementation_key(1776)) enum cdrApplicationID IVGApplication::GetID ( );
__declspec(implementation_key(1777)) _bstr_t IVGApplication::GetName ( );
__declspec(implementation_key(1778)) enum cdrApplicationClass IVGApplication::GetClass ( );
__declspec(implementation_key(1779)) long IVGApplication::GetPlatformVersionMajor ( );
__declspec(implementation_key(1780)) long IVGApplication::GetPlatformVersionMinor ( );
__declspec(implementation_key(1781)) long IVGApplication::CheckPlatformVersion ( long VersionMajor, long VersionMinor );
__declspec(implementation_key(1782)) IVGAppStatusPtr IVGApplication::GetStatus ( );
__declspec(implementation_key(1783)) double IVGApplication::ConvertUnits ( double Value, enum cdrUnit FromUnit, enum cdrUnit ToUnit );
__declspec(implementation_key(1784)) enum cdrTextLanguage IVGApplication::GetUILanguage ( );
__declspec(implementation_key(1785)) VARIANT_BOOL IVGApplication::IsUILanguageAvailable ( enum cdrTextLanguage Language );
__declspec(implementation_key(1786)) IVGPageSizesPtr IVGApplication::GetPageSizes ( );
__declspec(implementation_key(1787)) enum cdrUnit IVGApplication::GetUnit ( );
__declspec(implementation_key(1788)) void IVGApplication::PutUnit ( enum cdrUnit pVal );
__declspec(implementation_key(1789)) _bstr_t IVGApplication::ConvertToUnicode ( _bstr_t String, long CodePage );
__declspec(implementation_key(1790)) _bstr_t IVGApplication::ConvertFromUnicode ( _bstr_t String, long CodePage );
__declspec(implementation_key(1791)) _bstr_t IVGApplication::GetUserWorkspacePath ( );
__declspec(implementation_key(1792)) _bstr_t IVGApplication::GetLanguagePath ( );
__declspec(implementation_key(1793)) IVGTreeManagerPtr IVGApplication::GetActiveTreeManager ( );
__declspec(implementation_key(1794)) IVGLayerPtr IVGApplication::GetActiveVirtualLayer ( );
__declspec(implementation_key(1795)) IVGDuotonePtr IVGApplication::CreateDuotone ( );
__declspec(implementation_key(1796)) IVGColorManagerPtr IVGApplication::GetColorManager ( );
__declspec(implementation_key(1797)) IVGOutlineStylesPtr IVGApplication::GetEnhancedOutlines ( );
__declspec(implementation_key(1798)) VARIANT_BOOL IVGApplication::AddPluginCommand ( _bstr_t CommandID, _bstr_t Caption, _bstr_t Tooltip );
__declspec(implementation_key(1799)) VARIANT_BOOL IVGApplication::RemovePluginCommand ( _bstr_t CommandID );
__declspec(implementation_key(1800)) IVGOutlineStylePtr IVGApplication::CreateOutlineStyle ( long DashDotCount, SAFEARRAY * * DashDotLengths );
__declspec(implementation_key(1801)) enum cdrAppStartupMode IVGApplication::GetStartupMode ( );
__declspec(implementation_key(1802)) void IVGApplication::PutStartupMode ( enum cdrAppStartupMode pVal );
__declspec(implementation_key(1803)) IVGPropertiesPtr IVGApplication::GetGlobalUserData ( );
__declspec(implementation_key(1804)) IVGPropertiesPtr IVGApplication::GetSessionUserData ( );
__declspec(implementation_key(1805)) _variant_t IVGApplication::Evaluate ( _bstr_t Expression );
__declspec(implementation_key(1806)) IVGRectPtr IVGApplication::CreateRect ( double x, double y, double Width, double Height );
__declspec(implementation_key(1807)) HRESULT IVGApplication::ForceUpdateFontTable ( );
__declspec(implementation_key(1808)) IVGSpreadPtr IVGApplication::GetActiveSpread ( );
__declspec(implementation_key(1809)) IVGDocumentPtr IVGApplication::OpenDocumentAsCopy ( _bstr_t FileName, struct IVGStructOpenOptions * Options );
__declspec(implementation_key(1810)) IVGColorContextPtr IVGApplication::GetDefaultColorContext ( );
__declspec(implementation_key(1811)) IVGColorContextPtr IVGApplication::CreateColorContext ( struct IVGColorProfile * RGBProfile, struct IVGColorProfile * CMYKProfile, struct IVGColorProfile * GrayscaleProfile, enum clrRenderingIntent RenderingIntent, enum clrColorModel BlendingColorModel );
__declspec(implementation_key(1812)) IVGColorContextPtr IVGApplication::CreateColorContext2 ( _bstr_t ColorProfileList, enum clrRenderingIntent RenderingIntent, enum clrColorModel BlendingColorModel );
__declspec(implementation_key(1813)) IVGDocumentPtr IVGApplication::CreateDocumentEx ( struct IVGStructCreateOptions * Options );
__declspec(implementation_key(1814)) IVGDocumentPtr IVGApplication::OpenDocumentEx ( _bstr_t FileName, struct IVGStructOpenOptions * Options );
__declspec(implementation_key(1815)) IVGStructOpenOptionsPtr IVGApplication::CreateStructOpenOptions ( );
__declspec(implementation_key(1816)) IVGStructCreateOptionsPtr IVGApplication::CreateStructCreateOptions ( );
__declspec(implementation_key(1817)) IVGStructPasteOptionsPtr IVGApplication::CreateStructPasteOptions ( );
__declspec(implementation_key(1818)) IVGProofColorSettingsPtr IVGApplication::CreateProofColorSettings ( _bstr_t ProfileName, enum clrRenderingIntent RenderingIntent, VARIANT_BOOL PreserveColorValues );
__declspec(implementation_key(1819)) IVGPaletteManagerPtr IVGApplication::GetPaletteManager ( );
__declspec(implementation_key(1820)) IVGColorPtr IVGApplication::CreateSpotColor ( _bstr_t PaletteIdentifier, long SpotColorID, long Tint );
__declspec(implementation_key(1821)) IVGColorPtr IVGApplication::CreateSpotColorByName ( _bstr_t PaletteIdentifier, _bstr_t SpotColorName, long Tint );
__declspec(implementation_key(1822)) IVGColorPtr IVGApplication::CreatePaletteColor ( _bstr_t PaletteIdentifier, long ColorIndex );
__declspec(implementation_key(1823)) SAFEARRAY * IVGApplication::GetSupportedOpenTypeFeatures ( );
__declspec(implementation_key(1824)) IVGFillMetadataPtr IVGApplication::CreateFillMetadata ( );
__declspec(implementation_key(1825)) _bstr_t IVGApplication::GetAddonPath ( );
__declspec(implementation_key(1826)) _bstr_t IVGApplication::GetProgramPath ( );
__declspec(implementation_key(1827)) _bstr_t IVGApplication::GetActiveToolStateGuid ( );
__declspec(implementation_key(1828)) void IVGApplication::PutActiveToolStateGuid ( _bstr_t pTool );
__declspec(implementation_key(1829)) HRESULT IVGApplication::RegisterToolState ( _bstr_t ToolStateGuid, _bstr_t ToolStateName, struct IVGToolState * ToolState );
__declspec(implementation_key(1830)) VARIANT_BOOL IVGApplication::UnregisterToolState ( _bstr_t ToolStateGuid );
__declspec(implementation_key(1831)) IVGOnScreenCurvePtr IVGApplication::CreateOnScreenCurve ( );
__declspec(implementation_key(1832)) IVGOnScreenHandlePtr IVGApplication::CreateOnScreenHandle ( );
__declspec(implementation_key(1833)) IVGOnScreenTextPtr IVGApplication::CreateOnScreenText ( );
__declspec(implementation_key(1834)) IVGMathUtilsPtr IVGApplication::GetMath ( );
__declspec(implementation_key(1835)) HRESULT IVGApplication::RegisterUserApplicationPreference ( _bstr_t GroupName, _bstr_t KeyName, const _variant_t & DefaultVal );
__declspec(implementation_key(1836)) _variant_t IVGApplication::GetApplicationPreferenceValue ( _bstr_t GroupName, _bstr_t KeyName );
__declspec(implementation_key(1837)) HRESULT IVGApplication::SetApplicationPreferenceValue ( _bstr_t GroupName, _bstr_t KeyName, const _variant_t & newVal );
__declspec(implementation_key(1838)) IVGPropertiesPtr IVGApplication::CreateProperties ( );
__declspec(implementation_key(1839)) HRESULT IVGApplication::RegisterToolShape ( _bstr_t ToolShapeGuid, struct IVGToolShapeAttributes * ToolShapeAttributes, struct IVGToolShape * ToolShape );
__declspec(implementation_key(1840)) IVGToolShapeAttributesPtr IVGApplication::CreateToolShapeAttributes ( );
__declspec(implementation_key(1841)) _bstr_t IVGApplication::GetUILanguageCode ( );
__declspec(implementation_key(1842)) HRESULT IVGApplication::StartTemporaryToolState ( _bstr_t StateGuid );
__declspec(implementation_key(1843)) HRESULT IVGApplication::MarkupLogout ( );
__declspec(implementation_key(1844)) HRESULT IVGApplication::MarkupLogin ( struct IVGCommentAuthor * Author );
__declspec(implementation_key(1845)) IVGCommentAuthorPtr IVGApplication::CreateMarkupAuthor ( _bstr_t Name, _bstr_t Avatar, _bstr_t Email, enum cdrAuthorAuthentication Authentication );
__declspec(implementation_key(1846)) IVGApplicationPtr IVGDocuments::GetApplication ( );
__declspec(implementation_key(1847)) IVGApplicationPtr IVGDocuments::GetParent ( );
__declspec(implementation_key(1848)) IVGDocumentPtr IVGDocuments::GetItem ( long Index );
__declspec(implementation_key(1849)) IUnknownPtr IVGDocuments::Get_NewEnum ( );
__declspec(implementation_key(1850)) long IVGDocuments::GetCount ( );
__declspec(implementation_key(1851)) IVGApplicationPtr IVGOutlineStyles::GetApplication ( );
__declspec(implementation_key(1852)) IVGApplicationPtr IVGOutlineStyles::GetParent ( );
__declspec(implementation_key(1853)) IVGOutlineStylePtr IVGOutlineStyles::GetItem ( long Index );
__declspec(implementation_key(1854)) IUnknownPtr IVGOutlineStyles::Get_NewEnum ( );
__declspec(implementation_key(1855)) long IVGOutlineStyles::GetCount ( );
__declspec(implementation_key(1856)) IVGOutlineStylePtr IVGOutlineStyles::Add ( );
__declspec(implementation_key(1857)) HRESULT IVGOutlineStyles::Remove ( long Index );
__declspec(implementation_key(1858)) HRESULT IVGOutlineStyles::Save ( );
__declspec(implementation_key(1859)) IVGOutlineStylePtr IVGOutlineStyles::AddStyle ( struct IVGOutlineStyle * Style );
__declspec(implementation_key(1860)) IVGApplicationPtr IVGRulers::GetApplication ( );
__declspec(implementation_key(1861)) IVGDocumentPtr IVGRulers::GetParent ( );
__declspec(implementation_key(1862)) enum cdrUnit IVGRulers::GetVUnits ( );
__declspec(implementation_key(1863)) void IVGRulers::PutVUnits ( enum cdrUnit pVal );
__declspec(implementation_key(1864)) enum cdrUnit IVGRulers::GetHUnits ( );
__declspec(implementation_key(1865)) void IVGRulers::PutHUnits ( enum cdrUnit pVal );
__declspec(implementation_key(1866)) IVGApplicationPtr IVGGrid::GetApplication ( );
__declspec(implementation_key(1867)) IVGDocumentPtr IVGGrid::GetParent ( );
__declspec(implementation_key(1868)) VARIANT_BOOL IVGGrid::GetVisible ( );
__declspec(implementation_key(1869)) void IVGGrid::PutVisible ( VARIANT_BOOL pVal );
__declspec(implementation_key(1870)) enum cdrGridType IVGGrid::GetType ( );
__declspec(implementation_key(1871)) void IVGGrid::PutType ( enum cdrGridType pVal );
__declspec(implementation_key(1872)) VARIANT_BOOL IVGGrid::GetSnap ( );
__declspec(implementation_key(1873)) void IVGGrid::PutSnap ( VARIANT_BOOL pVal );
__declspec(implementation_key(1874)) HRESULT IVGGrid::SetFrequency ( double GridX, double GridY );
__declspec(implementation_key(1875)) double IVGGrid::GetSpacingX ( );
__declspec(implementation_key(1876)) void IVGGrid::PutSpacingX ( double pVal );
__declspec(implementation_key(1877)) double IVGGrid::GetSpacingY ( );
__declspec(implementation_key(1878)) void IVGGrid::PutSpacingY ( double pVal );
__declspec(implementation_key(1879)) HRESULT IVGAppPlugin::OnLoad ( struct IVGApplication * Application );
__declspec(implementation_key(1880)) HRESULT IVGAppPlugin::StartSession ( );
__declspec(implementation_key(1881)) HRESULT IVGAppPlugin::StopSession ( );
__declspec(implementation_key(1882)) HRESULT IVGAppPlugin::OnUnload ( );
__declspec(implementation_key(1883)) _bstr_t IVGPage::GetName ( );
__declspec(implementation_key(1884)) void IVGPage::PutName ( _bstr_t pVal );
__declspec(implementation_key(1885)) IVGApplicationPtr IVGPage::GetApplication ( );
__declspec(implementation_key(1886)) IVGPagesPtr IVGPage::GetParent ( );
__declspec(implementation_key(1887)) IVGLayersPtr IVGPage::GetLayers ( );
__declspec(implementation_key(1888)) IVGShapesPtr IVGPage::GetShapes ( );
__declspec(implementation_key(1889)) IVGLayerPtr IVGPage::GetActiveLayer ( );
__declspec(implementation_key(1890)) _bstr_t IVGPage::GetPaper ( );
__declspec(implementation_key(1891)) double IVGPage::GetSizeWidth ( );
__declspec(implementation_key(1892)) void IVGPage::PutSizeWidth ( double pVal );
__declspec(implementation_key(1893)) double IVGPage::GetSizeHeight ( );
__declspec(implementation_key(1894)) void IVGPage::PutSizeHeight ( double pVal );
__declspec(implementation_key(1895)) long IVGPage::GetResolution ( );
__declspec(implementation_key(1896)) void IVGPage::PutResolution ( long pVal );
__declspec(implementation_key(1897)) double IVGPage::GetBleed ( );
__declspec(implementation_key(1898)) void IVGPage::PutBleed ( double pVal );
__declspec(implementation_key(1899)) enum cdrPageOrientation IVGPage::GetOrientation ( );
__declspec(implementation_key(1900)) void IVGPage::PutOrientation ( enum cdrPageOrientation pVal );
__declspec(implementation_key(1901)) long IVGPage::GetIndex ( );
__declspec(implementation_key(1902)) HRESULT IVGPage::Activate ( );
__declspec(implementation_key(1903)) HRESULT IVGPage::Delete ( );
__declspec(implementation_key(1904)) IVGLayerPtr IVGPage::CreateLayer ( _bstr_t LayerName );
__declspec(implementation_key(1905)) IVGShapePtr IVGPage::TextFind ( _bstr_t Text, VARIANT_BOOL CaseSensitive );
__declspec(implementation_key(1906)) HRESULT IVGPage::TextReplace ( _bstr_t OldText, _bstr_t NewText, VARIANT_BOOL CaseSensitive, VARIANT_BOOL ReplaceSelectedOnly );
__declspec(implementation_key(1907)) IVGShapePtr IVGPage::SelectShapesAtPoint ( double x, double y, VARIANT_BOOL SelectUnfilled, double HotArea );
__declspec(implementation_key(1908)) IVGShapePtr IVGPage::SelectShapesFromRectangle ( double x1, double y1, double x2, double y2, VARIANT_BOOL Touch );
__declspec(implementation_key(1909)) enum cdrPageBackground IVGPage::GetBackground ( );
__declspec(implementation_key(1910)) void IVGPage::PutBackground ( enum cdrPageBackground pVal );
__declspec(implementation_key(1911)) IVGColorPtr IVGPage::GetColor ( );
__declspec(implementation_key(1912)) void IVGPage::PutColor ( struct IVGColor * pVal );
__declspec(implementation_key(1913)) VARIANT_BOOL IVGPage::GetPrintExportBackground ( );
__declspec(implementation_key(1914)) void IVGPage::PutPrintExportBackground ( VARIANT_BOOL pVal );
__declspec(implementation_key(1915)) IVGShapeRangePtr IVGPage::GetGuides ( enum cdrGuideType Type );
__declspec(implementation_key(1916)) IVGShapePtr IVGPage::FindShape ( _bstr_t Name, enum cdrShapeType Type, long StaticID, VARIANT_BOOL Recursive );
__declspec(implementation_key(1917)) IVGShapeRangePtr IVGPage::FindShapes ( _bstr_t Name, enum cdrShapeType Type, VARIANT_BOOL Recursive );
__declspec(implementation_key(1918)) HRESULT IVGPage::MoveTo ( long Index );
__declspec(implementation_key(1919)) HRESULT IVGPage::UnlockAllShapes ( );
__declspec(implementation_key(1920)) IVGPropertiesPtr IVGPage::GetProperties ( );
__declspec(implementation_key(1921)) HRESULT IVGPage::GetSize ( double * Width, double * Height );
__declspec(implementation_key(1922)) HRESULT IVGPage::SetSize ( double Width, double Height );
__declspec(implementation_key(1923)) double IVGPage::GetCenterX ( );
__declspec(implementation_key(1924)) double IVGPage::GetCenterY ( );
__declspec(implementation_key(1925)) _variant_t IVGPage::CustomCommand ( _bstr_t ComponentID, _bstr_t CommandID, SAFEARRAY * * Parameters );
__declspec(implementation_key(1926)) IVGPagePtr IVGPage::GetPrevious ( );
__declspec(implementation_key(1927)) IVGPagePtr IVGPage::GetNext ( );
__declspec(implementation_key(1928)) IVGShapesPtr IVGPage::GetSelectableShapes ( );
__declspec(implementation_key(1929)) IVGTreeNodePtr IVGPage::GetTreeNode ( );
__declspec(implementation_key(1930)) HRESULT IVGPage::GetCenterPosition ( double * CenterX, double * CenterY );
__declspec(implementation_key(1931)) HRESULT IVGPage::SelectSize ( _bstr_t PageSizeName, VARIANT_BOOL Landscape );
__declspec(implementation_key(1932)) IVGLayerPtr IVGPage::GetGuidesLayer ( );
__declspec(implementation_key(1933)) IVGLayerPtr IVGPage::GetDesktopLayer ( );
__declspec(implementation_key(1934)) IVGLayerPtr IVGPage::GetGridLayer ( );
__declspec(implementation_key(1935)) HRESULT IVGPage::GetBoundingBox ( double * x, double * y, double * Width, double * Height );
__declspec(implementation_key(1936)) double IVGPage::GetLeftX ( );
__declspec(implementation_key(1937)) double IVGPage::GetRightX ( );
__declspec(implementation_key(1938)) double IVGPage::GetBottomY ( );
__declspec(implementation_key(1939)) double IVGPage::GetTopY ( );
__declspec(implementation_key(1940)) IVGLayersPtr IVGPage::GetAllLayers ( );
__declspec(implementation_key(1941)) IVGRectPtr IVGPage::GetBoundingBox ( );
__declspec(implementation_key(1942)) IVGSpreadPtr IVGPage::GetSpread ( );
__declspec(implementation_key(1943)) IVGSnapPointPtr IVGPage::FindClosestSnapPoint ( enum cdrPointType TypeSet, double PositionX, double PositionY, double HotArea );
__declspec(implementation_key(1944)) IVGRectPtr IVGPage::GetObjectsBoundingBox ( VARIANT_BOOL SelectedOnly, VARIANT_BOOL IncludeNonPrintable );
__declspec(implementation_key(1945)) IVGShapePtr IVGPage::FindShapeAtPoint ( double x, double y, VARIANT_BOOL TreatAsFilled );
__declspec(implementation_key(1946)) IVGPageMarkupPtr IVGPage::GetMarkup ( );
__declspec(implementation_key(1947)) IVGApplicationPtr IVGPages::GetApplication ( );
__declspec(implementation_key(1948)) IVGDocumentPtr IVGPages::GetParent ( );
__declspec(implementation_key(1949)) IVGPagePtr IVGPages::GetItem ( long Index );
__declspec(implementation_key(1950)) IUnknownPtr IVGPages::Get_NewEnum ( );
__declspec(implementation_key(1951)) long IVGPages::GetCount ( );
__declspec(implementation_key(1952)) IVGPagePtr IVGPages::GetFirst ( );
__declspec(implementation_key(1953)) IVGPagePtr IVGPages::GetLast ( );
__declspec(implementation_key(1954)) IVGApplicationPtr IVGLayers::GetApplication ( );
__declspec(implementation_key(1955)) IVGPagePtr IVGLayers::GetParent ( );
__declspec(implementation_key(1956)) IVGLayerPtr IVGLayers::GetItem ( const _variant_t & IndexOrName );
__declspec(implementation_key(1957)) IUnknownPtr IVGLayers::Get_NewEnum ( );
__declspec(implementation_key(1958)) long IVGLayers::GetCount ( );
__declspec(implementation_key(1959)) IVGLayerPtr IVGLayers::Find ( _bstr_t LayerName );
__declspec(implementation_key(1960)) IVGLayerPtr IVGLayers::GetTop ( );
__declspec(implementation_key(1961)) IVGLayerPtr IVGLayers::GetBottom ( );
__declspec(implementation_key(1962)) IVGApplicationPtr IVGLayer::GetApplication ( );
__declspec(implementation_key(1963)) IVGLayersPtr IVGLayer::GetParent ( );
__declspec(implementation_key(1964)) _bstr_t IVGLayer::GetName ( );
__declspec(implementation_key(1965)) void IVGLayer::PutName ( _bstr_t pVal );
__declspec(implementation_key(1966)) IVGShapesPtr IVGLayer::GetShapes ( );
__declspec(implementation_key(1967)) HRESULT IVGLayer::Activate ( );
__declspec(implementation_key(1968)) VARIANT_BOOL IVGLayer::GetVisible ( );
__declspec(implementation_key(1969)) void IVGLayer::PutVisible ( VARIANT_BOOL pVal );
__declspec(implementation_key(1970)) VARIANT_BOOL IVGLayer::GetPrintable ( );
__declspec(implementation_key(1971)) void IVGLayer::PutPrintable ( VARIANT_BOOL pVal );
__declspec(implementation_key(1972)) VARIANT_BOOL IVGLayer::GetEditable ( );
__declspec(implementation_key(1973)) void IVGLayer::PutEditable ( VARIANT_BOOL pVal );
__declspec(implementation_key(1974)) VARIANT_BOOL IVGLayer::GetMaster ( );
__declspec(implementation_key(1975)) void IVGLayer::PutMaster ( VARIANT_BOOL pVal );
__declspec(implementation_key(1976)) VARIANT_BOOL IVGLayer::GetOverrideColor ( );
__declspec(implementation_key(1977)) void IVGLayer::PutOverrideColor ( VARIANT_BOOL pVal );
__declspec(implementation_key(1978)) IVGColorPtr IVGLayer::GetColor ( );
__declspec(implementation_key(1979)) void IVGLayer::PutColor ( struct IVGColor * pVal );
__declspec(implementation_key(1980)) HRESULT IVGLayer::Delete ( );
__declspec(implementation_key(1981)) HRESULT IVGLayer::MoveAbove ( struct IVGLayer * Layer );
__declspec(implementation_key(1982)) HRESULT IVGLayer::MoveBelow ( struct IVGLayer * Layer );
__declspec(implementation_key(1983)) HRESULT IVGLayer::Import ( _bstr_t FileName, enum cdrFilter Filter, struct IVGStructImportOptions * Options );
__declspec(implementation_key(1984)) IVGShapePtr IVGLayer::CreateRectangle ( double Left, double Top, double Right, double Bottom, long CornerUL, long CornerUR, long CornerLR, long CornerLL );
__declspec(implementation_key(1985)) IVGShapePtr IVGLayer::CreateEllipse ( double Left, double Top, double Right, double Bottom, double StartAngle, double EndAngle, VARIANT_BOOL Pie );
__declspec(implementation_key(1986)) IVGShapePtr IVGLayer::CreatePolygon ( double Left, double Top, double Right, double Bottom, long Sides, long SubPaths, long Complexity, VARIANT_BOOL Star, long StarComplexity, long MaxComplexity );
__declspec(implementation_key(1987)) IVGShapePtr IVGLayer::CreateGridBoxes ( double Left, double Top, double Right, double Bottom, long Wide, long High );
__declspec(implementation_key(1988)) IVGShapePtr IVGLayer::CreateSpiral ( double Left, double Top, double Right, double Bottom, long NumRevolutions, enum cdrSpiralType SpiralType, long GrowthRate );
__declspec(implementation_key(1989)) IVGShapePtr IVGLayer::CreateArtisticText ( double Left, double Bottom, _bstr_t Text, enum cdrTextLanguage LanguageID, enum cdrTextCharSet CharSet, _bstr_t Font, float Size, enum cdrTriState Bold, enum cdrTriState Italic, enum cdrFontLine Underline, enum cdrAlignment Alignment );
__declspec(implementation_key(1990)) IVGShapePtr IVGLayer::CreateParagraphText ( double Left, double Top, double Right, double Bottom, _bstr_t Text, enum cdrTextLanguage LanguageID, enum cdrTextCharSet CharSet, _bstr_t Font, float Size, enum cdrTriState Bold, enum cdrTriState Italic, enum cdrFontLine Underline, enum cdrAlignment Alignment );
__declspec(implementation_key(1991)) IVGShapePtr IVGLayer::CreateCurveSegment ( double StartX, double StartY, double EndX, double EndY, double StartingControlPointLength, double StartingControlPointAngle, double EndingControlPointLength, double EndingControlPointAngle );
__declspec(implementation_key(1992)) IVGShapePtr IVGLayer::CreateLineSegment ( double StartX, double StartY, double EndX, double EndY );
__declspec(implementation_key(1993)) IVGShapePtr IVGLayer::CreateConnector ( struct IVGSnapPoint * Start, struct IVGSnapPoint * End );
__declspec(implementation_key(1994)) IVGShapePtr IVGLayer::CreateCurve ( struct IVGCurve * Source );
__declspec(implementation_key(1995)) IVGShapePtr IVGLayer::Paste ( );
__declspec(implementation_key(1996)) IVGShapePtr IVGLayer::CreateGuideAngle ( double x, double y, double Angle );
__declspec(implementation_key(1997)) IVGShapePtr IVGLayer::CreateGuide ( double x1, double y1, double x2, double y2 );
__declspec(implementation_key(1998)) IVGShapePtr IVGLayer::CreateEllipse2 ( double CenterX, double CenterY, double Radius1, double Radius2, double StartAngle, double EndAngle, VARIANT_BOOL Pie );
__declspec(implementation_key(1999)) IVGShapePtr IVGLayer::FindShape ( _bstr_t Name, enum cdrShapeType Type, long StaticID, VARIANT_BOOL Recursive );
__declspec(implementation_key(2000)) IVGShapeRangePtr IVGLayer::FindShapes ( _bstr_t Name, enum cdrShapeType Type, VARIANT_BOOL Recursive );
__declspec(implementation_key(2001)) IVGShapePtr IVGLayer::CreateRectangle2 ( double x, double y, double Width, double Height, double RadiusUL, double RadiusUR, double RadiusLR, double RadiusLL );
__declspec(implementation_key(2002)) IVGShapePtr IVGLayer::CreateFreeConnector ( double x1, double y1, double x2, double y2 );
__declspec(implementation_key(2003)) IVGPropertiesPtr IVGLayer::GetProperties ( );
__declspec(implementation_key(2004)) IVGPropertiesPtr IVGLayer::GetMasterProperties ( );
__declspec(implementation_key(2005)) long IVGLayer::GetIndex ( );
__declspec(implementation_key(2006)) IVGShapePtr IVGLayer::CreateCurveSegment2 ( double x1, double y1, double StartingControlPointX, double StartingControlPointY, double EndingControlPointX, double EndingControlPointY, double x2, double y2 );
__declspec(implementation_key(2007)) ICorelImportFilterPtr IVGLayer::ImportEx ( _bstr_t FileName, enum cdrFilter Filter, struct IVGStructImportOptions * Options );
__declspec(implementation_key(2008)) IVGShapePtr IVGLayer::CreateArtisticTextWide ( double Left, double Bottom, _bstr_t Text, enum cdrTextLanguage LanguageID, enum cdrTextCharSet CharSet, _bstr_t Font, float Size, enum cdrTriState Bold, enum cdrTriState Italic, enum cdrFontLine Underline, enum cdrAlignment Alignment );
__declspec(implementation_key(2009)) IVGShapePtr IVGLayer::CreateParagraphTextWide ( double Left, double Top, double Right, double Bottom, _bstr_t Text, enum cdrTextLanguage LanguageID, enum cdrTextCharSet CharSet, _bstr_t Font, float Size, enum cdrTriState Bold, enum cdrTriState Italic, enum cdrFontLine Underline, enum cdrAlignment Alignment );
__declspec(implementation_key(2010)) _variant_t IVGLayer::CustomCommand ( _bstr_t ComponentID, _bstr_t CommandID, SAFEARRAY * * Parameters );
__declspec(implementation_key(2011)) IVGShapePtr IVGLayer::CreateCustomShape ( _bstr_t TypeID, SAFEARRAY * * Parameters );
__declspec(implementation_key(2012)) IVGShapePtr IVGLayer::CreateLinearDimension ( enum cdrLinearDimensionType Type, struct IVGSnapPoint * Point1, struct IVGSnapPoint * Point2, VARIANT_BOOL TextCentered, double TextX, double TextY, enum cdrDimensionStyle Style, long Precision, VARIANT_BOOL ShowUnits, enum cdrDimensionLinearUnits Units, enum cdrDimensionPlacement Placement, VARIANT_BOOL HorizontalText, VARIANT_BOOL BoxedText, VARIANT_BOOL LeadingZero, _bstr_t Prefix, _bstr_t Suffix, double OutlineWidth, struct IVGArrowHead * Arrows, struct IVGColor * OutlineColor, _bstr_t TextFont, double TextSize, struct IVGColor * TextColor );
__declspec(implementation_key(2013)) IVGShapePtr IVGLayer::CreateAngularDimension ( struct IVGSnapPoint * Center, struct IVGSnapPoint * Point1, struct IVGSnapPoint * Point2, double TextX, double TextY, long Precision, VARIANT_BOOL ShowUnits, enum cdrDimensionAngularUnits Units, VARIANT_BOOL BoxedText, VARIANT_BOOL LeadingZero, _bstr_t Prefix, _bstr_t Suffix, double OutlineWidth, struct IVGArrowHead * Arrows, struct IVGColor * OutlineColor, _bstr_t TextFont, double TextSize, struct IVGColor * TextColor );
__declspec(implementation_key(2014)) IVGShapePtr IVGLayer::CreateSymbol ( double x, double y, _bstr_t SymbolName, struct IVGSymbolLibrary * Library );
__declspec(implementation_key(2015)) IVGShapePtr IVGLayer::CreatePolygon2 ( double CenterX, double CenterY, double Radius, long Sides, double Angle, double InnerRadius, VARIANT_BOOL Star, long Sharpness );
__declspec(implementation_key(2016)) VARIANT_BOOL IVGLayer::PasteSpecial ( _bstr_t FormatName, VARIANT_BOOL PasteLink, VARIANT_BOOL DisplayAsIcon, _bstr_t Caption, const _variant_t & Icon );
__declspec(implementation_key(2017)) IVGShapePtr IVGLayer::CreateOLEObject ( _bstr_t ObjectID, VARIANT_BOOL DisplayAsIcon, _bstr_t Caption, const _variant_t & Icon );
__declspec(implementation_key(2018)) IVGShapePtr IVGLayer::CreateOLEObjectFromFile ( _bstr_t FileName, VARIANT_BOOL Link, VARIANT_BOOL DisplayAsIcon, _bstr_t Caption, const _variant_t & Icon );
__declspec(implementation_key(2019)) IVGShapesPtr IVGLayer::GetSelectableShapes ( );
__declspec(implementation_key(2020)) IVGTreeNodePtr IVGLayer::GetTreeNode ( );
__declspec(implementation_key(2021)) VARIANT_BOOL IVGLayer::GetIsGuidesLayer ( );
__declspec(implementation_key(2022)) VARIANT_BOOL IVGLayer::GetIsDesktopLayer ( );
__declspec(implementation_key(2023)) VARIANT_BOOL IVGLayer::GetIsGridLayer ( );
__declspec(implementation_key(2024)) VARIANT_BOOL IVGLayer::GetIsSpecialLayer ( );
__declspec(implementation_key(2025)) IVGLayerPtr IVGLayer::GetMasterLayer ( );
__declspec(implementation_key(2026)) long IVGLayer::GetAbsoluteIndex ( );
__declspec(implementation_key(2027)) IVGPagePtr IVGLayer::GetPage ( );
__declspec(implementation_key(2028)) IVGLayerPtr IVGLayer::GetAbove ( VARIANT_BOOL IgnoreMasters );
__declspec(implementation_key(2029)) IVGLayerPtr IVGLayer::GetBelow ( VARIANT_BOOL IgnoreMasters );
__declspec(implementation_key(2030)) IVGShapePtr IVGLayer::CreateRectangleRect ( struct IVGRect * Rect, double RadiusUL, double RadiusUR, double RadiusLR, double RadiusLL );
__declspec(implementation_key(2031)) IVGShapePtr IVGLayer::CreateEllipseRect ( struct IVGRect * Rect, double StartAngle, double EndAngle, VARIANT_BOOL Pie );
__declspec(implementation_key(2032)) IVGShapePtr IVGLayer::CreateConnectorEx ( enum cdrConnectorType Type, struct IVGSnapPoint * Start, struct IVGSnapPoint * End );
__declspec(implementation_key(2033)) IVGShapePtr IVGLayer::CreateRightAngleConnector ( struct IVGSnapPoint * Start, struct IVGSnapPoint * End, double CornerRadius );
__declspec(implementation_key(2034)) IVGShapePtr IVGLayer::CreateBSpline ( struct IVGBSpline * Source );
__declspec(implementation_key(2035)) IVGShapeRangePtr IVGLayer::PasteEx ( struct IVGStructPasteOptions * Options );
__declspec(implementation_key(2036)) IVGShapePtr IVGLayer::CreateToolShape ( _bstr_t ToolShapeGuid, struct IVGProperties * ShapeProperties );
__declspec(implementation_key(2037)) IVGShapePtr IVGLayer::CreateBitmap ( double Left, double Top, double Right, double Bottom, struct IVGImage * Image, struct IVGImage * ImageAlpha );
__declspec(implementation_key(2038)) IVGShapePtr IVGLayer::CreateBitmap2 ( double x, double y, double Width, double Height, struct IVGImage * Image, struct IVGImage * ImageAlpha );
__declspec(implementation_key(2039)) IVGShapePtr IVGLayer::CreateBitmapRect ( struct IVGRect * Rect, struct IVGImage * Image, struct IVGImage * ImageAlpha );
__declspec(implementation_key(2040)) IVGApplicationPtr IVGShapes::GetApplication ( );
__declspec(implementation_key(2041)) IDispatchPtr IVGShapes::GetParent ( );
__declspec(implementation_key(2042)) IVGShapePtr IVGShapes::GetItem ( const _variant_t & IndexOrName );
__declspec(implementation_key(2043)) IUnknownPtr IVGShapes::Get_NewEnum ( );
__declspec(implementation_key(2044)) long IVGShapes::GetCount ( );
__declspec(implementation_key(2045)) IVGShapeRangePtr IVGShapes::Range ( SAFEARRAY * * IndexArray );
__declspec(implementation_key(2046)) IVGShapeRangePtr IVGShapes::All ( );
__declspec(implementation_key(2047)) IVGShapeRangePtr IVGShapes::AllExcluding ( SAFEARRAY * * IndexArray );
__declspec(implementation_key(2048)) IVGShapePtr IVGShapes::FindShape ( _bstr_t Name, enum cdrShapeType Type, long StaticID, VARIANT_BOOL Recursive, _bstr_t Query );
__declspec(implementation_key(2049)) IVGShapeRangePtr IVGShapes::FindShapes ( _bstr_t Name, enum cdrShapeType Type, VARIANT_BOOL Recursive, _bstr_t Query );
__declspec(implementation_key(2050)) IVGShapePtr IVGShapes::GetFirst ( );
__declspec(implementation_key(2051)) IVGShapePtr IVGShapes::GetLast ( );
__declspec(implementation_key(2052)) IVGApplicationPtr IVGShape::GetApplication ( );
__declspec(implementation_key(2053)) IDispatchPtr IVGShape::GetParent ( );
__declspec(implementation_key(2054)) long IVGShape::GetStaticID ( );
__declspec(implementation_key(2055)) HRESULT IVGShape::ConvertToCurves ( );
__declspec(implementation_key(2056)) _bstr_t IVGShape::GetName ( );
__declspec(implementation_key(2057)) void IVGShape::PutName ( _bstr_t pVal );
__declspec(implementation_key(2058)) IVGShapesPtr IVGShape::GetShapes ( );
__declspec(implementation_key(2059)) IVGRectanglePtr IVGShape::GetRectangle ( );
__declspec(implementation_key(2060)) double IVGShape::GetPositionX ( );
__declspec(implementation_key(2061)) void IVGShape::PutPositionX ( double pVal );
__declspec(implementation_key(2062)) double IVGShape::GetPositionY ( );
__declspec(implementation_key(2063)) void IVGShape::PutPositionY ( double pVal );
__declspec(implementation_key(2064)) double IVGShape::GetSizeWidth ( );
__declspec(implementation_key(2065)) void IVGShape::PutSizeWidth ( double pVal );
__declspec(implementation_key(2066)) double IVGShape::GetSizeHeight ( );
__declspec(implementation_key(2067)) void IVGShape::PutSizeHeight ( double pVal );
__declspec(implementation_key(2068)) IVGEllipsePtr IVGShape::GetEllipse ( );
__declspec(implementation_key(2069)) IVGPolygonPtr IVGShape::GetPolygon ( );
__declspec(implementation_key(2070)) IVGCurvePtr IVGShape::GetCurve ( );
__declspec(implementation_key(2071)) IVGBitmapPtr IVGShape::GetBitmap ( );
__declspec(implementation_key(2072)) enum cdrShapeType IVGShape::GetType ( );
__declspec(implementation_key(2073)) IVGOutlinePtr IVGShape::GetOutline ( );
__declspec(implementation_key(2074)) IVGFillPtr IVGShape::GetFill ( );
__declspec(implementation_key(2075)) IVGTextPtr IVGShape::GetText ( );
__declspec(implementation_key(2076)) HRESULT IVGShape::Delete ( );
__declspec(implementation_key(2077)) IVGShapePtr IVGShape::Duplicate ( double OffsetX, double OffsetY );
__declspec(implementation_key(2078)) HRESULT IVGShape::Skew ( double AngleX, double AngleY );
__declspec(implementation_key(2079)) HRESULT IVGShape::Move ( double DeltaX, double DeltaY );
__declspec(implementation_key(2080)) double IVGShape::GetRotationAngle ( );
__declspec(implementation_key(2081)) void IVGShape::PutRotationAngle ( double pVal );
__declspec(implementation_key(2082)) double IVGShape::GetRotationCenterX ( );
__declspec(implementation_key(2083)) void IVGShape::PutRotationCenterX ( double pVal );
__declspec(implementation_key(2084)) double IVGShape::GetRotationCenterY ( );
__declspec(implementation_key(2085)) void IVGShape::PutRotationCenterY ( double pVal );
__declspec(implementation_key(2086)) HRESULT IVGShape::Rotate ( double Angle );
__declspec(implementation_key(2087)) IVGShapePtr IVGShape::ConvertToBitmap ( long BitDepth, VARIANT_BOOL Grayscale, VARIANT_BOOL Dithered, VARIANT_BOOL TransparentBG, long Resolution, enum cdrAntiAliasingType AntiAliasing, VARIANT_BOOL UseColorProfile, VARIANT_BOOL MultiChannel, VARIANT_BOOL AlwaysOverprintBlack, long OverprintBlackLimit );
__declspec(implementation_key(2088)) IVGShapePtr IVGShape::Group ( );
__declspec(implementation_key(2089)) HRESULT IVGShape::Ungroup ( );
__declspec(implementation_key(2090)) HRESULT IVGShape::UngroupAll ( );
__declspec(implementation_key(2091)) HRESULT IVGShape::OrderToFront ( );
__declspec(implementation_key(2092)) HRESULT IVGShape::OrderToBack ( );
__declspec(implementation_key(2093)) HRESULT IVGShape::OrderForwardOne ( );
__declspec(implementation_key(2094)) HRESULT IVGShape::OrderBackOne ( );
__declspec(implementation_key(2095)) HRESULT IVGShape::OrderFrontOf ( struct IVGShape * Shape );
__declspec(implementation_key(2096)) HRESULT IVGShape::OrderBackOf ( struct IVGShape * Shape );
__declspec(implementation_key(2097)) VARIANT_BOOL IVGShape::OrderIsInFrontOf ( struct IVGShape * Shape );
__declspec(implementation_key(2098)) HRESULT IVGShape::AddToSelection ( );
__declspec(implementation_key(2099)) HRESULT IVGShape::RemoveFromSelection ( );
__declspec(implementation_key(2100)) HRESULT IVGShape::Separate ( );
__declspec(implementation_key(2101)) IVGLayerPtr IVGShape::GetLayer ( );
__declspec(implementation_key(2102)) void IVGShape::PutLayer ( struct IVGLayer * ppVal );
__declspec(implementation_key(2103)) IVGSnapPointsPtr IVGShape::GetSnapPoints ( );
__declspec(implementation_key(2104)) IVGConnectorPtr IVGShape::GetConnector ( );
__declspec(implementation_key(2105)) enum cdrPositionOfPointOverShape IVGShape::IsOnShape ( double x, double y, double HotArea );
__declspec(implementation_key(2106)) IVGArrowHeadPtr IVGShape::CreateArrowHead ( );
__declspec(implementation_key(2107)) HRESULT IVGShape::Copy ( );
__declspec(implementation_key(2108)) HRESULT IVGShape::Cut ( );
__declspec(implementation_key(2109)) IVGShapePtr IVGShape::Clone ( double OffsetX, double OffsetY );
__declspec(implementation_key(2110)) HRESULT IVGShape::Stretch ( double StretchX, double StretchY, VARIANT_BOOL StretchCharactersSize );
__declspec(implementation_key(2111)) HRESULT IVGShape::SetPosition ( double PositionX, double PositionY );
__declspec(implementation_key(2112)) HRESULT IVGShape::SetSize ( double Width, double Height );
__declspec(implementation_key(2113)) HRESULT IVGShape::GetPosition ( double * PositionX, double * PositionY );
__declspec(implementation_key(2114)) HRESULT IVGShape::GetSize ( double * Width, double * Height );
__declspec(implementation_key(2115)) IVGPropertiesPtr IVGShape::GetProperties ( );
__declspec(implementation_key(2116)) HRESULT IVGShape::OrderReverse ( );
__declspec(implementation_key(2117)) IVGShapePtr IVGShape::Combine ( );
__declspec(implementation_key(2118)) HRESULT IVGShape::BreakApart ( );
__declspec(implementation_key(2119)) void IVGShape::PutFill ( struct IVGFill * ppVal );
__declspec(implementation_key(2120)) IVGShapePtr IVGShape::Weld ( struct IVGShape * TargetShape, VARIANT_BOOL LeaveSource, VARIANT_BOOL LeaveTarget );
__declspec(implementation_key(2121)) IVGShapePtr IVGShape::Trim ( struct IVGShape * TargetShape, VARIANT_BOOL LeaveSource, VARIANT_BOOL LeaveTarget );
__declspec(implementation_key(2122)) IVGShapePtr IVGShape::Intersect ( struct IVGShape * TargetShape, VARIANT_BOOL LeaveSource, VARIANT_BOOL LeaveTarget );
__declspec(implementation_key(2123)) IVGEffectsPtr IVGShape::GetEffects ( );
__declspec(implementation_key(2124)) IVGEffectPtr IVGShape::GetEffect ( );
__declspec(implementation_key(2125)) IVGEffectPtr IVGShape::CreateDropShadow ( enum cdrDropShadowType Type, long Opacity, long Feather, double OffsetX, double OffsetY, struct IVGColor * Color, enum cdrFeatherType FeatherType, enum cdrEdgeType FeatherEdge, double PerspectiveAngle, double PerspectiveStretch, long Fade, enum cdrMergeMode MergeMode );
__declspec(implementation_key(2126)) IVGEffectPtr IVGShape::CreateBlend ( struct IVGShape * Shape, int Steps, enum cdrFountainFillBlendType ColorBlendType, enum cdrBlendMode Mode, double Spacing, double Angle, VARIANT_BOOL Loop, struct IVGShape * Path, VARIANT_BOOL RotateShapes, long SpacingAccel, long ColorAccel, VARIANT_BOOL AccelSize );
__declspec(implementation_key(2127)) IVGEffectPtr IVGShape::CreateExtrude ( enum cdrExtrudeType Type, enum cdrExtrudeVPType VPType, double VPX, double VPY, double Depth, enum cdrExtrudeShading Shading, struct IVGColor * BaseColor, struct IVGColor * ShadingColor, double BevelDepth, double BevelAngle, struct IVGColor * BevelColor, VARIANT_BOOL BevelOnly );
__declspec(implementation_key(2128)) IVGEffectPtr IVGShape::CreateEnvelope ( long PresetIndex, enum cdrEnvelopeMode Mode, VARIANT_BOOL KeepLines );
__declspec(implementation_key(2129)) HRESULT IVGShape::Flip ( enum cdrFlipAxes Axes );
__declspec(implementation_key(2130)) VARIANT_BOOL IVGShape::GetLocked ( );
__declspec(implementation_key(2131)) void IVGShape::PutLocked ( VARIANT_BOOL pVal );
__declspec(implementation_key(2132)) double IVGShape::GetOriginalWidth ( );
__declspec(implementation_key(2133)) double IVGShape::GetOriginalHeight ( );
__declspec(implementation_key(2134)) VARIANT_BOOL IVGShape::GetSelected ( );
__declspec(implementation_key(2135)) void IVGShape::PutSelected ( VARIANT_BOOL pVal );
__declspec(implementation_key(2136)) IVGEffectPtr IVGShape::CreateLens ( enum cdrLensType Type, double RateOrMagnification, struct IVGColor * Color1, struct IVGColor * Color2, enum cdrFountainFillBlendType ColorMapPalette );
__declspec(implementation_key(2137)) IVGEffectPtr IVGShape::CreatePerspective ( const _variant_t & HorizVanishPointX, const _variant_t & HorizVanishPointY, const _variant_t & VertVanishPointX, const _variant_t & VertVanishPointY );
__declspec(implementation_key(2138)) IVGEffectPtr IVGShape::CreateContour ( enum cdrContourDirection Direction, double Offset, long Steps, enum cdrFountainFillBlendType BlendType, struct IVGColor * OutlineColor, struct IVGColor * FillColor, struct IVGColor * FillColor2, long SpacingAccel, long ColorAccel, enum cdrContourEndCapType EndCapType, enum cdrContourCornerType CornerType, double MiterLimit );
__declspec(implementation_key(2139)) IVGEffectPtr IVGShape::CreatePushPullDistortion ( double OriginX, double OriginY, long Amplitude );
__declspec(implementation_key(2140)) IVGEffectPtr IVGShape::CreateZipperDistortion ( double OriginX, double OriginY, long Amplitude, long Frequency, VARIANT_BOOL Random, VARIANT_BOOL Smooth, VARIANT_BOOL Local );
__declspec(implementation_key(2141)) IVGEffectPtr IVGShape::CreateTwisterDistortion ( double OriginX, double OriginY, double Angle );
__declspec(implementation_key(2142)) IVGGuidePtr IVGShape::GetGuide ( );
__declspec(implementation_key(2143)) HRESULT IVGShape::AddToPowerClip ( struct IVGShape * Shape, enum cdrTriState CenterInContainer );
__declspec(implementation_key(2144)) HRESULT IVGShape::RemoveFromContainer ( long Level );
__declspec(implementation_key(2145)) IVGPowerClipPtr IVGShape::GetPowerClip ( );
__declspec(implementation_key(2146)) IVGShapePtr IVGShape::GetPowerClipParent ( );
__declspec(implementation_key(2147)) VARIANT_BOOL IVGShape::GetDrapeFill ( );
__declspec(implementation_key(2148)) void IVGShape::PutDrapeFill ( VARIANT_BOOL pVal );
__declspec(implementation_key(2149)) VARIANT_BOOL IVGShape::GetOverprintFill ( );
__declspec(implementation_key(2150)) void IVGShape::PutOverprintFill ( VARIANT_BOOL pVal );
__declspec(implementation_key(2151)) VARIANT_BOOL IVGShape::GetOverprintOutline ( );
__declspec(implementation_key(2152)) void IVGShape::PutOverprintOutline ( VARIANT_BOOL pVal );
__declspec(implementation_key(2153)) IVGURLPtr IVGShape::GetURL ( );
__declspec(implementation_key(2154)) IVGDataItemsPtr IVGShape::GetObjectData ( );
__declspec(implementation_key(2155)) IVGCloneLinkPtr IVGShape::GetCloneLink ( );
__declspec(implementation_key(2156)) IVGShapeRangePtr IVGShape::GetClones ( );
__declspec(implementation_key(2157)) double IVGShape::GetAbsoluteHScale ( );
__declspec(implementation_key(2158)) double IVGShape::GetAbsoluteVScale ( );
__declspec(implementation_key(2159)) double IVGShape::GetAbsoluteSkew ( );
__declspec(implementation_key(2160)) IVGTransparencyPtr IVGShape::GetTransparency ( );
__declspec(implementation_key(2161)) HRESULT IVGShape::GetMatrix ( double * d11, double * d12, double * d21, double * d22, double * tx, double * ty );
__declspec(implementation_key(2162)) HRESULT IVGShape::SetMatrix ( double d11, double d12, double d21, double d22, double tx, double ty );
__declspec(implementation_key(2163)) IVGShapePtr IVGShape::ConvertToBitmapEx ( enum cdrImageType Mode, VARIANT_BOOL Dithered, VARIANT_BOOL Transparent, long Resolution, enum cdrAntiAliasingType AntiAliasing, VARIANT_BOOL UseColorProfile, VARIANT_BOOL AlwaysOverprintBlack, long OverprintBlackLimit );
__declspec(implementation_key(2164)) HRESULT IVGShape::SkewEx ( double AngleX, double AngleY, double CenterX, double CenterY );
__declspec(implementation_key(2165)) HRESULT IVGShape::RotateEx ( double Angle, double CenterX, double CenterY );
__declspec(implementation_key(2166)) IVGShapePtr IVGShape::GetParentGroup ( );
__declspec(implementation_key(2167)) HRESULT IVGShape::SetBoundingBox ( double x, double y, double Width, double Height, VARIANT_BOOL KeepAspect, enum cdrReferencePoint ReferencePoint );
__declspec(implementation_key(2168)) HRESULT IVGShape::CreateSelection ( );
__declspec(implementation_key(2169)) HRESULT IVGShape::SetRotationCenter ( double x, double y );
__declspec(implementation_key(2170)) HRESULT IVGShape::ClearEffect ( enum cdrEffectType Type );
__declspec(implementation_key(2171)) IVGShapePtr IVGShape::GetNext ( enum cdrShapeLevel Level, VARIANT_BOOL EnterGroups, VARIANT_BOOL Loop );
__declspec(implementation_key(2172)) IVGShapePtr IVGShape::GetPrevious ( enum cdrShapeLevel Level, VARIANT_BOOL EnterGroups, VARIANT_BOOL Loop );
__declspec(implementation_key(2173)) HRESULT IVGShape::StretchEx ( double CenterX, double CenterY, double StretchX, double StretchY, VARIANT_BOOL StretchCharactersSize );
__declspec(implementation_key(2174)) HRESULT IVGShape::SetSizeEx ( double CenterX, double CenterY, double Width, double Height );
__declspec(implementation_key(2175)) HRESULT IVGShape::GetBoundingBox ( double * x, double * y, double * Width, double * Height, VARIANT_BOOL UseOutline );
__declspec(implementation_key(2176)) IVGShapeRangePtr IVGShape::UngroupEx ( );
__declspec(implementation_key(2177)) IVGShapeRangePtr IVGShape::UngroupAllEx ( );
__declspec(implementation_key(2178)) IVGShapeRangePtr IVGShape::BreakApartEx ( );
__declspec(implementation_key(2179)) HRESULT IVGShape::ApplyStyle ( _bstr_t StyleName );
__declspec(implementation_key(2180)) enum cdrWrapStyle IVGShape::GetWrapText ( );
__declspec(implementation_key(2181)) void IVGShape::PutWrapText ( enum cdrWrapStyle pVal );
__declspec(implementation_key(2182)) double IVGShape::GetTextWrapOffset ( );
__declspec(implementation_key(2183)) void IVGShape::PutTextWrapOffset ( double pVal );
__declspec(implementation_key(2184)) IVGShapePtr IVGShape::PlaceTextInside ( struct IVGShape * TextShape );
__declspec(implementation_key(2185)) IVGCurvePtr IVGShape::GetDisplayCurve ( );
__declspec(implementation_key(2186)) _variant_t IVGShape::CustomCommand ( _bstr_t ComponentID, _bstr_t CommandID, SAFEARRAY * * Parameters );
__declspec(implementation_key(2187)) IVGCustomShapePtr IVGShape::GetCustom ( );
__declspec(implementation_key(2188)) IVGEffectPtr IVGShape::CreateCustomEffect ( _bstr_t EffectID, SAFEARRAY * * Parameters );
__declspec(implementation_key(2189)) IVGEffectPtr IVGShape::CreateCustomDistortion ( _bstr_t DistortionID, SAFEARRAY * * Parameters );
__declspec(implementation_key(2190)) HRESULT IVGShape::AlignToShape ( enum cdrAlignType Type, struct IVGShape * Shape, enum cdrTextAlignOrigin TextAlignOrigin );
__declspec(implementation_key(2191)) HRESULT IVGShape::AlignToShapeRange ( enum cdrAlignType Type, struct IVGShapeRange * ShapeRange, enum cdrTextAlignOrigin TextAlignOrigin );
__declspec(implementation_key(2192)) HRESULT IVGShape::AlignToPage ( enum cdrAlignType Type, enum cdrTextAlignOrigin TextAlignOrigin );
__declspec(implementation_key(2193)) HRESULT IVGShape::AlignToPageCenter ( enum cdrAlignType Type, enum cdrTextAlignOrigin TextAlignOrigin );
__declspec(implementation_key(2194)) HRESULT IVGShape::AlignToGrid ( enum cdrAlignType Type, enum cdrTextAlignOrigin TextAlignOrigin );
__declspec(implementation_key(2195)) HRESULT IVGShape::AlignToPoint ( enum cdrAlignType Type, double x, double y, enum cdrTextAlignOrigin TextAlignOrigin );
__declspec(implementation_key(2196)) IVGDimensionPtr IVGShape::GetDimension ( );
__declspec(implementation_key(2197)) IVGSymbolPtr IVGShape::GetSymbol ( );
__declspec(implementation_key(2198)) IVGShapePtr IVGShape::ConvertToSymbol ( _bstr_t Name );
__declspec(implementation_key(2199)) IVGOLEPtr IVGShape::GetOLE ( );
__declspec(implementation_key(2200)) IVGShapeRangePtr IVGShape::DuplicateAsRange ( double OffsetX, double OffsetY );
__declspec(implementation_key(2201)) IVGShapeRangePtr IVGShape::CloneAsRange ( double OffsetX, double OffsetY );
__declspec(implementation_key(2202)) HRESULT IVGShape::MoveToLayer ( struct IVGLayer * Layer );
__declspec(implementation_key(2203)) IVGShapePtr IVGShape::CopyToLayer ( struct IVGLayer * Layer );
__declspec(implementation_key(2204)) IVGShapeRangePtr IVGShape::CopyToLayerAsRange ( struct IVGLayer * Layer );
__declspec(implementation_key(2205)) HRESULT IVGShape::ClearTransformations ( );
__declspec(implementation_key(2206)) HRESULT IVGShape::Distribute ( enum cdrDistributeType Type, VARIANT_BOOL PageExtent );
__declspec(implementation_key(2207)) VARIANT_BOOL IVGShape::CompareTo ( struct IVGShape * Shape, enum cdrCompareType CompareType, enum cdrCompareCondition Condition );
__declspec(implementation_key(2208)) VARIANT_BOOL IVGShape::GetSelectable ( );
__declspec(implementation_key(2209)) HRESULT IVGShape::ApplyEffectInvert ( );
__declspec(implementation_key(2210)) HRESULT IVGShape::ApplyEffectPosterize ( long Level );
__declspec(implementation_key(2211)) HRESULT IVGShape::ApplyEffectBCI ( long Brighness, long Contrast, long Intensity );
__declspec(implementation_key(2212)) HRESULT IVGShape::ApplyEffectColorBalance ( long CyanRed, long MagentaGreen, long YellowBlue, VARIANT_BOOL ApplyToShadows, VARIANT_BOOL ApplyToMidtones, VARIANT_BOOL ApplyToHighlights, VARIANT_BOOL PreserveLuminance );
__declspec(implementation_key(2213)) HRESULT IVGShape::ApplyEffectGamma ( double Gamma );
__declspec(implementation_key(2214)) HRESULT IVGShape::ApplyEffectHSL ( const _variant_t & Hue, const _variant_t & Saturation, const _variant_t & Lightness );
__declspec(implementation_key(2215)) HRESULT IVGShape::TransformMatrix ( double d11, double d12, double d21, double d22, double tx, double ty );
__declspec(implementation_key(2216)) HRESULT IVGShape::AffineTransform ( double d11, double d12, double d21, double d22, double CenterX, double CenterY );
__declspec(implementation_key(2217)) IVGTreeNodePtr IVGShape::GetTreeNode ( );
__declspec(implementation_key(2218)) HRESULT IVGShape::ReplaceWith ( struct IVGShape * VirtualShape );
__declspec(implementation_key(2219)) VARIANT_BOOL IVGShape::GetVirtual ( );
__declspec(implementation_key(2220)) VARIANT_BOOL IVGShape::GetCanHaveFill ( );
__declspec(implementation_key(2221)) VARIANT_BOOL IVGShape::GetCanHaveOutline ( );
__declspec(implementation_key(2222)) VARIANT_BOOL IVGShape::GetIsSimpleShape ( );
__declspec(implementation_key(2223)) HRESULT IVGShape::Fillet ( double Radius, VARIANT_BOOL CombineSmoothSegments );
__declspec(implementation_key(2224)) HRESULT IVGShape::Chamfer ( double DistanceA, double DistanceB, VARIANT_BOOL CombineSmoothSegments );
__declspec(implementation_key(2225)) HRESULT IVGShape::Scallop ( double Radius, VARIANT_BOOL CombineSmoothSegments );
__declspec(implementation_key(2226)) enum cdrFillMode IVGShape::GetFillMode ( );
__declspec(implementation_key(2227)) void IVGShape::PutFillMode ( enum cdrFillMode pVal );
__declspec(implementation_key(2228)) double IVGShape::GetLeftX ( );
__declspec(implementation_key(2229)) double IVGShape::GetRightX ( );
__declspec(implementation_key(2230)) double IVGShape::GetTopY ( );
__declspec(implementation_key(2231)) double IVGShape::GetBottomY ( );
__declspec(implementation_key(2232)) IVGShapeRangePtr IVGShape::StepAndRepeat ( long NumCopies, double DistanceX, double DistanceY, enum cdrDistanceMode ModeX, enum cdrDirection DirectionX, enum cdrDistanceMode ModeY, enum cdrDirection DirectionY );
__declspec(implementation_key(2233)) VARIANT_BOOL IVGShape::GetOverprintBitmap ( );
__declspec(implementation_key(2234)) void IVGShape::PutOverprintBitmap ( VARIANT_BOOL pVal );
__declspec(implementation_key(2235)) VARIANT_BOOL IVGShape::IsTypeAnyOf ( SAFEARRAY * * TypeList );
__declspec(implementation_key(2236)) IVGShapeRangePtr IVGShape::GetLinkedShapes ( enum cdrShapeLinkType LinkType );
__declspec(implementation_key(2237)) IVGEffectPtr IVGShape::CreateEnvelopeFromShape ( struct IVGShape * Source, enum cdrEnvelopeMode Mode, VARIANT_BOOL KeepLines, enum cdrEnvelopeCopyMode CopyMode, const _variant_t & CornerIndices );
__declspec(implementation_key(2238)) IVGEffectPtr IVGShape::CreateEnvelopeFromCurve ( struct IVGCurve * Source, enum cdrEnvelopeMode Mode, VARIANT_BOOL KeepLines, enum cdrEnvelopeCopyMode CopyMode, const _variant_t & CornerIndices );
__declspec(implementation_key(2239)) IVGEPSPtr IVGShape::GetEPS ( );
__declspec(implementation_key(2240)) _variant_t IVGShape::Evaluate ( _bstr_t Expression );
__declspec(implementation_key(2241)) IVGRectPtr IVGShape::GetBoundingBox ( );
__declspec(implementation_key(2242)) HRESULT IVGShape::GetPositionEx ( enum cdrReferencePoint ReferencePoint, double * x, double * y );
__declspec(implementation_key(2243)) HRESULT IVGShape::SetPositionEx ( enum cdrReferencePoint ReferencePoint, double x, double y );
__declspec(implementation_key(2244)) double IVGShape::GetCenterX ( );
__declspec(implementation_key(2245)) void IVGShape::PutCenterX ( double pVal );
__declspec(implementation_key(2246)) double IVGShape::GetCenterY ( );
__declspec(implementation_key(2247)) void IVGShape::PutCenterY ( double pVal );
__declspec(implementation_key(2248)) void IVGShape::PutLeftX ( double pVal );
__declspec(implementation_key(2249)) void IVGShape::PutRightX ( double pVal );
__declspec(implementation_key(2250)) void IVGShape::PutTopY ( double pVal );
__declspec(implementation_key(2251)) void IVGShape::PutBottomY ( double pVal );
__declspec(implementation_key(2252)) long IVGShape::GetZOrder ( );
__declspec(implementation_key(2253)) VARIANT_BOOL IVGShape::CompareToEx ( struct IVGShape * Shape2, _bstr_t Condition, const _variant_t & Data );
__declspec(implementation_key(2254)) VARIANT_BOOL IVGShape::CopyPropertiesFrom ( struct IVGShape * Source, enum cdrCopyProperties Properties );
__declspec(implementation_key(2255)) enum cdrOverprintState IVGShape::GetOverprintFillState ( );
__declspec(implementation_key(2256)) enum cdrOverprintState IVGShape::GetOverprintOutlineState ( );
__declspec(implementation_key(2257)) IVGPagePtr IVGShape::GetPage ( );
__declspec(implementation_key(2258)) IVGSnapPointsPtr IVGShape::SnapPointsOfType ( enum cdrPointType TypeSet );
__declspec(implementation_key(2259)) IVGSnapPointPtr IVGShape::FindSnapPoint ( _bstr_t ReferenceData );
__declspec(implementation_key(2260)) IVGSpreadPtr IVGShape::GetSpread ( );
__declspec(implementation_key(2261)) VARIANT_BOOL IVGShape::GetPixelAlignedRendering ( );
__declspec(implementation_key(2262)) void IVGShape::PutPixelAlignedRendering ( VARIANT_BOOL pVal );
__declspec(implementation_key(2263)) IVGBSplinePtr IVGShape::GetBSpline ( );
__declspec(implementation_key(2264)) IVGDocumentPtr IVGShape::CreateDocumentFrom ( VARIANT_BOOL TemporaryDocument );
__declspec(implementation_key(2265)) HRESULT IVGShape::AlignAndDistribute ( enum cdrAlignDistributeH MethodH, enum cdrAlignDistributeV MethodV, enum cdrAlignShapesTo AlignTo, enum cdrDistributeArea DistributeArea, VARIANT_BOOL UseOutline, enum cdrTextAlignOrigin TextAlignOrigin, double PointX, double PointY, struct IVGRect * DistributeRect );
__declspec(implementation_key(2266)) IVGStylePtr IVGShape::GetStyle ( );
__declspec(implementation_key(2267)) IVGShapePtr IVGShape::CreateBoundary ( double x, double y, VARIANT_BOOL PlaceOnTop, VARIANT_BOOL DeleteSource );
__declspec(implementation_key(2268)) IVGShapeRangePtr IVGShape::EqualDivide ( long Divisions, double Gap, VARIANT_BOOL Group, VARIANT_BOOL Combine, VARIANT_BOOL DeleteSource );
__declspec(implementation_key(2269)) IVGShapePtr IVGShape::Project ( enum cdrProjectPlane Plane, enum cdrReferencePoint ReferencePoint, VARIANT_BOOL ApplyToDuplicate );
__declspec(implementation_key(2270)) IVGShapePtr IVGShape::Unproject ( enum cdrProjectPlane Plane, enum cdrReferencePoint ReferencePoint, VARIANT_BOOL ApplyToDuplicate );
__declspec(implementation_key(2271)) IVGTransformMatrixPtr IVGShape::GetTransformationMatrix ( );
__declspec(implementation_key(2272)) void IVGShape::PutTransformationMatrix ( struct IVGTransformMatrix * TransformMatrix );
__declspec(implementation_key(2273)) HRESULT IVGShape::ApplyTransformMatrix ( struct IVGTransformMatrix * TransformMatrix );
__declspec(implementation_key(2274)) VARIANT_BOOL IVGShape::GetVisible ( );
__declspec(implementation_key(2275)) void IVGShape::PutVisible ( VARIANT_BOOL pVal );
__declspec(implementation_key(2276)) HRESULT IVGShape::ModifyToolShapeProperties ( struct IVGProperties * ShapePropertiesToModify );
__declspec(implementation_key(2277)) _bstr_t IVGShape::GetToolShapeGuid ( );
__declspec(implementation_key(2278)) IVGShapeRangePtr IVGShape::CreateParallelCurves ( long Count, double distanceBetweenCurves );
__declspec(implementation_key(2279)) IVGShapePtr IVGShape::FindShapeAtPoint ( double x, double y, VARIANT_BOOL TreatAsFilled );
__declspec(implementation_key(2280)) SAFEARRAY * IVGShape::GetColorTypes ( );
__declspec(implementation_key(2281)) SAFEARRAY * IVGShape::GetColors ( long MaxBitmapColors );
__declspec(implementation_key(2282)) HRESULT IVGShape::FlattenEffects ( );
__declspec(implementation_key(2283)) IVGEffectPtr IVGShape::CreateInnerShadow ( long Opacity, long Feather, double OffsetX, double OffsetY, struct IVGColor * Color, enum cdrFeatherType FeatherType, enum cdrEdgeType FeatherEdge, enum cdrMergeMode MergeMode, double Depth );
__declspec(implementation_key(2284)) _bstr_t IVGCustomEffect::GetEffectID ( );
__declspec(implementation_key(2285)) IVGShapePtr IVGCustomEffect::GetEffectGroup ( );
__declspec(implementation_key(2286)) IVGApplicationPtr IVGCloneLink::GetApplication ( );
__declspec(implementation_key(2287)) IVGShapePtr IVGCloneLink::GetParent ( );
__declspec(implementation_key(2288)) IVGShapePtr IVGCloneLink::GetCloneParent ( );
__declspec(implementation_key(2289)) VARIANT_BOOL IVGCloneLink::GetFillLinked ( );
__declspec(implementation_key(2290)) void IVGCloneLink::PutFillLinked ( VARIANT_BOOL pVal );
__declspec(implementation_key(2291)) VARIANT_BOOL IVGCloneLink::GetOutlineLinked ( );
__declspec(implementation_key(2292)) void IVGCloneLink::PutOutlineLinked ( VARIANT_BOOL pVal );
__declspec(implementation_key(2293)) VARIANT_BOOL IVGCloneLink::GetShapeLinked ( );
__declspec(implementation_key(2294)) void IVGCloneLink::PutShapeLinked ( VARIANT_BOOL pVal );
__declspec(implementation_key(2295)) VARIANT_BOOL IVGCloneLink::GetTransformLinked ( );
__declspec(implementation_key(2296)) void IVGCloneLink::PutTransformLinked ( VARIANT_BOOL pVal );
__declspec(implementation_key(2297)) VARIANT_BOOL IVGCloneLink::GetBitmapColorMaskLinked ( );
__declspec(implementation_key(2298)) void IVGCloneLink::PutBitmapColorMaskLinked ( VARIANT_BOOL pVal );
__declspec(implementation_key(2299)) HRESULT IVGCloneLink::RestoreAllLinks ( );
__declspec(implementation_key(2300)) IVGShapePtr IVGCommentTarget::GetShape ( );
__declspec(implementation_key(2301)) void IVGCommentTarget::PutRefShape ( struct IVGShape * * pRet );
__declspec(implementation_key(2302)) _bstr_t IVGCommentTarget::GetGuid ( );
__declspec(implementation_key(2303)) void IVGCommentTarget::PutGuid ( _bstr_t pRet );
__declspec(implementation_key(2304)) IVGApplicationPtr IVGSelectionInformation::GetApplication ( );
__declspec(implementation_key(2305)) IVGDocumentPtr IVGSelectionInformation::GetParent ( );
__declspec(implementation_key(2306)) long IVGSelectionInformation::GetCount ( );
__declspec(implementation_key(2307)) IVGShapePtr IVGSelectionInformation::GetFirstShape ( );
__declspec(implementation_key(2308)) IVGShapePtr IVGSelectionInformation::GetSecondShape ( );
__declspec(implementation_key(2309)) IVGShapePtr IVGSelectionInformation::GetBlendTopShape ( );
__declspec(implementation_key(2310)) IVGShapePtr IVGSelectionInformation::GetBlendBottomShape ( );
__declspec(implementation_key(2311)) IVGShapePtr IVGSelectionInformation::GetBlendPath ( );
__declspec(implementation_key(2312)) VARIANT_BOOL IVGSelectionInformation::GetCanCreateBlend ( );
__declspec(implementation_key(2313)) IVGShapePtr IVGSelectionInformation::GetDistortionShape ( );
__declspec(implementation_key(2314)) enum cdrDistortionType IVGSelectionInformation::GetDistortionType ( );
__declspec(implementation_key(2315)) IVGShapePtr IVGSelectionInformation::GetExtrudeFaceShape ( );
__declspec(implementation_key(2316)) IVGShapePtr IVGSelectionInformation::GetExtrudeGroup ( );
__declspec(implementation_key(2317)) IVGShapePtr IVGSelectionInformation::GetExtrudeBevelGroup ( );
__declspec(implementation_key(2318)) IVGShapePtr IVGSelectionInformation::GetContourControlShape ( );
__declspec(implementation_key(2319)) IVGShapePtr IVGSelectionInformation::GetContourGroup ( );
__declspec(implementation_key(2320)) IVGShapePtr IVGSelectionInformation::GetDropShadowControlShape ( );
__declspec(implementation_key(2321)) IVGShapePtr IVGSelectionInformation::GetDropShadowGroup ( );
__declspec(implementation_key(2322)) IVGShapePtr IVGSelectionInformation::GetDimensionControlShape ( );
__declspec(implementation_key(2323)) IVGShapePtr IVGSelectionInformation::GetDimensionGroup ( );
__declspec(implementation_key(2324)) IVGShapePtr IVGSelectionInformation::GetConnectorLines ( );
__declspec(implementation_key(2325)) IVGShapePtr IVGSelectionInformation::GetFittedTextControlShape ( );
__declspec(implementation_key(2326)) IVGShapePtr IVGSelectionInformation::GetFittedText ( );
__declspec(implementation_key(2327)) IVGShapePtr IVGSelectionInformation::GetFirstShapeWithOutline ( );
__declspec(implementation_key(2328)) IVGShapePtr IVGSelectionInformation::GetFirstShapeWithFill ( );
__declspec(implementation_key(2329)) IVGShapePtr IVGSelectionInformation::GetNaturalMediaControlShape ( );
__declspec(implementation_key(2330)) IVGShapePtr IVGSelectionInformation::GetNaturalMediaGroup ( );
__declspec(implementation_key(2331)) VARIANT_BOOL IVGSelectionInformation::GetCanPrint ( );
__declspec(implementation_key(2332)) VARIANT_BOOL IVGSelectionInformation::GetIsEditingText ( );
__declspec(implementation_key(2333)) VARIANT_BOOL IVGSelectionInformation::GetIsTextSelection ( );
__declspec(implementation_key(2334)) VARIANT_BOOL IVGSelectionInformation::GetIsOnPowerClipContents ( );
__declspec(implementation_key(2335)) VARIANT_BOOL IVGSelectionInformation::GetIsEditingRollOver ( );
__declspec(implementation_key(2336)) VARIANT_BOOL IVGSelectionInformation::GetCanApplyFillOutline ( );
__declspec(implementation_key(2337)) VARIANT_BOOL IVGSelectionInformation::GetIsControlSelected ( );
__declspec(implementation_key(2338)) VARIANT_BOOL IVGSelectionInformation::GetCanDeleteControl ( );
__declspec(implementation_key(2339)) VARIANT_BOOL IVGSelectionInformation::GetIsGroup ( );
__declspec(implementation_key(2340)) VARIANT_BOOL IVGSelectionInformation::GetIsRegularShape ( );
__declspec(implementation_key(2341)) VARIANT_BOOL IVGSelectionInformation::GetIsControlShape ( );
__declspec(implementation_key(2342)) VARIANT_BOOL IVGSelectionInformation::GetIsBlendControl ( );
__declspec(implementation_key(2343)) VARIANT_BOOL IVGSelectionInformation::GetIsBlendGroup ( );
__declspec(implementation_key(2344)) VARIANT_BOOL IVGSelectionInformation::GetIsCloneControl ( );
__declspec(implementation_key(2345)) VARIANT_BOOL IVGSelectionInformation::GetIsContourControl ( );
__declspec(implementation_key(2346)) VARIANT_BOOL IVGSelectionInformation::GetIsContourGroup ( );
__declspec(implementation_key(2347)) VARIANT_BOOL IVGSelectionInformation::GetIsDropShadowControl ( );
__declspec(implementation_key(2348)) VARIANT_BOOL IVGSelectionInformation::GetIsDropShadowGroup ( );
__declspec(implementation_key(2349)) VARIANT_BOOL IVGSelectionInformation::GetIsDimensionControl ( );
__declspec(implementation_key(2350)) VARIANT_BOOL IVGSelectionInformation::GetIsExtrudeControl ( );
__declspec(implementation_key(2351)) VARIANT_BOOL IVGSelectionInformation::GetIsExtrudeGroup ( );
__declspec(implementation_key(2352)) VARIANT_BOOL IVGSelectionInformation::GetIsBevelGroup ( );
__declspec(implementation_key(2353)) VARIANT_BOOL IVGSelectionInformation::GetHasAutoLabelText ( );
__declspec(implementation_key(2354)) VARIANT_BOOL IVGSelectionInformation::GetIsEnvelope ( );
__declspec(implementation_key(2355)) VARIANT_BOOL IVGSelectionInformation::GetIsPerspective ( );
__declspec(implementation_key(2356)) VARIANT_BOOL IVGSelectionInformation::GetIsDistortion ( );
__declspec(implementation_key(2357)) VARIANT_BOOL IVGSelectionInformation::GetIsConnectorLine ( );
__declspec(implementation_key(2358)) VARIANT_BOOL IVGSelectionInformation::GetIsConnector ( );
__declspec(implementation_key(2359)) VARIANT_BOOL IVGSelectionInformation::GetIsFittedText ( );
__declspec(implementation_key(2360)) VARIANT_BOOL IVGSelectionInformation::GetIsFittedTextControl ( );
__declspec(implementation_key(2361)) VARIANT_BOOL IVGSelectionInformation::GetIsNaturalMediaControl ( );
__declspec(implementation_key(2362)) VARIANT_BOOL IVGSelectionInformation::GetIsNaturalMediaGroup ( );
__declspec(implementation_key(2363)) VARIANT_BOOL IVGSelectionInformation::GetIsSecondExtrudeControl ( );
__declspec(implementation_key(2364)) VARIANT_BOOL IVGSelectionInformation::GetIsSecondContourControl ( );
__declspec(implementation_key(2365)) VARIANT_BOOL IVGSelectionInformation::GetIsSecondDropShadowControl ( );
__declspec(implementation_key(2366)) VARIANT_BOOL IVGSelectionInformation::GetIsSecondNaturalMediaControl ( );
__declspec(implementation_key(2367)) VARIANT_BOOL IVGSelectionInformation::GetIsArtisticTextSelected ( );
__declspec(implementation_key(2368)) VARIANT_BOOL IVGSelectionInformation::GetIsParagraphTextSelected ( );
__declspec(implementation_key(2369)) VARIANT_BOOL IVGSelectionInformation::GetIsTextSelected ( );
__declspec(implementation_key(2370)) VARIANT_BOOL IVGSelectionInformation::GetIsOLESelected ( );
__declspec(implementation_key(2371)) VARIANT_BOOL IVGSelectionInformation::GetIsBitmapSelected ( );
__declspec(implementation_key(2372)) VARIANT_BOOL IVGSelectionInformation::GetIsBitmapPresent ( );
__declspec(implementation_key(2373)) VARIANT_BOOL IVGSelectionInformation::GetIsLensPresent ( );
__declspec(implementation_key(2374)) VARIANT_BOOL IVGSelectionInformation::GetIsMaskedBitmapPresent ( );
__declspec(implementation_key(2375)) VARIANT_BOOL IVGSelectionInformation::GetIsGroupSelected ( );
__declspec(implementation_key(2376)) VARIANT_BOOL IVGSelectionInformation::GetCanUngroup ( );
__declspec(implementation_key(2377)) VARIANT_BOOL IVGSelectionInformation::GetIsLinkGroupSelected ( );
__declspec(implementation_key(2378)) VARIANT_BOOL IVGSelectionInformation::GetIsLinkControlSelected ( );
__declspec(implementation_key(2379)) VARIANT_BOOL IVGSelectionInformation::GetIsAttachedToDimension ( );
__declspec(implementation_key(2380)) VARIANT_BOOL IVGSelectionInformation::GetIsFittedTextSelected ( );
__declspec(implementation_key(2381)) VARIANT_BOOL IVGSelectionInformation::GetIsConnectorLineSelected ( );
__declspec(implementation_key(2382)) VARIANT_BOOL IVGSelectionInformation::GetIsConnectorSelected ( );
__declspec(implementation_key(2383)) VARIANT_BOOL IVGSelectionInformation::GetIsPerspectivePresent ( );
__declspec(implementation_key(2384)) VARIANT_BOOL IVGSelectionInformation::GetIsEnvelopePresent ( );
__declspec(implementation_key(2385)) VARIANT_BOOL IVGSelectionInformation::GetIsDistortionPresent ( );
__declspec(implementation_key(2386)) VARIANT_BOOL IVGSelectionInformation::GetIsGuidelineSelected ( );
__declspec(implementation_key(2387)) VARIANT_BOOL IVGSelectionInformation::GetIsInternetObjectSelected ( );
__declspec(implementation_key(2388)) VARIANT_BOOL IVGSelectionInformation::GetIsSoundObjectSelected ( );
__declspec(implementation_key(2389)) VARIANT_BOOL IVGSelectionInformation::GetIsExternalBitmapSelected ( );
__declspec(implementation_key(2390)) VARIANT_BOOL IVGSelectionInformation::GetIsNonExternalBitmapSelected ( );
__declspec(implementation_key(2391)) VARIANT_BOOL IVGSelectionInformation::GetIsMeshFillSelected ( );
__declspec(implementation_key(2392)) VARIANT_BOOL IVGSelectionInformation::GetIsMeshFillPresent ( );
__declspec(implementation_key(2393)) VARIANT_BOOL IVGSelectionInformation::GetIsRollOverSelected ( );
__declspec(implementation_key(2394)) VARIANT_BOOL IVGSelectionInformation::GetContainsRollOverParent ( );
__declspec(implementation_key(2395)) VARIANT_BOOL IVGSelectionInformation::GetCanClone ( );
__declspec(implementation_key(2396)) VARIANT_BOOL IVGSelectionInformation::GetCanApplyBlend ( );
__declspec(implementation_key(2397)) VARIANT_BOOL IVGSelectionInformation::GetCanApplyContour ( );
__declspec(implementation_key(2398)) VARIANT_BOOL IVGSelectionInformation::GetCanApplyFill ( );
__declspec(implementation_key(2399)) VARIANT_BOOL IVGSelectionInformation::GetCanApplyOutline ( );
__declspec(implementation_key(2400)) VARIANT_BOOL IVGSelectionInformation::GetCanApplyTransparency ( );
__declspec(implementation_key(2401)) VARIANT_BOOL IVGSelectionInformation::GetCanAssignURL ( );
__declspec(implementation_key(2402)) VARIANT_BOOL IVGSelectionInformation::GetCanApplyDistortion ( );
__declspec(implementation_key(2403)) VARIANT_BOOL IVGSelectionInformation::GetCanApplyEnvelope ( );
__declspec(implementation_key(2404)) VARIANT_BOOL IVGSelectionInformation::GetCanCopyBlend ( );
__declspec(implementation_key(2405)) VARIANT_BOOL IVGSelectionInformation::GetCanCloneBlend ( );
__declspec(implementation_key(2406)) VARIANT_BOOL IVGSelectionInformation::GetCanCopyExtrude ( );
__declspec(implementation_key(2407)) VARIANT_BOOL IVGSelectionInformation::GetCanCloneExtrude ( );
__declspec(implementation_key(2408)) VARIANT_BOOL IVGSelectionInformation::GetCanCopyContour ( );
__declspec(implementation_key(2409)) VARIANT_BOOL IVGSelectionInformation::GetCanCloneContour ( );
__declspec(implementation_key(2410)) VARIANT_BOOL IVGSelectionInformation::GetCanCopyDropShadow ( );
__declspec(implementation_key(2411)) VARIANT_BOOL IVGSelectionInformation::GetCanCloneDropShadow ( );
__declspec(implementation_key(2412)) VARIANT_BOOL IVGSelectionInformation::GetCanCopyLens ( );
__declspec(implementation_key(2413)) VARIANT_BOOL IVGSelectionInformation::GetCanCopyPerspective ( );
__declspec(implementation_key(2414)) VARIANT_BOOL IVGSelectionInformation::GetCanCopyEnvelope ( );
__declspec(implementation_key(2415)) VARIANT_BOOL IVGSelectionInformation::GetCanCopyPowerclip ( );
__declspec(implementation_key(2416)) VARIANT_BOOL IVGSelectionInformation::GetCanCopyDistortion ( );
__declspec(implementation_key(2417)) VARIANT_BOOL IVGSelectionInformation::GetCanLockShapes ( );
__declspec(implementation_key(2418)) VARIANT_BOOL IVGSelectionInformation::GetCanUnlockShapes ( );
__declspec(implementation_key(2419)) double IVGCurve::GetLength ( );
__declspec(implementation_key(2420)) IVGSubPathsPtr IVGCurve::GetSubPaths ( );
__declspec(implementation_key(2421)) IVGNodesPtr IVGCurve::GetNodes ( );
__declspec(implementation_key(2422)) IVGSegmentsPtr IVGCurve::GetSegments ( );
__declspec(implementation_key(2423)) VARIANT_BOOL IVGCurve::GetClosed ( );
__declspec(implementation_key(2424)) void IVGCurve::PutClosed ( VARIANT_BOOL pVal );
__declspec(implementation_key(2425)) IVGNodeRangePtr IVGCurve::Selection ( );
__declspec(implementation_key(2426)) IVGSubPathPtr IVGCurve::CreateSubPath ( double x, double y );
__declspec(implementation_key(2427)) HRESULT IVGCurve::ReverseDirection ( );
__declspec(implementation_key(2428)) enum cdrPositionOfPointOverShape IVGCurve::IsOnCurve ( double x, double y, double HotArea );
__declspec(implementation_key(2429)) HRESULT IVGCurve::BindToDocument ( struct IVGDocument * Document );
__declspec(implementation_key(2430)) IVGCurvePtr IVGCurve::GetCopy ( );
__declspec(implementation_key(2431)) HRESULT IVGCurve::CopyAssign ( struct IVGCurve * Source );
__declspec(implementation_key(2432)) IVGSubPathPtr IVGCurve::CreateSubPathFromArray ( SAFEARRAY * * Source, VARIANT_BOOL Closed, long NumElements );
__declspec(implementation_key(2433)) HRESULT IVGCurve::AppendCurve ( struct IVGCurve * Source );
__declspec(implementation_key(2434)) SAFEARRAY * IVGCurve::GetCurveInfo ( );
__declspec(implementation_key(2435)) long IVGCurve::PutCurveInfo ( SAFEARRAY * * Source, long NumElements );
__declspec(implementation_key(2436)) HRESULT IVGCurve::ClearSelection ( );
__declspec(implementation_key(2437)) IVGCurvePtr IVGCurve::GetPolyline ( long CurvePrecision );
__declspec(implementation_key(2438)) IVGCurvePtr IVGCurve::RemoveOverlaps ( );
__declspec(implementation_key(2439)) IVGCurvePtr IVGCurve::Contour ( double Offset, enum cdrContourDirection Direction, enum cdrContourEndCapType EndCapType, enum cdrContourCornerType CornerType, double MiterLimit );
__declspec(implementation_key(2440)) VARIANT_BOOL IVGCurve::IsPointInside ( double x, double y );
__declspec(implementation_key(2441)) VARIANT_BOOL IVGCurve::IsRectOnEdge ( double x1, double y1, double x2, double y2 );
__declspec(implementation_key(2442)) IVGSegmentPtr IVGCurve::FindClosestSegment ( double x, double y, double * ParamOffset );
__declspec(implementation_key(2443)) IVGNodePtr IVGCurve::FindNodeAtPoint ( double x, double y, double HotArea );
__declspec(implementation_key(2444)) IVGSegmentPtr IVGCurve::FindSegmentAtPoint ( double x, double y, double * ParamOffset, double HotArea );
__declspec(implementation_key(2445)) IVGCurvePtr IVGCurve::WeldWith ( struct IVGCurve * Curve );
__declspec(implementation_key(2446)) VARIANT_BOOL IVGCurve::GetIsClockwise ( );
__declspec(implementation_key(2447)) double IVGCurve::GetArea ( );
__declspec(implementation_key(2448)) VARIANT_BOOL IVGCurve::GetBoundingBox ( double * x, double * y, double * Width, double * Height );
__declspec(implementation_key(2449)) IVGRectPtr IVGCurve::GetBoundingBox ( );
__declspec(implementation_key(2450)) VARIANT_BOOL IVGCurve::IntersectsWith ( struct IVGCurve * Curve );
__declspec(implementation_key(2451)) HRESULT IVGCurve::AppendSubpathFitToPoints ( struct IVGPointRange * Points, VARIANT_BOOL UseCurrentViewForTolerance, double tolerance );
__declspec(implementation_key(2452)) HRESULT IVGCurve::AppendSubpathFitToPointsAndCusps ( struct IVGPointRange * Points, SAFEARRAY * * CuspIndexArray, VARIANT_BOOL UseCurrentViewForTolerance, double tolerance );
__declspec(implementation_key(2453)) HRESULT IVGCurve::ApplyTransformMatrix ( struct IVGTransformMatrix * TransformMatrix );
__declspec(implementation_key(2454)) HRESULT IVGCurve::AppendSubpathFromPoints ( struct IVGPointRange * Points, VARIANT_BOOL Close );
__declspec(implementation_key(2455)) IVGCurvePtr IVGCurve::CreateCurveMappedToStroke ( struct IVGSubPath * Stroke, double ScaleY, VARIANT_BOOL SelfWeld );
__declspec(implementation_key(2456)) IVGCurvePtr IVGCurve::CreateCurveMappedToStrokeAndReferenceLine ( struct IVGSubPath * Stroke, struct IVGPoint * Start, struct IVGPoint * End, double ScaleY, VARIANT_BOOL SelfWeld );
__declspec(implementation_key(2457)) HRESULT IVGCurve::AutoReduceNodes ( double AmountToReduce0To100, VARIANT_BOOL SelectedNodesOnly );
__declspec(implementation_key(2458)) HRESULT IVGCurve::JoinTouchingSubpaths ( VARIANT_BOOL AllowSubpathReversals, double tolerance );
__declspec(implementation_key(2459)) HRESULT IVGCurve::AppendSubpathCircle ( double CenterX, double CenterY, double Radius );
__declspec(implementation_key(2460)) HRESULT IVGCurve::AppendSubpathRectangle ( double Left, double Top, double Right, double Bottom );
__declspec(implementation_key(2461)) HRESULT IVGCurve::AppendSubpathThreePointArc ( double StartX, double StartY, double EndX, double EndY, double ThirdX, double ThirdY );
__declspec(implementation_key(2462)) HRESULT IVGCurve::SelfWeldClosedSubpaths ( );
__declspec(implementation_key(2463)) HRESULT IVGCurve::AppendSubpathEllipse ( double CenterX, double CenterY, double RadiusH, double RadiusV );
__declspec(implementation_key(2464)) IVGCurvePtr IVGCurve::WeldEx ( struct IVGCurve * TargetCurve, enum cdrWeldMethod Method, VARIANT_BOOL WindingSource, VARIANT_BOOL WindingTarget, long Flags );
__declspec(implementation_key(2465)) long IVGArrowHead::GetIndex ( );
__declspec(implementation_key(2466)) IVGCurvePtr IVGArrowHead::GetCurve ( );
__declspec(implementation_key(2467)) double IVGArrowHead::GetBaseOutlineScale ( );
__declspec(implementation_key(2468)) double IVGArrowHead::GetCenterX ( );
__declspec(implementation_key(2469)) double IVGArrowHead::GetCenterY ( );
__declspec(implementation_key(2470)) double IVGArrowHead::GetLineOffset ( );
__declspec(implementation_key(2471)) IVGArrowHeadPtr IVGArrowHead::BindToDocument ( struct IVGDocument * Document );
__declspec(implementation_key(2472)) VARIANT_BOOL IVGArrowHead::CompareWith ( struct IVGArrowHead * ArrowHead );
__declspec(implementation_key(2473)) _bstr_t IVGArrowHead::GetName ( );
__declspec(implementation_key(2474)) void IVGArrowHead::PutName ( _bstr_t pVal );
__declspec(implementation_key(2475)) _bstr_t IVGArrowHead::GetDisplayName ( );
__declspec(implementation_key(2476)) IVGApplicationPtr IVGArrowHeads::GetApplication ( );
__declspec(implementation_key(2477)) IVGApplicationPtr IVGArrowHeads::GetParent ( );
__declspec(implementation_key(2478)) IVGArrowHeadPtr IVGArrowHeads::GetItem ( long Index );
__declspec(implementation_key(2479)) IUnknownPtr IVGArrowHeads::Get_NewEnum ( );
__declspec(implementation_key(2480)) long IVGArrowHeads::GetCount ( );
__declspec(implementation_key(2481)) HRESULT IVGArrowHeads::Remove ( long Index );
__declspec(implementation_key(2482)) IVGArrowHeadPtr IVGArrowHeads::Add ( struct IVGArrowHead * ArrowHead );
__declspec(implementation_key(2483)) IVGArrowHeadPtr IVGArrowHeads::Replace ( long Index, struct IVGArrowHead * ArrowHead );
__declspec(implementation_key(2484)) IVGApplicationPtr IVGSubPaths::GetApplication ( );
__declspec(implementation_key(2485)) IVGCurvePtr IVGSubPaths::GetParent ( );
__declspec(implementation_key(2486)) IVGSubPathPtr IVGSubPaths::GetItem ( long Index );
__declspec(implementation_key(2487)) IUnknownPtr IVGSubPaths::Get_NewEnum ( );
__declspec(implementation_key(2488)) long IVGSubPaths::GetCount ( );
__declspec(implementation_key(2489)) IVGSubPathPtr IVGSubPaths::GetFirst ( );
__declspec(implementation_key(2490)) IVGSubPathPtr IVGSubPaths::GetLast ( );
__declspec(implementation_key(2491)) IVGApplicationPtr IVGSubPath::GetApplication ( );
__declspec(implementation_key(2492)) IVGCurvePtr IVGSubPath::GetParent ( );
__declspec(implementation_key(2493)) IVGNodesPtr IVGSubPath::GetNodes ( );
__declspec(implementation_key(2494)) IVGSegmentsPtr IVGSubPath::GetSegments ( );
__declspec(implementation_key(2495)) long IVGSubPath::GetIndex ( );
__declspec(implementation_key(2496)) double IVGSubPath::GetLength ( );
__declspec(implementation_key(2497)) VARIANT_BOOL IVGSubPath::GetClosed ( );
__declspec(implementation_key(2498)) void IVGSubPath::PutClosed ( VARIANT_BOOL pVal );
__declspec(implementation_key(2499)) double IVGSubPath::GetPositionX ( );
__declspec(implementation_key(2500)) void IVGSubPath::PutPositionX ( double pVal );
__declspec(implementation_key(2501)) double IVGSubPath::GetPositionY ( );
__declspec(implementation_key(2502)) void IVGSubPath::PutPositionY ( double pVal );
__declspec(implementation_key(2503)) double IVGSubPath::GetSizeWidth ( );
__declspec(implementation_key(2504)) double IVGSubPath::GetSizeHeight ( );
__declspec(implementation_key(2505)) IVGNodeRangePtr IVGSubPath::Selection ( );
__declspec(implementation_key(2506)) HRESULT IVGSubPath::ReverseDirection ( );
__declspec(implementation_key(2507)) IVGShapePtr IVGSubPath::Extract ( struct IVGShape * * OldCurve );
__declspec(implementation_key(2508)) HRESULT IVGSubPath::Delete ( );
__declspec(implementation_key(2509)) HRESULT IVGSubPath::GetPosition ( double * PositionX, double * PositionY );
__declspec(implementation_key(2510)) HRESULT IVGSubPath::SetPosition ( double PositionX, double PositionY );
__declspec(implementation_key(2511)) HRESULT IVGSubPath::Move ( double DeltaX, double DeltaY );
__declspec(implementation_key(2512)) enum cdrPositionOfPointOverShape IVGSubPath::IsOnSubPath ( double x, double y, double HotArea );
__declspec(implementation_key(2513)) IVGSegmentPtr IVGSubPath::AppendLineSegment ( double x, double y, VARIANT_BOOL AppendAtBeginning );
__declspec(implementation_key(2514)) IVGSegmentPtr IVGSubPath::AppendCurveSegment ( double x, double y, double StartingControlPointLength, double StartingControlPointAngle, double EndingControlPointLength, double EndingControlPointAngle, VARIANT_BOOL AppendAtBeginning );
__declspec(implementation_key(2515)) HRESULT IVGSubPath::GetPointPositionAt ( double * x, double * y, double Offset, enum cdrSegmentOffsetType OffsetType );
__declspec(implementation_key(2516)) IVGNodePtr IVGSubPath::BreakApartAt ( double Offset, enum cdrSegmentOffsetType OffsetType );
__declspec(implementation_key(2517)) IVGNodePtr IVGSubPath::AddNodeAt ( double Offset, enum cdrSegmentOffsetType OffsetType );
__declspec(implementation_key(2518)) double IVGSubPath::GetPerpendicularAt ( double Offset, enum cdrSegmentOffsetType OffsetType );
__declspec(implementation_key(2519)) double IVGSubPath::GetTangentAt ( double Offset, enum cdrSegmentOffsetType OffsetType );
__declspec(implementation_key(2520)) IVGCrossPointsPtr IVGSubPath::GetIntersections ( struct IVGSubPath * Target, enum cdrSegmentOffsetType OffsetType );
__declspec(implementation_key(2521)) IVGSegmentPtr IVGSubPath::GetSegmentAt ( double Offset, enum cdrSegmentOffsetType OffsetType, double * SegmentOffset );
__declspec(implementation_key(2522)) IVGSubPathPtr IVGSubPath::Next ( );
__declspec(implementation_key(2523)) IVGSubPathPtr IVGSubPath::Previous ( );
__declspec(implementation_key(2524)) double IVGSubPath::GetCurvatureAt ( double Offset, enum cdrSegmentOffsetType OffsetType );
__declspec(implementation_key(2525)) double IVGSubPath::GetCurveSpeedAt ( double Offset, enum cdrSegmentOffsetType OffsetType );
__declspec(implementation_key(2526)) IVGNodePtr IVGSubPath::GetStartNode ( );
__declspec(implementation_key(2527)) IVGNodePtr IVGSubPath::GetEndNode ( );
__declspec(implementation_key(2528)) VARIANT_BOOL IVGSubPath::FindSegmentOffset ( double AbsoluteOffset, struct IVGSegment * * Segment, double * ParamOffset, double * Remainder );
__declspec(implementation_key(2529)) IVGSegmentPtr IVGSubPath::GetFirstSegment ( );
__declspec(implementation_key(2530)) IVGSegmentPtr IVGSubPath::GetLastSegment ( );
__declspec(implementation_key(2531)) IVGSegmentPtr IVGSubPath::AppendCurveSegment2 ( double x, double y, double StartingControlPointX, double StartingControlPointY, double EndingControlPointX, double EndingControlPointY, VARIANT_BOOL AppendAtBeginning );
__declspec(implementation_key(2532)) IVGCurvePtr IVGSubPath::GetCopy ( );
__declspec(implementation_key(2533)) SAFEARRAY * IVGSubPath::GetCurveInfo ( );
__declspec(implementation_key(2534)) long IVGSubPath::PutCurveInfo ( SAFEARRAY * * Source, long NumElements );
__declspec(implementation_key(2535)) IVGCurvePtr IVGSubPath::GetPolyline ( long CurvePrecision );
__declspec(implementation_key(2536)) VARIANT_BOOL IVGSubPath::IsPointInside ( double x, double y );
__declspec(implementation_key(2537)) VARIANT_BOOL IVGSubPath::IsRectOnEdge ( double x1, double y1, double x2, double y2 );
__declspec(implementation_key(2538)) IVGSegmentPtr IVGSubPath::FindClosestSegment ( double x, double y, double * ParamOffset );
__declspec(implementation_key(2539)) IVGNodePtr IVGSubPath::FindNodeAtPoint ( double x, double y, double HotArea );
__declspec(implementation_key(2540)) IVGSegmentPtr IVGSubPath::FindSegmentAtPoint ( double x, double y, double * ParamOffset, double HotArea );
__declspec(implementation_key(2541)) VARIANT_BOOL IVGSubPath::GetIsClockwise ( );
__declspec(implementation_key(2542)) double IVGSubPath::GetArea ( );
__declspec(implementation_key(2543)) VARIANT_BOOL IVGSubPath::GetBoundingBox ( double * x, double * y, double * Width, double * Height );
__declspec(implementation_key(2544)) IVGRectPtr IVGSubPath::GetBoundingBox ( );
__declspec(implementation_key(2545)) HRESULT IVGSubPath::EqualDivide ( long Divisions, double Gap );
__declspec(implementation_key(2546)) IVGPointRangePtr IVGSubPath::GetEvenlySpacedPoints ( double DistanceBetweenPointsAlongCurve, VARIANT_BOOL ScaleDistanceToFit );
__declspec(implementation_key(2547)) IVGVectorPtr IVGSubPath::GetPerpendicularVectorAt ( double Offset, enum cdrSegmentOffsetType OffsetType, VARIANT_BOOL Normalize );
__declspec(implementation_key(2548)) IVGVectorPtr IVGSubPath::GetTangentVectorAt ( double Offset, enum cdrSegmentOffsetType OffsetType, VARIANT_BOOL Normalize );
__declspec(implementation_key(2549)) IVGPointPtr IVGSubPath::GetPointAt ( double Offset, enum cdrSegmentOffsetType OffsetType );
__declspec(implementation_key(2550)) IVGApplicationPtr IVGNodes::GetApplication ( );
__declspec(implementation_key(2551)) IVGCurvePtr IVGNodes::GetParent ( );
__declspec(implementation_key(2552)) IVGNodePtr IVGNodes::GetItem ( long Index );
__declspec(implementation_key(2553)) IUnknownPtr IVGNodes::Get_NewEnum ( );
__declspec(implementation_key(2554)) long IVGNodes::GetCount ( );
__declspec(implementation_key(2555)) IVGNodeRangePtr IVGNodes::Range ( SAFEARRAY * * IndexArray );
__declspec(implementation_key(2556)) IVGNodeRangePtr IVGNodes::All ( );
__declspec(implementation_key(2557)) IVGNodeRangePtr IVGNodes::AllExcluding ( SAFEARRAY * * IndexArray );
__declspec(implementation_key(2558)) IVGNodePtr IVGNodes::GetFirst ( );
__declspec(implementation_key(2559)) IVGNodePtr IVGNodes::GetLast ( );
__declspec(implementation_key(2560)) IVGApplicationPtr IVGNode::GetApplication ( );
__declspec(implementation_key(2561)) IVGCurvePtr IVGNode::GetParent ( );
__declspec(implementation_key(2562)) double IVGNode::GetPositionX ( );
__declspec(implementation_key(2563)) void IVGNode::PutPositionX ( double pVal );
__declspec(implementation_key(2564)) double IVGNode::GetPositionY ( );
__declspec(implementation_key(2565)) void IVGNode::PutPositionY ( double pVal );
__declspec(implementation_key(2566)) enum cdrNodeType IVGNode::GetType ( );
__declspec(implementation_key(2567)) void IVGNode::PutType ( enum cdrNodeType pVal );
__declspec(implementation_key(2568)) IVGSubPathPtr IVGNode::GetSubPath ( );
__declspec(implementation_key(2569)) long IVGNode::GetIndex ( );
__declspec(implementation_key(2570)) long IVGNode::GetSubPathIndex ( );
__declspec(implementation_key(2571)) long IVGNode::GetAbsoluteIndex ( );
__declspec(implementation_key(2572)) VARIANT_BOOL IVGNode::GetIsEnding ( );
__declspec(implementation_key(2573)) HRESULT IVGNode::JoinWith ( struct IVGNode * Target );
__declspec(implementation_key(2574)) HRESULT IVGNode::ConnectWith ( struct IVGNode * Target );
__declspec(implementation_key(2575)) HRESULT IVGNode::BreakApart ( );
__declspec(implementation_key(2576)) HRESULT IVGNode::Delete ( );
__declspec(implementation_key(2577)) HRESULT IVGNode::GetPosition ( double * PositionX, double * PositionY );
__declspec(implementation_key(2578)) HRESULT IVGNode::SetPosition ( double PositionX, double PositionY );
__declspec(implementation_key(2579)) HRESULT IVGNode::Move ( double DeltaX, double DeltaY );
__declspec(implementation_key(2580)) IVGNodePtr IVGNode::Next ( );
__declspec(implementation_key(2581)) IVGNodePtr IVGNode::Previous ( );
__declspec(implementation_key(2582)) double IVGNode::GetDistanceFrom ( struct IVGNode * Node );
__declspec(implementation_key(2583)) IVGSegmentPtr IVGNode::GetSegment ( );
__declspec(implementation_key(2584)) IVGSegmentPtr IVGNode::GetPrevSegment ( );
__declspec(implementation_key(2585)) IVGSegmentPtr IVGNode::GetNextSegment ( );
__declspec(implementation_key(2586)) VARIANT_BOOL IVGNode::Fillet ( double Radius, VARIANT_BOOL CombineSmoothSegments );
__declspec(implementation_key(2587)) VARIANT_BOOL IVGNode::Chamfer ( double DistanceA, double DistanceB, VARIANT_BOOL CombineSmoothSegments );
__declspec(implementation_key(2588)) VARIANT_BOOL IVGNode::Scallop ( double Radius, VARIANT_BOOL CombineSmoothSegments );
__declspec(implementation_key(2589)) VARIANT_BOOL IVGNode::GetSelected ( );
__declspec(implementation_key(2590)) void IVGNode::PutSelected ( VARIANT_BOOL pVal );
__declspec(implementation_key(2591)) HRESULT IVGNode::CreateSelection ( );
__declspec(implementation_key(2592)) VARIANT_BOOL IVGNode::ExtendSubPaths ( struct IVGNode * Node2, VARIANT_BOOL JoinPaths );
__declspec(implementation_key(2593)) HRESULT IVGNode::AveragePositionWith ( struct IVGNode * Node2, VARIANT_BOOL JoinPaths );
__declspec(implementation_key(2594)) HRESULT IVGNode::GetPoint ( struct IVGPoint * * ppVal );
__declspec(implementation_key(2595)) HRESULT IVGNode::SetPoint ( struct IVGPoint * ppVal );
__declspec(implementation_key(2596)) IVGApplicationPtr IVGSnapPoint::GetApplication ( );
__declspec(implementation_key(2597)) IVGShapePtr IVGSnapPoint::GetParent ( );
__declspec(implementation_key(2598)) double IVGSnapPoint::GetPositionX ( );
__declspec(implementation_key(2599)) void IVGSnapPoint::PutPositionX ( double pVal );
__declspec(implementation_key(2600)) double IVGSnapPoint::GetPositionY ( );
__declspec(implementation_key(2601)) void IVGSnapPoint::PutPositionY ( double pVal );
__declspec(implementation_key(2602)) enum cdrPointType IVGSnapPoint::GetType ( );
__declspec(implementation_key(2603)) IVGNodePtr IVGSnapPoint::GetNode ( );
__declspec(implementation_key(2604)) VARIANT_BOOL IVGSnapPoint::GetIsDeletable ( );
__declspec(implementation_key(2605)) VARIANT_BOOL IVGSnapPoint::GetIsMovable ( );
__declspec(implementation_key(2606)) VARIANT_BOOL IVGSnapPoint::GetCanChangeDirection ( );
__declspec(implementation_key(2607)) HRESULT IVGSnapPoint::GetPosition ( double * PositionX, double * PositionY );
__declspec(implementation_key(2608)) VARIANT_BOOL IVGSnapPoint::GetUsesDirection ( );
__declspec(implementation_key(2609)) void IVGSnapPoint::PutUsesDirection ( VARIANT_BOOL pVal );
__declspec(implementation_key(2610)) VARIANT_BOOL IVGSnapPoint::GetIsSelectable ( );
__declspec(implementation_key(2611)) double IVGSnapPoint::GetDirection ( );
__declspec(implementation_key(2612)) void IVGSnapPoint::PutDirection ( double pVal );
__declspec(implementation_key(2613)) HRESULT IVGSnapPoint::SetPosition ( double PositionX, double PositionY );
__declspec(implementation_key(2614)) VARIANT_BOOL IVGSnapPoint::GetSelected ( );
__declspec(implementation_key(2615)) void IVGSnapPoint::PutSelected ( VARIANT_BOOL pVal );
__declspec(implementation_key(2616)) HRESULT IVGSnapPoint::CreateSelection ( );
__declspec(implementation_key(2617)) IVGUserSnapPointPtr IVGSnapPoint::GetUser ( );
__declspec(implementation_key(2618)) IVGObjectSnapPointPtr IVGSnapPoint::GetObject ( );
__declspec(implementation_key(2619)) IVGShapePtr IVGSnapPoint::GetShape ( );
__declspec(implementation_key(2620)) IVGBBoxSnapPointPtr IVGSnapPoint::GetBBox ( );
__declspec(implementation_key(2621)) _bstr_t IVGSnapPoint::GetReferenceData ( );
__declspec(implementation_key(2622)) HRESULT IVGSnapPoint::Delete ( );
__declspec(implementation_key(2623)) HRESULT IVGSnapPoint::Move ( double OffsetX, double OffsetY );
__declspec(implementation_key(2624)) IVGEdgeSnapPointPtr IVGSnapPoint::GetEdge ( );
__declspec(implementation_key(2625)) long IVGSnapPointRange::GetCount ( );
__declspec(implementation_key(2626)) IVGSnapPointPtr IVGSnapPointRange::GetItem ( long Index );
__declspec(implementation_key(2627)) HRESULT IVGSnapPointRange::Move ( double OffsetX, double OffsetY );
__declspec(implementation_key(2628)) HRESULT IVGSnapPointRange::Delete ( );
__declspec(implementation_key(2629)) IUnknownPtr IVGSnapPointRange::Get_NewEnum ( );
__declspec(implementation_key(2630)) VARIANT_BOOL IVGSnapPointRange::Add ( struct IVGSnapPoint * SnapPoint );
__declspec(implementation_key(2631)) VARIANT_BOOL IVGSnapPointRange::Remove ( long Index );
__declspec(implementation_key(2632)) VARIANT_BOOL IVGSnapPointRange::RemoveByReference ( _bstr_t ReferenceData );
__declspec(implementation_key(2633)) IVGSnapPointPtr IVGSnapPointRange::Find ( _bstr_t ReferenceData );
__declspec(implementation_key(2634)) HRESULT IVGSnapPointRange::CreateSelection ( );
__declspec(implementation_key(2635)) HRESULT IVGSnapPointRange::AddToSelection ( );
__declspec(implementation_key(2636)) HRESULT IVGSnapPointRange::RemoveFromSelection ( );
__declspec(implementation_key(2637)) HRESULT IVGSnapPointRange::ChangeDirection ( double Direction, enum cdrTriState UsesDirection );
__declspec(implementation_key(2638)) HRESULT IVGSnapPointRange::SetAutoSnap ( VARIANT_BOOL AutoSnap );
__declspec(implementation_key(2639)) IVGApplicationPtr IVGSnapPoints::GetApplication ( );
__declspec(implementation_key(2640)) IVGShapePtr IVGSnapPoints::GetParent ( );
__declspec(implementation_key(2641)) IVGSnapPointPtr IVGSnapPoints::GetItem ( long Index );
__declspec(implementation_key(2642)) IUnknownPtr IVGSnapPoints::Get_NewEnum ( );
__declspec(implementation_key(2643)) long IVGSnapPoints::GetCount ( );
__declspec(implementation_key(2644)) IVGSnapPointPtr IVGSnapPoints::User ( _bstr_t ID );
__declspec(implementation_key(2645)) IVGSnapPointPtr IVGSnapPoints::BBox ( enum cdrReferencePoint Type );
__declspec(implementation_key(2646)) IVGSnapPointPtr IVGSnapPoints::Object ( enum cdrObjectSnapPointType Type );
__declspec(implementation_key(2647)) IVGSnapPointPtr IVGSnapPoints::FindClosest ( enum cdrPointType TypeSet, double PositionX, double PositionY );
__declspec(implementation_key(2648)) IVGSnapPointRangePtr IVGSnapPoints::Range ( SAFEARRAY * * References );
__declspec(implementation_key(2649)) IVGSnapPointPtr IVGSnapPoints::AddUserSnapPoint ( double PositionX, double PositionY, double Direction, VARIANT_BOOL UseDirection );
__declspec(implementation_key(2650)) IVGSnapPointPtr IVGSnapPoints::AddUserSnapPointEx ( _bstr_t ID, double PositionX, double PositionY, double Direction, VARIANT_BOOL UseDirection );
__declspec(implementation_key(2651)) IVGSnapPointRangePtr IVGSnapPoints::GetSelection ( );
__declspec(implementation_key(2652)) HRESULT IVGSnapPoints::ClearSelection ( );
__declspec(implementation_key(2653)) IVGSnapPointRangePtr IVGSnapPoints::GetAll ( );
__declspec(implementation_key(2654)) IVGSnapPointPtr IVGSnapPoints::Edge ( long SegmentIndex, double SegmentOffset );
__declspec(implementation_key(2655)) IVGSnapPointPtr IVGSnapPoints::Auto ( );
__declspec(implementation_key(2656)) IVGSnapPointPtr IVGConnector::GetStartPoint ( );
__declspec(implementation_key(2657)) void IVGConnector::PutStartPoint ( struct IVGSnapPoint * ppVal );
__declspec(implementation_key(2658)) IVGSnapPointPtr IVGConnector::GetEndPoint ( );
__declspec(implementation_key(2659)) void IVGConnector::PutEndPoint ( struct IVGSnapPoint * ppVal );
__declspec(implementation_key(2660)) enum cdrConnectorType IVGConnector::GetType ( );
__declspec(implementation_key(2661)) enum cdrLinearDimensionType IVGDimensionLinear::GetType ( );
__declspec(implementation_key(2662)) IVGSnapPointPtr IVGDimensionLinear::GetPoint1 ( );
__declspec(implementation_key(2663)) void IVGDimensionLinear::PutPoint1 ( struct IVGSnapPoint * ppVal );
__declspec(implementation_key(2664)) IVGSnapPointPtr IVGDimensionLinear::GetPoint2 ( );
__declspec(implementation_key(2665)) void IVGDimensionLinear::PutPoint2 ( struct IVGSnapPoint * ppVal );
__declspec(implementation_key(2666)) VARIANT_BOOL IVGDimensionLinear::GetTextCentered ( );
__declspec(implementation_key(2667)) void IVGDimensionLinear::PutTextCentered ( VARIANT_BOOL pVal );
__declspec(implementation_key(2668)) double IVGDimensionLinear::GetTextX ( );
__declspec(implementation_key(2669)) void IVGDimensionLinear::PutTextX ( double pVal );
__declspec(implementation_key(2670)) double IVGDimensionLinear::GetTextY ( );
__declspec(implementation_key(2671)) void IVGDimensionLinear::PutTextY ( double pVal );
__declspec(implementation_key(2672)) enum cdrDimensionStyle IVGDimensionLinear::GetStyle ( );
__declspec(implementation_key(2673)) void IVGDimensionLinear::PutStyle ( enum cdrDimensionStyle pVal );
__declspec(implementation_key(2674)) VARIANT_BOOL IVGDimensionLinear::GetShowUnits ( );
__declspec(implementation_key(2675)) void IVGDimensionLinear::PutShowUnits ( VARIANT_BOOL pVal );
__declspec(implementation_key(2676)) enum cdrDimensionLinearUnits IVGDimensionLinear::GetUnits ( );
__declspec(implementation_key(2677)) void IVGDimensionLinear::PutUnits ( enum cdrDimensionLinearUnits pVal );
__declspec(implementation_key(2678)) enum cdrDimensionPlacement IVGDimensionLinear::GetPlacement ( );
__declspec(implementation_key(2679)) void IVGDimensionLinear::PutPlacement ( enum cdrDimensionPlacement pVal );
__declspec(implementation_key(2680)) VARIANT_BOOL IVGDimensionLinear::GetHorizontalText ( );
__declspec(implementation_key(2681)) void IVGDimensionLinear::PutHorizontalText ( VARIANT_BOOL pVal );
__declspec(implementation_key(2682)) VARIANT_BOOL IVGDimensionLinear::GetReverseTerminators ( );
__declspec(implementation_key(2683)) void IVGDimensionLinear::PutReverseTerminators ( VARIANT_BOOL pVal );
__declspec(implementation_key(2684)) VARIANT_BOOL IVGDimensionLinear::GetAutoReverseTerminators ( );
__declspec(implementation_key(2685)) void IVGDimensionLinear::PutAutoReverseTerminators ( VARIANT_BOOL pVal );
__declspec(implementation_key(2686)) double IVGDimensionLinear::GetReverseTerminatorLength ( );
__declspec(implementation_key(2687)) VARIANT_BOOL IVGDimensionLinear::GetUseReverseTerminatorLength ( );
__declspec(implementation_key(2688)) void IVGDimensionLinear::PutUseReverseTerminatorLength ( VARIANT_BOOL pVal );
__declspec(implementation_key(2689)) HRESULT IVGDimensionLinear::SetReverseTerminatorLength ( double Length );
__declspec(implementation_key(2690)) VARIANT_BOOL IVGDimensionLinear::GetInnerDimensionLineVisible ( );
__declspec(implementation_key(2691)) void IVGDimensionLinear::PutInnerDimensionLineVisible ( VARIANT_BOOL pVal );
__declspec(implementation_key(2692)) IVGSnapPointPtr IVGDimensionAngular::GetCenter ( );
__declspec(implementation_key(2693)) void IVGDimensionAngular::PutCenter ( struct IVGSnapPoint * ppVal );
__declspec(implementation_key(2694)) IVGSnapPointPtr IVGDimensionAngular::GetPoint1 ( );
__declspec(implementation_key(2695)) void IVGDimensionAngular::PutPoint1 ( struct IVGSnapPoint * ppVal );
__declspec(implementation_key(2696)) IVGSnapPointPtr IVGDimensionAngular::GetPoint2 ( );
__declspec(implementation_key(2697)) void IVGDimensionAngular::PutPoint2 ( struct IVGSnapPoint * ppVal );
__declspec(implementation_key(2698)) double IVGDimensionAngular::GetTextX ( );
__declspec(implementation_key(2699)) void IVGDimensionAngular::PutTextX ( double pVal );
__declspec(implementation_key(2700)) double IVGDimensionAngular::GetTextY ( );
__declspec(implementation_key(2701)) void IVGDimensionAngular::PutTextY ( double pVal );
__declspec(implementation_key(2702)) VARIANT_BOOL IVGDimensionAngular::GetShowUnits ( );
__declspec(implementation_key(2703)) void IVGDimensionAngular::PutShowUnits ( VARIANT_BOOL pVal );
__declspec(implementation_key(2704)) enum cdrDimensionAngularUnits IVGDimensionAngular::GetUnits ( );
__declspec(implementation_key(2705)) void IVGDimensionAngular::PutUnits ( enum cdrDimensionAngularUnits pVal );
__declspec(implementation_key(2706)) VARIANT_BOOL IVGDimensionAngular::GetClockwise ( );
__declspec(implementation_key(2707)) void IVGDimensionAngular::PutClockwise ( VARIANT_BOOL pVal );
__declspec(implementation_key(2708)) VARIANT_BOOL IVGDimensionAngular::GetInnerExtensionLinesVisible ( );
__declspec(implementation_key(2709)) void IVGDimensionAngular::PutInnerExtensionLinesVisible ( VARIANT_BOOL pVal );
__declspec(implementation_key(2710)) IVGApplicationPtr IVGSegment::GetApplication ( );
__declspec(implementation_key(2711)) IVGCurvePtr IVGSegment::GetParent ( );
__declspec(implementation_key(2712)) enum cdrSegmentType IVGSegment::GetType ( );
__declspec(implementation_key(2713)) void IVGSegment::PutType ( enum cdrSegmentType pVal );
__declspec(implementation_key(2714)) IVGSubPathPtr IVGSegment::GetSubPath ( );
__declspec(implementation_key(2715)) double IVGSegment::GetLength ( );
__declspec(implementation_key(2716)) long IVGSegment::GetIndex ( );
__declspec(implementation_key(2717)) long IVGSegment::GetSubPathIndex ( );
__declspec(implementation_key(2718)) long IVGSegment::GetAbsoluteIndex ( );
__declspec(implementation_key(2719)) double IVGSegment::GetStartingControlPointLength ( );
__declspec(implementation_key(2720)) void IVGSegment::PutStartingControlPointLength ( double pVal );
__declspec(implementation_key(2721)) double IVGSegment::GetStartingControlPointAngle ( );
__declspec(implementation_key(2722)) void IVGSegment::PutStartingControlPointAngle ( double pVal );
__declspec(implementation_key(2723)) double IVGSegment::GetEndingControlPointLength ( );
__declspec(implementation_key(2724)) void IVGSegment::PutEndingControlPointLength ( double pVal );
__declspec(implementation_key(2725)) double IVGSegment::GetEndingControlPointAngle ( );
__declspec(implementation_key(2726)) void IVGSegment::PutEndingControlPointAngle ( double pVal );
__declspec(implementation_key(2727)) HRESULT IVGSegment::GetPointPositionAt ( double * x, double * y, double Offset, enum cdrSegmentOffsetType OffsetType );
__declspec(implementation_key(2728)) IVGNodePtr IVGSegment::BreakApartAt ( double Offset, enum cdrSegmentOffsetType OffsetType );
__declspec(implementation_key(2729)) IVGNodePtr IVGSegment::AddNodeAt ( double Offset, enum cdrSegmentOffsetType OffsetType );
__declspec(implementation_key(2730)) double IVGSegment::GetPerpendicularAt ( double Offset, enum cdrSegmentOffsetType OffsetType );
__declspec(implementation_key(2731)) double IVGSegment::GetTangentAt ( double Offset, enum cdrSegmentOffsetType OffsetType );
__declspec(implementation_key(2732)) IVGCrossPointsPtr IVGSegment::GetIntersections ( struct IVGSegment * Target, enum cdrSegmentOffsetType OffsetType );
__declspec(implementation_key(2733)) IVGSegmentPtr IVGSegment::Next ( );
__declspec(implementation_key(2734)) IVGSegmentPtr IVGSegment::Previous ( );
__declspec(implementation_key(2735)) IVGNodePtr IVGSegment::GetStartNode ( );
__declspec(implementation_key(2736)) IVGNodePtr IVGSegment::GetEndNode ( );
__declspec(implementation_key(2737)) double IVGSegment::GetStartingControlPointX ( );
__declspec(implementation_key(2738)) void IVGSegment::PutStartingControlPointX ( double pVal );
__declspec(implementation_key(2739)) double IVGSegment::GetStartingControlPointY ( );
__declspec(implementation_key(2740)) void IVGSegment::PutStartingControlPointY ( double pVal );
__declspec(implementation_key(2741)) double IVGSegment::GetEndingControlPointX ( );
__declspec(implementation_key(2742)) void IVGSegment::PutEndingControlPointX ( double pVal );
__declspec(implementation_key(2743)) double IVGSegment::GetEndingControlPointY ( );
__declspec(implementation_key(2744)) void IVGSegment::PutEndingControlPointY ( double pVal );
__declspec(implementation_key(2745)) long IVGSegment::GetPeaks ( double Angle, double * Offset1, double * Offset2, enum cdrSegmentOffsetType OffsetType );
__declspec(implementation_key(2746)) long IVGSegment::GetBendPoints ( double * Offset1, double * Offset2, enum cdrSegmentOffsetType OffsetType );
__declspec(implementation_key(2747)) double IVGSegment::GetCurvatureAt ( double Offset, enum cdrSegmentOffsetType OffsetType );
__declspec(implementation_key(2748)) double IVGSegment::GetCurveSpeedAt ( double Offset, enum cdrSegmentOffsetType OffsetType );
__declspec(implementation_key(2749)) VARIANT_BOOL IVGSegment::FindParamOffset ( double AbsoluteOffset, double * ParamOffset, double * Remainder );
__declspec(implementation_key(2750)) double IVGSegment::GetAbsoluteOffset ( double ParamOffset );
__declspec(implementation_key(2751)) HRESULT IVGSegment::GetStartingControlPointPosition ( double * PositionX, double * PositionY );
__declspec(implementation_key(2752)) HRESULT IVGSegment::SetStartingControlPointPosition ( double PositionX, double PositionY );
__declspec(implementation_key(2753)) HRESULT IVGSegment::GetEndingControlPointPosition ( double * PositionX, double * PositionY );
__declspec(implementation_key(2754)) HRESULT IVGSegment::SetEndingControlPointPosition ( double PositionX, double PositionY );
__declspec(implementation_key(2755)) IVGCurvePtr IVGSegment::GetCopy ( );
__declspec(implementation_key(2756)) VARIANT_BOOL IVGSegment::GetSelected ( );
__declspec(implementation_key(2757)) void IVGSegment::PutSelected ( VARIANT_BOOL pVal );
__declspec(implementation_key(2758)) HRESULT IVGSegment::CreateSelection ( );
__declspec(implementation_key(2759)) IVGCurvePtr IVGSegment::GetPolyline ( long CurvePrecision );
__declspec(implementation_key(2760)) VARIANT_BOOL IVGSegment::IsRectOnEdge ( double x1, double y1, double x2, double y2 );
__declspec(implementation_key(2761)) VARIANT_BOOL IVGSegment::FindClosestPoint ( double x, double y, double * ParamOffset );
__declspec(implementation_key(2762)) VARIANT_BOOL IVGSegment::FindParamOffsetAtPoint ( double x, double y, double * ParamOffset, double HotArea );
__declspec(implementation_key(2763)) VARIANT_BOOL IVGSegment::GetBoundingBox ( double * x, double * y, double * Width, double * Height );
__declspec(implementation_key(2764)) IVGRectPtr IVGSegment::GetBoundingBox ( );
__declspec(implementation_key(2765)) IVGVectorPtr IVGSegment::GetPerpendicularVectorAt ( double Offset, enum cdrSegmentOffsetType OffsetType, VARIANT_BOOL Normalize );
__declspec(implementation_key(2766)) IVGVectorPtr IVGSegment::GetTangentVectorAt ( double Offset, enum cdrSegmentOffsetType OffsetType, VARIANT_BOOL Normalize );
__declspec(implementation_key(2767)) IVGPointPtr IVGSegment::GetPointAt ( double Offset, enum cdrSegmentOffsetType OffsetType );
__declspec(implementation_key(2768)) double IVGVector::Getx ( );
__declspec(implementation_key(2769)) void IVGVector::Putx ( double pVal );
__declspec(implementation_key(2770)) double IVGVector::Gety ( );
__declspec(implementation_key(2771)) void IVGVector::Puty ( double pVal );
__declspec(implementation_key(2772)) double IVGVector::GetLength ( );
__declspec(implementation_key(2773)) void IVGVector::PutLength ( double pVal );
__declspec(implementation_key(2774)) double IVGVector::GetAngle ( );
__declspec(implementation_key(2775)) void IVGVector::PutAngle ( double pVal );
__declspec(implementation_key(2776)) IVGPointPtr IVGVector::GetOffsettedPoint ( struct IVGPoint * Origin, double Distance );
__declspec(implementation_key(2777)) HRESULT IVGVector::Add ( struct IVGVector * Vector );
__declspec(implementation_key(2778)) HRESULT IVGVector::Subtract ( struct IVGVector * Vector );
__declspec(implementation_key(2779)) HRESULT IVGVector::MultiplyBy ( double Multiplier );
__declspec(implementation_key(2780)) HRESULT IVGVector::Negate ( );
__declspec(implementation_key(2781)) HRESULT IVGVector::Normalize ( );
__declspec(implementation_key(2782)) double IVGVector::AngleBetween ( struct IVGVector * Vector );
__declspec(implementation_key(2783)) double IVGVector::SmallAngleBetween ( struct IVGVector * Vector );
__declspec(implementation_key(2784)) double IVGVector::DotProduct ( struct IVGVector * Vector );
__declspec(implementation_key(2785)) double IVGVector::CrossProduct ( struct IVGVector * Vector );
__declspec(implementation_key(2786)) HRESULT IVGVector::SetFromPoints ( struct IVGPoint * Start, struct IVGPoint * End );
__declspec(implementation_key(2787)) IVGVectorPtr IVGVector::ProjectOnto ( struct IVGVector * Vector );
__declspec(implementation_key(2788)) IVGVectorPtr IVGVector::GetCopy ( );
__declspec(implementation_key(2789)) HRESULT IVGVector::BindToDocument ( struct IVGDocument * Document );
__declspec(implementation_key(2790)) double IVGPoint::Getx ( );
__declspec(implementation_key(2791)) void IVGPoint::Putx ( double pVal );
__declspec(implementation_key(2792)) double IVGPoint::Gety ( );
__declspec(implementation_key(2793)) void IVGPoint::Puty ( double pVal );
__declspec(implementation_key(2794)) HRESULT IVGPoint::Add ( struct IVGVector * Vector );
__declspec(implementation_key(2795)) HRESULT IVGPoint::Subtract ( struct IVGVector * Vector );
__declspec(implementation_key(2796)) double IVGPoint::DistanceTo ( struct IVGPoint * Point );
__declspec(implementation_key(2797)) IVGPointPtr IVGPoint::GetCopy ( );
__declspec(implementation_key(2798)) HRESULT IVGPoint::BindToDocument ( struct IVGDocument * Document );
__declspec(implementation_key(2799)) IVGPointPtr IVGPointRange::GetItem ( long Index );
__declspec(implementation_key(2800)) void IVGPointRange::PutItem ( long Index, struct IVGPoint * ppVal );
__declspec(implementation_key(2801)) IUnknownPtr IVGPointRange::Get_NewEnum ( );
__declspec(implementation_key(2802)) IVGPointPtr IVGPointRange::GetFirst ( );
__declspec(implementation_key(2803)) IVGPointPtr IVGPointRange::GetLast ( );
__declspec(implementation_key(2804)) long IVGPointRange::GetCount ( );
__declspec(implementation_key(2805)) HRESULT IVGPointRange::AddPoint ( struct IVGPoint * Point );
__declspec(implementation_key(2806)) HRESULT IVGPointRange::AddPointXY ( double x, double y );
__declspec(implementation_key(2807)) HRESULT IVGPointRange::InsertPoint ( long Index, struct IVGPoint * Point );
__declspec(implementation_key(2808)) HRESULT IVGPointRange::AddPoints ( struct IVGPointRange * Points );
__declspec(implementation_key(2809)) HRESULT IVGPointRange::InsertPoints ( long Index, struct IVGPointRange * Points );
__declspec(implementation_key(2810)) HRESULT IVGPointRange::Remove ( long Index );
__declspec(implementation_key(2811)) HRESULT IVGPointRange::RemoveRange ( long StartIndex, long EndIndex );
__declspec(implementation_key(2812)) HRESULT IVGPointRange::RemoveAll ( );
__declspec(implementation_key(2813)) HRESULT IVGPointRange::RemoveAdjacentDuplicates ( );
__declspec(implementation_key(2814)) HRESULT IVGPointRange::Reverse ( );
__declspec(implementation_key(2815)) HRESULT IVGPointRange::Smoothen ( double NumberOfPointsToSmoothAcross, VARIANT_BOOL Closed );
__declspec(implementation_key(2816)) IVGPointRangePtr IVGPointRange::GetCopy ( );
__declspec(implementation_key(2817)) HRESULT IVGPointRange::BindToDocument ( struct IVGDocument * Document );
__declspec(implementation_key(2818)) double IVGTransformMatrix::Getd11 ( );
__declspec(implementation_key(2819)) void IVGTransformMatrix::Putd11 ( double pVal );
__declspec(implementation_key(2820)) double IVGTransformMatrix::Getd12 ( );
__declspec(implementation_key(2821)) void IVGTransformMatrix::Putd12 ( double pVal );
__declspec(implementation_key(2822)) double IVGTransformMatrix::Getd21 ( );
__declspec(implementation_key(2823)) void IVGTransformMatrix::Putd21 ( double pVal );
__declspec(implementation_key(2824)) double IVGTransformMatrix::Getd22 ( );
__declspec(implementation_key(2825)) void IVGTransformMatrix::Putd22 ( double pVal );
__declspec(implementation_key(2826)) double IVGTransformMatrix::GetTranslationX ( );
__declspec(implementation_key(2827)) void IVGTransformMatrix::PutTranslationX ( double pVal );
__declspec(implementation_key(2828)) double IVGTransformMatrix::GetTranslationY ( );
__declspec(implementation_key(2829)) void IVGTransformMatrix::PutTranslationY ( double pVal );
__declspec(implementation_key(2830)) IVGVectorPtr IVGTransformMatrix::GetTranslation ( );
__declspec(implementation_key(2831)) void IVGTransformMatrix::PutTranslation ( struct IVGVector * ppVal );
__declspec(implementation_key(2832)) HRESULT IVGTransformMatrix::SetToIdentity ( );
__declspec(implementation_key(2833)) HRESULT IVGTransformMatrix::Invert ( );
__declspec(implementation_key(2834)) HRESULT IVGTransformMatrix::TranslateBy ( double x, double y );
__declspec(implementation_key(2835)) HRESULT IVGTransformMatrix::TranslateByVector ( struct IVGVector * Vector );
__declspec(implementation_key(2836)) HRESULT IVGTransformMatrix::SetTranslation ( double x, double y );
__declspec(implementation_key(2837)) HRESULT IVGTransformMatrix::Rotate ( double Angle );
__declspec(implementation_key(2838)) HRESULT IVGTransformMatrix::RotateAround ( double Angle, double x, double y );
__declspec(implementation_key(2839)) HRESULT IVGTransformMatrix::Scale ( double ScaleX, double ScaleY );
__declspec(implementation_key(2840)) HRESULT IVGTransformMatrix::ScaleAround ( double ScaleX, double ScaleY, double x, double y );
__declspec(implementation_key(2841)) HRESULT IVGTransformMatrix::Transform ( struct IVGTransformMatrix * TransformMatrix );
__declspec(implementation_key(2842)) HRESULT IVGTransformMatrix::TransformAround ( struct IVGTransformMatrix * TransformMatrix, double x, double y );
__declspec(implementation_key(2843)) HRESULT IVGTransformMatrix::TransformPoint ( struct IVGPoint * Point );
__declspec(implementation_key(2844)) HRESULT IVGTransformMatrix::TransformPoints ( struct IVGPointRange * Points );
__declspec(implementation_key(2845)) HRESULT IVGTransformMatrix::TransformVector ( struct IVGVector * Vector );
__declspec(implementation_key(2846)) HRESULT IVGTransformMatrix::UntransformPoint ( struct IVGPoint * Point );
__declspec(implementation_key(2847)) HRESULT IVGTransformMatrix::UntransformPoints ( struct IVGPointRange * Points );
__declspec(implementation_key(2848)) HRESULT IVGTransformMatrix::UntransformVector ( struct IVGVector * Vector );
__declspec(implementation_key(2849)) VARIANT_BOOL IVGTransformMatrix::GetIsIdentity ( );
__declspec(implementation_key(2850)) VARIANT_BOOL IVGTransformMatrix::GetIsSkewedOrRotatedOrMirrored ( );
__declspec(implementation_key(2851)) VARIANT_BOOL IVGTransformMatrix::GetContainsOnlyTranslation ( );
__declspec(implementation_key(2852)) VARIANT_BOOL IVGTransformMatrix::GetIsSkewedOrRotated ( );
__declspec(implementation_key(2853)) VARIANT_BOOL IVGTransformMatrix::GetIsScaledOrSkewedOrRotated ( );
__declspec(implementation_key(2854)) VARIANT_BOOL IVGTransformMatrix::GetIsOrthogonal ( );
__declspec(implementation_key(2855)) VARIANT_BOOL IVGTransformMatrix::GetIsOrthonormalAxisAligned ( );
__declspec(implementation_key(2856)) VARIANT_BOOL IVGTransformMatrix::GetIsOrthonormal ( );
__declspec(implementation_key(2857)) VARIANT_BOOL IVGTransformMatrix::GetIsMirrored ( );
__declspec(implementation_key(2858)) VARIANT_BOOL IVGTransformMatrix::GetIsScaled ( );
__declspec(implementation_key(2859)) VARIANT_BOOL IVGTransformMatrix::GetIsTranslated ( );
__declspec(implementation_key(2860)) IVGTransformMatrixPtr IVGTransformMatrix::GetCopy ( );
__declspec(implementation_key(2861)) HRESULT IVGTransformMatrix::BindToDocument ( struct IVGDocument * Document );
__declspec(implementation_key(2862)) _variant_t IVGProperties::GetItem ( _bstr_t Name, long ID );
__declspec(implementation_key(2863)) void IVGProperties::PutItem ( _bstr_t Name, long ID, const _variant_t & pVal );
__declspec(implementation_key(2864)) IUnknownPtr IVGProperties::Get_NewEnum ( );
__declspec(implementation_key(2865)) long IVGProperties::GetIndex ( _bstr_t Name, long ID );
__declspec(implementation_key(2866)) _variant_t IVGProperties::GetItemByIndex ( long Index );
__declspec(implementation_key(2867)) HRESULT IVGProperties::Delete ( _bstr_t Name, long ID );
__declspec(implementation_key(2868)) HRESULT IVGProperties::DeleteByIndex ( long Index );
__declspec(implementation_key(2869)) long IVGProperties::GetCount ( );
__declspec(implementation_key(2870)) HRESULT IVGProperties::Description ( long Index, BSTR * Name, long * ID );
__declspec(implementation_key(2871)) HRESULT IVGProperties::PutFile ( _bstr_t Name, long ID, _bstr_t FileName );
__declspec(implementation_key(2872)) HRESULT IVGProperties::GetFile ( _bstr_t Name, long ID, _bstr_t FileName );
__declspec(implementation_key(2873)) VARIANT_BOOL IVGProperties::Exists ( _bstr_t Name, long ID );
__declspec(implementation_key(2874)) VARIANT_BOOL IVGProperties::DeleteAll ( _bstr_t Name );
__declspec(implementation_key(2875)) IVGPointPtr IVGProperties::GetPoint ( _bstr_t uuidName );
__declspec(implementation_key(2876)) HRESULT IVGProperties::SetPoint ( _bstr_t uuidName, struct IVGPoint * pVal );
__declspec(implementation_key(2877)) IVGVectorPtr IVGProperties::GetVector ( _bstr_t uuidName );
__declspec(implementation_key(2878)) HRESULT IVGProperties::SetVector ( _bstr_t uuidName, struct IVGVector * pVal );
__declspec(implementation_key(2879)) IVGCurvePtr IVGProperties::GetCurve ( _bstr_t uuidName );
__declspec(implementation_key(2880)) HRESULT IVGProperties::SetCurve ( _bstr_t uuidName, struct IVGCurve * pVal );
__declspec(implementation_key(2881)) _bstr_t IVGToolStateAttributes::GetPropertyBarGuid ( );
__declspec(implementation_key(2882)) void IVGToolStateAttributes::PutPropertyBarGuid ( _bstr_t pVal );
__declspec(implementation_key(2883)) _bstr_t IVGToolStateAttributes::GetContextMenuGuid ( );
__declspec(implementation_key(2884)) void IVGToolStateAttributes::PutContextMenuGuid ( _bstr_t pVal );
__declspec(implementation_key(2885)) VARIANT_BOOL IVGToolStateAttributes::GetUseTabletPressure ( );
__declspec(implementation_key(2886)) void IVGToolStateAttributes::PutUseTabletPressure ( VARIANT_BOOL pVal );
__declspec(implementation_key(2887)) VARIANT_BOOL IVGToolStateAttributes::GetAllowTempPickState ( );
__declspec(implementation_key(2888)) void IVGToolStateAttributes::PutAllowTempPickState ( VARIANT_BOOL pVal );
__declspec(implementation_key(2889)) VARIANT_BOOL IVGToolStateAttributes::GetAllowAutopan ( );
__declspec(implementation_key(2890)) void IVGToolStateAttributes::PutAllowAutopan ( VARIANT_BOOL pVal );
__declspec(implementation_key(2891)) VARIANT_BOOL IVGToolStateAttributes::GetAllowContextMenu ( );
__declspec(implementation_key(2892)) void IVGToolStateAttributes::PutAllowContextMenu ( VARIANT_BOOL pVal );
__declspec(implementation_key(2893)) VARIANT_BOOL IVGToolStateAttributes::GetCanUpdateSelectionOnMouseClick ( );
__declspec(implementation_key(2894)) void IVGToolStateAttributes::PutCanUpdateSelectionOnMouseClick ( VARIANT_BOOL pVal );
__declspec(implementation_key(2895)) VARIANT_BOOL IVGToolStateAttributes::GetDeselectOnLButtonDown ( );
__declspec(implementation_key(2896)) void IVGToolStateAttributes::PutDeselectOnLButtonDown ( VARIANT_BOOL pVal );
__declspec(implementation_key(2897)) VARIANT_BOOL IVGToolStateAttributes::GetEnterGraceStateOnLButtonDown ( );
__declspec(implementation_key(2898)) void IVGToolStateAttributes::PutEnterGraceStateOnLButtonDown ( VARIANT_BOOL pVal );
__declspec(implementation_key(2899)) void IVGToolStateAttributes::PutStatusInfo ( _bstr_t _arg1 );
__declspec(implementation_key(2900)) HRESULT IVGToolStateAttributes::SetCursor ( enum cdrCursorShape CursorShape );
__declspec(implementation_key(2901)) HRESULT IVGToolStateAttributes::StartTimer ( long TimerId, long TimeToTick, VARIANT_BOOL OneTime );
__declspec(implementation_key(2902)) HRESULT IVGToolStateAttributes::StopTimer ( long TimerId );
__declspec(implementation_key(2903)) HRESULT IVGToolStateAttributes::SnapMouse ( struct IVGPoint * pt );
__declspec(implementation_key(2904)) HRESULT IVGToolStateAttributes::AnchoredSnapMouse ( struct IVGPoint * pt, struct IVGPoint * AnchorPoint );
__declspec(implementation_key(2905)) HRESULT IVGToolStateAttributes::ConstrainMouse ( struct IVGPoint * pt, struct IVGPoint * AnchorPoint );
__declspec(implementation_key(2906)) VARIANT_BOOL IVGToolStateAttributes::IsKeyDown ( long KeyCode );
__declspec(implementation_key(2907)) double IVGToolStateAttributes::GetCurrentPressure ( );
__declspec(implementation_key(2908)) HRESULT IVGToolStateAttributes::SetCursorGuid ( _bstr_t newVal );
__declspec(implementation_key(2909)) HRESULT IVGToolStateAttributes::SetStateHintsPage ( _bstr_t newVal );
__declspec(implementation_key(2910)) HRESULT IVGToolStateAttributes::ExitTemporaryToolState ( );
__declspec(implementation_key(2911)) IVGDocumentPtr IVGToolStateAttributes::GetDocument ( );
__declspec(implementation_key(2912)) HRESULT IVGToolStateAttributes::SetFocus ( );
__declspec(implementation_key(2913)) HRESULT IVGToolStateAttributes::CaptureMouse ( );
__declspec(implementation_key(2914)) HRESULT IVGToolStateAttributes::ReleaseMouse ( );
__declspec(implementation_key(2915)) HRESULT IVGToolState::OnStartState ( struct IVGToolStateAttributes * StateAttributes );
__declspec(implementation_key(2916)) HRESULT IVGToolState::OnExitState ( );
__declspec(implementation_key(2917)) HRESULT IVGToolState::OnMouseMove ( struct IVGPoint * pt );
__declspec(implementation_key(2918)) HRESULT IVGToolState::OnLButtonDown ( struct IVGPoint * pt );
__declspec(implementation_key(2919)) HRESULT IVGToolState::OnLButtonDownLeaveGrace ( struct IVGPoint * pt );
__declspec(implementation_key(2920)) HRESULT IVGToolState::OnLButtonUp ( struct IVGPoint * pt );
__declspec(implementation_key(2921)) HRESULT IVGToolState::OnLButtonDblClick ( struct IVGPoint * pt );
__declspec(implementation_key(2922)) HRESULT IVGToolState::OnClick ( struct IVGPoint * pt, VARIANT_BOOL * Handled );
__declspec(implementation_key(2923)) HRESULT IVGToolState::OnRButtonDown ( struct IVGPoint * pt, VARIANT_BOOL * Handled );
__declspec(implementation_key(2924)) HRESULT IVGToolState::OnRButtonUp ( struct IVGPoint * pt, VARIANT_BOOL * Handled );
__declspec(implementation_key(2925)) HRESULT IVGToolState::OnKeyDown ( long KeyCode, VARIANT_BOOL * Handled );
__declspec(implementation_key(2926)) HRESULT IVGToolState::OnKeyUp ( long KeyCode, VARIANT_BOOL * Handled );
__declspec(implementation_key(2927)) HRESULT IVGToolState::OnDelete ( VARIANT_BOOL * Handled );
__declspec(implementation_key(2928)) HRESULT IVGToolState::OnAbort ( );
__declspec(implementation_key(2929)) HRESULT IVGToolState::OnCommit ( struct IVGPoint * pt );
__declspec(implementation_key(2930)) HRESULT IVGToolState::OnSnapMouse ( struct IVGPoint * pt, VARIANT_BOOL * Handled );
__declspec(implementation_key(2931)) HRESULT IVGToolState::OnTimer ( long TimerId, long TimeEllapsed );
__declspec(implementation_key(2932)) VARIANT_BOOL IVGToolState::GetIsDrawing ( );
__declspec(implementation_key(2933)) HRESULT IVGOnScreenCurve::Show ( );
__declspec(implementation_key(2934)) HRESULT IVGOnScreenCurve::Hide ( );
__declspec(implementation_key(2935)) HRESULT IVGOnScreenCurve::SetPen ( long Color, long WidthInPixels, enum cdrOnScreenCurvePenStyle Style );
__declspec(implementation_key(2936)) HRESULT IVGOnScreenCurve::SetNoPen ( );
__declspec(implementation_key(2937)) HRESULT IVGOnScreenCurve::SetBrush ( long Color );
__declspec(implementation_key(2938)) HRESULT IVGOnScreenCurve::SetNoBrush ( );
__declspec(implementation_key(2939)) HRESULT IVGOnScreenCurve::SetCurve ( struct IVGCurve * Curve );
__declspec(implementation_key(2940)) HRESULT IVGOnScreenCurve::SetLine ( double x1, double y1, double x2, double y2 );
__declspec(implementation_key(2941)) HRESULT IVGOnScreenCurve::SetRectangle ( double x1, double y1, double x2, double y2 );
__declspec(implementation_key(2942)) HRESULT IVGOnScreenCurve::SetCircle ( double CenterX, double CenterY, double Radius );
__declspec(implementation_key(2943)) HRESULT IVGOnScreenCurve::SetPoints ( struct IVGPointRange * Points );
__declspec(implementation_key(2944)) IVGPointPtr IVGMathUtils::Interpolate ( struct IVGPoint * S, struct IVGPoint * E, double t );
__declspec(implementation_key(2945)) VARIANT_BOOL IVGMathUtils::IntersectLineSegments ( struct IVGPoint * S1, struct IVGPoint * E1, struct IVGPoint * S2, struct IVGPoint * E2, struct IVGPoint * * ppVal );
__declspec(implementation_key(2946)) double IVGMathUtils::DistanceToLineSegment ( struct IVGPoint * S, struct IVGPoint * E, struct IVGPoint * Point );
__declspec(implementation_key(2947)) IVGPointPtr IVGMathUtils::ClosestPointToLineSegment ( struct IVGPoint * S, struct IVGPoint * E, struct IVGPoint * Point );
__declspec(implementation_key(2948)) VARIANT_BOOL IVGMathUtils::IntersectInfiniteLines ( struct IVGPoint * S1, struct IVGPoint * E1, struct IVGPoint * S2, struct IVGPoint * E2, struct IVGPoint * * ppVal );
__declspec(implementation_key(2949)) double IVGMathUtils::DistanceToInfiniteLine ( struct IVGPoint * S, struct IVGPoint * E, struct IVGPoint * Point );
__declspec(implementation_key(2950)) IVGPointPtr IVGMathUtils::ClosestPointToInfiniteLine ( struct IVGPoint * S, struct IVGPoint * E, struct IVGPoint * Point );
__declspec(implementation_key(2951)) double IVGMathUtils::GetRandomReal ( double low, double High );
__declspec(implementation_key(2952)) long IVGMathUtils::GetRandomInteger ( long low, long High );
__declspec(implementation_key(2953)) HRESULT IVGMathUtils::FitLineToPoints ( struct IVGPointRange * Points, struct IVGPoint * * Origin, struct IVGVector * * Direction );
__declspec(implementation_key(2954)) IVGPointPtr IVGMathUtils::MidPoint ( struct IVGPoint * S, struct IVGPoint * E );
__declspec(implementation_key(2955)) IVGPointPtr IVGMathUtils::CreatePoint ( double x, double y );
__declspec(implementation_key(2956)) IVGVectorPtr IVGMathUtils::CreateVector ( double x, double y );
__declspec(implementation_key(2957)) IVGPointRangePtr IVGMathUtils::CreatePointRange ( );
__declspec(implementation_key(2958)) IVGTransformMatrixPtr IVGMathUtils::CreateIdentityTransformMatrix ( );
__declspec(implementation_key(2959)) IVGTransformMatrixPtr IVGMathUtils::CreateRotationTransformMatrix ( double Angle, double OriginX, double OriginY );
__declspec(implementation_key(2960)) IVGTransformMatrixPtr IVGMathUtils::CreateTranslationTransformMatrix ( double TranslateX, double TranslateY );
__declspec(implementation_key(2961)) IVGTransformMatrixPtr IVGMathUtils::CreateScaleTransformMatrix ( double ScaleX, double ScaleY, double OriginX, double OriginY );
__declspec(implementation_key(2962)) IVGTransformMatrixPtr IVGMathUtils::CreateLineSegmentTransformMatrix ( struct IVGPoint * FromStart, struct IVGPoint * FromEnd, struct IVGPoint * ToStart, struct IVGPoint * ToEnd );
__declspec(implementation_key(2963)) IVGApplicationPtr IVGNodeRange::GetApplication ( );
__declspec(implementation_key(2964)) IVGCurvePtr IVGNodeRange::GetParent ( );
__declspec(implementation_key(2965)) IVGNodePtr IVGNodeRange::GetItem ( long Index );
__declspec(implementation_key(2966)) long IVGNodeRange::GetCount ( );
__declspec(implementation_key(2967)) enum cdrNodeType IVGNodeRange::GetType ( );
__declspec(implementation_key(2968)) double IVGNodeRange::GetPositionX ( );
__declspec(implementation_key(2969)) double IVGNodeRange::GetPositionY ( );
__declspec(implementation_key(2970)) double IVGNodeRange::GetSizeWidth ( );
__declspec(implementation_key(2971)) double IVGNodeRange::GetSizeHeight ( );
__declspec(implementation_key(2972)) HRESULT IVGNodeRange::Add ( struct IVGNode * Node );
__declspec(implementation_key(2973)) HRESULT IVGNodeRange::Remove ( long Index );
__declspec(implementation_key(2974)) HRESULT IVGNodeRange::Move ( double DeltaX, double DeltaY, long AnchorIndex, VARIANT_BOOL ElasticMode );
__declspec(implementation_key(2975)) HRESULT IVGNodeRange::Delete ( );
__declspec(implementation_key(2976)) HRESULT IVGNodeRange::Stretch ( float RatioX, float RatioY, VARIANT_BOOL UseAnchorPoint, double StretchAnchorX, double StretchAnchorY );
__declspec(implementation_key(2977)) HRESULT IVGNodeRange::Rotate ( double Angle, VARIANT_BOOL UseCenterPoint, double RotationCenterX, double RotationCenterY );
__declspec(implementation_key(2978)) HRESULT IVGNodeRange::Skew ( double AngleX, double AngleY, VARIANT_BOOL UseAnchorPoint, double SkewAnchorX, double SkewAnchorY );
__declspec(implementation_key(2979)) HRESULT IVGNodeRange::AutoReduce ( double PrecisionMargin );
__declspec(implementation_key(2980)) HRESULT IVGNodeRange::RemoveAll ( );
__declspec(implementation_key(2981)) HRESULT IVGNodeRange::SetType ( enum cdrNodeType Type );
__declspec(implementation_key(2982)) IUnknownPtr IVGNodeRange::Get_NewEnum ( );
__declspec(implementation_key(2983)) HRESULT IVGNodeRange::AddRange ( struct IVGNodeRange * NodeRange );
__declspec(implementation_key(2984)) IVGSegmentRangePtr IVGNodeRange::GetSegmentRange ( );
__declspec(implementation_key(2985)) HRESULT IVGNodeRange::BreakApart ( );
__declspec(implementation_key(2986)) HRESULT IVGNodeRange::Smoothen ( long Smoothness );
__declspec(implementation_key(2987)) HRESULT IVGNodeRange::RemoveRange ( struct IVGNodeRange * NodeRange );
__declspec(implementation_key(2988)) HRESULT IVGNodeRange::Fillet ( double Radius, VARIANT_BOOL CombineSmoothSegments );
__declspec(implementation_key(2989)) HRESULT IVGNodeRange::Chamfer ( double DistanceA, double DistanceB, VARIANT_BOOL CombineSmoothSegments );
__declspec(implementation_key(2990)) HRESULT IVGNodeRange::Scallop ( double Radius, VARIANT_BOOL CombineSmoothSegments );
__declspec(implementation_key(2991)) HRESULT IVGNodeRange::CreateSelection ( );
__declspec(implementation_key(2992)) HRESULT IVGNodeRange::AddToSelection ( );
__declspec(implementation_key(2993)) HRESULT IVGNodeRange::RemoveFromSelection ( );
__declspec(implementation_key(2994)) IVGNodePtr IVGNodeRange::GetFirstNode ( );
__declspec(implementation_key(2995)) IVGNodePtr IVGNodeRange::GetLastNode ( );
__declspec(implementation_key(2996)) VARIANT_BOOL IVGNodeRange::GetBoundingBox ( double * x, double * y, double * Width, double * Height );
__declspec(implementation_key(2997)) IVGRectPtr IVGNodeRange::GetBoundingBox ( );
__declspec(implementation_key(2998)) IVGApplicationPtr IVGSegmentRange::GetApplication ( );
__declspec(implementation_key(2999)) IVGCurvePtr IVGSegmentRange::GetParent ( );
__declspec(implementation_key(3000)) IVGSegmentPtr IVGSegmentRange::GetItem ( long Index );
__declspec(implementation_key(3001)) long IVGSegmentRange::GetCount ( );
__declspec(implementation_key(3002)) enum cdrSegmentType IVGSegmentRange::GetType ( );
__declspec(implementation_key(3003)) double IVGSegmentRange::GetLength ( );
__declspec(implementation_key(3004)) HRESULT IVGSegmentRange::Add ( struct IVGSegment * Segment );
__declspec(implementation_key(3005)) HRESULT IVGSegmentRange::Remove ( long Index );
__declspec(implementation_key(3006)) HRESULT IVGSegmentRange::AddNode ( );
__declspec(implementation_key(3007)) HRESULT IVGSegmentRange::RemoveAll ( );
__declspec(implementation_key(3008)) HRESULT IVGSegmentRange::SetType ( enum cdrSegmentType Type );
__declspec(implementation_key(3009)) IUnknownPtr IVGSegmentRange::Get_NewEnum ( );
__declspec(implementation_key(3010)) HRESULT IVGSegmentRange::AddRange ( struct IVGSegmentRange * SegmentRange );
__declspec(implementation_key(3011)) IVGNodeRangePtr IVGSegmentRange::GetNodeRange ( );
__declspec(implementation_key(3012)) HRESULT IVGSegmentRange::RemoveRange ( struct IVGSegmentRange * SegmentRange );
__declspec(implementation_key(3013)) IVGSegmentPtr IVGSegmentRange::GetFirstSegment ( );
__declspec(implementation_key(3014)) IVGSegmentPtr IVGSegmentRange::GetLastSegment ( );
__declspec(implementation_key(3015)) HRESULT IVGSegmentRange::CreateSelection ( );
__declspec(implementation_key(3016)) HRESULT IVGSegmentRange::AddToSelection ( );
__declspec(implementation_key(3017)) HRESULT IVGSegmentRange::RemoveFromSelection ( );
__declspec(implementation_key(3018)) IVGApplicationPtr IVGSegments::GetApplication ( );
__declspec(implementation_key(3019)) IVGCurvePtr IVGSegments::GetParent ( );
__declspec(implementation_key(3020)) IVGSegmentPtr IVGSegments::GetItem ( long Index );
__declspec(implementation_key(3021)) IUnknownPtr IVGSegments::Get_NewEnum ( );
__declspec(implementation_key(3022)) long IVGSegments::GetCount ( );
__declspec(implementation_key(3023)) IVGSegmentRangePtr IVGSegments::Range ( SAFEARRAY * * IndexArray );
__declspec(implementation_key(3024)) IVGSegmentRangePtr IVGSegments::All ( );
__declspec(implementation_key(3025)) IVGSegmentRangePtr IVGSegments::AllExcluding ( SAFEARRAY * * IndexArray );
__declspec(implementation_key(3026)) IVGSegmentPtr IVGSegments::GetFirst ( );
__declspec(implementation_key(3027)) IVGSegmentPtr IVGSegments::GetLast ( );
__declspec(implementation_key(3028)) long IVGBitmap::GetSizeWidth ( );
__declspec(implementation_key(3029)) long IVGBitmap::GetSizeHeight ( );
__declspec(implementation_key(3030)) long IVGBitmap::GetResolutionX ( );
__declspec(implementation_key(3031)) long IVGBitmap::GetResolutionY ( );
__declspec(implementation_key(3032)) VARIANT_BOOL IVGBitmap::GetExternallyLinked ( );
__declspec(implementation_key(3033)) HRESULT IVGBitmap::ResolveLink ( );
__declspec(implementation_key(3034)) HRESULT IVGBitmap::UpdateLink ( );
__declspec(implementation_key(3035)) HRESULT IVGBitmap::Inflate ( long Width, long Height );
__declspec(implementation_key(3036)) _bstr_t IVGBitmap::GetLinkFileName ( );
__declspec(implementation_key(3037)) enum cdrImageType IVGBitmap::GetMode ( );
__declspec(implementation_key(3038)) ICorelExportFilterPtr IVGBitmap::SaveAs ( _bstr_t FileName, enum cdrFilter Filter, enum cdrCompressionType Compression );
__declspec(implementation_key(3039)) HRESULT IVGBitmap::Resample ( long Width, long Height, VARIANT_BOOL AntiAlias, double ResolutionX, double ResolutionY );
__declspec(implementation_key(3040)) HRESULT IVGBitmap::ConvertTo ( enum cdrImageType Mode );
__declspec(implementation_key(3041)) HRESULT IVGBitmap::ApplyBitmapEffect ( _bstr_t UndoString, _bstr_t Command );
__declspec(implementation_key(3042)) HRESULT IVGBitmap::Crop ( );
__declspec(implementation_key(3043)) VARIANT_BOOL IVGBitmap::GetTransparent ( );
__declspec(implementation_key(3044)) VARIANT_BOOL IVGBitmap::GetWatermarked ( );
__declspec(implementation_key(3045)) VARIANT_BOOL IVGBitmap::GetOPILinked ( );
__declspec(implementation_key(3046)) VARIANT_BOOL IVGBitmap::GetIsEPS ( );
__declspec(implementation_key(3047)) DATE IVGBitmap::GetExternalLinkTime ( );
__declspec(implementation_key(3048)) HRESULT IVGBitmap::ConvertToPaletted ( enum cdrImagePaletteType PaletteType, enum cdrDitherType DitherType, long DitherIntensity, long Smoothing, long NumColors, VARIANT_BOOL ColorSensitive, long TargetColor, long Importance, long Lightness, long ToleranceA, long ToleranceB, VARIANT * Palette );
__declspec(implementation_key(3049)) HRESULT IVGBitmap::ConvertToPaletted2 ( struct IVGStructPaletteOptions * Options );
__declspec(implementation_key(3050)) HRESULT IVGBitmap::ConvertToBW ( enum cdrRenderType RenderType, long Intensity, long Threshold, enum cdrHalftoneType Halftone, long HalftoneAngle, long HalftoneSize );
__declspec(implementation_key(3051)) HRESULT IVGBitmap::ResetCropEnvelope ( );
__declspec(implementation_key(3052)) VARIANT_BOOL IVGBitmap::GetEmbedded ( );
__declspec(implementation_key(3053)) VARIANT_BOOL IVGBitmap::GetCropped ( );
__declspec(implementation_key(3054)) VARIANT_BOOL IVGBitmap::GetCropEnvelopeModified ( );
__declspec(implementation_key(3055)) IVGCurvePtr IVGBitmap::GetCropEnvelope ( );
__declspec(implementation_key(3056)) IVGCurvePtr IVGBitmap::GetBoundingBoxPath ( );
__declspec(implementation_key(3057)) HRESULT IVGBitmap::ConvertToDuotone ( struct IVGDuotone * Duotone );
__declspec(implementation_key(3058)) IVGDuotonePtr IVGBitmap::GetDuotone ( );
__declspec(implementation_key(3059)) void IVGBitmap::PutLinkFileName ( _bstr_t pVal );
__declspec(implementation_key(3060)) IVGTraceSettingsPtr IVGBitmap::Trace ( enum cdrTraceType TraceType, short Smoothing, short DetailLevelPercent, enum cdrColorType ColorMode, enum cdrPaletteID PaletteID, long ColorCount, VARIANT_BOOL DeleteOriginalObject, VARIANT_BOOL RemoveBackground, VARIANT_BOOL RemoveEntireBackColor );
__declspec(implementation_key(3061)) IVGImagePtr IVGBitmap::GetImage ( );
__declspec(implementation_key(3062)) IVGImagePtr IVGBitmap::GetImageAlpha ( );
__declspec(implementation_key(3063)) HRESULT IVGBitmap::SetImageData ( struct IVGImage * Image, struct IVGImage * Alpha, long OffsetX, long OffsetY );
__declspec(implementation_key(3064)) IVGBitmapPtr IVGEPS::GetPreviewBitmap ( );
__declspec(implementation_key(3065)) SAFEARRAY * IVGEPS::GetData ( );
__declspec(implementation_key(3066)) _bstr_t IVGEPS::GetDataAsString ( );
__declspec(implementation_key(3067)) IVGCurvePtr IVGEPS::GetCropEnvelope ( );
__declspec(implementation_key(3068)) HRESULT IVGEPS::ResetCropEnvelope ( );
__declspec(implementation_key(3069)) VARIANT_BOOL IVGEPS::GetCropEnvelopeModified ( );
__declspec(implementation_key(3070)) IVGCurvePtr IVGEPS::GetBoundingBoxPath ( );
__declspec(implementation_key(3071)) _bstr_t IVGEPS::GetLinkFileName ( );
__declspec(implementation_key(3072)) void IVGEPS::PutLinkFileName ( _bstr_t pVal );
__declspec(implementation_key(3073)) SAFEARRAY * IVGEPS::GetDCSFileNames ( );
__declspec(implementation_key(3074)) enum cdrDuotoneType IVGDuotone::GetType ( );
__declspec(implementation_key(3075)) void IVGDuotone::PutType ( enum cdrDuotoneType pVal );
__declspec(implementation_key(3076)) VARIANT_BOOL IVGDuotone::GetUseOverprints ( );
__declspec(implementation_key(3077)) void IVGDuotone::PutUseOverprints ( VARIANT_BOOL pVal );
__declspec(implementation_key(3078)) long IVGDuotone::GetOverprintCount ( );
__declspec(implementation_key(3079)) IVGDuotoneOverprintPtr IVGDuotone::GetOverprints ( long Index );
__declspec(implementation_key(3080)) long IVGDuotone::GetInkCount ( );
__declspec(implementation_key(3081)) IVGDuotoneInkPtr IVGDuotone::GetInks ( long Index );
__declspec(implementation_key(3082)) IVGDuotonePtr IVGDuotone::GetCopy ( );
__declspec(implementation_key(3083)) HRESULT IVGDuotone::CopyAssign ( struct IVGDuotone * Duotone );
__declspec(implementation_key(3084)) HRESULT IVGDuotone::ResetOverprints ( );
__declspec(implementation_key(3085)) VARIANT_BOOL IVGDuotone::Load ( _bstr_t FileName );
__declspec(implementation_key(3086)) VARIANT_BOOL IVGDuotone::Save ( _bstr_t FileName );
__declspec(implementation_key(3087)) long IVGDuotoneOverprint::GetCyan ( );
__declspec(implementation_key(3088)) void IVGDuotoneOverprint::PutCyan ( long pVal );
__declspec(implementation_key(3089)) long IVGDuotoneOverprint::GetMagenta ( );
__declspec(implementation_key(3090)) void IVGDuotoneOverprint::PutMagenta ( long pVal );
__declspec(implementation_key(3091)) long IVGDuotoneOverprint::GetYellow ( );
__declspec(implementation_key(3092)) void IVGDuotoneOverprint::PutYellow ( long pVal );
__declspec(implementation_key(3093)) long IVGDuotoneOverprint::GetBlack ( );
__declspec(implementation_key(3094)) void IVGDuotoneOverprint::PutBlack ( long pVal );
__declspec(implementation_key(3095)) IVGColorPtr IVGDuotoneOverprint::GetColor ( );
__declspec(implementation_key(3096)) void IVGDuotoneOverprint::PutColor ( struct IVGColor * ppVal );
__declspec(implementation_key(3097)) HRESULT IVGDuotoneOverprint::Reset ( );
__declspec(implementation_key(3098)) HRESULT IVGDuotoneOverprint::SetValues ( long Cyan, long Magenta, long Yellow, long Black );
__declspec(implementation_key(3099)) IDispatchPtr IVGColor::GetApplication ( );
__declspec(implementation_key(3100)) IDispatchPtr IVGColor::GetParent ( );
__declspec(implementation_key(3101)) enum cdrColorType IVGColor::GetType ( );
__declspec(implementation_key(3102)) HRESULT IVGColor::RGBAssign ( long Red, long Green, long Blue );
__declspec(implementation_key(3103)) long IVGColor::GetRGBRed ( );
__declspec(implementation_key(3104)) void IVGColor::PutRGBRed ( long pVal );
__declspec(implementation_key(3105)) long IVGColor::GetRGBGreen ( );
__declspec(implementation_key(3106)) void IVGColor::PutRGBGreen ( long pVal );
__declspec(implementation_key(3107)) long IVGColor::GetRGBBlue ( );
__declspec(implementation_key(3108)) void IVGColor::PutRGBBlue ( long pVal );
__declspec(implementation_key(3109)) HRESULT IVGColor::ConvertToRGB ( );
__declspec(implementation_key(3110)) HRESULT IVGColor::CMYKAssign ( long Cyan, long Magenta, long Yellow, long Black );
__declspec(implementation_key(3111)) long IVGColor::GetCMYKCyan ( );
__declspec(implementation_key(3112)) void IVGColor::PutCMYKCyan ( long pVal );
__declspec(implementation_key(3113)) long IVGColor::GetCMYKYellow ( );
__declspec(implementation_key(3114)) void IVGColor::PutCMYKYellow ( long pVal );
__declspec(implementation_key(3115)) long IVGColor::GetCMYKMagenta ( );
__declspec(implementation_key(3116)) void IVGColor::PutCMYKMagenta ( long pVal );
__declspec(implementation_key(3117)) long IVGColor::GetCMYKBlack ( );
__declspec(implementation_key(3118)) void IVGColor::PutCMYKBlack ( long pVal );
__declspec(implementation_key(3119)) HRESULT IVGColor::ConvertToCMYK ( );
__declspec(implementation_key(3120)) HRESULT IVGColor::CMYAssign ( long Cyan, long Magenta, long Yellow );
__declspec(implementation_key(3121)) long IVGColor::GetCMYCyan ( );
__declspec(implementation_key(3122)) void IVGColor::PutCMYCyan ( long pVal );
__declspec(implementation_key(3123)) long IVGColor::GetCMYMagenta ( );
__declspec(implementation_key(3124)) void IVGColor::PutCMYMagenta ( long pVal );
__declspec(implementation_key(3125)) long IVGColor::GetCMYYellow ( );
__declspec(implementation_key(3126)) void IVGColor::PutCMYYellow ( long pVal );
__declspec(implementation_key(3127)) HRESULT IVGColor::ConvertToCMY ( );
__declspec(implementation_key(3128)) HRESULT IVGColor::HSBAssign ( long Hue, long Saturation, long Brightness );
__declspec(implementation_key(3129)) long IVGColor::GetHSBHue ( );
__declspec(implementation_key(3130)) void IVGColor::PutHSBHue ( long pVal );
__declspec(implementation_key(3131)) long IVGColor::GetHSBSaturation ( );
__declspec(implementation_key(3132)) void IVGColor::PutHSBSaturation ( long pVal );
__declspec(implementation_key(3133)) long IVGColor::GetHSBBrightness ( );
__declspec(implementation_key(3134)) void IVGColor::PutHSBBrightness ( long pVal );
__declspec(implementation_key(3135)) HRESULT IVGColor::ConvertToHSB ( );
__declspec(implementation_key(3136)) HRESULT IVGColor::HLSAssign ( long Hue, long Lightness, long Saturation );
__declspec(implementation_key(3137)) long IVGColor::GetHLSHue ( );
__declspec(implementation_key(3138)) void IVGColor::PutHLSHue ( long pVal );
__declspec(implementation_key(3139)) long IVGColor::GetHLSLightness ( );
__declspec(implementation_key(3140)) void IVGColor::PutHLSLightness ( long pVal );
__declspec(implementation_key(3141)) long IVGColor::GetHLSSaturation ( );
__declspec(implementation_key(3142)) void IVGColor::PutHLSSaturation ( long pVal );
__declspec(implementation_key(3143)) HRESULT IVGColor::ConvertToHLS ( );
__declspec(implementation_key(3144)) HRESULT IVGColor::BWAssign ( VARIANT_BOOL White );
__declspec(implementation_key(3145)) VARIANT_BOOL IVGColor::GetBW ( );
__declspec(implementation_key(3146)) void IVGColor::PutBW ( VARIANT_BOOL pVal );
__declspec(implementation_key(3147)) HRESULT IVGColor::ConvertToBW ( );
__declspec(implementation_key(3148)) HRESULT IVGColor::GrayAssign ( long GrayValue );
__declspec(implementation_key(3149)) long IVGColor::GetGray ( );
__declspec(implementation_key(3150)) void IVGColor::PutGray ( long pVal );
__declspec(implementation_key(3151)) HRESULT IVGColor::ConvertToGray ( );
__declspec(implementation_key(3152)) HRESULT IVGColor::CorelScriptAssign ( long ColorModel, long V1, long V2, long V3, long V4, long V5, long V6, long V7 );
__declspec(implementation_key(3153)) HRESULT IVGColor::CorelScriptGetComponent ( long * ColorModel, long * V1, long * V2, long * V3, long * V4, long * V5, long * V6, long * V7 );
__declspec(implementation_key(3154)) HRESULT IVGColor::UserAssign ( long ParentWindowHandle );
__declspec(implementation_key(3155)) HRESULT IVGColor::CopyAssign ( struct IVGColor * Color );
__declspec(implementation_key(3156)) _bstr_t IVGColor::GetName ( VARIANT_BOOL Components );
__declspec(implementation_key(3157)) HRESULT IVGColor::YIQAssign ( long y, long I, long Q );
__declspec(implementation_key(3158)) long IVGColor::GetYIQLuminanceY ( );
__declspec(implementation_key(3159)) void IVGColor::PutYIQLuminanceY ( long pVal );
__declspec(implementation_key(3160)) long IVGColor::GetYIQChromaI ( );
__declspec(implementation_key(3161)) void IVGColor::PutYIQChromaI ( long pVal );
__declspec(implementation_key(3162)) long IVGColor::GetYIQChromaQ ( );
__declspec(implementation_key(3163)) void IVGColor::PutYIQChromaQ ( long pVal );
__declspec(implementation_key(3164)) HRESULT IVGColor::ConvertToYIQ ( );
__declspec(implementation_key(3165)) HRESULT IVGColor::LabAssign ( long L, long A, long B );
__declspec(implementation_key(3166)) long IVGColor::GetLabLuminance ( );
__declspec(implementation_key(3167)) void IVGColor::PutLabLuminance ( long pVal );
__declspec(implementation_key(3168)) long IVGColor::GetLabComponentA ( );
__declspec(implementation_key(3169)) void IVGColor::PutLabComponentA ( long pVal );
__declspec(implementation_key(3170)) long IVGColor::GetLabComponentB ( );
__declspec(implementation_key(3171)) void IVGColor::PutLabComponentB ( long pVal );
__declspec(implementation_key(3172)) HRESULT IVGColor::ConvertToLab ( );
__declspec(implementation_key(3173)) HRESULT IVGColor::RegistrationAssign ( );
__declspec(implementation_key(3174)) HRESULT IVGColor::FixedAssign ( enum cdrPaletteID PaletteID, long PaletteIndex, long Tint );
__declspec(implementation_key(3175)) enum cdrPaletteID IVGColor::GetPaletteID ( );
__declspec(implementation_key(3176)) long IVGColor::GetPaletteIndex ( );
__declspec(implementation_key(3177)) void IVGColor::PutPaletteIndex ( long pVal );
__declspec(implementation_key(3178)) long IVGColor::GetTint ( );
__declspec(implementation_key(3179)) void IVGColor::PutTint ( long pVal );
__declspec(implementation_key(3180)) HRESULT IVGColor::ConvertToFixed ( enum cdrPaletteID PaletteID );
__declspec(implementation_key(3181)) VARIANT_BOOL IVGColor::UserAssignEx ( long ParentWindowHandle );
__declspec(implementation_key(3182)) HRESULT IVGColor::SetName ( _bstr_t Name );
__declspec(implementation_key(3183)) HRESULT IVGColor::BlendWith ( struct IVGColor * Color, long MixRatio );
__declspec(implementation_key(3184)) VARIANT_BOOL IVGColor::IsSame ( struct IVGColor * Color );
__declspec(implementation_key(3185)) VARIANT_BOOL IVGColor::GetIsInGamut ( );
__declspec(implementation_key(3186)) IVGColorPtr IVGColor::GetInGamutColor ( );
__declspec(implementation_key(3187)) VARIANT_BOOL IVGColor::GetIsCMYK ( );
__declspec(implementation_key(3188)) VARIANT_BOOL IVGColor::GetIsGray ( );
__declspec(implementation_key(3189)) VARIANT_BOOL IVGColor::GetIsWhite ( );
__declspec(implementation_key(3190)) VARIANT_BOOL IVGColor::GetIsSpot ( );
__declspec(implementation_key(3191)) VARIANT_BOOL IVGColor::GetIsTintable ( );
__declspec(implementation_key(3192)) VARIANT_BOOL IVGColor::GetIsValidDuotoneColor ( );
__declspec(implementation_key(3193)) IVGColorPtr IVGColor::GetValidDuotoneColor ( );
__declspec(implementation_key(3194)) long IVGColor::GetColorDistanceFrom ( struct IVGColor * Color );
__declspec(implementation_key(3195)) VARIANT_BOOL IVGColor::IsSimilar ( struct IVGColor * Color );
__declspec(implementation_key(3196)) _bstr_t IVGColor::ToString ( );
__declspec(implementation_key(3197)) VARIANT_BOOL IVGColor::StringAssign ( _bstr_t ColorString );
__declspec(implementation_key(3198)) HRESULT IVGColor::Invalidate ( );
__declspec(implementation_key(3199)) _bstr_t IVGColor::GetHexValue ( );
__declspec(implementation_key(3200)) void IVGColor::PutHexValue ( _bstr_t pVal );
__declspec(implementation_key(3201)) IVGColorPtr IVGColor::GetCopy ( );
__declspec(implementation_key(3202)) long IVGColor::GetRGBValue ( );
__declspec(implementation_key(3203)) void IVGColor::PutRGBValue ( long pVal );
__declspec(implementation_key(3204)) HRESULT IVGColor::CopyAppearance ( struct IVGColor * Color, struct IVGColorContext * SourceColorContext );
__declspec(implementation_key(3205)) IVGColorContextPtr IVGColor::GetColorContext ( );
__declspec(implementation_key(3206)) VARIANT_BOOL IVGColor::ConvertTo ( enum cdrColorType ColorType, struct IVGColorContext * DestinationColorContext, struct IVGColorContext * SourceColorContext );
__declspec(implementation_key(3207)) IVGPalettePtr IVGColor::GetPalette ( );
__declspec(implementation_key(3208)) HRESULT IVGColor::SpotAssign ( _bstr_t PaletteIdentifier, long SpotColorID, long Tint );
__declspec(implementation_key(3209)) HRESULT IVGColor::SpotAssignByName ( _bstr_t PaletteIdentifier, _bstr_t SpotColorName, long Tint );
__declspec(implementation_key(3210)) HRESULT IVGColor::ConvertToPalette ( _bstr_t PaletteIdentifier );
__declspec(implementation_key(3211)) long IVGColor::GetSpotColorID ( );
__declspec(implementation_key(3212)) void IVGColor::PutSpotColorID ( long pVal );
__declspec(implementation_key(3213)) _bstr_t IVGColor::GetSpotColorName ( );
__declspec(implementation_key(3214)) HRESULT IVGColor::PaletteAssign ( _bstr_t PaletteIdentifier, long ColorIndex );
__declspec(implementation_key(3215)) _bstr_t IVGColor::GetPaletteIdentifier ( );
__declspec(implementation_key(3216)) VARIANT_BOOL IVGColor::GetIsColorStyle ( );
__declspec(implementation_key(3217)) _bstr_t IVGColor::GetColorStyleName ( );
__declspec(implementation_key(3218)) HRESULT IVGColor::ModifyColorStyleColor ( struct IVGColor * Color, VARIANT_BOOL ChangeWholeHarmony );
__declspec(implementation_key(3219)) IVGColorPtr IVGDuotoneInk::GetColor ( );
__declspec(implementation_key(3220)) void IVGDuotoneInk::PutColor ( struct IVGColor * ppVal );
__declspec(implementation_key(3221)) long IVGDuotoneInk::GetHandleCount ( );
__declspec(implementation_key(3222)) long IVGDuotoneInk::GetHandleX ( long Index );
__declspec(implementation_key(3223)) void IVGDuotoneInk::PutHandleX ( long Index, long pVal );
__declspec(implementation_key(3224)) long IVGDuotoneInk::GetHandleY ( long Index );
__declspec(implementation_key(3225)) void IVGDuotoneInk::PutHandleY ( long Index, long pVal );
__declspec(implementation_key(3226)) long IVGDuotoneInk::AddHandle ( long x, long y );
__declspec(implementation_key(3227)) VARIANT_BOOL IVGDuotoneInk::RemoveHandle ( long Index );
__declspec(implementation_key(3228)) long IVGDuotoneInk::FindHandle ( long x, long y );
__declspec(implementation_key(3229)) VARIANT_BOOL IVGDuotoneInk::Load ( _bstr_t FileName );
__declspec(implementation_key(3230)) VARIANT_BOOL IVGDuotoneInk::Save ( _bstr_t FileName );
__declspec(implementation_key(3231)) long IVGDuotoneInk::GetCurveLevel ( long Index );
__declspec(implementation_key(3232)) HRESULT IVGDuotoneInk::Reset ( );
__declspec(implementation_key(3233)) SAFEARRAY * IVGDuotoneInk::GetCurveLevels ( );
__declspec(implementation_key(3234)) SAFEARRAY * IVGDuotoneInk::GetHandles ( );
__declspec(implementation_key(3235)) HRESULT IVGDuotoneInk::PutHandles ( const _variant_t & HandleArray, long NumElements );
__declspec(implementation_key(3236)) long IVGFountainColor::GetPosition ( );
__declspec(implementation_key(3237)) IVGColorPtr IVGFountainColor::GetColor ( );
__declspec(implementation_key(3238)) void IVGFountainColor::PutColor ( struct IVGColor * ppVal );
__declspec(implementation_key(3239)) HRESULT IVGFountainColor::Move ( long NewPosition );
__declspec(implementation_key(3240)) HRESULT IVGFountainColor::Delete ( );
__declspec(implementation_key(3241)) long IVGFountainColor::GetMidPoint ( );
__declspec(implementation_key(3242)) void IVGFountainColor::PutMidPoint ( long pVal );
__declspec(implementation_key(3243)) enum cdrFountainFillBlendType IVGFountainColor::GetBlendType ( );
__declspec(implementation_key(3244)) void IVGFountainColor::PutBlendType ( enum cdrFountainFillBlendType pVal );
__declspec(implementation_key(3245)) unsigned char IVGFountainColor::GetOpacity ( );
__declspec(implementation_key(3246)) void IVGFountainColor::PutOpacity ( unsigned char pVal );
__declspec(implementation_key(3247)) IVGFountainColorPtr IVGFountainColors::GetItem ( long Index );
__declspec(implementation_key(3248)) void IVGFountainColors::PutItem ( long Index, struct IVGFountainColor * ppVal );
__declspec(implementation_key(3249)) IUnknownPtr IVGFountainColors::Get_NewEnum ( );
__declspec(implementation_key(3250)) long IVGFountainColors::GetCount ( );
__declspec(implementation_key(3251)) HRESULT IVGFountainColors::Add ( struct IVGColor * Color, long Position );
__declspec(implementation_key(3252)) long IVGFountainColors::GetGrayLevel ( long Index );
__declspec(implementation_key(3253)) void IVGFountainColors::PutGrayLevel ( long Index, long pVal );
__declspec(implementation_key(3254)) HRESULT IVGFountainColors::AddGrayLevel ( long GrayLevel, long Position );
__declspec(implementation_key(3255)) IVGFountainColorPtr IVGFountainColors::GetFirst ( );
__declspec(implementation_key(3256)) IVGFountainColorPtr IVGFountainColors::GetLast ( );
__declspec(implementation_key(3257)) enum cdrFountainFillType IVGFountainFill::GetType ( );
__declspec(implementation_key(3258)) void IVGFountainFill::PutType ( enum cdrFountainFillType pVal );
__declspec(implementation_key(3259)) double IVGFountainFill::GetStartX ( );
__declspec(implementation_key(3260)) void IVGFountainFill::PutStartX ( double pVal );
__declspec(implementation_key(3261)) double IVGFountainFill::GetStartY ( );
__declspec(implementation_key(3262)) void IVGFountainFill::PutStartY ( double pVal );
__declspec(implementation_key(3263)) double IVGFountainFill::GetEndX ( );
__declspec(implementation_key(3264)) void IVGFountainFill::PutEndX ( double pVal );
__declspec(implementation_key(3265)) double IVGFountainFill::GetEndY ( );
__declspec(implementation_key(3266)) void IVGFountainFill::PutEndY ( double pVal );
__declspec(implementation_key(3267)) double IVGFountainFill::GetAngle ( );
__declspec(implementation_key(3268)) HRESULT IVGFountainFill::SetAngle ( double Angle );
__declspec(implementation_key(3269)) HRESULT IVGFountainFill::Translate ( double x, double y );
__declspec(implementation_key(3270)) long IVGFountainFill::GetEdgePad ( );
__declspec(implementation_key(3271)) long IVGFountainFill::GetSteps ( );
__declspec(implementation_key(3272)) void IVGFountainFill::PutSteps ( long pVal );
__declspec(implementation_key(3273)) enum cdrFountainFillBlendType IVGFountainFill::GetBlendType ( );
__declspec(implementation_key(3274)) void IVGFountainFill::PutBlendType ( enum cdrFountainFillBlendType pVal );
__declspec(implementation_key(3275)) long IVGFountainFill::GetMidPoint ( );
__declspec(implementation_key(3276)) void IVGFountainFill::PutMidPoint ( long pVal );
__declspec(implementation_key(3277)) IVGFountainColorsPtr IVGFountainFill::GetColors ( );
__declspec(implementation_key(3278)) IVGColorPtr IVGFountainFill::GetStartColor ( );
__declspec(implementation_key(3279)) void IVGFountainFill::PutStartColor ( struct IVGColor * ppVal );
__declspec(implementation_key(3280)) IVGColorPtr IVGFountainFill::GetEndColor ( );
__declspec(implementation_key(3281)) void IVGFountainFill::PutEndColor ( struct IVGColor * ppVal );
__declspec(implementation_key(3282)) void IVGFountainFill::PutColors ( struct IVGFountainColors * ppVal );
__declspec(implementation_key(3283)) HRESULT IVGFountainFill::SetEdgePad ( long EdgePad );
__declspec(implementation_key(3284)) double IVGFountainFill::GetCenterOffsetX ( );
__declspec(implementation_key(3285)) void IVGFountainFill::PutCenterOffsetX ( double pVal );
__declspec(implementation_key(3286)) double IVGFountainFill::GetCenterOffsetY ( );
__declspec(implementation_key(3287)) void IVGFountainFill::PutCenterOffsetY ( double pVal );
__declspec(implementation_key(3288)) VARIANT_BOOL IVGFountainFill::GetSmoothBlend ( );
__declspec(implementation_key(3289)) void IVGFountainFill::PutSmoothBlend ( VARIANT_BOOL pVal );
__declspec(implementation_key(3290)) enum cdrFountainFillSpreadMethod IVGFountainFill::GetSpreadMethod ( );
__declspec(implementation_key(3291)) void IVGFountainFill::PutSpreadMethod ( enum cdrFountainFillSpreadMethod pVal );
__declspec(implementation_key(3292)) VARIANT_BOOL IVGFountainFill::GetAnisotropic ( );
__declspec(implementation_key(3293)) void IVGFountainFill::PutAnisotropic ( VARIANT_BOOL pVal );
__declspec(implementation_key(3294)) VARIANT_BOOL IVGFountainFill::GetIsTransparent ( );
__declspec(implementation_key(3295)) enum cdrMergeMode IVGFountainFill::GetMergeMode ( );
__declspec(implementation_key(3296)) void IVGFountainFill::PutMergeMode ( enum cdrMergeMode pVal );
__declspec(implementation_key(3297)) double IVGFountainFill::GetScaleX ( );
__declspec(implementation_key(3298)) void IVGFountainFill::PutScaleX ( double pVal );
__declspec(implementation_key(3299)) double IVGFountainFill::GetScaleY ( );
__declspec(implementation_key(3300)) void IVGFountainFill::PutScaleY ( double pVal );
__declspec(implementation_key(3301)) double IVGFountainFill::GetSkew ( );
__declspec(implementation_key(3302)) void IVGFountainFill::PutSkew ( double pVal );
__declspec(implementation_key(3303)) double IVGFountainFill::GetBlendAcceleration ( );
__declspec(implementation_key(3304)) void IVGFountainFill::PutBlendAcceleration ( double pVal );
__declspec(implementation_key(3305)) HRESULT IVGFountainFill::MakeOpaque ( );
__declspec(implementation_key(3306)) HRESULT IVGFountainFill::GetTransformations ( double * d11, double * d12, double * d21, double * d22 );
__declspec(implementation_key(3307)) HRESULT IVGFountainFill::SetTransformations ( double d11, double d12, double d21, double d22 );
__declspec(implementation_key(3308)) VARIANT_BOOL IVGFountainFill::GetHasHSBBlends ( );
__declspec(implementation_key(3309)) VARIANT_BOOL IVGFountainFill::GetHasNonLinearBlends ( );
__declspec(implementation_key(3310)) double IVGFountainFill::GetEnd2X ( );
__declspec(implementation_key(3311)) void IVGFountainFill::PutEnd2X ( double pVal );
__declspec(implementation_key(3312)) double IVGFountainFill::GetEnd2Y ( );
__declspec(implementation_key(3313)) void IVGFountainFill::PutEnd2Y ( double pVal );
__declspec(implementation_key(3314)) enum cdrPatternFillType IVGPatternFill::GetType ( );
__declspec(implementation_key(3315)) void IVGPatternFill::PutType ( enum cdrPatternFillType pVal );
__declspec(implementation_key(3316)) IVGColorPtr IVGPatternFill::GetFrontColor ( );
__declspec(implementation_key(3317)) void IVGPatternFill::PutFrontColor ( struct IVGColor * ppVal );
__declspec(implementation_key(3318)) IVGColorPtr IVGPatternFill::GetBackColor ( );
__declspec(implementation_key(3319)) void IVGPatternFill::PutBackColor ( struct IVGColor * ppVal );
__declspec(implementation_key(3320)) IVGPatternCanvasPtr IVGPatternFill::GetCanvas ( );
__declspec(implementation_key(3321)) void IVGPatternFill::PutCanvas ( struct IVGPatternCanvas * ppVal );
__declspec(implementation_key(3322)) _bstr_t IVGPatternFill::GetFilePath ( );
__declspec(implementation_key(3323)) double IVGPatternFill::GetOriginX ( );
__declspec(implementation_key(3324)) void IVGPatternFill::PutOriginX ( double pVal );
__declspec(implementation_key(3325)) double IVGPatternFill::GetOriginY ( );
__declspec(implementation_key(3326)) void IVGPatternFill::PutOriginY ( double pVal );
__declspec(implementation_key(3327)) double IVGPatternFill::GetTileWidth ( );
__declspec(implementation_key(3328)) void IVGPatternFill::PutTileWidth ( double pVal );
__declspec(implementation_key(3329)) double IVGPatternFill::GetTileHeight ( );
__declspec(implementation_key(3330)) void IVGPatternFill::PutTileHeight ( double pVal );
__declspec(implementation_key(3331)) enum cdrTileOffsetType IVGPatternFill::GetTileOffsetType ( );
__declspec(implementation_key(3332)) void IVGPatternFill::PutTileOffsetType ( enum cdrTileOffsetType pVal );
__declspec(implementation_key(3333)) long IVGPatternFill::GetTileOffset ( );
__declspec(implementation_key(3334)) void IVGPatternFill::PutTileOffset ( long pVal );
__declspec(implementation_key(3335)) double IVGPatternFill::GetSkewAngle ( );
__declspec(implementation_key(3336)) void IVGPatternFill::PutSkewAngle ( double pVal );
__declspec(implementation_key(3337)) double IVGPatternFill::GetRotationAngle ( );
__declspec(implementation_key(3338)) void IVGPatternFill::PutRotationAngle ( double pVal );
__declspec(implementation_key(3339)) VARIANT_BOOL IVGPatternFill::GetTransformWithShape ( );
__declspec(implementation_key(3340)) void IVGPatternFill::PutTransformWithShape ( VARIANT_BOOL pVal );
__declspec(implementation_key(3341)) VARIANT_BOOL IVGPatternFill::Load ( _bstr_t FileName );
__declspec(implementation_key(3342)) VARIANT_BOOL IVGPatternFill::GetMirrorFill ( );
__declspec(implementation_key(3343)) void IVGPatternFill::PutMirrorFill ( VARIANT_BOOL pVal );
__declspec(implementation_key(3344)) VARIANT_BOOL IVGPatternFill::GetMirrorFillX ( );
__declspec(implementation_key(3345)) void IVGPatternFill::PutMirrorFillX ( VARIANT_BOOL pVal );
__declspec(implementation_key(3346)) VARIANT_BOOL IVGPatternFill::GetMirrorFillY ( );
__declspec(implementation_key(3347)) void IVGPatternFill::PutMirrorFillY ( VARIANT_BOOL pVal );
__declspec(implementation_key(3348)) double IVGOutline::GetWidth ( );
__declspec(implementation_key(3349)) void IVGOutline::PutWidth ( double pVal );
__declspec(implementation_key(3350)) IVGColorPtr IVGOutline::GetColor ( );
__declspec(implementation_key(3351)) void IVGOutline::PutColor ( struct IVGColor * ppVal );
__declspec(implementation_key(3352)) IVGShapePtr IVGOutline::ConvertToObject ( );
__declspec(implementation_key(3353)) enum cdrOutlineType IVGOutline::GetType ( );
__declspec(implementation_key(3354)) void IVGOutline::PutType ( enum cdrOutlineType Type );
__declspec(implementation_key(3355)) IVGOutlineStylePtr IVGOutline::GetStyle ( );
__declspec(implementation_key(3356)) void IVGOutline::PutStyle ( struct IVGOutlineStyle * ppStyle );
__declspec(implementation_key(3357)) IVGArrowHeadPtr IVGOutline::GetStartArrow ( );
__declspec(implementation_key(3358)) void IVGOutline::PutStartArrow ( struct IVGArrowHead * ppArrowHead );
__declspec(implementation_key(3359)) IVGArrowHeadPtr IVGOutline::GetEndArrow ( );
__declspec(implementation_key(3360)) void IVGOutline::PutEndArrow ( struct IVGArrowHead * ppArrowHead );
__declspec(implementation_key(3361)) long IVGOutline::GetNibStretch ( );
__declspec(implementation_key(3362)) void IVGOutline::PutNibStretch ( long pVal );
__declspec(implementation_key(3363)) double IVGOutline::GetNibAngle ( );
__declspec(implementation_key(3364)) void IVGOutline::PutNibAngle ( double pVal );
__declspec(implementation_key(3365)) VARIANT_BOOL IVGOutline::GetBehindFill ( );
__declspec(implementation_key(3366)) void IVGOutline::PutBehindFill ( VARIANT_BOOL pVal );
__declspec(implementation_key(3367)) enum cdrOutlineLineCaps IVGOutline::GetLineCaps ( );
__declspec(implementation_key(3368)) void IVGOutline::PutLineCaps ( enum cdrOutlineLineCaps pVal );
__declspec(implementation_key(3369)) enum cdrOutlineLineJoin IVGOutline::GetLineJoin ( );
__declspec(implementation_key(3370)) void IVGOutline::PutLineJoin ( enum cdrOutlineLineJoin pVal );
__declspec(implementation_key(3371)) VARIANT_BOOL IVGOutline::GetScaleWithShape ( );
__declspec(implementation_key(3372)) void IVGOutline::PutScaleWithShape ( VARIANT_BOOL pVal );
__declspec(implementation_key(3373)) HRESULT IVGOutline::SetProperties ( double Width, struct IVGOutlineStyle * Style, struct IVGColor * Color, struct IVGArrowHead * StartArrow, struct IVGArrowHead * EndArrow, enum cdrTriState BehindFill, enum cdrTriState ScaleWithShape, enum cdrOutlineLineCaps LineCaps, enum cdrOutlineLineJoin LineJoin, double NibAngle, long NibStretch, double DashDotLength, double PenWidth, double MiterLimit );
__declspec(implementation_key(3374)) double IVGOutline::GetSize ( );
__declspec(implementation_key(3375)) void IVGOutline::PutSize ( double pVal );
__declspec(implementation_key(3376)) IVGOutlinePtr IVGOutline::GetCopy ( );
__declspec(implementation_key(3377)) HRESULT IVGOutline::CopyAssign ( struct IVGOutline * SourceOutline );
__declspec(implementation_key(3378)) VARIANT_BOOL IVGOutline::UserAssign ( long ParentWindowHandle );
__declspec(implementation_key(3379)) IVGPSScreenOptionsPtr IVGOutline::GetPSScreen ( );
__declspec(implementation_key(3380)) VARIANT_BOOL IVGOutline::CompareWith ( struct IVGOutline * Outline );
__declspec(implementation_key(3381)) double IVGOutline::GetDashDotLength ( );
__declspec(implementation_key(3382)) void IVGOutline::PutDashDotLength ( double pVal );
__declspec(implementation_key(3383)) _bstr_t IVGOutline::ToString ( );
__declspec(implementation_key(3384)) VARIANT_BOOL IVGOutline::StringAssign ( _bstr_t OutlineString );
__declspec(implementation_key(3385)) double IVGOutline::GetPenWidth ( );
__declspec(implementation_key(3386)) void IVGOutline::PutPenWidth ( double pVal );
__declspec(implementation_key(3387)) double IVGOutline::GetMiterLimit ( );
__declspec(implementation_key(3388)) void IVGOutline::PutMiterLimit ( double pVal );
__declspec(implementation_key(3389)) HRESULT IVGOutline::SetNoOutline ( );
__declspec(implementation_key(3390)) IVGArrowHeadOptionsPtr IVGOutline::GetStartArrowOptions ( );
__declspec(implementation_key(3391)) void IVGOutline::PutStartArrowOptions ( struct IVGArrowHeadOptions * ppVal );
__declspec(implementation_key(3392)) IVGArrowHeadOptionsPtr IVGOutline::GetEndArrowOptions ( );
__declspec(implementation_key(3393)) void IVGOutline::PutEndArrowOptions ( struct IVGArrowHeadOptions * ppVal );
__declspec(implementation_key(3394)) enum cdrOutlineJustification IVGOutline::GetJustification ( );
__declspec(implementation_key(3395)) void IVGOutline::PutJustification ( enum cdrOutlineJustification pVal );
__declspec(implementation_key(3396)) HRESULT IVGOutline::SetPropertiesEx ( double Width, struct IVGOutlineStyle * Style, struct IVGColor * Color, struct IVGArrowHead * StartArrow, struct IVGArrowHead * EndArrow, enum cdrTriState BehindFill, enum cdrTriState ScaleWithShape, enum cdrOutlineLineCaps LineCaps, enum cdrOutlineLineJoin LineJoin, double NibAngle, long NibStretch, double DashDotLength, double PenWidth, double MiterLimit, enum cdrOutlineJustification Justification );
__declspec(implementation_key(3397)) enum cdrOutlineDashAdjust IVGOutline::GetAdjustDashes ( );
__declspec(implementation_key(3398)) void IVGOutline::PutAdjustDashes ( enum cdrOutlineDashAdjust pVal );
__declspec(implementation_key(3399)) double IVGHatchPattern::GetAngle ( );
__declspec(implementation_key(3400)) void IVGHatchPattern::PutAngle ( double pVal );
__declspec(implementation_key(3401)) double IVGHatchPattern::GetOriginX ( );
__declspec(implementation_key(3402)) void IVGHatchPattern::PutOriginX ( double pVal );
__declspec(implementation_key(3403)) double IVGHatchPattern::GetOriginY ( );
__declspec(implementation_key(3404)) void IVGHatchPattern::PutOriginY ( double pVal );
__declspec(implementation_key(3405)) double IVGHatchPattern::GetSpacing ( );
__declspec(implementation_key(3406)) void IVGHatchPattern::PutSpacing ( double pVal );
__declspec(implementation_key(3407)) double IVGHatchPattern::GetShift ( );
__declspec(implementation_key(3408)) void IVGHatchPattern::PutShift ( double pVal );
__declspec(implementation_key(3409)) double IVGHatchPattern::GetShiftPercent ( );
__declspec(implementation_key(3410)) void IVGHatchPattern::PutShiftPercent ( double pVal );
__declspec(implementation_key(3411)) IVGOutlinePtr IVGHatchPattern::GetOutline ( );
__declspec(implementation_key(3412)) long IVGHatchPattern::GetIndex ( );
__declspec(implementation_key(3413)) HRESULT IVGHatchPattern::Delete ( );
__declspec(implementation_key(3414)) HRESULT IVGHatchPattern::SetOrigin ( double OriginX, double OriginY );
__declspec(implementation_key(3415)) HRESULT IVGHatchPattern::GetOrigin ( double * OriginX, double * OriginY );
__declspec(implementation_key(3416)) HRESULT IVGHatchPattern::SetProperties ( const _variant_t & Angle, double Spacing, const _variant_t & Shift, const _variant_t & OriginX, const _variant_t & OriginY, double Width, struct IVGColor * Color, struct IVGOutlineStyle * Style, double DashDotLength, double PenWidth );
__declspec(implementation_key(3417)) HRESULT IVGHatchPattern::Reset ( );
__declspec(implementation_key(3418)) long IVGHatchPatterns::GetCount ( );
__declspec(implementation_key(3419)) IVGHatchPatternPtr IVGHatchPatterns::GetItem ( long Index );
__declspec(implementation_key(3420)) IUnknownPtr IVGHatchPatterns::Get_NewEnum ( );
__declspec(implementation_key(3421)) HRESULT IVGHatchPatterns::Reset ( );
__declspec(implementation_key(3422)) enum cdrImageType IVGImage::GetType ( );
__declspec(implementation_key(3423)) long IVGImage::GetWidth ( );
__declspec(implementation_key(3424)) long IVGImage::GetHeight ( );
__declspec(implementation_key(3425)) IVGColorPtr IVGImage::GetPixel ( long x, long y );
__declspec(implementation_key(3426)) IVGImagePtr IVGImage::GetCopy ( );
__declspec(implementation_key(3427)) VARIANT_BOOL IVGImage::GetReadOnly ( );
__declspec(implementation_key(3428)) IVGImageTilesPtr IVGImage::GetTiles ( );
__declspec(implementation_key(3429)) HRESULT IVGImage::Blit ( long DestX, long DestY, long DestWidth, long DestHeight, struct IVGImage * SrcImage, long SrcX, long SrcY, long SrcWidth, long SrcHeight, enum cdrMergeMode MergeMode );
__declspec(implementation_key(3430)) HRESULT IVGImage::FillArea ( long x, long y, long Width, long Height, struct IVGColor * Color );
__declspec(implementation_key(3431)) HRESULT IVGImage::FlipArea ( long x, long y, long Width, long Height, enum cdrFlipAxes Axes );
__declspec(implementation_key(3432)) IDispatchPtr IVGTransparency::GetApplication ( );
__declspec(implementation_key(3433)) IDispatchPtr IVGTransparency::GetParent ( );
__declspec(implementation_key(3434)) enum cdrTransparencyType IVGTransparency::GetType ( );
__declspec(implementation_key(3435)) long IVGTransparency::GetUniform ( );
__declspec(implementation_key(3436)) void IVGTransparency::PutUniform ( long pVal );
__declspec(implementation_key(3437)) IVGFountainFillPtr IVGTransparency::GetFountain ( );
__declspec(implementation_key(3438)) void IVGTransparency::PutFountain ( struct IVGFountainFill * ppVal );
__declspec(implementation_key(3439)) IVGPatternFillPtr IVGTransparency::GetPattern ( );
__declspec(implementation_key(3440)) void IVGTransparency::PutPattern ( struct IVGPatternFill * ppVal );
__declspec(implementation_key(3441)) IVGTextureFillPtr IVGTransparency::GetTexture ( );
__declspec(implementation_key(3442)) void IVGTransparency::PutTexture ( struct IVGTextureFill * ppVal );
__declspec(implementation_key(3443)) long IVGTransparency::GetStart ( );
__declspec(implementation_key(3444)) void IVGTransparency::PutStart ( long pVal );
__declspec(implementation_key(3445)) long IVGTransparency::GetEnd ( );
__declspec(implementation_key(3446)) void IVGTransparency::PutEnd ( long pVal );
__declspec(implementation_key(3447)) VARIANT_BOOL IVGTransparency::GetFrozen ( );
__declspec(implementation_key(3448)) HRESULT IVGTransparency::ApplyNoTransparency ( );
__declspec(implementation_key(3449)) HRESULT IVGTransparency::ApplyUniformTransparency ( long Value );
__declspec(implementation_key(3450)) IVGFountainFillPtr IVGTransparency::ApplyFountainTransparency ( long Start, long End, enum cdrFountainFillType Type, double Angle, long Steps, long EdgePad, long MidPoint, double CenterOffsetX, double CenterOffsetY );
__declspec(implementation_key(3451)) IVGPatternFillPtr IVGTransparency::ApplyPatternTransparency ( enum cdrPatternFillType Type, _bstr_t FileName, long PatternCanvasIndex, long Front, long Back, VARIANT_BOOL TransformWithShape );
__declspec(implementation_key(3452)) IVGTextureFillPtr IVGTransparency::ApplyTextureTransparency ( _bstr_t TextureName, _bstr_t LibraryName, long Front, long Back );
__declspec(implementation_key(3453)) HRESULT IVGTransparency::Freeze ( );
__declspec(implementation_key(3454)) HRESULT IVGTransparency::Unfreeze ( );
__declspec(implementation_key(3455)) enum cdrTransparencyAppliedTo IVGTransparency::GetAppliedTo ( );
__declspec(implementation_key(3456)) void IVGTransparency::PutAppliedTo ( enum cdrTransparencyAppliedTo pVal );
__declspec(implementation_key(3457)) enum cdrMergeMode IVGTransparency::GetMergeMode ( );
__declspec(implementation_key(3458)) void IVGTransparency::PutMergeMode ( enum cdrMergeMode pVal );
__declspec(implementation_key(3459)) VARIANT_BOOL IVGTransparency::UserAssign ( enum cdrTransparencyType TransparencyType, enum cdrPatternFillType PatternType, long ParentWindowHandle );
__declspec(implementation_key(3460)) enum cdrDimensionType IVGDimension::GetType ( );
__declspec(implementation_key(3461)) IVGDimensionLinearPtr IVGDimension::GetLinear ( );
__declspec(implementation_key(3462)) IVGDimensionAngularPtr IVGDimension::GetAngular ( );
__declspec(implementation_key(3463)) long IVGDimension::GetPrecision ( );
__declspec(implementation_key(3464)) void IVGDimension::PutPrecision ( long pVal );
__declspec(implementation_key(3465)) VARIANT_BOOL IVGDimension::GetBoxedText ( );
__declspec(implementation_key(3466)) void IVGDimension::PutBoxedText ( VARIANT_BOOL pVal );
__declspec(implementation_key(3467)) VARIANT_BOOL IVGDimension::GetLeadingZero ( );
__declspec(implementation_key(3468)) void IVGDimension::PutLeadingZero ( VARIANT_BOOL pVal );
__declspec(implementation_key(3469)) IVGShapePtr IVGDimension::GetTextShape ( );
__declspec(implementation_key(3470)) _bstr_t IVGDimension::GetPrefix ( );
__declspec(implementation_key(3471)) void IVGDimension::PutPrefix ( _bstr_t pVal );
__declspec(implementation_key(3472)) _bstr_t IVGDimension::GetSuffix ( );
__declspec(implementation_key(3473)) void IVGDimension::PutSuffix ( _bstr_t pVal );
__declspec(implementation_key(3474)) IVGOutlinePtr IVGDimension::GetOutline ( );
__declspec(implementation_key(3475)) VARIANT_BOOL IVGDimension::GetTextCentered ( );
__declspec(implementation_key(3476)) void IVGDimension::PutTextCentered ( VARIANT_BOOL pVal );
__declspec(implementation_key(3477)) VARIANT_BOOL IVGDimension::GetShowUnits ( );
__declspec(implementation_key(3478)) void IVGDimension::PutShowUnits ( VARIANT_BOOL pVal );
__declspec(implementation_key(3479)) enum cdrDimensionPlacement IVGDimension::GetPlacement ( );
__declspec(implementation_key(3480)) void IVGDimension::PutPlacement ( enum cdrDimensionPlacement pVal );
__declspec(implementation_key(3481)) VARIANT_BOOL IVGDimension::GetHorizontalText ( );
__declspec(implementation_key(3482)) void IVGDimension::PutHorizontalText ( VARIANT_BOOL pVal );
__declspec(implementation_key(3483)) VARIANT_BOOL IVGDimension::GetDynamicText ( );
__declspec(implementation_key(3484)) void IVGDimension::PutDynamicText ( VARIANT_BOOL pVal );
__declspec(implementation_key(3485)) double IVGDimension::GetDistanceFromObject ( );
__declspec(implementation_key(3486)) VARIANT_BOOL IVGDimension::GetUseDistanceFromObject ( );
__declspec(implementation_key(3487)) void IVGDimension::PutUseDistanceFromObject ( VARIANT_BOOL pVal );
__declspec(implementation_key(3488)) HRESULT IVGDimension::SetDistanceFromObject ( double Distance );
__declspec(implementation_key(3489)) double IVGDimension::GetOverhang ( );
__declspec(implementation_key(3490)) VARIANT_BOOL IVGDimension::GetUseOverhang ( );
__declspec(implementation_key(3491)) void IVGDimension::PutUseOverhang ( VARIANT_BOOL pVal );
__declspec(implementation_key(3492)) HRESULT IVGDimension::SetOverhang ( double Overhang );
__declspec(implementation_key(3493)) double IVGDimension::GetTextLabelGap ( );
__declspec(implementation_key(3494)) VARIANT_BOOL IVGDimension::GetUseTextLabelGap ( );
__declspec(implementation_key(3495)) void IVGDimension::PutUseTextLabelGap ( VARIANT_BOOL pVal );
__declspec(implementation_key(3496)) HRESULT IVGDimension::SetTextLabelGap ( double Gap );
__declspec(implementation_key(3497)) VARIANT_BOOL IVGDimension::GetExtensionLinesVisible ( );
__declspec(implementation_key(3498)) void IVGDimension::PutExtensionLinesVisible ( VARIANT_BOOL pVal );
__declspec(implementation_key(3499)) VARIANT_BOOL IVGDimension::GetInnerExtensionLinesVisible ( );
__declspec(implementation_key(3500)) void IVGDimension::PutInnerExtensionLinesVisible ( VARIANT_BOOL pVal );
__declspec(implementation_key(3501)) VARIANT_BOOL IVGDimension::GetGapOnFreeExtensionVisible ( );
__declspec(implementation_key(3502)) void IVGDimension::PutGapOnFreeExtensionVisible ( VARIANT_BOOL pVal );
__declspec(implementation_key(3503)) VARIANT_BOOL IVGCommentAnnotation::GetEndArrowVisible ( );
__declspec(implementation_key(3504)) void IVGCommentAnnotation::PutEndArrowVisible ( VARIANT_BOOL pRet );
__declspec(implementation_key(3505)) IVGCurvePtr IVGCommentAnnotation::GetCurve ( );
__declspec(implementation_key(3506)) void IVGCommentAnnotation::PutCurve ( struct IVGCurve * pRet );
__declspec(implementation_key(3507)) long IVGCommentAnnotation::GetOutlineWidth ( );
__declspec(implementation_key(3508)) void IVGCommentAnnotation::PutOutlineWidth ( long pRet );
__declspec(implementation_key(3509)) IVGColorPtr IVGCommentAnnotation::GetFillColor ( );
__declspec(implementation_key(3510)) void IVGCommentAnnotation::PutFillColor ( struct IVGColor * pRet );
__declspec(implementation_key(3511)) IVGColorPtr IVGCommentAnnotation::GetOutlineColor ( );
__declspec(implementation_key(3512)) void IVGCommentAnnotation::PutOutlineColor ( struct IVGColor * pRet );
__declspec(implementation_key(3513)) enum cdrCommentAnnotationType IVGCommentAnnotation::GetType ( );
__declspec(implementation_key(3514)) VARIANT_BOOL IVGCommentAnnotation::GetStartArrowVisible ( );
__declspec(implementation_key(3515)) void IVGCommentAnnotation::PutStartArrowVisible ( VARIANT_BOOL pRet );
__declspec(implementation_key(3516)) HRESULT IVGCommentAnnotation::Move ( double DeltaX, double DeltaY );
__declspec(implementation_key(3517)) double IVGCommentAnnotation::GetSizeWidth ( );
__declspec(implementation_key(3518)) void IVGCommentAnnotation::PutSizeWidth ( double pVal );
__declspec(implementation_key(3519)) double IVGCommentAnnotation::GetSizeHeight ( );
__declspec(implementation_key(3520)) void IVGCommentAnnotation::PutSizeHeight ( double pVal );
__declspec(implementation_key(3521)) double IVGCommentAnnotation::GetLeftX ( );
__declspec(implementation_key(3522)) void IVGCommentAnnotation::PutLeftX ( double pVal );
__declspec(implementation_key(3523)) double IVGCommentAnnotation::GetRightX ( );
__declspec(implementation_key(3524)) void IVGCommentAnnotation::PutRightX ( double pVal );
__declspec(implementation_key(3525)) double IVGCommentAnnotation::GetTopY ( );
__declspec(implementation_key(3526)) void IVGCommentAnnotation::PutTopY ( double pVal );
__declspec(implementation_key(3527)) double IVGCommentAnnotation::GetBottomY ( );
__declspec(implementation_key(3528)) void IVGCommentAnnotation::PutBottomY ( double pVal );
__declspec(implementation_key(3529)) double IVGCommentAnnotation::GetCenterX ( );
__declspec(implementation_key(3530)) void IVGCommentAnnotation::PutCenterX ( double pVal );
__declspec(implementation_key(3531)) double IVGCommentAnnotation::GetCenterY ( );
__declspec(implementation_key(3532)) void IVGCommentAnnotation::PutCenterY ( double pVal );
__declspec(implementation_key(3533)) HRESULT IVGCommentAnnotation::SetPosition ( enum cdrReferencePoint ReferencePoint, double x, double y );
__declspec(implementation_key(3534)) HRESULT IVGCommentAnnotation::GetPosition ( enum cdrReferencePoint ReferencePoint, double * x, double * y );
__declspec(implementation_key(3535)) HRESULT IVGCommentAnnotation::SetSize ( enum cdrReferencePoint ReferencePoint, double Width, double Height );
__declspec(implementation_key(3536)) HRESULT IVGCommentAnnotation::GetSize ( double * Width, double * Height );
__declspec(implementation_key(3537)) HRESULT IVGCommentAnnotation::GetBoundingBox ( double * x, double * y, double * Width, double * Height );
__declspec(implementation_key(3538)) HRESULT IVGCommentAnnotation::SetBoundingBox ( double x, double y, double Width, double Height, VARIANT_BOOL KeepAspect, enum cdrReferencePoint ReferencePoint );
__declspec(implementation_key(3539)) IVGColorProfilePtr IVGColorContext::GetRGBColorProfile ( );
__declspec(implementation_key(3540)) void IVGColorContext::PutRGBColorProfile ( struct IVGColorProfile * ppVal );
__declspec(implementation_key(3541)) IVGColorProfilePtr IVGColorContext::GetCMYKColorProfile ( );
__declspec(implementation_key(3542)) void IVGColorContext::PutCMYKColorProfile ( struct IVGColorProfile * ppVal );
__declspec(implementation_key(3543)) IVGColorProfilePtr IVGColorContext::GetGrayscaleColorProfile ( );
__declspec(implementation_key(3544)) void IVGColorContext::PutGrayscaleColorProfile ( struct IVGColorProfile * ppVal );
__declspec(implementation_key(3545)) enum clrRenderingIntent IVGColorContext::GetRenderingIntent ( );
__declspec(implementation_key(3546)) void IVGColorContext::PutRenderingIntent ( enum clrRenderingIntent pVal );
__declspec(implementation_key(3547)) enum clrColorModel IVGColorContext::GetBlendingColorModel ( );
__declspec(implementation_key(3548)) void IVGColorContext::PutBlendingColorModel ( enum clrColorModel pVal );
__declspec(implementation_key(3549)) IVGColorContextPtr IVGColorContext::GetCopy ( );
__declspec(implementation_key(3550)) HRESULT IVGColorContext::CopyAssign ( struct IVGColorContext * ColorContext );
__declspec(implementation_key(3551)) IVGColorProfilePtr IVGColorContext::GetColorProfile ( enum clrColorModel ColorModel );
__declspec(implementation_key(3552)) void IVGColorContext::PutColorProfile ( enum clrColorModel ColorModel, struct IVGColorProfile * ppVal );
__declspec(implementation_key(3553)) VARIANT_BOOL IVGColorContext::Merge ( struct IVGColorContext * ColorContext );
__declspec(implementation_key(3554)) VARIANT_BOOL IVGColorContext::IsSame ( struct IVGColorContext * ColorContext );
__declspec(implementation_key(3555)) IVGColorProfilesPtr IVGColorContext::GetColorProfiles ( );
__declspec(implementation_key(3556)) VARIANT_BOOL IVGColorContext::GetReadOnly ( );
__declspec(implementation_key(3557)) _bstr_t IVGColorContext::GetColorProfileNameList ( );
__declspec(implementation_key(3558)) _bstr_t IVGColorProfile::GetName ( );
__declspec(implementation_key(3559)) _bstr_t IVGColorProfile::GetFileName ( );
__declspec(implementation_key(3560)) _bstr_t IVGColorProfile::GetManufacturer ( );
__declspec(implementation_key(3561)) _bstr_t IVGColorProfile::GetDeviceModel ( );
__declspec(implementation_key(3562)) enum clrDeviceType IVGColorProfile::GetDeviceType ( );
__declspec(implementation_key(3563)) VARIANT_BOOL IVGColorProfile::GetSelected ( );
__declspec(implementation_key(3564)) HRESULT IVGColorProfile::Select ( );
__declspec(implementation_key(3565)) VARIANT_BOOL IVGColorProfile::GetGeneric ( );
__declspec(implementation_key(3566)) VARIANT_BOOL IVGColorProfile::GetInstalled ( );
__declspec(implementation_key(3567)) _bstr_t IVGColorProfile::GetID ( );
__declspec(implementation_key(3568)) enum clrColorModel IVGColorProfile::GetColorModel ( );
__declspec(implementation_key(3569)) IVGColorContextPtr IVGColorProfile::CreateColorContext ( enum clrRenderingIntent RenderingIntent );
__declspec(implementation_key(3570)) VARIANT_BOOL IVGColorProfile::IsSame ( struct IVGColorProfile * ColorProfile );
__declspec(implementation_key(3571)) IVGColorProfilePtr IVGColorProfiles::GetItem ( const _variant_t & IndexOrName );
__declspec(implementation_key(3572)) long IVGColorProfiles::GetCount ( );
__declspec(implementation_key(3573)) IUnknownPtr IVGColorProfiles::Get_NewEnum ( );
__declspec(implementation_key(3574)) enum clrDeviceType IVGColorProfiles::GetDeviceType ( );
__declspec(implementation_key(3575)) VARIANT_BOOL IVGColorProfiles::SelectByName ( _bstr_t Name );
__declspec(implementation_key(3576)) VARIANT_BOOL IVGColorProfiles::Install ( _bstr_t FileName );
__declspec(implementation_key(3577)) IVGColorProfilePtr IVGColorProfiles::GetGenericProfile ( );
__declspec(implementation_key(3578)) IVGColorContextPtr IVGProofColorSettings::GetColorContext ( );
__declspec(implementation_key(3579)) void IVGProofColorSettings::PutColorContext ( struct IVGColorContext * ppVal );
__declspec(implementation_key(3580)) VARIANT_BOOL IVGProofColorSettings::GetShowOutOfGamutWarning ( );
__declspec(implementation_key(3581)) void IVGProofColorSettings::PutShowOutOfGamutWarning ( VARIANT_BOOL pVal );
__declspec(implementation_key(3582)) IVGColorPtr IVGProofColorSettings::GetOutOfGamutColor ( );
__declspec(implementation_key(3583)) void IVGProofColorSettings::PutOutOfGamutColor ( struct IVGColor * ppVal );
__declspec(implementation_key(3584)) double IVGProofColorSettings::GetOutOfGamutTransparency ( );
__declspec(implementation_key(3585)) void IVGProofColorSettings::PutOutOfGamutTransparency ( double pVal );
__declspec(implementation_key(3586)) VARIANT_BOOL IVGProofColorSettings::GetPreserveColorValues ( );
__declspec(implementation_key(3587)) void IVGProofColorSettings::PutPreserveColorValues ( VARIANT_BOOL pVal );
__declspec(implementation_key(3588)) IVGProofColorSettingsPtr IVGProofColorSettings::GetCopy ( );
__declspec(implementation_key(3589)) HRESULT IVGProofColorSettings::CopyAssign ( struct IVGProofColorSettings * Source );
__declspec(implementation_key(3590)) void IVGStructExportOptions::PutSizeX ( long pVal );
__declspec(implementation_key(3591)) long IVGStructExportOptions::GetSizeX ( );
__declspec(implementation_key(3592)) void IVGStructExportOptions::PutSizeY ( long pVal );
__declspec(implementation_key(3593)) long IVGStructExportOptions::GetSizeY ( );
__declspec(implementation_key(3594)) void IVGStructExportOptions::PutResolutionX ( long pVal );
__declspec(implementation_key(3595)) long IVGStructExportOptions::GetResolutionX ( );
__declspec(implementation_key(3596)) void IVGStructExportOptions::PutResolutionY ( long pVal );
__declspec(implementation_key(3597)) long IVGStructExportOptions::GetResolutionY ( );
__declspec(implementation_key(3598)) void IVGStructExportOptions::PutAntiAliasingType ( enum cdrAntiAliasingType pVal );
__declspec(implementation_key(3599)) enum cdrAntiAliasingType IVGStructExportOptions::GetAntiAliasingType ( );
__declspec(implementation_key(3600)) void IVGStructExportOptions::PutOverwrite ( VARIANT_BOOL pVal );
__declspec(implementation_key(3601)) VARIANT_BOOL IVGStructExportOptions::GetOverwrite ( );
__declspec(implementation_key(3602)) void IVGStructExportOptions::PutImageType ( enum cdrImageType pVal );
__declspec(implementation_key(3603)) enum cdrImageType IVGStructExportOptions::GetImageType ( );
__declspec(implementation_key(3604)) void IVGStructExportOptions::PutDithered ( VARIANT_BOOL pVal );
__declspec(implementation_key(3605)) VARIANT_BOOL IVGStructExportOptions::GetDithered ( );
__declspec(implementation_key(3606)) void IVGStructExportOptions::PutTransparent ( VARIANT_BOOL pVal );
__declspec(implementation_key(3607)) VARIANT_BOOL IVGStructExportOptions::GetTransparent ( );
__declspec(implementation_key(3608)) void IVGStructExportOptions::PutUseColorProfile ( VARIANT_BOOL pVal );
__declspec(implementation_key(3609)) VARIANT_BOOL IVGStructExportOptions::GetUseColorProfile ( );
__declspec(implementation_key(3610)) void IVGStructExportOptions::PutCompression ( enum cdrCompressionType pVal );
__declspec(implementation_key(3611)) enum cdrCompressionType IVGStructExportOptions::GetCompression ( );
__declspec(implementation_key(3612)) void IVGStructExportOptions::PutMaintainLayers ( VARIANT_BOOL pVal );
__declspec(implementation_key(3613)) VARIANT_BOOL IVGStructExportOptions::GetMaintainLayers ( );
__declspec(implementation_key(3614)) void IVGStructExportOptions::PutMaintainAspect ( VARIANT_BOOL pVal );
__declspec(implementation_key(3615)) VARIANT_BOOL IVGStructExportOptions::GetMaintainAspect ( );
__declspec(implementation_key(3616)) IVGRectPtr IVGStructExportOptions::GetExportArea ( );
__declspec(implementation_key(3617)) void IVGStructExportOptions::PutRefExportArea ( struct IVGRect * * ppVal );
__declspec(implementation_key(3618)) void IVGStructExportOptions::PutMatted ( VARIANT_BOOL pVal );
__declspec(implementation_key(3619)) VARIANT_BOOL IVGStructExportOptions::GetMatted ( );
__declspec(implementation_key(3620)) IVGColorPtr IVGStructExportOptions::GetMatteColor ( );
__declspec(implementation_key(3621)) void IVGStructExportOptions::PutMatteColor ( struct IVGColor * ppVal );
__declspec(implementation_key(3622)) void IVGStructExportOptions::PutMatteMaskedOnly ( VARIANT_BOOL pVal );
__declspec(implementation_key(3623)) VARIANT_BOOL IVGStructExportOptions::GetMatteMaskedOnly ( );
__declspec(implementation_key(3624)) void IVGStructExportOptions::PutAlwaysOverprintBlack ( VARIANT_BOOL pVal );
__declspec(implementation_key(3625)) VARIANT_BOOL IVGStructExportOptions::GetAlwaysOverprintBlack ( );
__declspec(implementation_key(3626)) IVGProofColorSettingsPtr IVGStructExportOptions::GetProofColorSettings ( );
__declspec(implementation_key(3627)) void IVGStructExportOptions::PutProofColorSettings ( struct IVGProofColorSettings * ppVal );
__declspec(implementation_key(3628)) VARIANT_BOOL IVGColorManager::GetScannerCalibrated ( );
__declspec(implementation_key(3629)) void IVGColorManager::PutScannerCalibrated ( VARIANT_BOOL pVal );
__declspec(implementation_key(3630)) VARIANT_BOOL IVGColorManager::GetSeparationPrinterCalibrated ( );
__declspec(implementation_key(3631)) void IVGColorManager::PutSeparationPrinterCalibrated ( VARIANT_BOOL pVal );
__declspec(implementation_key(3632)) VARIANT_BOOL IVGColorManager::GetCompositePrinterCalibrated ( );
__declspec(implementation_key(3633)) enum clrCompPrnCalibration IVGColorManager::GetCompositePrinterCalibration ( );
__declspec(implementation_key(3634)) void IVGColorManager::PutCompositePrinterCalibration ( enum clrCompPrnCalibration pVal );
__declspec(implementation_key(3635)) enum clrMonitorCalibration IVGColorManager::GetMonitorCalibration ( );
__declspec(implementation_key(3636)) void IVGColorManager::PutMonitorCalibration ( enum clrMonitorCalibration pVal );
__declspec(implementation_key(3637)) VARIANT_BOOL IVGColorManager::GetCompositePrinterSimulatesSeparation ( );
__declspec(implementation_key(3638)) VARIANT_BOOL IVGColorManager::GetShowOutOfGamut ( );
__declspec(implementation_key(3639)) void IVGColorManager::PutShowOutOfGamut ( VARIANT_BOOL pVal );
__declspec(implementation_key(3640)) IVGColorPtr IVGColorManager::GetOutOfGamutColor ( );
__declspec(implementation_key(3641)) void IVGColorManager::PutOutOfGamutColor ( struct IVGColor * ppVal );
__declspec(implementation_key(3642)) long IVGColorManager::GetOutOfGamutTransparency ( );
__declspec(implementation_key(3643)) void IVGColorManager::PutOutOfGamutTransparency ( long pVal );
__declspec(implementation_key(3644)) VARIANT_BOOL IVGColorManager::GetCMYKInPercents ( );
__declspec(implementation_key(3645)) void IVGColorManager::PutCMYKInPercents ( VARIANT_BOOL pVal );
__declspec(implementation_key(3646)) VARIANT_BOOL IVGColorManager::GetCMYKGamutForSpotColors ( );
__declspec(implementation_key(3647)) void IVGColorManager::PutCMYKGamutForSpotColors ( VARIANT_BOOL pVal );
__declspec(implementation_key(3648)) enum clrRenderingIntent IVGColorManager::GetRenderingIntent ( );
__declspec(implementation_key(3649)) void IVGColorManager::PutRenderingIntent ( enum clrRenderingIntent pVal );
__declspec(implementation_key(3650)) enum clrColorEngine IVGColorManager::GetColorEngine ( );
__declspec(implementation_key(3651)) void IVGColorManager::PutColorEngine ( enum clrColorEngine pVal );
__declspec(implementation_key(3652)) long IVGColorManager::GetStyleCount ( );
__declspec(implementation_key(3653)) _bstr_t IVGColorManager::GetStyleByIndex ( long Index );
__declspec(implementation_key(3654)) IVGColorProfilePtr IVGColorManager::GetCurrentProfile ( enum clrDeviceType DeviceType );
__declspec(implementation_key(3655)) IVGColorProfilesPtr IVGColorManager::GetInstalledProfiles ( enum clrDeviceType DeviceType );
__declspec(implementation_key(3656)) VARIANT_BOOL IVGColorManager::LoadStyle ( _bstr_t StyleName );
__declspec(implementation_key(3657)) VARIANT_BOOL IVGColorManager::DeleteStyle ( _bstr_t StyleName );
__declspec(implementation_key(3658)) VARIANT_BOOL IVGColorManager::SaveStyle ( _bstr_t StyleName );
__declspec(implementation_key(3659)) VARIANT_BOOL IVGColorManager::GetIsICM2Available ( );
__declspec(implementation_key(3660)) _bstr_t IVGColorManager::GetUnsavedStyleName ( );
__declspec(implementation_key(3661)) _bstr_t IVGColorManager::GetGenericProfileName ( enum clrDeviceType DeviceType );
__declspec(implementation_key(3662)) VARIANT_BOOL IVGColorManager::GetIsCompositePrinterCMYK ( );
__declspec(implementation_key(3663)) enum clrImportColorCorrection IVGColorManager::GetColorCorrectionOnImport ( );
__declspec(implementation_key(3664)) void IVGColorManager::PutColorCorrectionOnImport ( enum clrImportColorCorrection pVal );
__declspec(implementation_key(3665)) enum clrExportColorCorrection IVGColorManager::GetColorCorrectionOnExport ( );
__declspec(implementation_key(3666)) void IVGColorManager::PutColorCorrectionOnExport ( enum clrExportColorCorrection pVal );
__declspec(implementation_key(3667)) IVGColorProfilePtr IVGColorManager::GetDefaultImportProfile ( );
__declspec(implementation_key(3668)) void IVGColorManager::PutRefDefaultImportProfile ( struct IVGColorProfile * * ppVal );
__declspec(implementation_key(3669)) IVGColorProfilePtr IVGColorManager::GetCustomImportProfile ( );
__declspec(implementation_key(3670)) void IVGColorManager::PutRefCustomImportProfile ( struct IVGColorProfile * * ppVal );
__declspec(implementation_key(3671)) IVGColorProfilePtr IVGColorManager::GetCustomExportProfile ( );
__declspec(implementation_key(3672)) void IVGColorManager::PutRefCustomExportProfile ( struct IVGColorProfile * * ppVal );
__declspec(implementation_key(3673)) IVGColorProfilesPtr IVGColorManager::GetMonitorColorProfiles ( );
__declspec(implementation_key(3674)) IVGColorProfilesPtr IVGColorManager::GetProfilesByColorModel ( enum clrColorModel ColorModel );
__declspec(implementation_key(3675)) IVGColorProfilesPtr IVGColorManager::GetProfilesForDevice ( enum clrDeviceType DeviceType, _bstr_t DeviceName );
__declspec(implementation_key(3676)) IVGColorContextPtr IVGColorManager::GetDefaultColorContext ( );
__declspec(implementation_key(3677)) VARIANT_BOOL IVGColorManager::ColorEnginePresent ( enum clrColorEngine ColorEngine );
__declspec(implementation_key(3678)) VARIANT_BOOL IVGColorManager::CanDeleteStyle ( _bstr_t StyleName );
__declspec(implementation_key(3679)) VARIANT_BOOL IVGColorManager::GetMapGrayToCMYKBlack ( );
__declspec(implementation_key(3680)) void IVGColorManager::PutMapGrayToCMYKBlack ( VARIANT_BOOL pVal );
__declspec(implementation_key(3681)) VARIANT_BOOL IVGColorManager::GetPreservePureBlack ( );
__declspec(implementation_key(3682)) void IVGColorManager::PutPreservePureBlack ( VARIANT_BOOL pVal );
__declspec(implementation_key(3683)) enum clrColorModel IVGColorManager::GetSpotColorDefinition ( );
__declspec(implementation_key(3684)) void IVGColorManager::PutSpotColorDefinition ( enum clrColorModel pVal );
__declspec(implementation_key(3685)) IVGColorProfilesPtr IVGColorManager::GetColorProfiles ( );
__declspec(implementation_key(3686)) IVGColorManagementPolicyPtr IVGColorManager::GetPolicyForOpen ( );
__declspec(implementation_key(3687)) IVGColorManagementPolicyPtr IVGColorManager::GetPolicyForImport ( );
__declspec(implementation_key(3688)) IVGColorContextPtr IVGStructCreateOptions::GetColorContext ( );
__declspec(implementation_key(3689)) void IVGStructCreateOptions::PutColorContext ( struct IVGColorContext * ppVal );
__declspec(implementation_key(3690)) _bstr_t IVGStructCreateOptions::GetName ( );
__declspec(implementation_key(3691)) void IVGStructCreateOptions::PutName ( _bstr_t pVal );
__declspec(implementation_key(3692)) double IVGStructCreateOptions::GetPageWidth ( );
__declspec(implementation_key(3693)) void IVGStructCreateOptions::PutPageWidth ( double pVal );
__declspec(implementation_key(3694)) double IVGStructCreateOptions::GetPageHeight ( );
__declspec(implementation_key(3695)) void IVGStructCreateOptions::PutPageHeight ( double pVal );
__declspec(implementation_key(3696)) enum cdrUnit IVGStructCreateOptions::GetUnits ( );
__declspec(implementation_key(3697)) void IVGStructCreateOptions::PutUnits ( enum cdrUnit pVal );
__declspec(implementation_key(3698)) double IVGStructCreateOptions::GetResolution ( );
__declspec(implementation_key(3699)) void IVGStructCreateOptions::PutResolution ( double pVal );
__declspec(implementation_key(3700)) IDispatchPtr IVGPalette::GetApplication ( );
__declspec(implementation_key(3701)) IDispatchPtr IVGPalette::GetParent ( );
__declspec(implementation_key(3702)) _bstr_t IVGPalette::GetName ( );
__declspec(implementation_key(3703)) void IVGPalette::PutName ( _bstr_t Name );
__declspec(implementation_key(3704)) HRESULT IVGPalette::Close ( );
__declspec(implementation_key(3705)) enum cdrPaletteType IVGPalette::GetType ( );
__declspec(implementation_key(3706)) IVGColorsPtr IVGPalette::Colors ( );
__declspec(implementation_key(3707)) IVGColorPtr IVGPalette::GetColor ( long Index );
__declspec(implementation_key(3708)) void IVGPalette::PutColor ( long Index, struct IVGColor * Color );
__declspec(implementation_key(3709)) HRESULT IVGPalette::AddColor ( struct IVGColor * Color );
__declspec(implementation_key(3710)) HRESULT IVGPalette::InsertColor ( long Index, struct IVGColor * Color );
__declspec(implementation_key(3711)) HRESULT IVGPalette::RemoveColor ( long Index );
__declspec(implementation_key(3712)) long IVGPalette::GetIndexOfColor ( struct IVGColor * Color );
__declspec(implementation_key(3713)) VARIANT_BOOL IVGPalette::GetDuplicatePresent ( );
__declspec(implementation_key(3714)) long IVGPalette::GetColorCount ( );
__declspec(implementation_key(3715)) HRESULT IVGPalette::Save ( );
__declspec(implementation_key(3716)) enum cdrPaletteID IVGPalette::GetPaletteID ( );
__declspec(implementation_key(3717)) _bstr_t IVGPalette::GetFileName ( );
__declspec(implementation_key(3718)) long IVGPalette::MatchColor ( struct IVGColor * Color );
__declspec(implementation_key(3719)) long IVGPalette::FindColor ( _bstr_t Name );
__declspec(implementation_key(3720)) HRESULT IVGPalette::SaveAs ( _bstr_t FileName, _bstr_t Name, enum cdrPaletteVersion Version );
__declspec(implementation_key(3721)) IVGDocumentPtr IVGPalette::GetDocument ( );
__declspec(implementation_key(3722)) _bstr_t IVGPalette::GetIdentifier ( );
__declspec(implementation_key(3723)) VARIANT_BOOL IVGPalette::GetIsEmpty ( );
__declspec(implementation_key(3724)) VARIANT_BOOL IVGPalette::GetLocked ( );
__declspec(implementation_key(3725)) VARIANT_BOOL IVGPalette::GetDefault ( );
__declspec(implementation_key(3726)) VARIANT_BOOL IVGPalette::GetIsOpen ( );
__declspec(implementation_key(3727)) HRESULT IVGPalette::Open ( );
__declspec(implementation_key(3728)) HRESULT IVGPalette::MakeDefault ( );
__declspec(implementation_key(3729)) VARIANT_BOOL IVGPalette::Delete ( );
__declspec(implementation_key(3730)) IDispatchPtr IVGColors::GetApplication ( );
__declspec(implementation_key(3731)) IVGPalettePtr IVGColors::GetParent ( );
__declspec(implementation_key(3732)) IVGColorPtr IVGColors::GetItem ( long Index );
__declspec(implementation_key(3733)) IUnknownPtr IVGColors::Get_NewEnum ( );
__declspec(implementation_key(3734)) long IVGColors::GetCount ( );
__declspec(implementation_key(3735)) IDispatchPtr IVGPalettes::GetApplication ( );
__declspec(implementation_key(3736)) IDispatchPtr IVGPalettes::GetParent ( );
__declspec(implementation_key(3737)) IVGPalettePtr IVGPalettes::GetItem ( const _variant_t & IndexOrName );
__declspec(implementation_key(3738)) IUnknownPtr IVGPalettes::Get_NewEnum ( );
__declspec(implementation_key(3739)) long IVGPalettes::GetCount ( );
__declspec(implementation_key(3740)) IVGPalettePtr IVGPalettes::Open ( _bstr_t FileName );
__declspec(implementation_key(3741)) IVGPalettePtr IVGPalettes::OpenFixed ( enum cdrPaletteID PaletteID );
__declspec(implementation_key(3742)) IVGPalettePtr IVGPalettes::CreateFromDocument ( _bstr_t Name, _bstr_t FileName, VARIANT_BOOL Overwrite );
__declspec(implementation_key(3743)) IVGPalettePtr IVGPalettes::CreateFromSelection ( _bstr_t Name, _bstr_t FileName, VARIANT_BOOL Overwrite );
__declspec(implementation_key(3744)) IVGPalettePtr IVGPalettes::Create ( _bstr_t Name, _bstr_t FileName, VARIANT_BOOL Overwrite );
__declspec(implementation_key(3745)) long IVGPaletteManager::GetPaletteCount ( );
__declspec(implementation_key(3746)) IVGPalettePtr IVGPaletteManager::GetPalette ( const _variant_t & IndexOrName );
__declspec(implementation_key(3747)) IVGPalettePtr IVGPaletteManager::GetDefaultPalette ( );
__declspec(implementation_key(3748)) IVGPalettesPtr IVGPaletteManager::GetOpenPalettes ( );
__declspec(implementation_key(3749)) IUnknownPtr IVGPaletteManager::Get_NewEnum ( );
__declspec(implementation_key(3750)) HRESULT IVGPaletteManager::LoadAllPalettes ( );
__declspec(implementation_key(3751)) IVGPalettePtr IVGPaletteManager::LoadPalette ( _bstr_t FileName );
__declspec(implementation_key(3752)) enum cdrTraceType IVGTraceSettings::GetTraceType ( );
__declspec(implementation_key(3753)) void IVGTraceSettings::PutTraceType ( enum cdrTraceType pVal );
__declspec(implementation_key(3754)) short IVGTraceSettings::GetSmoothing ( );
__declspec(implementation_key(3755)) void IVGTraceSettings::PutSmoothing ( short pVal );
__declspec(implementation_key(3756)) short IVGTraceSettings::GetDetailLevel ( );
__declspec(implementation_key(3757)) void IVGTraceSettings::PutDetailLevel ( short pVal );
__declspec(implementation_key(3758)) enum cdrColorType IVGTraceSettings::GetColorMode ( );
__declspec(implementation_key(3759)) enum cdrPaletteID IVGTraceSettings::GetPaletteID ( );
__declspec(implementation_key(3760)) long IVGTraceSettings::GetColorCount ( );
__declspec(implementation_key(3761)) IVGColorPtr IVGTraceSettings::GetColor ( long Index );
__declspec(implementation_key(3762)) VARIANT_BOOL IVGTraceSettings::GetDeleteOriginalObject ( );
__declspec(implementation_key(3763)) void IVGTraceSettings::PutDeleteOriginalObject ( VARIANT_BOOL pVal );
__declspec(implementation_key(3764)) VARIANT_BOOL IVGTraceSettings::GetRemoveBackground ( );
__declspec(implementation_key(3765)) void IVGTraceSettings::PutRemoveBackground ( VARIANT_BOOL pVal );
__declspec(implementation_key(3766)) VARIANT_BOOL IVGTraceSettings::GetRemoveEntireBackColor ( );
__declspec(implementation_key(3767)) void IVGTraceSettings::PutRemoveEntireBackColor ( VARIANT_BOOL pVal );
__declspec(implementation_key(3768)) enum cdrTraceBackgroundMode IVGTraceSettings::GetBackgroundRemovalMode ( );
__declspec(implementation_key(3769)) void IVGTraceSettings::PutBackgroundRemovalMode ( enum cdrTraceBackgroundMode pVal );
__declspec(implementation_key(3770)) IVGColorPtr IVGTraceSettings::GetBackgroundColor ( );
__declspec(implementation_key(3771)) long IVGTraceSettings::GetCurveCount ( );
__declspec(implementation_key(3772)) long IVGTraceSettings::GetNodeCount ( );
__declspec(implementation_key(3773)) long IVGTraceSettings::GetBitmapWidth ( );
__declspec(implementation_key(3774)) long IVGTraceSettings::GetBitmapHeight ( );
__declspec(implementation_key(3775)) long IVGTraceSettings::SetColorCount ( long ColorCount );
__declspec(implementation_key(3776)) IVGShapeRangePtr IVGTraceSettings::Finish ( );
__declspec(implementation_key(3777)) VARIANT_BOOL IVGTraceSettings::ShowDialog ( long ParentWindowHandle );
__declspec(implementation_key(3778)) HRESULT IVGTraceSettings::ApplyChanges ( );
__declspec(implementation_key(3779)) HRESULT IVGTraceSettings::SetColorMode ( enum cdrColorType ColorMode, enum cdrPaletteID PaletteID );
__declspec(implementation_key(3780)) short IVGTraceSettings::GetDetailLevelPercent ( );
__declspec(implementation_key(3781)) void IVGTraceSettings::PutDetailLevelPercent ( short pVal );
__declspec(implementation_key(3782)) short IVGTraceSettings::GetMaxDetailLevel ( );
__declspec(implementation_key(3783)) short IVGTraceSettings::GetMinDetailLevel ( );
__declspec(implementation_key(3784)) short IVGTraceSettings::GetCornerSmoothness ( );
__declspec(implementation_key(3785)) void IVGTraceSettings::PutCornerSmoothness ( short pVal );
__declspec(implementation_key(3786)) VARIANT_BOOL IVGTraceSettings::GetMergeAdjacentObjects ( );
__declspec(implementation_key(3787)) void IVGTraceSettings::PutMergeAdjacentObjects ( VARIANT_BOOL pVal );
__declspec(implementation_key(3788)) VARIANT_BOOL IVGTraceSettings::GetRemoveOverlap ( );
__declspec(implementation_key(3789)) void IVGTraceSettings::PutRemoveOverlap ( VARIANT_BOOL pVal );
__declspec(implementation_key(3790)) VARIANT_BOOL IVGTraceSettings::GetGroupObjectsByColor ( );
__declspec(implementation_key(3791)) void IVGTraceSettings::PutGroupObjectsByColor ( VARIANT_BOOL pVal );
__declspec(implementation_key(3792)) IVGApplicationPtr IVGShapeRange::GetApplication ( );
__declspec(implementation_key(3793)) IVGApplicationPtr IVGShapeRange::GetParent ( );
__declspec(implementation_key(3794)) IVGShapePtr IVGShapeRange::GetItem ( const _variant_t & IndexOrName );
__declspec(implementation_key(3795)) IUnknownPtr IVGShapeRange::Get_NewEnum ( );
__declspec(implementation_key(3796)) long IVGShapeRange::GetCount ( );
__declspec(implementation_key(3797)) HRESULT IVGShapeRange::Add ( struct IVGShape * Shape );
__declspec(implementation_key(3798)) HRESULT IVGShapeRange::Remove ( long Index );
__declspec(implementation_key(3799)) long IVGShapeRange::IndexOf ( struct IVGShape * Shape );
__declspec(implementation_key(3800)) HRESULT IVGShapeRange::AddToSelection ( );
__declspec(implementation_key(3801)) HRESULT IVGShapeRange::ConvertToCurves ( );
__declspec(implementation_key(3802)) IVGShapePtr IVGShapeRange::ConvertToBitmap ( long BitDepth, VARIANT_BOOL Grayscale, VARIANT_BOOL Dithered, VARIANT_BOOL TransparentBG, long Resolution, enum cdrAntiAliasingType AntiAliasing, VARIANT_BOOL UseColorProfile, VARIANT_BOOL MultiChannel, VARIANT_BOOL AlwaysOverprintBlack, long OverprintBlackLimit );
__declspec(implementation_key(3803)) HRESULT IVGShapeRange::Copy ( );
__declspec(implementation_key(3804)) HRESULT IVGShapeRange::Cut ( );
__declspec(implementation_key(3805)) HRESULT IVGShapeRange::Delete ( );
__declspec(implementation_key(3806)) HRESULT IVGShapeRange::GetPosition ( double * PositionX, double * PositionY );
__declspec(implementation_key(3807)) HRESULT IVGShapeRange::GetSize ( double * Width, double * Height );
__declspec(implementation_key(3808)) HRESULT IVGShapeRange::Move ( double DeltaX, double DeltaY );
__declspec(implementation_key(3809)) IVGShapeRangePtr IVGShapeRange::Duplicate ( double OffsetX, double OffsetY );
__declspec(implementation_key(3810)) IVGShapeRangePtr IVGShapeRange::Clone ( double OffsetX, double OffsetY );
__declspec(implementation_key(3811)) IVGShapePtr IVGShapeRange::Group ( );
__declspec(implementation_key(3812)) HRESULT IVGShapeRange::RemoveAll ( );
__declspec(implementation_key(3813)) HRESULT IVGShapeRange::OrderToFront ( );
__declspec(implementation_key(3814)) HRESULT IVGShapeRange::OrderToBack ( );
__declspec(implementation_key(3815)) HRESULT IVGShapeRange::OrderForwardOne ( );
__declspec(implementation_key(3816)) HRESULT IVGShapeRange::OrderBackOne ( );
__declspec(implementation_key(3817)) HRESULT IVGShapeRange::OrderFrontOf ( struct IVGShape * Shape );
__declspec(implementation_key(3818)) HRESULT IVGShapeRange::OrderBackOf ( struct IVGShape * Shape );
__declspec(implementation_key(3819)) HRESULT IVGShapeRange::OrderReverse ( );
__declspec(implementation_key(3820)) HRESULT IVGShapeRange::Rotate ( double Angle );
__declspec(implementation_key(3821)) HRESULT IVGShapeRange::RotateEx ( double Angle, double CenterX, double CenterY );
__declspec(implementation_key(3822)) HRESULT IVGShapeRange::Skew ( double AngleX, double AngleY );
__declspec(implementation_key(3823)) HRESULT IVGShapeRange::SkewEx ( double AngleX, double AngleY, double CenterX, double CenterY );
__declspec(implementation_key(3824)) HRESULT IVGShapeRange::UngroupAll ( );
__declspec(implementation_key(3825)) HRESULT IVGShapeRange::Flip ( enum cdrFlipAxes Axes );
__declspec(implementation_key(3826)) double IVGShapeRange::GetPositionX ( );
__declspec(implementation_key(3827)) void IVGShapeRange::PutPositionX ( double pVal );
__declspec(implementation_key(3828)) double IVGShapeRange::GetPositionY ( );
__declspec(implementation_key(3829)) void IVGShapeRange::PutPositionY ( double pVal );
__declspec(implementation_key(3830)) double IVGShapeRange::GetSizeWidth ( );
__declspec(implementation_key(3831)) void IVGShapeRange::PutSizeWidth ( double pVal );
__declspec(implementation_key(3832)) double IVGShapeRange::GetSizeHeight ( );
__declspec(implementation_key(3833)) void IVGShapeRange::PutSizeHeight ( double pVal );
__declspec(implementation_key(3834)) double IVGShapeRange::GetRotationCenterX ( );
__declspec(implementation_key(3835)) void IVGShapeRange::PutRotationCenterX ( double pVal );
__declspec(implementation_key(3836)) double IVGShapeRange::GetRotationCenterY ( );
__declspec(implementation_key(3837)) void IVGShapeRange::PutRotationCenterY ( double pVal );
__declspec(implementation_key(3838)) HRESULT IVGShapeRange::AddToPowerClip ( struct IVGShape * Shape, enum cdrTriState CenterInContainer );
__declspec(implementation_key(3839)) HRESULT IVGShapeRange::RemoveFromContainer ( long Level );
__declspec(implementation_key(3840)) HRESULT IVGShapeRange::AddRange ( struct IVGShapeRange * ShapeRange );
__declspec(implementation_key(3841)) HRESULT IVGShapeRange::SetPosition ( double PositionX, double PositionY );
__declspec(implementation_key(3842)) HRESULT IVGShapeRange::SetSize ( double Width, double Height );
__declspec(implementation_key(3843)) IVGShapePtr IVGShapeRange::ConvertToBitmapEx ( enum cdrImageType Mode, VARIANT_BOOL Dithered, VARIANT_BOOL Transparent, long Resolution, enum cdrAntiAliasingType AntiAliasing, VARIANT_BOOL UseColorProfile, VARIANT_BOOL AlwaysOverprintBlack, long OverprintBlackLimit );
__declspec(implementation_key(3844)) IVGShapePtr IVGShapeRange::Combine ( );
__declspec(implementation_key(3845)) HRESULT IVGShapeRange::SetBoundingBox ( double x, double y, double Width, double Height, VARIANT_BOOL KeepAspect, enum cdrReferencePoint ReferencePoint );
__declspec(implementation_key(3846)) HRESULT IVGShapeRange::ApplyNoFill ( );
__declspec(implementation_key(3847)) HRESULT IVGShapeRange::ApplyUniformFill ( struct IVGColor * Color );
__declspec(implementation_key(3848)) HRESULT IVGShapeRange::ApplyFountainFill ( struct IVGColor * StartColor, struct IVGColor * EndColor, enum cdrFountainFillType Type, double Angle, long Steps, long EdgePad, long MidPoint, enum cdrFountainFillBlendType BlendType, double CenterOffsetX, double CenterOffsetY );
__declspec(implementation_key(3849)) HRESULT IVGShapeRange::ApplyPatternFill ( enum cdrPatternFillType Type, _bstr_t FileName, long PatternCanvasIndex, struct IVGColor * FrontColor, struct IVGColor * EndColor, VARIANT_BOOL TransformWithShape );
__declspec(implementation_key(3850)) HRESULT IVGShapeRange::ApplyTextureFill ( _bstr_t TextureName, _bstr_t LibraryName );
__declspec(implementation_key(3851)) HRESULT IVGShapeRange::ApplyPostscriptFill ( const _variant_t & IndexOrName );
__declspec(implementation_key(3852)) IVGShapeRangePtr IVGShapeRange::ConvertOutlineToObject ( );
__declspec(implementation_key(3853)) HRESULT IVGShapeRange::SetOutlineProperties ( double Width, struct IVGOutlineStyle * Style, struct IVGColor * Color, struct IVGArrowHead * StartArrow, struct IVGArrowHead * EndArrow, enum cdrTriState BehindFill, enum cdrTriState ScaleWithShape, enum cdrOutlineLineCaps LineCaps, enum cdrOutlineLineJoin LineJoin, double NibAngle, long NibStretch, double DashDotLength, double PenWidth, double MiterLimit );
__declspec(implementation_key(3854)) HRESULT IVGShapeRange::CreateSelection ( );
__declspec(implementation_key(3855)) HRESULT IVGShapeRange::RemoveFromSelection ( );
__declspec(implementation_key(3856)) HRESULT IVGShapeRange::SetRotationCenter ( double x, double y );
__declspec(implementation_key(3857)) HRESULT IVGShapeRange::Stretch ( double StretchX, double StretchY, VARIANT_BOOL StretchCharactersSize );
__declspec(implementation_key(3858)) HRESULT IVGShapeRange::StretchEx ( double CenterX, double CenterY, double StretchX, double StretchY, VARIANT_BOOL StretchCharactersSize );
__declspec(implementation_key(3859)) HRESULT IVGShapeRange::SetSizeEx ( double CenterX, double CenterY, double Width, double Height );
__declspec(implementation_key(3860)) HRESULT IVGShapeRange::GetBoundingBox ( double * x, double * y, double * Width, double * Height, VARIANT_BOOL UseOutline );
__declspec(implementation_key(3861)) HRESULT IVGShapeRange::RestoreCloneLink ( enum cdrCloneLinkType LinkToRestore );
__declspec(implementation_key(3862)) HRESULT IVGShapeRange::ClearEffect ( enum cdrEffectType Type );
__declspec(implementation_key(3863)) HRESULT IVGShapeRange::RemoveRange ( struct IVGShapeRange * Range );
__declspec(implementation_key(3864)) HRESULT IVGShapeRange::DeleteItem ( long Index );
__declspec(implementation_key(3865)) _variant_t IVGShapeRange::CustomCommand ( _bstr_t ComponentID, _bstr_t CommandID, SAFEARRAY * * Parameters );
__declspec(implementation_key(3866)) HRESULT IVGShapeRange::AlignToShape ( enum cdrAlignType Type, struct IVGShape * Shape, enum cdrTextAlignOrigin TextAlignOrigin );
__declspec(implementation_key(3867)) HRESULT IVGShapeRange::AlignToShapeRange ( enum cdrAlignType Type, struct IVGShapeRange * ShapeRange, enum cdrTextAlignOrigin TextAlignOrigin );
__declspec(implementation_key(3868)) HRESULT IVGShapeRange::AlignToPage ( enum cdrAlignType Type, enum cdrTextAlignOrigin TextAlignOrigin );
__declspec(implementation_key(3869)) HRESULT IVGShapeRange::AlignToPageCenter ( enum cdrAlignType Type, enum cdrTextAlignOrigin TextAlignOrigin );
__declspec(implementation_key(3870)) HRESULT IVGShapeRange::AlignToGrid ( enum cdrAlignType Type, enum cdrTextAlignOrigin TextAlignOrigin );
__declspec(implementation_key(3871)) HRESULT IVGShapeRange::AlignToPoint ( enum cdrAlignType Type, double x, double y, enum cdrTextAlignOrigin TextAlignOrigin );
__declspec(implementation_key(3872)) HRESULT IVGShapeRange::Distribute ( enum cdrDistributeType Type, VARIANT_BOOL PageExtent );
__declspec(implementation_key(3873)) IVGShapePtr IVGShapeRange::ConvertToSymbol ( _bstr_t Name );
__declspec(implementation_key(3874)) HRESULT IVGShapeRange::Ungroup ( );
__declspec(implementation_key(3875)) IVGShapeRangePtr IVGShapeRange::UngroupEx ( );
__declspec(implementation_key(3876)) IVGShapeRangePtr IVGShapeRange::UngroupAllEx ( );
__declspec(implementation_key(3877)) IVGShapeRangePtr IVGShapeRange::Range ( SAFEARRAY * * IndexArray );
__declspec(implementation_key(3878)) IVGShapeRangePtr IVGShapeRange::All ( );
__declspec(implementation_key(3879)) IVGShapeRangePtr IVGShapeRange::AllExcluding ( SAFEARRAY * * IndexArray );
__declspec(implementation_key(3880)) HRESULT IVGShapeRange::BreakApart ( );
__declspec(implementation_key(3881)) IVGShapeRangePtr IVGShapeRange::BreakApartEx ( );
__declspec(implementation_key(3882)) HRESULT IVGShapeRange::MoveToLayer ( struct IVGLayer * Layer );
__declspec(implementation_key(3883)) IVGShapeRangePtr IVGShapeRange::CopyToLayer ( struct IVGLayer * Layer );
__declspec(implementation_key(3884)) HRESULT IVGShapeRange::ClearTransformations ( );
__declspec(implementation_key(3885)) HRESULT IVGShapeRange::Lock ( );
__declspec(implementation_key(3886)) HRESULT IVGShapeRange::Unlock ( );
__declspec(implementation_key(3887)) HRESULT IVGShapeRange::AlignRangeToShape ( enum cdrAlignType Type, struct IVGShape * Shape );
__declspec(implementation_key(3888)) HRESULT IVGShapeRange::AlignRangeToShapeRange ( enum cdrAlignType Type, struct IVGShapeRange * ShapeRange );
__declspec(implementation_key(3889)) HRESULT IVGShapeRange::AlignRangeToPage ( enum cdrAlignType Type );
__declspec(implementation_key(3890)) HRESULT IVGShapeRange::AlignRangeToPageCenter ( enum cdrAlignType Type );
__declspec(implementation_key(3891)) HRESULT IVGShapeRange::AlignRangeToGrid ( enum cdrAlignType Type );
__declspec(implementation_key(3892)) HRESULT IVGShapeRange::AlignRangeToPoint ( enum cdrAlignType Type, double x, double y );
__declspec(implementation_key(3893)) HRESULT IVGShapeRange::ApplyEffectInvert ( );
__declspec(implementation_key(3894)) HRESULT IVGShapeRange::ApplyEffectPosterize ( long Level );
__declspec(implementation_key(3895)) HRESULT IVGShapeRange::ApplyEffectBCI ( long Brighness, long Contrast, long Intensity );
__declspec(implementation_key(3896)) HRESULT IVGShapeRange::ApplyEffectColorBalance ( long CyanRed, long MagentaGreen, long YellowBlue, VARIANT_BOOL ApplyToShadows, VARIANT_BOOL ApplyToMidtones, VARIANT_BOOL ApplyToHighlights, VARIANT_BOOL PreserveLuminance );
__declspec(implementation_key(3897)) HRESULT IVGShapeRange::ApplyEffectGamma ( double Gamma );
__declspec(implementation_key(3898)) HRESULT IVGShapeRange::ApplyEffectHSL ( const _variant_t & Hue, const _variant_t & Saturation, const _variant_t & Lightness );
__declspec(implementation_key(3899)) HRESULT IVGShapeRange::AffineTransform ( double d11, double d12, double d21, double d22, double CenterX, double CenterY );
__declspec(implementation_key(3900)) HRESULT IVGShapeRange::ApplyFill ( struct IVGFill * Fill );
__declspec(implementation_key(3901)) HRESULT IVGShapeRange::ApplyOutline ( struct IVGOutline * Outline );
__declspec(implementation_key(3902)) IVGShapeRangePtr IVGShapeRange::GetReverseRange ( );
__declspec(implementation_key(3903)) HRESULT IVGShapeRange::Fillet ( double Radius, VARIANT_BOOL CombineSmoothSegments );
__declspec(implementation_key(3904)) HRESULT IVGShapeRange::Chamfer ( double DistanceA, double DistanceB, VARIANT_BOOL CombineSmoothSegments );
__declspec(implementation_key(3905)) HRESULT IVGShapeRange::Scallop ( double Radius, VARIANT_BOOL CombineSmoothSegments );
__declspec(implementation_key(3906)) HRESULT IVGShapeRange::SetFillMode ( enum cdrFillMode Mode );
__declspec(implementation_key(3907)) HRESULT IVGShapeRange::ApplyCustomHatchFill ( double Angle, double Spacing, double Shift, double OriginX, double OriginY, double Width, struct IVGColor * Color, struct IVGOutlineStyle * Style, double DashDotLength, double PenWidth, struct IVGColor * BackColor, VARIANT_BOOL TransformWithShape, VARIANT_BOOL ScaleLinesWithShape, VARIANT_BOOL UseWorldCoordinates, double FillScale, double LineScale, double FillAngle, double FillSkew );
__declspec(implementation_key(3908)) HRESULT IVGShapeRange::ApplyHatchFill ( _bstr_t LibraryName, const _variant_t & HatchNameOrIndex, struct IVGColor * BackColor, VARIANT_BOOL TransformWithShape, VARIANT_BOOL ScaleLinesWithShape, VARIANT_BOOL UseWorldCoordinates, double FillScale, double LineScale, double FillAngle, double FillSkew );
__declspec(implementation_key(3909)) double IVGShapeRange::GetLeftX ( );
__declspec(implementation_key(3910)) double IVGShapeRange::GetRightX ( );
__declspec(implementation_key(3911)) double IVGShapeRange::GetTopY ( );
__declspec(implementation_key(3912)) double IVGShapeRange::GetBottomY ( );
__declspec(implementation_key(3913)) IVGShapesPtr IVGShapeRange::GetShapes ( );
__declspec(implementation_key(3914)) IVGShapePtr IVGShapeRange::GetFirstShape ( );
__declspec(implementation_key(3915)) IVGShapePtr IVGShapeRange::GetLastShape ( );
__declspec(implementation_key(3916)) IVGShapeRangePtr IVGShapeRange::StepAndRepeat ( long NumCopies, double DistanceX, double DistanceY, enum cdrDistanceMode ModeX, enum cdrDirection DirectionX, enum cdrDistanceMode ModeY, enum cdrDirection DirectionY );
__declspec(implementation_key(3917)) VARIANT_BOOL IVGShapeRange::Exists ( struct IVGShape * Shape );
__declspec(implementation_key(3918)) VARIANT_BOOL IVGShapeRange::ExistsAnyOfType ( SAFEARRAY * * TypeList );
__declspec(implementation_key(3919)) long IVGShapeRange::CountAnyOfType ( SAFEARRAY * * TypeList );
__declspec(implementation_key(3920)) IVGShapeRangePtr IVGShapeRange::FindAnyOfType ( SAFEARRAY * * TypeList );
__declspec(implementation_key(3921)) IVGShapeRangePtr IVGShapeRange::GetLinkedShapes ( enum cdrShapeLinkType LinkType );
__declspec(implementation_key(3922)) IVGRectPtr IVGShapeRange::GetBoundingBox ( );
__declspec(implementation_key(3923)) HRESULT IVGShapeRange::GetPositionEx ( enum cdrReferencePoint ReferencePoint, double * x, double * y );
__declspec(implementation_key(3924)) HRESULT IVGShapeRange::SetPositionEx ( enum cdrReferencePoint ReferencePoint, double x, double y );
__declspec(implementation_key(3925)) double IVGShapeRange::GetCenterX ( );
__declspec(implementation_key(3926)) void IVGShapeRange::PutCenterX ( double pVal );
__declspec(implementation_key(3927)) double IVGShapeRange::GetCenterY ( );
__declspec(implementation_key(3928)) void IVGShapeRange::PutCenterY ( double pVal );
__declspec(implementation_key(3929)) void IVGShapeRange::PutLeftX ( double pVal );
__declspec(implementation_key(3930)) void IVGShapeRange::PutRightX ( double pVal );
__declspec(implementation_key(3931)) void IVGShapeRange::PutTopY ( double pVal );
__declspec(implementation_key(3932)) void IVGShapeRange::PutBottomY ( double pVal );
__declspec(implementation_key(3933)) VARIANT_BOOL IVGShapeRange::CopyPropertiesFrom ( struct IVGShape * Source, enum cdrCopyProperties Properties );
__declspec(implementation_key(3934)) enum cdrOverprintState IVGShapeRange::GetOverprintFillState ( );
__declspec(implementation_key(3935)) enum cdrOverprintState IVGShapeRange::GetOverprintOutlineState ( );
__declspec(implementation_key(3936)) HRESULT IVGShapeRange::Sort ( _bstr_t CompareExpression, long StartIndex, long EndIndex, const _variant_t & Data );
__declspec(implementation_key(3937)) HRESULT IVGShapeRange::SetPixelAlignedRendering ( VARIANT_BOOL PixelAligned );
__declspec(implementation_key(3938)) IVGDocumentPtr IVGShapeRange::CreateDocumentFrom ( VARIANT_BOOL TemporaryDocument );
__declspec(implementation_key(3939)) HRESULT IVGShapeRange::AlignAndDistribute ( enum cdrAlignDistributeH MethodH, enum cdrAlignDistributeV MethodV, enum cdrAlignShapesTo AlignTo, enum cdrDistributeArea DistributeArea, VARIANT_BOOL UseOutline, enum cdrTextAlignOrigin TextAlignOrigin, double PointX, double PointY, struct IVGRect * DistributeRect );
__declspec(implementation_key(3940)) HRESULT IVGShapeRange::SetOutlinePropertiesEx ( double Width, struct IVGOutlineStyle * Style, struct IVGColor * Color, struct IVGArrowHead * StartArrow, struct IVGArrowHead * EndArrow, enum cdrTriState BehindFill, enum cdrTriState ScaleWithShape, enum cdrOutlineLineCaps LineCaps, enum cdrOutlineLineJoin LineJoin, double NibAngle, long NibStretch, double DashDotLength, double PenWidth, double MiterLimit, enum cdrOutlineJustification Justification );
__declspec(implementation_key(3941)) IVGShapePtr IVGShapeRange::CreateBoundary ( double x, double y, VARIANT_BOOL PlaceOnTop, VARIANT_BOOL DeleteSource );
__declspec(implementation_key(3942)) IVGShapeRangePtr IVGShapeRange::EqualDivide ( long Divisions, double Gap, VARIANT_BOOL Group, VARIANT_BOOL Combine, VARIANT_BOOL DeleteSource );
__declspec(implementation_key(3943)) IVGShapeRangePtr IVGShapeRange::Project ( enum cdrProjectPlane Plane, enum cdrReferencePoint ReferencePoint, VARIANT_BOOL ApplyToDuplicate );
__declspec(implementation_key(3944)) IVGShapeRangePtr IVGShapeRange::Unproject ( enum cdrProjectPlane Plane, enum cdrReferencePoint ReferencePoint, VARIANT_BOOL ApplyToDuplicate );
__declspec(implementation_key(3945)) HRESULT IVGShapeRange::Show ( );
__declspec(implementation_key(3946)) HRESULT IVGShapeRange::Hide ( );
__declspec(implementation_key(3947)) IVGShapeRangePtr IVGShapeRange::GetToolShapes ( _bstr_t ShapeGuid );
__declspec(implementation_key(3948)) HRESULT IVGShapeRange::ModifyToolShapeProperties ( struct IVGProperties * ShapePropertiesToModify );
__declspec(implementation_key(3949)) IVGShapeRangePtr IVGShapeRange::CreateParallelCurves ( long Count, double distanceBetweenCurves );
__declspec(implementation_key(3950)) SAFEARRAY * IVGShapeRange::GetColorTypes ( );
__declspec(implementation_key(3951)) SAFEARRAY * IVGShapeRange::GetColors ( long MaxBitmapColors );
__declspec(implementation_key(3952)) HRESULT IVGShapeRange::FlattenEffects ( );
__declspec(implementation_key(3953)) IVGApplicationPtr IVGPowerClip::GetApplication ( );
__declspec(implementation_key(3954)) IVGShapePtr IVGPowerClip::GetParent ( );
__declspec(implementation_key(3955)) IVGShapesPtr IVGPowerClip::GetShapes ( );
__declspec(implementation_key(3956)) VARIANT_BOOL IVGPowerClip::GetContentsLocked ( );
__declspec(implementation_key(3957)) void IVGPowerClip::PutContentsLocked ( VARIANT_BOOL pVal );
__declspec(implementation_key(3958)) HRESULT IVGPowerClip::EnterEditMode ( );
__declspec(implementation_key(3959)) HRESULT IVGPowerClip::LeaveEditMode ( );
__declspec(implementation_key(3960)) IVGShapeRangePtr IVGPowerClip::ExtractShapes ( );
__declspec(implementation_key(3961)) enum cdrFillType IVGFill::GetType ( );
__declspec(implementation_key(3962)) IVGColorPtr IVGFill::GetUniformColor ( );
__declspec(implementation_key(3963)) void IVGFill::PutUniformColor ( struct IVGColor * ppVal );
__declspec(implementation_key(3964)) IVGFountainFillPtr IVGFill::GetFountain ( );
__declspec(implementation_key(3965)) void IVGFill::PutFountain ( struct IVGFountainFill * ppVal );
__declspec(implementation_key(3966)) IVGPatternFillPtr IVGFill::GetPattern ( );
__declspec(implementation_key(3967)) void IVGFill::PutPattern ( struct IVGPatternFill * ppVal );
__declspec(implementation_key(3968)) IVGTextureFillPtr IVGFill::GetTexture ( );
__declspec(implementation_key(3969)) void IVGFill::PutTexture ( struct IVGTextureFill * ppVal );
__declspec(implementation_key(3970)) IVGPostScriptFillPtr IVGFill::GetPostScript ( );
__declspec(implementation_key(3971)) void IVGFill::PutPostScript ( struct IVGPostScriptFill * ppVal );
__declspec(implementation_key(3972)) HRESULT IVGFill::ApplyNoFill ( );
__declspec(implementation_key(3973)) HRESULT IVGFill::ApplyUniformFill ( struct IVGColor * Color );
__declspec(implementation_key(3974)) IVGFountainFillPtr IVGFill::ApplyFountainFill ( struct IVGColor * StartColor, struct IVGColor * EndColor, enum cdrFountainFillType Type, double Angle, long Steps, long EdgePad, long MidPoint, enum cdrFountainFillBlendType BlendType, double CenterOffsetX, double CenterOffsetY );
__declspec(implementation_key(3975)) IVGPatternFillPtr IVGFill::ApplyPatternFill ( enum cdrPatternFillType Type, _bstr_t FileName, long PatternCanvasIndex, struct IVGColor * FrontColor, struct IVGColor * EndColor, VARIANT_BOOL TransformWithShape );
__declspec(implementation_key(3976)) IVGTextureFillPtr IVGFill::ApplyTextureFill ( _bstr_t TextureName, _bstr_t LibraryName );
__declspec(implementation_key(3977)) IVGPostScriptFillPtr IVGFill::ApplyPostscriptFill ( const _variant_t & IndexOrName );
__declspec(implementation_key(3978)) IVGFillPtr IVGFill::GetCopy ( );
__declspec(implementation_key(3979)) HRESULT IVGFill::CopyAssign ( struct IVGFill * SourceFill );
__declspec(implementation_key(3980)) VARIANT_BOOL IVGFill::UserAssign ( enum cdrFillType FillType, enum cdrPatternFillType PatternType, long ParentWindowHandle );
__declspec(implementation_key(3981)) IVGPSScreenOptionsPtr IVGFill::GetPSScreen ( );
__declspec(implementation_key(3982)) IVGHatchFillPtr IVGFill::GetHatch ( );
__declspec(implementation_key(3983)) void IVGFill::PutHatch ( struct IVGHatchFill * ppVal );
__declspec(implementation_key(3984)) VARIANT_BOOL IVGFill::CompareWith ( struct IVGFill * Fill );
__declspec(implementation_key(3985)) IVGHatchFillPtr IVGFill::ApplyCustomHatchFill ( double Angle, double Spacing, double Shift, double OriginX, double OriginY, double Width, struct IVGColor * Color, struct IVGOutlineStyle * Style, double DashDotLength, double PenWidth, struct IVGColor * BackColor, VARIANT_BOOL TransformWithShape, VARIANT_BOOL ScaleLinesWithShape, VARIANT_BOOL UseWorldCoordinates, double FillScale, double LineScale, double FillAngle, double FillSkew );
__declspec(implementation_key(3986)) IVGHatchFillPtr IVGFill::ApplyHatchFill ( _bstr_t LibraryName, const _variant_t & HatchNameOrIndex, struct IVGColor * BackColor, VARIANT_BOOL TransformWithShape, VARIANT_BOOL ScaleLinesWithShape, VARIANT_BOOL UseWorldCoordinates, double FillScale, double LineScale, double FillAngle, double FillSkew );
__declspec(implementation_key(3987)) _bstr_t IVGFill::ToString ( );
__declspec(implementation_key(3988)) VARIANT_BOOL IVGFill::StringAssign ( _bstr_t FillString );
__declspec(implementation_key(3989)) IVGFillPtr IVGHatchFills::GetItem ( const _variant_t & IndexOrName );
__declspec(implementation_key(3990)) long IVGHatchFills::GetCount ( );
__declspec(implementation_key(3991)) IUnknownPtr IVGHatchFills::Get_NewEnum ( );
__declspec(implementation_key(3992)) IVGFillPtr IVGHatchFills::Find ( _bstr_t Name );
__declspec(implementation_key(3993)) _bstr_t IVGHatchLibrary::GetName ( );
__declspec(implementation_key(3994)) IVGHatchFillsPtr IVGHatchLibrary::GetFills ( );
__declspec(implementation_key(3995)) VARIANT_BOOL IVGHatchLibrary::GetActive ( );
__declspec(implementation_key(3996)) long IVGHatchLibrary::GetIndex ( );
__declspec(implementation_key(3997)) HRESULT IVGHatchLibrary::Activate ( );
__declspec(implementation_key(3998)) _bstr_t IVGHatchLibrary::GetDisplayName ( );
__declspec(implementation_key(3999)) IVGColorPtr IVGHatchFill::GetBackColor ( );
__declspec(implementation_key(4000)) void IVGHatchFill::PutBackColor ( struct IVGColor * ppVal );
__declspec(implementation_key(4001)) VARIANT_BOOL IVGHatchFill::GetHasBackground ( );
__declspec(implementation_key(4002)) VARIANT_BOOL IVGHatchFill::GetTransformWithShape ( );
__declspec(implementation_key(4003)) void IVGHatchFill::PutTransformWithShape ( VARIANT_BOOL pVal );
__declspec(implementation_key(4004)) VARIANT_BOOL IVGHatchFill::GetScaleLinesWithShape ( );
__declspec(implementation_key(4005)) void IVGHatchFill::PutScaleLinesWithShape ( VARIANT_BOOL pVal );
__declspec(implementation_key(4006)) VARIANT_BOOL IVGHatchFill::GetUseWorldCoordinates ( );
__declspec(implementation_key(4007)) void IVGHatchFill::PutUseWorldCoordinates ( VARIANT_BOOL pVal );
__declspec(implementation_key(4008)) _bstr_t IVGHatchFill::GetLibraryName ( );
__declspec(implementation_key(4009)) _bstr_t IVGHatchFill::GetHatchName ( );
__declspec(implementation_key(4010)) IVGHatchPatternsPtr IVGHatchFill::GetPatterns ( );
__declspec(implementation_key(4011)) double IVGHatchFill::GetFillScaleX ( );
__declspec(implementation_key(4012)) void IVGHatchFill::PutFillScaleX ( double pVal );
__declspec(implementation_key(4013)) double IVGHatchFill::GetFillScaleY ( );
__declspec(implementation_key(4014)) void IVGHatchFill::PutFillScaleY ( double pVal );
__declspec(implementation_key(4015)) double IVGHatchFill::GetRotationAngle ( );
__declspec(implementation_key(4016)) void IVGHatchFill::PutRotationAngle ( double pVal );
__declspec(implementation_key(4017)) double IVGHatchFill::GetSkewAngle ( );
__declspec(implementation_key(4018)) void IVGHatchFill::PutSkewAngle ( double pVal );
__declspec(implementation_key(4019)) HRESULT IVGHatchFill::SetNoBackColor ( );
__declspec(implementation_key(4020)) HRESULT IVGHatchFill::SetFillScale ( double FillScale );
__declspec(implementation_key(4021)) double IVGHatchFill::GetFillScale ( );
__declspec(implementation_key(4022)) HRESULT IVGHatchFill::SetLineScale ( double LineScale );
__declspec(implementation_key(4023)) double IVGHatchFill::GetLineScale ( );
__declspec(implementation_key(4024)) IVGHatchPatternPtr IVGHatchFill::AddPattern ( double Angle, double Spacing, double Shift, double OriginX, double OriginY, double Width, struct IVGColor * Color, struct IVGOutlineStyle * Style, double DashDotLength, double PenWidth );
__declspec(implementation_key(4025)) HRESULT IVGHatchFill::AddToLibrary ( _bstr_t LibraryName, _bstr_t HatchName );
__declspec(implementation_key(4026)) HRESULT IVGHatchFill::Select ( _bstr_t LibraryName, const _variant_t & HatchNameOrIndex, struct IVGColor * BackColor, VARIANT_BOOL TransformWithShape, VARIANT_BOOL ScaleLinesWithShape, VARIANT_BOOL UseWorldCoordinates, double FillScale, double LineScale, double FillAngle, double FillSkew );
__declspec(implementation_key(4027)) VARIANT_BOOL IVGHatchFill::GetIsFromLibrary ( );
__declspec(implementation_key(4028)) long IVGHatchFill::GetIndex ( );
__declspec(implementation_key(4029)) IVGHatchLibraryPtr IVGHatchFill::GetLibrary ( );
__declspec(implementation_key(4030)) void IVGStructFontProperties::PutName ( _bstr_t pVal );
__declspec(implementation_key(4031)) _bstr_t IVGStructFontProperties::GetName ( );
__declspec(implementation_key(4032)) void IVGStructFontProperties::PutStyle ( enum cdrFontStyle pVal );
__declspec(implementation_key(4033)) enum cdrFontStyle IVGStructFontProperties::GetStyle ( );
__declspec(implementation_key(4034)) void IVGStructFontProperties::PutSize ( float pVal );
__declspec(implementation_key(4035)) float IVGStructFontProperties::GetSize ( );
__declspec(implementation_key(4036)) void IVGStructFontProperties::PutUnderline ( enum cdrFontLine pVal );
__declspec(implementation_key(4037)) enum cdrFontLine IVGStructFontProperties::GetUnderline ( );
__declspec(implementation_key(4038)) void IVGStructFontProperties::PutOverscore ( enum cdrFontLine pVal );
__declspec(implementation_key(4039)) enum cdrFontLine IVGStructFontProperties::GetOverscore ( );
__declspec(implementation_key(4040)) void IVGStructFontProperties::PutStrikethru ( enum cdrFontLine pVal );
__declspec(implementation_key(4041)) enum cdrFontLine IVGStructFontProperties::GetStrikethru ( );
__declspec(implementation_key(4042)) void IVGStructFontProperties::PutUppercase ( enum cdrFontCase pVal );
__declspec(implementation_key(4043)) enum cdrFontCase IVGStructFontProperties::GetUppercase ( );
__declspec(implementation_key(4044)) void IVGStructFontProperties::PutPosition ( enum cdrFontPosition pVal );
__declspec(implementation_key(4045)) enum cdrFontPosition IVGStructFontProperties::GetPosition ( );
__declspec(implementation_key(4046)) void IVGStructFontProperties::PutRangeKerning ( long pVal );
__declspec(implementation_key(4047)) long IVGStructFontProperties::GetRangeKerning ( );
__declspec(implementation_key(4048)) void IVGStructFontProperties::PutFill ( struct IVGFill * ppVal );
__declspec(implementation_key(4049)) IVGFillPtr IVGStructFontProperties::GetFill ( );
__declspec(implementation_key(4050)) void IVGStructFontProperties::PutOutline ( struct IVGOutline * ppVal );
__declspec(implementation_key(4051)) IVGOutlinePtr IVGStructFontProperties::GetOutline ( );
__declspec(implementation_key(4052)) IVGHatchLibraryPtr IVGHatchLibraries::GetItem ( const _variant_t & IndexOrName );
__declspec(implementation_key(4053)) long IVGHatchLibraries::GetCount ( );
__declspec(implementation_key(4054)) IVGHatchLibraryPtr IVGHatchLibraries::Find ( _bstr_t Name );
__declspec(implementation_key(4055)) IUnknownPtr IVGHatchLibraries::Get_NewEnum ( );
__declspec(implementation_key(4056)) IVGHatchLibraryPtr IVGHatchLibraries::GetActiveLibrary ( );
__declspec(implementation_key(4057)) IVGHatchLibraryPtr IVGHatchLibraries::GetDefaultLibrary ( );
__declspec(implementation_key(4058)) enum cdrTextType IVGText::GetType ( );
__declspec(implementation_key(4059)) long IVGText::GetFramesInLink ( );
__declspec(implementation_key(4060)) long IVGText::GetUnusedFramesInLink ( );
__declspec(implementation_key(4061)) VARIANT_BOOL IVGText::GetOverflow ( );
__declspec(implementation_key(4062)) IVGStructFontPropertiesPtr IVGText::GetFontProperties ( enum cdrTextFrames Frames );
__declspec(implementation_key(4063)) void IVGText::PutFontProperties ( enum cdrTextFrames Frames, struct IVGStructFontProperties * ppVal );
__declspec(implementation_key(4064)) IVGStructFontPropertiesPtr IVGText::GetFontPropertiesInRange ( long StartIndex, long Count, enum cdrTextIndexingType IndexingType );
__declspec(implementation_key(4065)) void IVGText::PutFontPropertiesInRange ( long StartIndex, long Count, enum cdrTextIndexingType IndexingType, struct IVGStructFontProperties * ppVal );
__declspec(implementation_key(4066)) IVGStructAlignPropertiesPtr IVGText::GetAlignProperties ( enum cdrTextFrames Frames );
__declspec(implementation_key(4067)) void IVGText::PutAlignProperties ( enum cdrTextFrames Frames, struct IVGStructAlignProperties * ppVal );
__declspec(implementation_key(4068)) IVGStructAlignPropertiesPtr IVGText::GetAlignPropertiesInRange ( long StartIndex, long Count, enum cdrTextIndexingType IndexingType );
__declspec(implementation_key(4069)) void IVGText::PutAlignPropertiesInRange ( long StartIndex, long Count, enum cdrTextIndexingType IndexingType, struct IVGStructAlignProperties * ppVal );
__declspec(implementation_key(4070)) IVGStructSpacePropertiesPtr IVGText::GetSpaceProperties ( enum cdrTextFrames Frames );
__declspec(implementation_key(4071)) void IVGText::PutSpaceProperties ( enum cdrTextFrames Frames, struct IVGStructSpaceProperties * ppVal );
__declspec(implementation_key(4072)) IVGStructSpacePropertiesPtr IVGText::GetSpacePropertiesInRange ( long StartIndex, long Count, enum cdrTextIndexingType IndexingType );
__declspec(implementation_key(4073)) void IVGText::PutSpacePropertiesInRange ( long StartIndex, long Count, enum cdrTextIndexingType IndexingType, struct IVGStructSpaceProperties * ppVal );
__declspec(implementation_key(4074)) IVGStructHyphenationSettingsPtr IVGText::GetHyphenationSettings ( enum cdrTextFrames Frames );
__declspec(implementation_key(4075)) void IVGText::PutHyphenationSettings ( enum cdrTextFrames Frames, struct IVGStructHyphenationSettings * ppVal );
__declspec(implementation_key(4076)) IVGStructHyphenationSettingsPtr IVGText::GetHyphenationSettingsInRange ( long StartIndex, long Count, enum cdrTextIndexingType IndexingType );
__declspec(implementation_key(4077)) void IVGText::PutHyphenationSettingsInRange ( long StartIndex, long Count, enum cdrTextIndexingType IndexingType, struct IVGStructHyphenationSettings * ppVal );
__declspec(implementation_key(4078)) _bstr_t IVGText::GetContents ( enum cdrTextFrames Frames );
__declspec(implementation_key(4079)) void IVGText::PutContents ( enum cdrTextFrames Frames, _bstr_t pVal );
__declspec(implementation_key(4080)) IVGEffectPtr IVGText::FitToPath ( struct IVGShape * Path );
__declspec(implementation_key(4081)) long IVGText::Find ( _bstr_t Text, VARIANT_BOOL CaseSensitive, long StartIndex, VARIANT_BOOL WrapAround, enum cdrTextIndexingType IndexingType );
__declspec(implementation_key(4082)) HRESULT IVGText::Replace ( _bstr_t OldText, _bstr_t NewText, VARIANT_BOOL CaseSensitive, long StartIndex, VARIANT_BOOL ReplaceAll, VARIANT_BOOL WrapAround, enum cdrTextIndexingType IndexingType );
__declspec(implementation_key(4083)) HRESULT IVGText::ImportFromFile ( _bstr_t FileName, long StartIndex, enum cdrTextIndexingType IndexingType );
__declspec(implementation_key(4084)) HRESULT IVGText::ExportToFile ( _bstr_t FileName, long StartIndex, long Count, enum cdrTextIndexingType IndexingType );
__declspec(implementation_key(4085)) HRESULT IVGText::ConvertToArtistic ( );
__declspec(implementation_key(4086)) HRESULT IVGText::ConvertToParagraph ( );
__declspec(implementation_key(4087)) VARIANT_BOOL IVGText::GetIsHTMLCompatible ( );
__declspec(implementation_key(4088)) VARIANT_BOOL IVGText::MakeHTMLCompatible ( VARIANT_BOOL HTML );
__declspec(implementation_key(4089)) IVGTextRangePtr IVGText::GetStory ( );
__declspec(implementation_key(4090)) IVGTextRangePtr IVGText::GetSelection ( );
__declspec(implementation_key(4091)) IVGTextRangePtr IVGText::Range ( long Start, long End );
__declspec(implementation_key(4092)) VARIANT_BOOL IVGText::GetIsEditing ( );
__declspec(implementation_key(4093)) HRESULT IVGText::BeginEdit ( );
__declspec(implementation_key(4094)) IVGTextFramePtr IVGText::GetFrame ( );
__declspec(implementation_key(4095)) IVGTextFramesPtr IVGText::GetFrames ( );
__declspec(implementation_key(4096)) VARIANT_BOOL IVGText::GetIsArtisticText ( );
__declspec(implementation_key(4097)) HRESULT IVGText::FitTextToFrame ( );
__declspec(implementation_key(4098)) IVGApplicationPtr IVGEffect::GetApplication ( );
__declspec(implementation_key(4099)) IVGEffectsPtr IVGEffect::GetParent ( );
__declspec(implementation_key(4100)) enum cdrEffectType IVGEffect::GetType ( );
__declspec(implementation_key(4101)) IVGEffectBlendPtr IVGEffect::GetBlend ( );
__declspec(implementation_key(4102)) IVGEffectControlPathPtr IVGEffect::GetControlPath ( );
__declspec(implementation_key(4103)) IVGEffectExtrudePtr IVGEffect::GetExtrude ( );
__declspec(implementation_key(4104)) IVGEffectEnvelopePtr IVGEffect::GetEnvelope ( );
__declspec(implementation_key(4105)) IVGEffectTextOnPathPtr IVGEffect::GetTextOnPath ( );
__declspec(implementation_key(4106)) IVGEffectDropShadowPtr IVGEffect::GetDropShadow ( );
__declspec(implementation_key(4107)) IVGEffectContourPtr IVGEffect::GetContour ( );
__declspec(implementation_key(4108)) IVGEffectDistortionPtr IVGEffect::GetDistortion ( );
__declspec(implementation_key(4109)) IVGEffectLensPtr IVGEffect::GetLens ( );
__declspec(implementation_key(4110)) IVGEffectPerspectivePtr IVGEffect::GetPerspective ( );
__declspec(implementation_key(4111)) IVGEffectsPtr IVGEffect::GetClones ( );
__declspec(implementation_key(4112)) IVGEffectPtr IVGEffect::GetCloneParent ( );
__declspec(implementation_key(4113)) HRESULT IVGEffect::Clear ( );
__declspec(implementation_key(4114)) IVGShapeRangePtr IVGEffect::Separate ( );
__declspec(implementation_key(4115)) IVGCustomEffectPtr IVGEffect::GetCustom ( );
__declspec(implementation_key(4116)) IVGEffectInnerShadowPtr IVGEffect::GetInnerShadow ( );
__declspec(implementation_key(4117)) IVGApplicationPtr IVGEffects::GetApplication ( );
__declspec(implementation_key(4118)) IVGShapePtr IVGEffects::GetParent ( );
__declspec(implementation_key(4119)) IVGEffectPtr IVGEffects::GetItem ( long Index );
__declspec(implementation_key(4120)) IUnknownPtr IVGEffects::Get_NewEnum ( );
__declspec(implementation_key(4121)) long IVGEffects::GetCount ( );
__declspec(implementation_key(4122)) IVGEffectsPtr IVGEffects::GetBlendEffects ( );
__declspec(implementation_key(4123)) IVGEffectsPtr IVGEffects::GetCustomEffects ( );
__declspec(implementation_key(4124)) IVGEffectsPtr IVGEffects::GetDistortionEffects ( );
__declspec(implementation_key(4125)) IVGEffectsPtr IVGEffects::GetEnvelopeEffects ( );
__declspec(implementation_key(4126)) IVGEffectsPtr IVGEffects::GetPerspectiveEffects ( );
__declspec(implementation_key(4127)) IVGEffectPtr IVGEffects::GetContourEffect ( );
__declspec(implementation_key(4128)) IVGEffectPtr IVGEffects::GetControlPathEffect ( );
__declspec(implementation_key(4129)) IVGEffectPtr IVGEffects::GetDropShadowEffect ( );
__declspec(implementation_key(4130)) IVGEffectPtr IVGEffects::GetExtrudeEffect ( );
__declspec(implementation_key(4131)) IVGEffectPtr IVGEffects::GetLensEffect ( );
__declspec(implementation_key(4132)) IVGEffectPtr IVGEffects::GetTextOnPathEffect ( );
__declspec(implementation_key(4133)) IVGEffectPtr IVGEffects::GetInnerShadowEffect ( );
__declspec(implementation_key(4134)) IVGApplicationPtr IVGEffectBlend::GetApplication ( );
__declspec(implementation_key(4135)) IVGEffectPtr IVGEffectBlend::GetParent ( );
__declspec(implementation_key(4136)) IVGShapePtr IVGEffectBlend::GetStartShape ( );
__declspec(implementation_key(4137)) void IVGEffectBlend::PutStartShape ( struct IVGShape * ppVal );
__declspec(implementation_key(4138)) IVGShapePtr IVGEffectBlend::GetEndShape ( );
__declspec(implementation_key(4139)) void IVGEffectBlend::PutEndShape ( struct IVGShape * ppVal );
__declspec(implementation_key(4140)) IVGShapePtr IVGEffectBlend::GetBlendGroup ( );
__declspec(implementation_key(4141)) IVGShapePtr IVGEffectBlend::GetPath ( );
__declspec(implementation_key(4142)) void IVGEffectBlend::PutPath ( struct IVGShape * ppVal );
__declspec(implementation_key(4143)) double IVGEffectBlend::GetStartShapeOffset ( );
__declspec(implementation_key(4144)) void IVGEffectBlend::PutStartShapeOffset ( double pVal );
__declspec(implementation_key(4145)) double IVGEffectBlend::GetEndShapeOffset ( );
__declspec(implementation_key(4146)) void IVGEffectBlend::PutEndShapeOffset ( double pVal );
__declspec(implementation_key(4147)) enum cdrBlendMode IVGEffectBlend::GetMode ( );
__declspec(implementation_key(4148)) void IVGEffectBlend::PutMode ( enum cdrBlendMode pVal );
__declspec(implementation_key(4149)) long IVGEffectBlend::GetSteps ( );
__declspec(implementation_key(4150)) void IVGEffectBlend::PutSteps ( long pVal );
__declspec(implementation_key(4151)) double IVGEffectBlend::GetSpacing ( );
__declspec(implementation_key(4152)) void IVGEffectBlend::PutSpacing ( double pVal );
__declspec(implementation_key(4153)) double IVGEffectBlend::GetAngle ( );
__declspec(implementation_key(4154)) void IVGEffectBlend::PutAngle ( double pVal );
__declspec(implementation_key(4155)) VARIANT_BOOL IVGEffectBlend::GetLoop ( );
__declspec(implementation_key(4156)) void IVGEffectBlend::PutLoop ( VARIANT_BOOL pVal );
__declspec(implementation_key(4157)) VARIANT_BOOL IVGEffectBlend::GetFullPath ( );
__declspec(implementation_key(4158)) void IVGEffectBlend::PutFullPath ( VARIANT_BOOL pVal );
__declspec(implementation_key(4159)) VARIANT_BOOL IVGEffectBlend::GetRotateShapes ( );
__declspec(implementation_key(4160)) void IVGEffectBlend::PutRotateShapes ( VARIANT_BOOL pVal );
__declspec(implementation_key(4161)) enum cdrFountainFillBlendType IVGEffectBlend::GetColorBlendType ( );
__declspec(implementation_key(4162)) void IVGEffectBlend::PutColorBlendType ( enum cdrFountainFillBlendType pVal );
__declspec(implementation_key(4163)) long IVGEffectBlend::GetSpacingAcceleration ( );
__declspec(implementation_key(4164)) void IVGEffectBlend::PutSpacingAcceleration ( long pVal );
__declspec(implementation_key(4165)) long IVGEffectBlend::GetColorAcceleration ( );
__declspec(implementation_key(4166)) void IVGEffectBlend::PutColorAcceleration ( long pVal );
__declspec(implementation_key(4167)) VARIANT_BOOL IVGEffectBlend::GetLinkAcceleration ( );
__declspec(implementation_key(4168)) void IVGEffectBlend::PutLinkAcceleration ( VARIANT_BOOL pVal );
__declspec(implementation_key(4169)) VARIANT_BOOL IVGEffectBlend::GetAccelerateSize ( );
__declspec(implementation_key(4170)) void IVGEffectBlend::PutAccelerateSize ( VARIANT_BOOL pVal );
__declspec(implementation_key(4171)) VARIANT_BOOL IVGEffectBlend::GetMapNodes ( );
__declspec(implementation_key(4172)) void IVGEffectBlend::PutMapNodes ( VARIANT_BOOL pVal );
__declspec(implementation_key(4173)) IVGSnapPointPtr IVGEffectBlend::GetStartPoint ( );
__declspec(implementation_key(4174)) void IVGEffectBlend::PutStartPoint ( struct IVGSnapPoint * ppVal );
__declspec(implementation_key(4175)) IVGSnapPointPtr IVGEffectBlend::GetEndPoint ( );
__declspec(implementation_key(4176)) void IVGEffectBlend::PutEndPoint ( struct IVGSnapPoint * ppVal );
__declspec(implementation_key(4177)) IVGShapePtr IVGEffectBlend::Split ( long StepNo );
__declspec(implementation_key(4178)) VARIANT_BOOL IVGEffectBlend::FuseStart ( );
__declspec(implementation_key(4179)) VARIANT_BOOL IVGEffectBlend::FuseEnd ( );
__declspec(implementation_key(4180)) VARIANT_BOOL IVGEffectBlend::CopyFrom ( struct IVGEffectBlend * Source );
__declspec(implementation_key(4181)) IVGApplicationPtr IVGEffectControlPath::GetApplication ( );
__declspec(implementation_key(4182)) IVGEffectPtr IVGEffectControlPath::GetParent ( );
__declspec(implementation_key(4183)) IVGEffectsPtr IVGEffectControlPath::GetEffects ( );
__declspec(implementation_key(4184)) IVGApplicationPtr IVGEffectEnvelope::GetApplication ( );
__declspec(implementation_key(4185)) IVGEffectPtr IVGEffectEnvelope::GetParent ( );
__declspec(implementation_key(4186)) IVGCurvePtr IVGEffectEnvelope::GetContainer ( );
__declspec(implementation_key(4187)) void IVGEffectEnvelope::PutContainer ( struct IVGCurve * pVal );
__declspec(implementation_key(4188)) enum cdrEnvelopeMode IVGEffectEnvelope::GetMode ( );
__declspec(implementation_key(4189)) void IVGEffectEnvelope::PutMode ( enum cdrEnvelopeMode pVal );
__declspec(implementation_key(4190)) VARIANT_BOOL IVGEffectEnvelope::GetKeepLines ( );
__declspec(implementation_key(4191)) void IVGEffectEnvelope::PutKeepLines ( VARIANT_BOOL pVal );
__declspec(implementation_key(4192)) HRESULT IVGEffectEnvelope::Select ( long PresetIndex );
__declspec(implementation_key(4193)) HRESULT IVGEffectEnvelope::CopyFrom ( struct IVGEffectEnvelope * Source );
__declspec(implementation_key(4194)) VARIANT_BOOL IVGEffectEnvelope::CreateFrom ( struct IVGShape * Shape );
__declspec(implementation_key(4195)) VARIANT_BOOL IVGEffectEnvelope::CopyFromShape ( struct IVGShape * Source, enum cdrEnvelopeMode Mode, VARIANT_BOOL KeepLines, enum cdrEnvelopeCopyMode CopyMode, const _variant_t & CornerIndices );
__declspec(implementation_key(4196)) VARIANT_BOOL IVGEffectEnvelope::CopyFromCurve ( struct IVGCurve * Source, enum cdrEnvelopeMode Mode, VARIANT_BOOL KeepLines, enum cdrEnvelopeCopyMode CopyMode, const _variant_t & CornerIndices );
__declspec(implementation_key(4197)) _variant_t IVGEffectEnvelope::GetCornerIndices ( );
__declspec(implementation_key(4198)) void IVGEffectEnvelope::PutCornerIndices ( const _variant_t & pVal );
__declspec(implementation_key(4199)) IVGApplicationPtr IVGEffectTextOnPath::GetApplication ( );
__declspec(implementation_key(4200)) IVGEffectPtr IVGEffectTextOnPath::GetParent ( );
__declspec(implementation_key(4201)) IVGShapePtr IVGEffectTextOnPath::GetText ( );
__declspec(implementation_key(4202)) void IVGEffectTextOnPath::PutText ( struct IVGShape * ppVal );
__declspec(implementation_key(4203)) IVGShapePtr IVGEffectTextOnPath::GetPath ( );
__declspec(implementation_key(4204)) void IVGEffectTextOnPath::PutPath ( struct IVGShape * ppVal );
__declspec(implementation_key(4205)) double IVGEffectTextOnPath::GetDistanceFromPath ( );
__declspec(implementation_key(4206)) void IVGEffectTextOnPath::PutDistanceFromPath ( double pVal );
__declspec(implementation_key(4207)) double IVGEffectTextOnPath::GetOffset ( );
__declspec(implementation_key(4208)) void IVGEffectTextOnPath::PutOffset ( double pVal );
__declspec(implementation_key(4209)) enum cdrFittedOrientation IVGEffectTextOnPath::GetOrientation ( );
__declspec(implementation_key(4210)) void IVGEffectTextOnPath::PutOrientation ( enum cdrFittedOrientation pVal );
__declspec(implementation_key(4211)) enum cdrFittedPlacement IVGEffectTextOnPath::GetPlacement ( );
__declspec(implementation_key(4212)) void IVGEffectTextOnPath::PutPlacement ( enum cdrFittedPlacement pVal );
__declspec(implementation_key(4213)) VARIANT_BOOL IVGEffectTextOnPath::GetPlaceOnOtherSide ( );
__declspec(implementation_key(4214)) void IVGEffectTextOnPath::PutPlaceOnOtherSide ( VARIANT_BOOL pVal );
__declspec(implementation_key(4215)) enum cdrFittedQuadrant IVGEffectTextOnPath::GetQuadrant ( );
__declspec(implementation_key(4216)) void IVGEffectTextOnPath::PutQuadrant ( enum cdrFittedQuadrant pVal );
__declspec(implementation_key(4217)) enum cdrFittedVertPlacement IVGEffectTextOnPath::GetVertPlacement ( );
__declspec(implementation_key(4218)) void IVGEffectTextOnPath::PutVertPlacement ( enum cdrFittedVertPlacement pVal );
__declspec(implementation_key(4219)) IVGApplicationPtr IVGEffectDropShadow::GetApplication ( );
__declspec(implementation_key(4220)) IVGEffectPtr IVGEffectDropShadow::GetParent ( );
__declspec(implementation_key(4221)) double IVGEffectDropShadow::GetOffsetX ( );
__declspec(implementation_key(4222)) void IVGEffectDropShadow::PutOffsetX ( double pVal );
__declspec(implementation_key(4223)) double IVGEffectDropShadow::GetOffsetY ( );
__declspec(implementation_key(4224)) void IVGEffectDropShadow::PutOffsetY ( double pVal );
__declspec(implementation_key(4225)) long IVGEffectDropShadow::GetOpacity ( );
__declspec(implementation_key(4226)) void IVGEffectDropShadow::PutOpacity ( long pVal );
__declspec(implementation_key(4227)) long IVGEffectDropShadow::GetFeather ( );
__declspec(implementation_key(4228)) void IVGEffectDropShadow::PutFeather ( long pVal );
__declspec(implementation_key(4229)) enum cdrFeatherType IVGEffectDropShadow::GetFeatherType ( );
__declspec(implementation_key(4230)) void IVGEffectDropShadow::PutFeatherType ( enum cdrFeatherType pVal );
__declspec(implementation_key(4231)) enum cdrEdgeType IVGEffectDropShadow::GetFeatherEdge ( );
__declspec(implementation_key(4232)) void IVGEffectDropShadow::PutFeatherEdge ( enum cdrEdgeType pVal );
__declspec(implementation_key(4233)) enum cdrDropShadowType IVGEffectDropShadow::GetType ( );
__declspec(implementation_key(4234)) void IVGEffectDropShadow::PutType ( enum cdrDropShadowType pVal );
__declspec(implementation_key(4235)) double IVGEffectDropShadow::GetPerspectiveAngle ( );
__declspec(implementation_key(4236)) void IVGEffectDropShadow::PutPerspectiveAngle ( double pVal );
__declspec(implementation_key(4237)) double IVGEffectDropShadow::GetPerspectiveStretch ( );
__declspec(implementation_key(4238)) void IVGEffectDropShadow::PutPerspectiveStretch ( double pVal );
__declspec(implementation_key(4239)) long IVGEffectDropShadow::GetFade ( );
__declspec(implementation_key(4240)) void IVGEffectDropShadow::PutFade ( long pVal );
__declspec(implementation_key(4241)) IVGColorPtr IVGEffectDropShadow::GetColor ( );
__declspec(implementation_key(4242)) void IVGEffectDropShadow::PutColor ( struct IVGColor * ppVal );
__declspec(implementation_key(4243)) HRESULT IVGEffectDropShadow::SetOffset ( double OffsetX, double OffsetY );
__declspec(implementation_key(4244)) IVGShapePtr IVGEffectDropShadow::GetShadowGroup ( );
__declspec(implementation_key(4245)) enum cdrMergeMode IVGEffectDropShadow::GetMergeMode ( );
__declspec(implementation_key(4246)) void IVGEffectDropShadow::PutMergeMode ( enum cdrMergeMode pVal );
__declspec(implementation_key(4247)) IVGApplicationPtr IVGEffectContour::GetApplication ( );
__declspec(implementation_key(4248)) IVGEffectPtr IVGEffectContour::GetParent ( );
__declspec(implementation_key(4249)) enum cdrContourDirection IVGEffectContour::GetDirection ( );
__declspec(implementation_key(4250)) void IVGEffectContour::PutDirection ( enum cdrContourDirection pVal );
__declspec(implementation_key(4251)) double IVGEffectContour::GetOffset ( );
__declspec(implementation_key(4252)) void IVGEffectContour::PutOffset ( double pVal );
__declspec(implementation_key(4253)) long IVGEffectContour::GetSteps ( );
__declspec(implementation_key(4254)) void IVGEffectContour::PutSteps ( long pVal );
__declspec(implementation_key(4255)) enum cdrFountainFillBlendType IVGEffectContour::GetColorBlendType ( );
__declspec(implementation_key(4256)) void IVGEffectContour::PutColorBlendType ( enum cdrFountainFillBlendType pVal );
__declspec(implementation_key(4257)) IVGColorPtr IVGEffectContour::GetOutlineColor ( );
__declspec(implementation_key(4258)) void IVGEffectContour::PutOutlineColor ( struct IVGColor * ppVal );
__declspec(implementation_key(4259)) IVGColorPtr IVGEffectContour::GetFillColor ( );
__declspec(implementation_key(4260)) void IVGEffectContour::PutFillColor ( struct IVGColor * ppVal );
__declspec(implementation_key(4261)) IVGColorPtr IVGEffectContour::GetFillColorTo ( );
__declspec(implementation_key(4262)) void IVGEffectContour::PutFillColorTo ( struct IVGColor * ppVal );
__declspec(implementation_key(4263)) VARIANT_BOOL IVGEffectContour::GetLinkAcceleration ( );
__declspec(implementation_key(4264)) void IVGEffectContour::PutLinkAcceleration ( VARIANT_BOOL pVal );
__declspec(implementation_key(4265)) long IVGEffectContour::GetColorAcceleration ( );
__declspec(implementation_key(4266)) void IVGEffectContour::PutColorAcceleration ( long pVal );
__declspec(implementation_key(4267)) long IVGEffectContour::GetSpacingAcceleration ( );
__declspec(implementation_key(4268)) void IVGEffectContour::PutSpacingAcceleration ( long pVal );
__declspec(implementation_key(4269)) IVGShapePtr IVGEffectContour::GetContourGroup ( );
__declspec(implementation_key(4270)) enum cdrContourEndCapType IVGEffectContour::GetEndCapType ( );
__declspec(implementation_key(4271)) void IVGEffectContour::PutEndCapType ( enum cdrContourEndCapType pVal );
__declspec(implementation_key(4272)) enum cdrContourCornerType IVGEffectContour::GetCornerType ( );
__declspec(implementation_key(4273)) void IVGEffectContour::PutCornerType ( enum cdrContourCornerType pVal );
__declspec(implementation_key(4274)) double IVGEffectContour::GetMiterLimit ( );
__declspec(implementation_key(4275)) void IVGEffectContour::PutMiterLimit ( double pVal );
__declspec(implementation_key(4276)) IVGApplicationPtr IVGEffectLens::GetApplication ( );
__declspec(implementation_key(4277)) IVGEffectPtr IVGEffectLens::GetParent ( );
__declspec(implementation_key(4278)) HRESULT IVGEffectLens::Freeze ( );
__declspec(implementation_key(4279)) HRESULT IVGEffectLens::Unfreeze ( );
__declspec(implementation_key(4280)) IVGShapeRangePtr IVGEffectLens::Ungroup ( );
__declspec(implementation_key(4281)) IVGShapesPtr IVGEffectLens::GetShapes ( );
__declspec(implementation_key(4282)) VARIANT_BOOL IVGEffectLens::GetFrozen ( );
__declspec(implementation_key(4283)) enum cdrLensType IVGEffectLens::GetType ( );
__declspec(implementation_key(4284)) void IVGEffectLens::PutType ( enum cdrLensType pVal );
__declspec(implementation_key(4285)) long IVGEffectLens::GetRate ( );
__declspec(implementation_key(4286)) void IVGEffectLens::PutRate ( long pVal );
__declspec(implementation_key(4287)) IVGColorPtr IVGEffectLens::GetColor ( );
__declspec(implementation_key(4288)) void IVGEffectLens::PutColor ( struct IVGColor * ppVal );
__declspec(implementation_key(4289)) IVGColorPtr IVGEffectLens::GetOutlineColor ( );
__declspec(implementation_key(4290)) void IVGEffectLens::PutOutlineColor ( struct IVGColor * ppVal );
__declspec(implementation_key(4291)) IVGColorPtr IVGEffectLens::GetFillColor ( );
__declspec(implementation_key(4292)) void IVGEffectLens::PutFillColor ( struct IVGColor * ppVal );
__declspec(implementation_key(4293)) IVGColorPtr IVGEffectLens::GetFromColor ( );
__declspec(implementation_key(4294)) void IVGEffectLens::PutFromColor ( struct IVGColor * ppVal );
__declspec(implementation_key(4295)) IVGColorPtr IVGEffectLens::GetToColor ( );
__declspec(implementation_key(4296)) void IVGEffectLens::PutToColor ( struct IVGColor * ppVal );
__declspec(implementation_key(4297)) VARIANT_BOOL IVGEffectLens::GetUseOutlineColor ( );
__declspec(implementation_key(4298)) void IVGEffectLens::PutUseOutlineColor ( VARIANT_BOOL pVal );
__declspec(implementation_key(4299)) VARIANT_BOOL IVGEffectLens::GetUseFillColor ( );
__declspec(implementation_key(4300)) void IVGEffectLens::PutUseFillColor ( VARIANT_BOOL pVal );
__declspec(implementation_key(4301)) enum cdrFountainFillBlendType IVGEffectLens::GetColorMapPalette ( );
__declspec(implementation_key(4302)) void IVGEffectLens::PutColorMapPalette ( enum cdrFountainFillBlendType pVal );
__declspec(implementation_key(4303)) double IVGEffectLens::GetMagnification ( );
__declspec(implementation_key(4304)) void IVGEffectLens::PutMagnification ( double pVal );
__declspec(implementation_key(4305)) VARIANT_BOOL IVGEffectLens::GetUseViewPoint ( );
__declspec(implementation_key(4306)) void IVGEffectLens::PutUseViewPoint ( VARIANT_BOOL pVal );
__declspec(implementation_key(4307)) double IVGEffectLens::GetViewPointX ( );
__declspec(implementation_key(4308)) void IVGEffectLens::PutViewPointX ( double pVal );
__declspec(implementation_key(4309)) double IVGEffectLens::GetViewPointY ( );
__declspec(implementation_key(4310)) void IVGEffectLens::PutViewPointY ( double pVal );
__declspec(implementation_key(4311)) VARIANT_BOOL IVGEffectLens::GetRemoveFace ( );
__declspec(implementation_key(4312)) void IVGEffectLens::PutRemoveFace ( VARIANT_BOOL pVal );
__declspec(implementation_key(4313)) long IVGEffectLens::GetPaletteRotation ( );
__declspec(implementation_key(4314)) void IVGEffectLens::PutPaletteRotation ( long pVal );
__declspec(implementation_key(4315)) IVGApplicationPtr IVGEffectPerspective::GetApplication ( );
__declspec(implementation_key(4316)) IVGEffectPtr IVGEffectPerspective::GetParent ( );
__declspec(implementation_key(4317)) VARIANT_BOOL IVGEffectPerspective::GetUseHorizVanishingPoint ( );
__declspec(implementation_key(4318)) void IVGEffectPerspective::PutUseHorizVanishingPoint ( VARIANT_BOOL pVal );
__declspec(implementation_key(4319)) VARIANT_BOOL IVGEffectPerspective::GetUseVertVanishingPoint ( );
__declspec(implementation_key(4320)) void IVGEffectPerspective::PutUseVertVanishingPoint ( VARIANT_BOOL pVal );
__declspec(implementation_key(4321)) double IVGEffectPerspective::GetHorizVanishingPointX ( );
__declspec(implementation_key(4322)) void IVGEffectPerspective::PutHorizVanishingPointX ( double pVal );
__declspec(implementation_key(4323)) double IVGEffectPerspective::GetHorizVanishingPointY ( );
__declspec(implementation_key(4324)) void IVGEffectPerspective::PutHorizVanishingPointY ( double pVal );
__declspec(implementation_key(4325)) double IVGEffectPerspective::GetVertVanishingPointX ( );
__declspec(implementation_key(4326)) void IVGEffectPerspective::PutVertVanishingPointX ( double pVal );
__declspec(implementation_key(4327)) double IVGEffectPerspective::GetVertVanishingPointY ( );
__declspec(implementation_key(4328)) void IVGEffectPerspective::PutVertVanishingPointY ( double pVal );
__declspec(implementation_key(4329)) IVGApplicationPtr IVGEffectInnerShadow::GetApplication ( );
__declspec(implementation_key(4330)) IVGEffectPtr IVGEffectInnerShadow::GetParent ( );
__declspec(implementation_key(4331)) double IVGEffectInnerShadow::GetOffsetX ( );
__declspec(implementation_key(4332)) void IVGEffectInnerShadow::PutOffsetX ( double pVal );
__declspec(implementation_key(4333)) double IVGEffectInnerShadow::GetOffsetY ( );
__declspec(implementation_key(4334)) void IVGEffectInnerShadow::PutOffsetY ( double pVal );
__declspec(implementation_key(4335)) long IVGEffectInnerShadow::GetOpacity ( );
__declspec(implementation_key(4336)) void IVGEffectInnerShadow::PutOpacity ( long pVal );
__declspec(implementation_key(4337)) long IVGEffectInnerShadow::GetFeather ( );
__declspec(implementation_key(4338)) void IVGEffectInnerShadow::PutFeather ( long pVal );
__declspec(implementation_key(4339)) enum cdrFeatherType IVGEffectInnerShadow::GetFeatherType ( );
__declspec(implementation_key(4340)) void IVGEffectInnerShadow::PutFeatherType ( enum cdrFeatherType pVal );
__declspec(implementation_key(4341)) enum cdrEdgeType IVGEffectInnerShadow::GetFeatherEdge ( );
__declspec(implementation_key(4342)) void IVGEffectInnerShadow::PutFeatherEdge ( enum cdrEdgeType pVal );
__declspec(implementation_key(4343)) IVGColorPtr IVGEffectInnerShadow::GetColor ( );
__declspec(implementation_key(4344)) void IVGEffectInnerShadow::PutColor ( struct IVGColor * ppVal );
__declspec(implementation_key(4345)) HRESULT IVGEffectInnerShadow::SetOffset ( double OffsetX, double OffsetY );
__declspec(implementation_key(4346)) IVGShapePtr IVGEffectInnerShadow::GetShadowGroup ( );
__declspec(implementation_key(4347)) enum cdrMergeMode IVGEffectInnerShadow::GetMergeMode ( );
__declspec(implementation_key(4348)) void IVGEffectInnerShadow::PutMergeMode ( enum cdrMergeMode pVal );
__declspec(implementation_key(4349)) double IVGEffectInnerShadow::GetDepth ( );
__declspec(implementation_key(4350)) void IVGEffectInnerShadow::PutDepth ( double pVal );
__declspec(implementation_key(4351)) IVGApplicationPtr IVGEffectExtrude::GetApplication ( );
__declspec(implementation_key(4352)) IVGEffectPtr IVGEffectExtrude::GetParent ( );
__declspec(implementation_key(4353)) enum cdrExtrudeType IVGEffectExtrude::GetType ( );
__declspec(implementation_key(4354)) void IVGEffectExtrude::PutType ( enum cdrExtrudeType pVal );
__declspec(implementation_key(4355)) IVGExtrudeVanishingPointPtr IVGEffectExtrude::GetVanishingPoint ( );
__declspec(implementation_key(4356)) void IVGEffectExtrude::PutVanishingPoint ( struct IVGExtrudeVanishingPoint * ppVal );
__declspec(implementation_key(4357)) long IVGEffectExtrude::GetDepth ( );
__declspec(implementation_key(4358)) void IVGEffectExtrude::PutDepth ( long pVal );
__declspec(implementation_key(4359)) double IVGEffectExtrude::GetAngleX ( );
__declspec(implementation_key(4360)) void IVGEffectExtrude::PutAngleX ( double pVal );
__declspec(implementation_key(4361)) double IVGEffectExtrude::GetAngleY ( );
__declspec(implementation_key(4362)) void IVGEffectExtrude::PutAngleY ( double pVal );
__declspec(implementation_key(4363)) double IVGEffectExtrude::GetAngleZ ( );
__declspec(implementation_key(4364)) void IVGEffectExtrude::PutAngleZ ( double pVal );
__declspec(implementation_key(4365)) enum cdrExtrudeShading IVGEffectExtrude::GetShading ( );
__declspec(implementation_key(4366)) void IVGEffectExtrude::PutShading ( enum cdrExtrudeShading pVal );
__declspec(implementation_key(4367)) IVGColorPtr IVGEffectExtrude::GetBaseColor ( );
__declspec(implementation_key(4368)) void IVGEffectExtrude::PutBaseColor ( struct IVGColor * ppVal );
__declspec(implementation_key(4369)) IVGColorPtr IVGEffectExtrude::GetShadingColor ( );
__declspec(implementation_key(4370)) void IVGEffectExtrude::PutShadingColor ( struct IVGColor * ppVal );
__declspec(implementation_key(4371)) VARIANT_BOOL IVGEffectExtrude::GetUseBevel ( );
__declspec(implementation_key(4372)) void IVGEffectExtrude::PutUseBevel ( VARIANT_BOOL pVal );
__declspec(implementation_key(4373)) VARIANT_BOOL IVGEffectExtrude::GetShowBevelOnly ( );
__declspec(implementation_key(4374)) void IVGEffectExtrude::PutShowBevelOnly ( VARIANT_BOOL pVal );
__declspec(implementation_key(4375)) double IVGEffectExtrude::GetBevelDepth ( );
__declspec(implementation_key(4376)) void IVGEffectExtrude::PutBevelDepth ( double pVal );
__declspec(implementation_key(4377)) double IVGEffectExtrude::GetBevelAngle ( );
__declspec(implementation_key(4378)) void IVGEffectExtrude::PutBevelAngle ( double pVal );
__declspec(implementation_key(4379)) VARIANT_BOOL IVGEffectExtrude::GetUseExtrudeColorForBevel ( );
__declspec(implementation_key(4380)) void IVGEffectExtrude::PutUseExtrudeColorForBevel ( VARIANT_BOOL pVal );
__declspec(implementation_key(4381)) IVGColorPtr IVGEffectExtrude::GetBevelColor ( );
__declspec(implementation_key(4382)) void IVGEffectExtrude::PutBevelColor ( struct IVGColor * ppVal );
__declspec(implementation_key(4383)) VARIANT_BOOL IVGEffectExtrude::GetLightPresent ( long Index );
__declspec(implementation_key(4384)) void IVGEffectExtrude::PutLightPresent ( long Index, VARIANT_BOOL pVal );
__declspec(implementation_key(4385)) enum cdrExtrudeLightPosition IVGEffectExtrude::GetLightPosition ( long Index );
__declspec(implementation_key(4386)) void IVGEffectExtrude::PutLightPosition ( long Index, enum cdrExtrudeLightPosition pVal );
__declspec(implementation_key(4387)) long IVGEffectExtrude::GetLightIntensity ( long Index );
__declspec(implementation_key(4388)) void IVGEffectExtrude::PutLightIntensity ( long Index, long pVal );
__declspec(implementation_key(4389)) VARIANT_BOOL IVGEffectExtrude::GetUseFullColorRange ( );
__declspec(implementation_key(4390)) void IVGEffectExtrude::PutUseFullColorRange ( VARIANT_BOOL pVal );
__declspec(implementation_key(4391)) VARIANT_BOOL IVGEffectExtrude::GetFaceVisible ( );
__declspec(implementation_key(4392)) IVGShapePtr IVGEffectExtrude::GetFaceShape ( );
__declspec(implementation_key(4393)) IVGShapePtr IVGEffectExtrude::GetBevelGroup ( );
__declspec(implementation_key(4394)) IVGShapePtr IVGEffectExtrude::GetExtrudeGroup ( );
__declspec(implementation_key(4395)) HRESULT IVGEffectExtrude::Rotate ( double AngleX, double AngleY, double AngleZ );
__declspec(implementation_key(4396)) HRESULT IVGEffectExtrude::SetBevel ( double Depth, double Angle, VARIANT_BOOL ShowBevelOnly );
__declspec(implementation_key(4397)) HRESULT IVGEffectExtrude::SetLight ( long Index, enum cdrExtrudeLightPosition Position, long LightIntensity );
__declspec(implementation_key(4398)) HRESULT IVGEffectExtrude::CopyFrom ( struct IVGEffectExtrude * Source );
__declspec(implementation_key(4399)) IVGApplicationPtr IVGExtrudeVanishingPoint::GetApplication ( );
__declspec(implementation_key(4400)) IVGEffectExtrudePtr IVGExtrudeVanishingPoint::GetParent ( );
__declspec(implementation_key(4401)) enum cdrExtrudeVPType IVGExtrudeVanishingPoint::GetType ( );
__declspec(implementation_key(4402)) void IVGExtrudeVanishingPoint::PutType ( enum cdrExtrudeVPType pVal );
__declspec(implementation_key(4403)) double IVGExtrudeVanishingPoint::GetPositionX ( );
__declspec(implementation_key(4404)) void IVGExtrudeVanishingPoint::PutPositionX ( double pVal );
__declspec(implementation_key(4405)) double IVGExtrudeVanishingPoint::GetPositionY ( );
__declspec(implementation_key(4406)) void IVGExtrudeVanishingPoint::PutPositionY ( double pVal );
__declspec(implementation_key(4407)) IVGEffectsPtr IVGExtrudeVanishingPoint::GetEffects ( );
__declspec(implementation_key(4408)) VARIANT_BOOL IVGExtrudeVanishingPoint::Share ( struct IVGEffectExtrude * Source );
__declspec(implementation_key(4409)) IVGApplicationPtr IVGEffectDistortion::GetApplication ( );
__declspec(implementation_key(4410)) IVGEffectPtr IVGEffectDistortion::GetParent ( );
__declspec(implementation_key(4411)) enum cdrDistortionType IVGEffectDistortion::GetType ( );
__declspec(implementation_key(4412)) void IVGEffectDistortion::PutType ( enum cdrDistortionType pVal );
__declspec(implementation_key(4413)) double IVGEffectDistortion::GetOriginX ( );
__declspec(implementation_key(4414)) void IVGEffectDistortion::PutOriginX ( double pVal );
__declspec(implementation_key(4415)) double IVGEffectDistortion::GetOriginY ( );
__declspec(implementation_key(4416)) void IVGEffectDistortion::PutOriginY ( double pVal );
__declspec(implementation_key(4417)) IVGEffectPushPullDistortionPtr IVGEffectDistortion::GetPushPull ( );
__declspec(implementation_key(4418)) void IVGEffectDistortion::PutPushPull ( struct IVGEffectPushPullDistortion * ppVal );
__declspec(implementation_key(4419)) IVGEffectZipperDistortionPtr IVGEffectDistortion::GetZipper ( );
__declspec(implementation_key(4420)) void IVGEffectDistortion::PutZipper ( struct IVGEffectZipperDistortion * ppVal );
__declspec(implementation_key(4421)) IVGEffectTwisterDistortionPtr IVGEffectDistortion::GetTwister ( );
__declspec(implementation_key(4422)) void IVGEffectDistortion::PutTwister ( struct IVGEffectTwisterDistortion * ppVal );
__declspec(implementation_key(4423)) HRESULT IVGEffectDistortion::CenterDistortion ( );
__declspec(implementation_key(4424)) IVGEffectCustomDistortionPtr IVGEffectDistortion::GetCustom ( );
__declspec(implementation_key(4425)) IVGApplicationPtr IVGEffectPushPullDistortion::GetApplication ( );
__declspec(implementation_key(4426)) IVGEffectDistortionPtr IVGEffectPushPullDistortion::GetParent ( );
__declspec(implementation_key(4427)) long IVGEffectPushPullDistortion::GetAmplitude ( );
__declspec(implementation_key(4428)) void IVGEffectPushPullDistortion::PutAmplitude ( long pVal );
__declspec(implementation_key(4429)) IVGApplicationPtr IVGEffectZipperDistortion::GetApplication ( );
__declspec(implementation_key(4430)) IVGEffectDistortionPtr IVGEffectZipperDistortion::GetParent ( );
__declspec(implementation_key(4431)) long IVGEffectZipperDistortion::GetAmplitude ( );
__declspec(implementation_key(4432)) void IVGEffectZipperDistortion::PutAmplitude ( long pVal );
__declspec(implementation_key(4433)) long IVGEffectZipperDistortion::GetFrequency ( );
__declspec(implementation_key(4434)) void IVGEffectZipperDistortion::PutFrequency ( long pVal );
__declspec(implementation_key(4435)) VARIANT_BOOL IVGEffectZipperDistortion::GetRandom ( );
__declspec(implementation_key(4436)) void IVGEffectZipperDistortion::PutRandom ( VARIANT_BOOL pVal );
__declspec(implementation_key(4437)) VARIANT_BOOL IVGEffectZipperDistortion::GetSmooth ( );
__declspec(implementation_key(4438)) void IVGEffectZipperDistortion::PutSmooth ( VARIANT_BOOL pVal );
__declspec(implementation_key(4439)) VARIANT_BOOL IVGEffectZipperDistortion::GetLocal ( );
__declspec(implementation_key(4440)) void IVGEffectZipperDistortion::PutLocal ( VARIANT_BOOL pVal );
__declspec(implementation_key(4441)) IVGApplicationPtr IVGEffectTwisterDistortion::GetApplication ( );
__declspec(implementation_key(4442)) IVGEffectDistortionPtr IVGEffectTwisterDistortion::GetParent ( );
__declspec(implementation_key(4443)) double IVGEffectTwisterDistortion::GetAngle ( );
__declspec(implementation_key(4444)) void IVGEffectTwisterDistortion::PutAngle ( double pVal );
__declspec(implementation_key(4445)) _bstr_t IVGTextRange::GetText ( );
__declspec(implementation_key(4446)) void IVGTextRange::PutText ( _bstr_t ppVal );
__declspec(implementation_key(4447)) _bstr_t IVGTextRange::GetWideText ( );
__declspec(implementation_key(4448)) void IVGTextRange::PutWideText ( _bstr_t ppVal );
__declspec(implementation_key(4449)) IVGTextCharactersPtr IVGTextRange::GetCharacters ( );
__declspec(implementation_key(4450)) IVGTextWordsPtr IVGTextRange::GetWords ( );
__declspec(implementation_key(4451)) IVGTextLinesPtr IVGTextRange::GetLines ( );
__declspec(implementation_key(4452)) IVGTextParagraphsPtr IVGTextRange::GetParagraphs ( );
__declspec(implementation_key(4453)) long IVGTextRange::GetStart ( );
__declspec(implementation_key(4454)) void IVGTextRange::PutStart ( long pVal );
__declspec(implementation_key(4455)) long IVGTextRange::GetEnd ( );
__declspec(implementation_key(4456)) void IVGTextRange::PutEnd ( long pVal );
__declspec(implementation_key(4457)) long IVGTextRange::GetLength ( );
__declspec(implementation_key(4458)) void IVGTextRange::PutLength ( long pVal );
__declspec(implementation_key(4459)) IVGTextRangePtr IVGTextRange::Duplicate ( );
__declspec(implementation_key(4460)) enum cdrFontStyle IVGTextRange::GetStyle ( );
__declspec(implementation_key(4461)) void IVGTextRange::PutStyle ( enum cdrFontStyle pVal );
__declspec(implementation_key(4462)) VARIANT_BOOL IVGTextRange::GetBold ( );
__declspec(implementation_key(4463)) void IVGTextRange::PutBold ( VARIANT_BOOL pVal );
__declspec(implementation_key(4464)) VARIANT_BOOL IVGTextRange::GetItalic ( );
__declspec(implementation_key(4465)) void IVGTextRange::PutItalic ( VARIANT_BOOL pVal );
__declspec(implementation_key(4466)) enum cdrFontLine IVGTextRange::GetUnderline ( );
__declspec(implementation_key(4467)) void IVGTextRange::PutUnderline ( enum cdrFontLine pVal );
__declspec(implementation_key(4468)) enum cdrFontLine IVGTextRange::GetStrikethru ( );
__declspec(implementation_key(4469)) void IVGTextRange::PutStrikethru ( enum cdrFontLine pVal );
__declspec(implementation_key(4470)) enum cdrFontLine IVGTextRange::GetOverscore ( );
__declspec(implementation_key(4471)) void IVGTextRange::PutOverscore ( enum cdrFontLine pVal );
__declspec(implementation_key(4472)) _bstr_t IVGTextRange::GetFont ( );
__declspec(implementation_key(4473)) void IVGTextRange::PutFont ( _bstr_t pVal );
__declspec(implementation_key(4474)) float IVGTextRange::GetSize ( );
__declspec(implementation_key(4475)) void IVGTextRange::PutSize ( float pVal );
__declspec(implementation_key(4476)) enum cdrFontPosition IVGTextRange::GetPosition ( );
__declspec(implementation_key(4477)) void IVGTextRange::PutPosition ( enum cdrFontPosition pVal );
__declspec(implementation_key(4478)) enum cdrFontCase IVGTextRange::GetCase ( );
__declspec(implementation_key(4479)) void IVGTextRange::PutCase ( enum cdrFontCase pVal );
__declspec(implementation_key(4480)) float IVGTextRange::GetCharAngle ( );
__declspec(implementation_key(4481)) void IVGTextRange::PutCharAngle ( float pVal );
__declspec(implementation_key(4482)) enum cdrAlignment IVGTextRange::GetAlignment ( );
__declspec(implementation_key(4483)) void IVGTextRange::PutAlignment ( enum cdrAlignment pVal );
__declspec(implementation_key(4484)) double IVGTextRange::GetFirstLineIndent ( );
__declspec(implementation_key(4485)) void IVGTextRange::PutFirstLineIndent ( double pVal );
__declspec(implementation_key(4486)) long IVGTextRange::GetHorizShift ( );
__declspec(implementation_key(4487)) void IVGTextRange::PutHorizShift ( long pVal );
__declspec(implementation_key(4488)) long IVGTextRange::GetVertShift ( );
__declspec(implementation_key(4489)) void IVGTextRange::PutVertShift ( long pVal );
__declspec(implementation_key(4490)) double IVGTextRange::GetLeftIndent ( );
__declspec(implementation_key(4491)) void IVGTextRange::PutLeftIndent ( double pVal );
__declspec(implementation_key(4492)) double IVGTextRange::GetRightIndent ( );
__declspec(implementation_key(4493)) void IVGTextRange::PutRightIndent ( double pVal );
__declspec(implementation_key(4494)) float IVGTextRange::GetMinWordSpacing ( );
__declspec(implementation_key(4495)) void IVGTextRange::PutMinWordSpacing ( float pVal );
__declspec(implementation_key(4496)) float IVGTextRange::GetMaxWordSpacing ( );
__declspec(implementation_key(4497)) void IVGTextRange::PutMaxWordSpacing ( float pVal );
__declspec(implementation_key(4498)) float IVGTextRange::GetMaxCharSpacing ( );
__declspec(implementation_key(4499)) void IVGTextRange::PutMaxCharSpacing ( float pVal );
__declspec(implementation_key(4500)) float IVGTextRange::GetParaSpacingBefore ( );
__declspec(implementation_key(4501)) void IVGTextRange::PutParaSpacingBefore ( float pVal );
__declspec(implementation_key(4502)) float IVGTextRange::GetParaSpacingAfter ( );
__declspec(implementation_key(4503)) void IVGTextRange::PutParaSpacingAfter ( float pVal );
__declspec(implementation_key(4504)) float IVGTextRange::GetCharSpacing ( );
__declspec(implementation_key(4505)) void IVGTextRange::PutCharSpacing ( float pVal );
__declspec(implementation_key(4506)) float IVGTextRange::GetLineSpacing ( );
__declspec(implementation_key(4507)) void IVGTextRange::PutLineSpacing ( float pVal );
__declspec(implementation_key(4508)) enum cdrLineSpacingType IVGTextRange::GetLineSpacingType ( );
__declspec(implementation_key(4509)) float IVGTextRange::GetWordSpacing ( );
__declspec(implementation_key(4510)) void IVGTextRange::PutWordSpacing ( float pVal );
__declspec(implementation_key(4511)) enum cdrTriState IVGTextRange::GetAutoHyphenate ( );
__declspec(implementation_key(4512)) void IVGTextRange::PutAutoHyphenate ( enum cdrTriState pVal );
__declspec(implementation_key(4513)) double IVGTextRange::GetHyphenHotZone ( );
__declspec(implementation_key(4514)) void IVGTextRange::PutHyphenHotZone ( double pVal );
__declspec(implementation_key(4515)) long IVGTextRange::GetHyphenMinCharsBefore ( );
__declspec(implementation_key(4516)) void IVGTextRange::PutHyphenMinCharsBefore ( long pVal );
__declspec(implementation_key(4517)) long IVGTextRange::GetHyphenMinCharsAfter ( );
__declspec(implementation_key(4518)) void IVGTextRange::PutHyphenMinCharsAfter ( long pVal );
__declspec(implementation_key(4519)) long IVGTextRange::GetHyphenMinWordLength ( );
__declspec(implementation_key(4520)) void IVGTextRange::PutHyphenMinWordLength ( long pVal );
__declspec(implementation_key(4521)) VARIANT_BOOL IVGTextRange::GetHyphenateCapitals ( );
__declspec(implementation_key(4522)) void IVGTextRange::PutHyphenateCapitals ( VARIANT_BOOL pVal );
__declspec(implementation_key(4523)) HRESULT IVGTextRange::Delete ( );
__declspec(implementation_key(4524)) HRESULT IVGTextRange::Select ( );
__declspec(implementation_key(4525)) HRESULT IVGTextRange::Copy ( );
__declspec(implementation_key(4526)) IVGTextRangePtr IVGTextRange::Paste ( );
__declspec(implementation_key(4527)) HRESULT IVGTextRange::ChangeCase ( enum cdrTextChangeCase Case );
__declspec(implementation_key(4528)) HRESULT IVGTextRange::SetRange ( long Start, long End );
__declspec(implementation_key(4529)) enum cdrTextLanguage IVGTextRange::GetLanguageID ( );
__declspec(implementation_key(4530)) void IVGTextRange::PutLanguageID ( enum cdrTextLanguage pVal );
__declspec(implementation_key(4531)) enum cdrTextCharSet IVGTextRange::GetCharSet ( );
__declspec(implementation_key(4532)) void IVGTextRange::PutCharSet ( enum cdrTextCharSet pVal );
__declspec(implementation_key(4533)) IVGTextRangePtr IVGTextRange::InsertBefore ( _bstr_t Text, enum cdrTextLanguage LanguageID, enum cdrTextCharSet CharSet, _bstr_t Font );
__declspec(implementation_key(4534)) IVGTextRangePtr IVGTextRange::InsertBeforeWide ( _bstr_t Text, enum cdrTextLanguage LanguageID, enum cdrTextCharSet CharSet, _bstr_t Font );
__declspec(implementation_key(4535)) IVGTextRangePtr IVGTextRange::InsertAfter ( _bstr_t Text, enum cdrTextLanguage LanguageID, enum cdrTextCharSet CharSet, _bstr_t Font );
__declspec(implementation_key(4536)) IVGTextRangePtr IVGTextRange::InsertAfterWide ( _bstr_t Text, enum cdrTextLanguage LanguageID, enum cdrTextCharSet CharSet, _bstr_t Font );
__declspec(implementation_key(4537)) IVGTextRangePtr IVGTextRange::Replace ( _bstr_t Text, enum cdrTextLanguage LanguageID, enum cdrTextCharSet CharSet, _bstr_t Font );
__declspec(implementation_key(4538)) IVGTextRangePtr IVGTextRange::ReplaceWide ( _bstr_t Text, enum cdrTextLanguage LanguageID, enum cdrTextCharSet CharSet, _bstr_t Font );
__declspec(implementation_key(4539)) IVGTextRangePtr IVGTextRange::Range ( long Start, long End );
__declspec(implementation_key(4540)) HRESULT IVGTextRange::SetLineSpacing ( enum cdrLineSpacingType Type, float LineSpacing, float ParaBefore, float ParaAfter );
__declspec(implementation_key(4541)) IVGTextColumnsPtr IVGTextRange::GetColumns ( );
__declspec(implementation_key(4542)) IVGTextFramesPtr IVGTextRange::GetFrames ( );
__declspec(implementation_key(4543)) HRESULT IVGTextRange::Collapse ( VARIANT_BOOL ToEnd );
__declspec(implementation_key(4544)) HRESULT IVGTextRange::Combine ( struct IVGTextRange * Range );
__declspec(implementation_key(4545)) VARIANT_BOOL IVGTextRange::InRange ( struct IVGTextRange * Range );
__declspec(implementation_key(4546)) VARIANT_BOOL IVGTextRange::IsSame ( struct IVGTextRange * Range );
__declspec(implementation_key(4547)) IVGFillPtr IVGTextRange::GetFill ( );
__declspec(implementation_key(4548)) IVGOutlinePtr IVGTextRange::GetOutline ( );
__declspec(implementation_key(4549)) long IVGTextRange::GetRangeKerning ( );
__declspec(implementation_key(4550)) void IVGTextRange::PutRangeKerning ( long pVal );
__declspec(implementation_key(4551)) IVGTextTabPositionsPtr IVGTextRange::GetTabs ( );
__declspec(implementation_key(4552)) enum cdrTextEffect IVGTextRange::GetEffect ( );
__declspec(implementation_key(4553)) long IVGTextRange::GetDropCapLinesDropped ( );
__declspec(implementation_key(4554)) void IVGTextRange::PutDropCapLinesDropped ( long pVal );
__declspec(implementation_key(4555)) double IVGTextRange::GetDropCapDistanceFromText ( );
__declspec(implementation_key(4556)) void IVGTextRange::PutDropCapDistanceFromText ( double pVal );
__declspec(implementation_key(4557)) VARIANT_BOOL IVGTextRange::GetDropCapHangingIndent ( );
__declspec(implementation_key(4558)) void IVGTextRange::PutDropCapHangingIndent ( VARIANT_BOOL pVal );
__declspec(implementation_key(4559)) _bstr_t IVGTextRange::GetBulletFont ( );
__declspec(implementation_key(4560)) void IVGTextRange::PutBulletFont ( _bstr_t pVal );
__declspec(implementation_key(4561)) _bstr_t IVGTextRange::GetBulletSymbol ( );
__declspec(implementation_key(4562)) void IVGTextRange::PutBulletSymbol ( _bstr_t pVal );
__declspec(implementation_key(4563)) float IVGTextRange::GetBulletSize ( );
__declspec(implementation_key(4564)) void IVGTextRange::PutBulletSize ( float pVal );
__declspec(implementation_key(4565)) float IVGTextRange::GetBulletBaselineShift ( );
__declspec(implementation_key(4566)) void IVGTextRange::PutBulletBaselineShift ( float pVal );
__declspec(implementation_key(4567)) double IVGTextRange::GetBulletHorizontalPosition ( );
__declspec(implementation_key(4568)) void IVGTextRange::PutBulletHorizontalPosition ( double pVal );
__declspec(implementation_key(4569)) VARIANT_BOOL IVGTextRange::GetBulletHangingIndent ( );
__declspec(implementation_key(4570)) void IVGTextRange::PutBulletHangingIndent ( VARIANT_BOOL pVal );
__declspec(implementation_key(4571)) VARIANT_BOOL IVGTextRange::GetIsEmpty ( );
__declspec(implementation_key(4572)) HRESULT IVGTextRange::ApplyNoEffect ( );
__declspec(implementation_key(4573)) HRESULT IVGTextRange::ApplyBulletEffect ( _bstr_t Symbol, _bstr_t Font, float Size, float BaselineShift, double HorizontalPosition, VARIANT_BOOL HangingIndent );
__declspec(implementation_key(4574)) HRESULT IVGTextRange::ApplyDropCapEffect ( long LinesDropped, double DistanceFromText, VARIANT_BOOL HangingIndent );
__declspec(implementation_key(4575)) VARIANT_BOOL IVGTextRange::GetHyphenateAllCapWords ( );
__declspec(implementation_key(4576)) void IVGTextRange::PutHyphenateAllCapWords ( VARIANT_BOOL pVal );
__declspec(implementation_key(4577)) IVGTextRangesPtr IVGTextRange::EnumRanges ( enum cdrTextPropertySet PropertyFilter );
__declspec(implementation_key(4578)) _variant_t IVGTextRange::Evaluate ( _bstr_t Expression );
__declspec(implementation_key(4579)) IVGTextRangesPtr IVGTextRange::FindRanges ( _bstr_t Query );
__declspec(implementation_key(4580)) IVGCurvePtr IVGTextRange::GetBaselines ( );
__declspec(implementation_key(4581)) HRESULT IVGTextRange::Straighten ( );
__declspec(implementation_key(4582)) HRESULT IVGTextRange::AlignToBaseline ( );
__declspec(implementation_key(4583)) IVGCurvePtr IVGTextRange::GetTextLineRects ( );
__declspec(implementation_key(4584)) IVGFillPtr IVGTextRange::GetCharBackFill ( );
__declspec(implementation_key(4585)) HRESULT IVGTextRange::CopyAttributes ( struct IVGTextRange * SourceRange );
__declspec(implementation_key(4586)) long IVGTextRange::GetOpenTypeFeature ( _bstr_t Feature );
__declspec(implementation_key(4587)) HRESULT IVGTextRange::SetOpenTypeFeature ( _bstr_t Feature, long State );
__declspec(implementation_key(4588)) long IVGTextRange::GetTextFormatter ( );
__declspec(implementation_key(4589)) void IVGTextRange::PutTextFormatter ( long pVal );
__declspec(implementation_key(4590)) HRESULT IVGTextRange::ApplyStyle ( _bstr_t StyleName );
__declspec(implementation_key(4591)) IVGStylePtr IVGTextRange::GetObjectStyle ( );
__declspec(implementation_key(4592)) IVGTextIndentLevelStylesPtr IVGTextRange::GetIndentLevelStyles ( );
__declspec(implementation_key(4593)) long IVGTextRange::GetIndentLevel ( );
__declspec(implementation_key(4594)) void IVGTextRange::PutIndentLevel ( long pVal );
__declspec(implementation_key(4595)) IVGTextVariableAxesPtr IVGTextRange::GetVariableAxes ( );
__declspec(implementation_key(4596)) IUnknownPtr IVGTextCharacters::Get_NewEnum ( );
__declspec(implementation_key(4597)) IVGTextRangePtr IVGTextCharacters::GetItem ( long Index, long Count );
__declspec(implementation_key(4598)) long IVGTextCharacters::GetCount ( );
__declspec(implementation_key(4599)) IVGTextRangePtr IVGTextCharacters::GetAll ( );
__declspec(implementation_key(4600)) IVGTextRangePtr IVGTextCharacters::GetFirst ( );
__declspec(implementation_key(4601)) IVGTextRangePtr IVGTextCharacters::GetLast ( );
__declspec(implementation_key(4602)) IUnknownPtr IVGTextWords::Get_NewEnum ( );
__declspec(implementation_key(4603)) IVGTextRangePtr IVGTextWords::GetItem ( long Index, long Count );
__declspec(implementation_key(4604)) long IVGTextWords::GetCount ( );
__declspec(implementation_key(4605)) IVGTextRangePtr IVGTextWords::GetAll ( );
__declspec(implementation_key(4606)) IVGTextRangePtr IVGTextWords::GetFirst ( );
__declspec(implementation_key(4607)) IVGTextRangePtr IVGTextWords::GetLast ( );
__declspec(implementation_key(4608)) IUnknownPtr IVGTextLines::Get_NewEnum ( );
__declspec(implementation_key(4609)) IVGTextRangePtr IVGTextLines::GetItem ( long Index, long Count );
__declspec(implementation_key(4610)) long IVGTextLines::GetCount ( );
__declspec(implementation_key(4611)) IVGTextRangePtr IVGTextLines::GetAll ( );
__declspec(implementation_key(4612)) IVGTextRangePtr IVGTextLines::GetFirst ( );
__declspec(implementation_key(4613)) IVGTextRangePtr IVGTextLines::GetLast ( );
__declspec(implementation_key(4614)) IUnknownPtr IVGTextParagraphs::Get_NewEnum ( );
__declspec(implementation_key(4615)) IVGTextRangePtr IVGTextParagraphs::GetItem ( long Index, long Count );
__declspec(implementation_key(4616)) long IVGTextParagraphs::GetCount ( );
__declspec(implementation_key(4617)) IVGTextRangePtr IVGTextParagraphs::GetAll ( );
__declspec(implementation_key(4618)) IVGTextRangePtr IVGTextParagraphs::GetFirst ( );
__declspec(implementation_key(4619)) IVGTextRangePtr IVGTextParagraphs::GetLast ( );
__declspec(implementation_key(4620)) IUnknownPtr IVGTextColumns::Get_NewEnum ( );
__declspec(implementation_key(4621)) IVGTextRangePtr IVGTextColumns::GetItem ( long Index, long Count );
__declspec(implementation_key(4622)) long IVGTextColumns::GetCount ( );
__declspec(implementation_key(4623)) IVGTextRangePtr IVGTextColumns::GetAll ( );
__declspec(implementation_key(4624)) IVGTextRangePtr IVGTextColumns::GetFirst ( );
__declspec(implementation_key(4625)) IVGTextRangePtr IVGTextColumns::GetLast ( );
__declspec(implementation_key(4626)) IVGTextRangePtr IVGTextFrame::GetRange ( );
__declspec(implementation_key(4627)) IVGTextFramePtr IVGTextFrame::GetPrevious ( );
__declspec(implementation_key(4628)) IVGTextFramePtr IVGTextFrame::GetNext ( );
__declspec(implementation_key(4629)) long IVGTextFrame::GetIndex ( );
__declspec(implementation_key(4630)) VARIANT_BOOL IVGTextFrame::GetEmpty ( );
__declspec(implementation_key(4631)) VARIANT_BOOL IVGTextFrame::GetIsFirst ( );
__declspec(implementation_key(4632)) VARIANT_BOOL IVGTextFrame::GetIsLast ( );
__declspec(implementation_key(4633)) enum cdrVerticalAlignment IVGTextFrame::GetVerticalAlignment ( );
__declspec(implementation_key(4634)) void IVGTextFrame::PutVerticalAlignment ( enum cdrVerticalAlignment pVal );
__declspec(implementation_key(4635)) VARIANT_BOOL IVGTextFrame::GetMulticolumn ( );
__declspec(implementation_key(4636)) long IVGTextFrame::GetColumnCount ( );
__declspec(implementation_key(4637)) double IVGTextFrame::GetColumnWidth ( long Index );
__declspec(implementation_key(4638)) double IVGTextFrame::GetColumnGutter ( long Index );
__declspec(implementation_key(4639)) HRESULT IVGTextFrame::SetColumns ( long NumColumns, VARIANT_BOOL EqualColumns, SAFEARRAY * * WidthsAndGutters );
__declspec(implementation_key(4640)) HRESULT IVGTextFrame::LinkTo ( struct IVGShape * Shape );
__declspec(implementation_key(4641)) HRESULT IVGTextFrame::UnLink ( );
__declspec(implementation_key(4642)) IVGShapePtr IVGTextFrame::GetContainer ( );
__declspec(implementation_key(4643)) VARIANT_BOOL IVGTextFrame::GetIsInsideContainer ( );
__declspec(implementation_key(4644)) VARIANT_BOOL IVGTextFrame::GetIsFittedToPath ( );
__declspec(implementation_key(4645)) IVGShapePtr IVGTextFrame::GetPath ( );
__declspec(implementation_key(4646)) IVGShapePtr IVGTextFrame::GetFrameShape ( );
__declspec(implementation_key(4647)) IVGFillPtr IVGTextFrame::GetFill ( );
__declspec(implementation_key(4648)) void IVGTextFrame::PutFill ( struct IVGFill * ppVal );
__declspec(implementation_key(4649)) IVGOutlinePtr IVGTextFrame::GetOutline ( );
__declspec(implementation_key(4650)) void IVGTextFrame::PutOutline ( struct IVGOutline * ppVal );
__declspec(implementation_key(4651)) IUnknownPtr IVGTextFrames::Get_NewEnum ( );
__declspec(implementation_key(4652)) IVGTextFramePtr IVGTextFrames::GetItem ( long Index );
__declspec(implementation_key(4653)) long IVGTextFrames::GetCount ( );
__declspec(implementation_key(4654)) IVGTextRangePtr IVGTextFrames::GetRange ( long Index, long Count );
__declspec(implementation_key(4655)) IVGTextRangePtr IVGTextFrames::GetAll ( );
__declspec(implementation_key(4656)) IVGTextFramePtr IVGTextFrames::GetFirst ( );
__declspec(implementation_key(4657)) IVGTextFramePtr IVGTextFrames::GetLast ( );
__declspec(implementation_key(4658)) IUnknownPtr IVGTextRanges::Get_NewEnum ( );
__declspec(implementation_key(4659)) IVGTextRangePtr IVGTextRanges::GetItem ( long Index );
__declspec(implementation_key(4660)) long IVGTextRanges::GetCount ( );
__declspec(implementation_key(4661)) IVGTextRangePtr IVGTextRanges::GetFirst ( );
__declspec(implementation_key(4662)) IVGTextRangePtr IVGTextRanges::GetLast ( );
__declspec(implementation_key(4663)) IVGTextRangesPtr IVGTextRanges::Reverse ( );
__declspec(implementation_key(4664)) _bstr_t IVGStyle::GetCategoryName ( );
__declspec(implementation_key(4665)) SAFEARRAY * IVGStyle::GetAllPropertyNames ( );
__declspec(implementation_key(4666)) SAFEARRAY * IVGStyle::GetOverridePropertyNames ( );
__declspec(implementation_key(4667)) VARIANT_BOOL IVGStyle::IsPropertyInherited ( _bstr_t Name );
__declspec(implementation_key(4668)) _variant_t IVGStyle::GetProperty ( _bstr_t Name );
__declspec(implementation_key(4669)) HRESULT IVGStyle::SetProperty ( _bstr_t Name, const _variant_t & Value );
__declspec(implementation_key(4670)) VARIANT_BOOL IVGStyle::ClearProperty ( _bstr_t Name );
__declspec(implementation_key(4671)) IVGStyleOutlinePtr IVGStyle::GetOutline ( );
__declspec(implementation_key(4672)) IVGStyleFillPtr IVGStyle::GetFill ( );
__declspec(implementation_key(4673)) IVGStyleCharacterPtr IVGStyle::GetCharacter ( );
__declspec(implementation_key(4674)) IVGStyleParagraphPtr IVGStyle::GetParagraph ( );
__declspec(implementation_key(4675)) IVGStyleFramePtr IVGStyle::GetFrame ( );
__declspec(implementation_key(4676)) _bstr_t IVGStyle::GetName ( );
__declspec(implementation_key(4677)) _bstr_t IVGStyle::GetDisplayName ( );
__declspec(implementation_key(4678)) VARIANT_BOOL IVGStyle::GetIsStyleSet ( );
__declspec(implementation_key(4679)) VARIANT_BOOL IVGStyle::GetIsObjectDefaults ( );
__declspec(implementation_key(4680)) _bstr_t IVGStyle::GetDisplayCategoryName ( );
__declspec(implementation_key(4681)) IVGStylePtr IVGStyle::GetBasedOn ( );
__declspec(implementation_key(4682)) IVGStylesPtr IVGStyle::GetDerivedStyles ( );
__declspec(implementation_key(4683)) _bstr_t IVGStyle::ToString ( );
__declspec(implementation_key(4684)) VARIANT_BOOL IVGStyle::StringAssign ( _bstr_t StyleString );
__declspec(implementation_key(4685)) _bstr_t IVGStyle::GetPropertyAsString ( _bstr_t Name );
__declspec(implementation_key(4686)) VARIANT_BOOL IVGStyle::SetPropertyAsString ( _bstr_t Name, _bstr_t Value );
__declspec(implementation_key(4687)) VARIANT_BOOL IVGStyle::Rename ( _bstr_t NewName );
__declspec(implementation_key(4688)) VARIANT_BOOL IVGStyle::SetBasedOn ( _bstr_t NewParent );
__declspec(implementation_key(4689)) VARIANT_BOOL IVGStyle::Delete ( );
__declspec(implementation_key(4690)) HRESULT IVGStyle::Assign ( struct IVGStyle * pVal );
__declspec(implementation_key(4691)) IVGStylePtr IVGStyle::GetCopy ( );
__declspec(implementation_key(4692)) IVGStyleTransparencyPtr IVGStyle::GetTransparency ( );
__declspec(implementation_key(4693)) IVGStylePtr IVGStyleOutline::GetStyle ( );
__declspec(implementation_key(4694)) enum cdrOutlineType IVGStyleOutline::GetType ( );
__declspec(implementation_key(4695)) void IVGStyleOutline::PutType ( enum cdrOutlineType pVal );
__declspec(implementation_key(4696)) VARIANT_BOOL IVGStyleOutline::GetOverprint ( );
__declspec(implementation_key(4697)) void IVGStyleOutline::PutOverprint ( VARIANT_BOOL pVal );
__declspec(implementation_key(4698)) VARIANT_BOOL IVGStyleOutline::GetBehindFill ( );
__declspec(implementation_key(4699)) void IVGStyleOutline::PutBehindFill ( VARIANT_BOOL pVal );
__declspec(implementation_key(4700)) VARIANT_BOOL IVGStyleOutline::GetScaleWithShape ( );
__declspec(implementation_key(4701)) void IVGStyleOutline::PutScaleWithShape ( VARIANT_BOOL pVal );
__declspec(implementation_key(4702)) double IVGStyleOutline::GetWidth ( );
__declspec(implementation_key(4703)) void IVGStyleOutline::PutWidth ( double pVal );
__declspec(implementation_key(4704)) IVGColorPtr IVGStyleOutline::GetColor ( );
__declspec(implementation_key(4705)) void IVGStyleOutline::PutColor ( struct IVGColor * ppVal );
__declspec(implementation_key(4706)) VARIANT_BOOL IVGStyleOutline::GetOverlapArrow ( );
__declspec(implementation_key(4707)) void IVGStyleOutline::PutOverlapArrow ( VARIANT_BOOL pVal );
__declspec(implementation_key(4708)) VARIANT_BOOL IVGStyleOutline::GetShareArrow ( );
__declspec(implementation_key(4709)) void IVGStyleOutline::PutShareArrow ( VARIANT_BOOL pVal );
__declspec(implementation_key(4710)) double IVGStyleOutline::GetMiterLimit ( );
__declspec(implementation_key(4711)) void IVGStyleOutline::PutMiterLimit ( double pVal );
__declspec(implementation_key(4712)) long IVGStyleOutline::GetNibStretch ( );
__declspec(implementation_key(4713)) void IVGStyleOutline::PutNibStretch ( long pVal );
__declspec(implementation_key(4714)) double IVGStyleOutline::GetNibAngle ( );
__declspec(implementation_key(4715)) void IVGStyleOutline::PutNibAngle ( double pVal );
__declspec(implementation_key(4716)) double IVGStyleOutline::GetWidelineWidth ( );
__declspec(implementation_key(4717)) void IVGStyleOutline::PutWidelineWidth ( double pVal );
__declspec(implementation_key(4718)) enum cdrOutlineLineCaps IVGStyleOutline::GetLineCaps ( );
__declspec(implementation_key(4719)) void IVGStyleOutline::PutLineCaps ( enum cdrOutlineLineCaps pVal );
__declspec(implementation_key(4720)) enum cdrOutlineLineJoin IVGStyleOutline::GetLineJoin ( );
__declspec(implementation_key(4721)) void IVGStyleOutline::PutLineJoin ( enum cdrOutlineLineJoin pVal );
__declspec(implementation_key(4722)) enum cdrOutlineJustification IVGStyleOutline::GetJustification ( );
__declspec(implementation_key(4723)) void IVGStyleOutline::PutJustification ( enum cdrOutlineJustification pVal );
__declspec(implementation_key(4724)) enum cdrOutlineDashAdjust IVGStyleOutline::GetAdjustDashes ( );
__declspec(implementation_key(4725)) void IVGStyleOutline::PutAdjustDashes ( enum cdrOutlineDashAdjust pVal );
__declspec(implementation_key(4726)) IVGStylePtr IVGStyleFill::GetStyle ( );
__declspec(implementation_key(4727)) enum cdrFillStyleType IVGStyleFill::GetType ( );
__declspec(implementation_key(4728)) void IVGStyleFill::PutType ( enum cdrFillStyleType pVal );
__declspec(implementation_key(4729)) VARIANT_BOOL IVGStyleFill::GetOverprint ( );
__declspec(implementation_key(4730)) void IVGStyleFill::PutOverprint ( VARIANT_BOOL pVal );
__declspec(implementation_key(4731)) VARIANT_BOOL IVGStyleFill::GetWindingFill ( );
__declspec(implementation_key(4732)) void IVGStyleFill::PutWindingFill ( VARIANT_BOOL pVal );
__declspec(implementation_key(4733)) enum cdrFountainFillType IVGStyleFill::GetFountainFillType ( );
__declspec(implementation_key(4734)) void IVGStyleFill::PutFountainFillType ( enum cdrFountainFillType pVal );
__declspec(implementation_key(4735)) long IVGStyleFill::GetEdgePad ( );
__declspec(implementation_key(4736)) void IVGStyleFill::PutEdgePad ( long pVal );
__declspec(implementation_key(4737)) long IVGStyleFill::GetFountainCenterOffsetX ( );
__declspec(implementation_key(4738)) void IVGStyleFill::PutFountainCenterOffsetX ( long pVal );
__declspec(implementation_key(4739)) long IVGStyleFill::GetFountainCenterOffsetY ( );
__declspec(implementation_key(4740)) void IVGStyleFill::PutFountainCenterOffsetY ( long pVal );
__declspec(implementation_key(4741)) long IVGStyleFill::GetFountainSteps ( );
__declspec(implementation_key(4742)) void IVGStyleFill::PutFountainSteps ( long pVal );
__declspec(implementation_key(4743)) enum cdrFountainFillBlendType IVGStyleFill::GetFountainBlendType ( );
__declspec(implementation_key(4744)) void IVGStyleFill::PutFountainBlendType ( enum cdrFountainFillBlendType pVal );
__declspec(implementation_key(4745)) long IVGStyleFill::GetMidPoint ( );
__declspec(implementation_key(4746)) void IVGStyleFill::PutMidPoint ( long pVal );
__declspec(implementation_key(4747)) VARIANT_BOOL IVGStyleFill::GetFlipColors ( );
__declspec(implementation_key(4748)) void IVGStyleFill::PutFlipColors ( VARIANT_BOOL pVal );
__declspec(implementation_key(4749)) _bstr_t IVGStyleFill::GetPostScriptName ( );
__declspec(implementation_key(4750)) void IVGStyleFill::PutPostScriptName ( _bstr_t pVal );
__declspec(implementation_key(4751)) double IVGStyleFill::GetTileWidth ( );
__declspec(implementation_key(4752)) void IVGStyleFill::PutTileWidth ( double pVal );
__declspec(implementation_key(4753)) double IVGStyleFill::GetTileHeight ( );
__declspec(implementation_key(4754)) void IVGStyleFill::PutTileHeight ( double pVal );
__declspec(implementation_key(4755)) double IVGStyleFill::GetTileOriginX ( );
__declspec(implementation_key(4756)) void IVGStyleFill::PutTileOriginX ( double pVal );
__declspec(implementation_key(4757)) double IVGStyleFill::GetTileOriginY ( );
__declspec(implementation_key(4758)) void IVGStyleFill::PutTileOriginY ( double pVal );
__declspec(implementation_key(4759)) enum cdrTileOffsetType IVGStyleFill::GetTileOffsetType ( );
__declspec(implementation_key(4760)) void IVGStyleFill::PutTileOffsetType ( enum cdrTileOffsetType pVal );
__declspec(implementation_key(4761)) long IVGStyleFill::GetTileOffset ( );
__declspec(implementation_key(4762)) void IVGStyleFill::PutTileOffset ( long pVal );
__declspec(implementation_key(4763)) double IVGStyleFill::GetRotationAngle ( );
__declspec(implementation_key(4764)) void IVGStyleFill::PutRotationAngle ( double pVal );
__declspec(implementation_key(4765)) double IVGStyleFill::GetSkewAngle ( );
__declspec(implementation_key(4766)) void IVGStyleFill::PutSkewAngle ( double pVal );
__declspec(implementation_key(4767)) VARIANT_BOOL IVGStyleFill::GetMirrorFill ( );
__declspec(implementation_key(4768)) void IVGStyleFill::PutMirrorFill ( VARIANT_BOOL pVal );
__declspec(implementation_key(4769)) VARIANT_BOOL IVGStyleFill::GetTransformWithShape ( );
__declspec(implementation_key(4770)) void IVGStyleFill::PutTransformWithShape ( VARIANT_BOOL pVal );
__declspec(implementation_key(4771)) IVGColorPtr IVGStyleFill::GetPrimaryColor ( );
__declspec(implementation_key(4772)) IVGColorPtr IVGStyleFill::GetSecondaryColor ( );
__declspec(implementation_key(4773)) VARIANT_BOOL IVGStyleFill::GetMirrorFillX ( );
__declspec(implementation_key(4774)) void IVGStyleFill::PutMirrorFillX ( VARIANT_BOOL pVal );
__declspec(implementation_key(4775)) VARIANT_BOOL IVGStyleFill::GetMirrorFillY ( );
__declspec(implementation_key(4776)) void IVGStyleFill::PutMirrorFillY ( VARIANT_BOOL pVal );
__declspec(implementation_key(4777)) double IVGStyleFill::GetFountainCenterXOffset ( );
__declspec(implementation_key(4778)) void IVGStyleFill::PutFountainCenterXOffset ( double pVal );
__declspec(implementation_key(4779)) double IVGStyleFill::GetFountainCenterYOffset ( );
__declspec(implementation_key(4780)) void IVGStyleFill::PutFountainCenterYOffset ( double pVal );
__declspec(implementation_key(4781)) double IVGStyleFill::GetFountainBlendAcceleration ( );
__declspec(implementation_key(4782)) void IVGStyleFill::PutFountainBlendAcceleration ( double pVal );
__declspec(implementation_key(4783)) double IVGStyleFill::GetFountainScaleX ( );
__declspec(implementation_key(4784)) void IVGStyleFill::PutFountainScaleX ( double pVal );
__declspec(implementation_key(4785)) double IVGStyleFill::GetFountainScaleY ( );
__declspec(implementation_key(4786)) void IVGStyleFill::PutFountainScaleY ( double pVal );
__declspec(implementation_key(4787)) VARIANT_BOOL IVGStyleFill::GetFountainAnisotropic ( );
__declspec(implementation_key(4788)) void IVGStyleFill::PutFountainAnisotropic ( VARIANT_BOOL pVal );
__declspec(implementation_key(4789)) enum cdrFountainFillSpreadMethod IVGStyleFill::GetFountainSpreadMethod ( );
__declspec(implementation_key(4790)) void IVGStyleFill::PutFountainSpreadMethod ( enum cdrFountainFillSpreadMethod pVal );
__declspec(implementation_key(4791)) unsigned char IVGStyleFill::GetPrimaryOpacity ( );
__declspec(implementation_key(4792)) void IVGStyleFill::PutPrimaryOpacity ( unsigned char pVal );
__declspec(implementation_key(4793)) unsigned char IVGStyleFill::GetSecondaryOpacity ( );
__declspec(implementation_key(4794)) void IVGStyleFill::PutSecondaryOpacity ( unsigned char pVal );
__declspec(implementation_key(4795)) enum cdrMergeMode IVGStyleFill::GetMergeMode ( );
__declspec(implementation_key(4796)) void IVGStyleFill::PutMergeMode ( enum cdrMergeMode pVal );
__declspec(implementation_key(4797)) VARIANT_BOOL IVGStyleFill::SaveFill ( _bstr_t FileName, struct IVGFillMetadata * Metadata );
__declspec(implementation_key(4798)) VARIANT_BOOL IVGStyleFill::LoadFill ( _bstr_t FileName, struct IVGFillMetadata * * Metadata );
__declspec(implementation_key(4799)) IVGStylePtr IVGStyleCharacter::GetStyle ( );
__declspec(implementation_key(4800)) IVGStylePtr IVGStyleParagraph::GetStyle ( );
__declspec(implementation_key(4801)) IVGStylePtr IVGStyleFrame::GetStyle ( );
__declspec(implementation_key(4802)) long IVGStyles::GetCount ( );
__declspec(implementation_key(4803)) IVGStylePtr IVGStyles::GetItem ( long Index );
__declspec(implementation_key(4804)) IUnknownPtr IVGStyles::Get_NewEnum ( );
__declspec(implementation_key(4805)) IVGStylePtr IVGStyles::Find ( _bstr_t Name );
__declspec(implementation_key(4806)) IVGStylePtr IVGStyles::GetFirst ( );
__declspec(implementation_key(4807)) IVGStylePtr IVGStyles::GetLast ( );
__declspec(implementation_key(4808)) IVGStylePtr IVGStyleTransparency::GetStyle ( );
__declspec(implementation_key(4809)) IVGStyleFillPtr IVGStyleTransparency::GetFill ( );
__declspec(implementation_key(4810)) enum cdrMergeMode IVGStyleTransparency::GetMode ( );
__declspec(implementation_key(4811)) void IVGStyleTransparency::PutMode ( enum cdrMergeMode pVal );
__declspec(implementation_key(4812)) double IVGStyleTransparency::GetUniformTransparency ( );
__declspec(implementation_key(4813)) void IVGStyleTransparency::PutUniformTransparency ( double pVal );
__declspec(implementation_key(4814)) double IVGStyleTransparency::GetWhiteTransparency ( );
__declspec(implementation_key(4815)) void IVGStyleTransparency::PutWhiteTransparency ( double pVal );
__declspec(implementation_key(4816)) double IVGStyleTransparency::GetBlackTransparency ( );
__declspec(implementation_key(4817)) void IVGStyleTransparency::PutBlackTransparency ( double pVal );
__declspec(implementation_key(4818)) enum cdrTransparencyAppliedTo IVGStyleTransparency::GetAppliesTo ( );
__declspec(implementation_key(4819)) void IVGStyleTransparency::PutAppliesTo ( enum cdrTransparencyAppliedTo pVal );
__declspec(implementation_key(4820)) HRESULT IVGToolShape::OnGenerateShape ( struct IVGLayer * Parent, struct IVGProperties * ObjectProperties, struct IVGStyle * pStyleAttributes, struct IVGTransformMatrix * pTransformation, VARIANT_BOOL IsPreviewOnly );
__declspec(implementation_key(4821)) IVGStylesPtr IVGStyleSheet::GetStyles ( );
__declspec(implementation_key(4822)) IVGStylesPtr IVGStyleSheet::GetStyleSets ( );
__declspec(implementation_key(4823)) IVGStylesPtr IVGStyleSheet::GetObjectDefaults ( );
__declspec(implementation_key(4824)) IVGStylesPtr IVGStyleSheet::GetAllStyles ( );
__declspec(implementation_key(4825)) IVGStylesPtr IVGStyleSheet::GetAllStyleSets ( );
__declspec(implementation_key(4826)) IVGStylePtr IVGStyleSheet::FindStyle ( _bstr_t Name );
__declspec(implementation_key(4827)) IVGStylesPtr IVGStyleSheet::CreateStyleFromShape ( struct IVGShape * Shape, _bstr_t Category, _bstr_t Name, VARIANT_BOOL ReplaceExisting );
__declspec(implementation_key(4828)) IVGStylesPtr IVGStyleSheet::CreateStyleFromShapeRange ( struct IVGShapeRange * ShapeRange, _bstr_t Category, _bstr_t Name, VARIANT_BOOL ReplaceExisting );
__declspec(implementation_key(4829)) IVGStylesPtr IVGStyleSheet::CreateStyleFromTextRange ( struct IVGTextRange * TextRange, _bstr_t Category, _bstr_t Name, VARIANT_BOOL ReplaceExisting );
__declspec(implementation_key(4830)) IVGStylesPtr IVGStyleSheet::CreateStyleSetFromShape ( struct IVGShape * Shape, _bstr_t Name, VARIANT_BOOL ReplaceExisting );
__declspec(implementation_key(4831)) IVGStylesPtr IVGStyleSheet::CreateStyleSetFromShapeRange ( struct IVGShapeRange * ShapeRange, _bstr_t Name, VARIANT_BOOL ReplaceExisting );
__declspec(implementation_key(4832)) IVGStylesPtr IVGStyleSheet::CreateStyleSetFromTextRange ( struct IVGTextRange * TextRange, _bstr_t Name, VARIANT_BOOL ReplaceExisting );
__declspec(implementation_key(4833)) IVGStylePtr IVGStyleSheet::CreateStyle ( _bstr_t Category, _bstr_t BasedOn, _bstr_t Name, VARIANT_BOOL ReplaceExisting );
__declspec(implementation_key(4834)) IVGStylePtr IVGStyleSheet::CreateStyleSet ( _bstr_t BasedOn, _bstr_t Name, VARIANT_BOOL ReplaceExisting );
__declspec(implementation_key(4835)) VARIANT_BOOL IVGStyleSheet::Export ( _bstr_t FileName, VARIANT_BOOL Styles, VARIANT_BOOL StyleSets, VARIANT_BOOL ObjectDefaults, VARIANT_BOOL ColorStyles );
__declspec(implementation_key(4836)) VARIANT_BOOL IVGStyleSheet::Import ( _bstr_t FileName, VARIANT_BOOL MergeStyles, VARIANT_BOOL Styles, VARIANT_BOOL StyleSets, VARIANT_BOOL ObjectDefaults, VARIANT_BOOL ColorStyles );
__declspec(implementation_key(4837)) IVGColorsPtr IVGStyleSheet::GetAllColorStyles ( );
__declspec(implementation_key(4838)) IVGColorPtr IVGStyleSheet::CreateColorStyle ( _bstr_t Name, struct IVGColor * Color, long HarmonyIndex, long IndexInHarmony, VARIANT_BOOL ReplaceExisting );
__declspec(implementation_key(4839)) HRESULT IVGStyleSheet::DeleteAllColorStyles ( );
__declspec(implementation_key(4840)) HRESULT IVGStyleSheet::DeleteColorStyle ( _bstr_t Name );
__declspec(implementation_key(4841)) HRESULT IVGStyleSheet::RenameColorStyle ( _bstr_t OldName, _bstr_t NewName );
__declspec(implementation_key(4842)) IVGApplicationPtr IVGDataItems::GetApplication ( );
__declspec(implementation_key(4843)) IVGShapePtr IVGDataItems::GetParent ( );
__declspec(implementation_key(4844)) long IVGDataItems::GetCount ( );
__declspec(implementation_key(4845)) IVGDataItemPtr IVGDataItems::GetItem ( const _variant_t & IndexOrName );
__declspec(implementation_key(4846)) IUnknownPtr IVGDataItems::Get_NewEnum ( );
__declspec(implementation_key(4847)) IVGDataItemPtr IVGDataItems::Add ( struct IVGDataField * DataField, const _variant_t & Value );
__declspec(implementation_key(4848)) HRESULT IVGDataItems::CopyFrom ( struct IVGShape * Shape );
__declspec(implementation_key(4849)) HRESULT IVGDataItems::Clear ( );
__declspec(implementation_key(4850)) IVGApplicationPtr IVGDataItem::GetApplication ( );
__declspec(implementation_key(4851)) IVGDataItemsPtr IVGDataItem::GetParent ( );
__declspec(implementation_key(4852)) _variant_t IVGDataItem::GetValue ( );
__declspec(implementation_key(4853)) void IVGDataItem::PutValue ( const _variant_t & pVal );
__declspec(implementation_key(4854)) IVGDataFieldPtr IVGDataItem::GetDataField ( );
__declspec(implementation_key(4855)) HRESULT IVGDataItem::Clear ( );
__declspec(implementation_key(4856)) _bstr_t IVGDataItem::GetFormattedValue ( );
__declspec(implementation_key(4857)) IVGApplicationPtr IVGDataField::GetApplication ( );
__declspec(implementation_key(4858)) IVGDataFieldsPtr IVGDataField::GetParent ( );
__declspec(implementation_key(4859)) _bstr_t IVGDataField::GetName ( );
__declspec(implementation_key(4860)) void IVGDataField::PutName ( _bstr_t pVal );
__declspec(implementation_key(4861)) enum cdrDataFormatType IVGDataField::GetFormatType ( );
__declspec(implementation_key(4862)) _bstr_t IVGDataField::GetFormat ( );
__declspec(implementation_key(4863)) void IVGDataField::PutFormat ( _bstr_t pVal );
__declspec(implementation_key(4864)) long IVGDataField::GetFieldWidth ( );
__declspec(implementation_key(4865)) void IVGDataField::PutFieldWidth ( long pVal );
__declspec(implementation_key(4866)) VARIANT_BOOL IVGDataField::GetAppDefault ( );
__declspec(implementation_key(4867)) void IVGDataField::PutAppDefault ( VARIANT_BOOL pVal );
__declspec(implementation_key(4868)) VARIANT_BOOL IVGDataField::GetDocDefault ( );
__declspec(implementation_key(4869)) void IVGDataField::PutDocDefault ( VARIANT_BOOL pVal );
__declspec(implementation_key(4870)) VARIANT_BOOL IVGDataField::GetSummarizeGroup ( );
__declspec(implementation_key(4871)) void IVGDataField::PutSummarizeGroup ( VARIANT_BOOL pVal );
__declspec(implementation_key(4872)) HRESULT IVGDataField::Delete ( );
__declspec(implementation_key(4873)) HRESULT IVGDataField::Reorder ( long NewIndex );
__declspec(implementation_key(4874)) long IVGDataField::GetIndex ( );
__declspec(implementation_key(4875)) _bstr_t IVGDataField::GetTarget ( );
__declspec(implementation_key(4876)) void IVGDataField::PutTarget ( _bstr_t pVal );
__declspec(implementation_key(4877)) _bstr_t IVGDataField::GetDefaultValue ( );
__declspec(implementation_key(4878)) void IVGDataField::PutDefaultValue ( _bstr_t pVal );
__declspec(implementation_key(4879)) _bstr_t IVGDataField::GetConstraint ( );
__declspec(implementation_key(4880)) void IVGDataField::PutConstraint ( _bstr_t pVal );
__declspec(implementation_key(4881)) enum cdrDataType IVGDataField::GetDataType ( );
__declspec(implementation_key(4882)) void IVGDataField::PutDataType ( enum cdrDataType pVal );
__declspec(implementation_key(4883)) _bstr_t IVGDataField::GetParentName ( );
__declspec(implementation_key(4884)) void IVGDataField::PutParentName ( _bstr_t pVal );
__declspec(implementation_key(4885)) _bstr_t IVGDataField::GetElementName ( );
__declspec(implementation_key(4886)) void IVGDataField::PutElementName ( _bstr_t pVal );
__declspec(implementation_key(4887)) IVGApplicationPtr IVGDataFields::GetApplication ( );
__declspec(implementation_key(4888)) IVGDocumentPtr IVGDataFields::GetParent ( );
__declspec(implementation_key(4889)) long IVGDataFields::GetCount ( );
__declspec(implementation_key(4890)) IVGDataFieldPtr IVGDataFields::GetItem ( const _variant_t & IndexOrName );
__declspec(implementation_key(4891)) IUnknownPtr IVGDataFields::Get_NewEnum ( );
__declspec(implementation_key(4892)) IVGDataFieldPtr IVGDataFields::Add ( _bstr_t Name, _bstr_t Format, VARIANT_BOOL AppDefault, VARIANT_BOOL DocDefault, VARIANT_BOOL SummarizeGroup );
__declspec(implementation_key(4893)) IVGDataFieldPtr IVGDataFields::AddEx ( _bstr_t Name, enum cdrDataType DataType, _bstr_t DefaultValue, _bstr_t Constraint, _bstr_t Target, _bstr_t Format, VARIANT_BOOL AppDefault, VARIANT_BOOL DocDefault, VARIANT_BOOL SummarizeGroup, long FieldWidth );
__declspec(implementation_key(4894)) VARIANT_BOOL IVGDataFields::IsPresent ( _bstr_t FieldName );
__declspec(implementation_key(4895)) IVGDataFieldPtr IVGDataFields::AddEx2 ( _bstr_t ParentName, _bstr_t ElementName, _bstr_t Name, enum cdrDataType DataType, _bstr_t DefaultValue, _bstr_t Constraint, _bstr_t Target, _bstr_t Format, VARIANT_BOOL AppDefault, VARIANT_BOOL DocDefault, VARIANT_BOOL SummarizeGroup, long FieldWidth );
__declspec(implementation_key(4896)) IVGSymbolDefinitionPtr IVGSymbol::GetDefinition ( );
__declspec(implementation_key(4897)) IVGShapeRangePtr IVGSymbol::RevertToShapes ( );
__declspec(implementation_key(4898)) _bstr_t IVGSymbolDefinition::GetName ( );
__declspec(implementation_key(4899)) void IVGSymbolDefinition::PutName ( _bstr_t pVal );
__declspec(implementation_key(4900)) _bstr_t IVGSymbolDefinition::GetDescription ( );
__declspec(implementation_key(4901)) void IVGSymbolDefinition::PutDescription ( _bstr_t pVal );
__declspec(implementation_key(4902)) VARIANT_BOOL IVGSymbolDefinition::GetLinked ( );
__declspec(implementation_key(4903)) _bstr_t IVGSymbolDefinition::GetLinkLibraryPath ( );
__declspec(implementation_key(4904)) VARIANT_BOOL IVGSymbolDefinition::GetNested ( );
__declspec(implementation_key(4905)) VARIANT_BOOL IVGSymbolDefinition::GetHasLinks ( );
__declspec(implementation_key(4906)) VARIANT_BOOL IVGSymbolDefinition::GetIsLinkBroken ( );
__declspec(implementation_key(4907)) VARIANT_BOOL IVGSymbolDefinition::GetIsLinkUpdated ( );
__declspec(implementation_key(4908)) VARIANT_BOOL IVGSymbolDefinition::GetHasBrokenLinks ( );
__declspec(implementation_key(4909)) VARIANT_BOOL IVGSymbolDefinition::GetHasUpdatedLinks ( );
__declspec(implementation_key(4910)) IVGSymbolDefinitionsPtr IVGSymbolDefinition::GetNestedSymbols ( );
__declspec(implementation_key(4911)) VARIANT_BOOL IVGSymbolDefinition::GetEditable ( );
__declspec(implementation_key(4912)) long IVGSymbolDefinition::GetInstanceCount ( );
__declspec(implementation_key(4913)) IVGShapeRangePtr IVGSymbolDefinition::GetInstances ( );
__declspec(implementation_key(4914)) HRESULT IVGSymbolDefinition::EnterEditMode ( );
__declspec(implementation_key(4915)) HRESULT IVGSymbolDefinition::LeaveEditMode ( );
__declspec(implementation_key(4916)) HRESULT IVGSymbolDefinition::Delete ( );
__declspec(implementation_key(4917)) HRESULT IVGSymbolDefinition::Copy ( );
__declspec(implementation_key(4918)) IVGSymbolDefinitionPtr IVGSymbolDefinition::Duplicate ( _bstr_t Name );
__declspec(implementation_key(4919)) HRESULT IVGSymbolDefinition::BreakLink ( );
__declspec(implementation_key(4920)) HRESULT IVGSymbolDefinition::UpdateLinks ( );
__declspec(implementation_key(4921)) HRESULT IVGSymbolDefinition::FixLink ( _bstr_t LibraryPath );
__declspec(implementation_key(4922)) enum cdrSymbolType IVGSymbolDefinition::GetType ( );
__declspec(implementation_key(4923)) IVGSymbolDefinitionPtr IVGSymbolDefinitions::GetItem ( const _variant_t & IndexOrName );
__declspec(implementation_key(4924)) long IVGSymbolDefinitions::GetCount ( );
__declspec(implementation_key(4925)) IUnknownPtr IVGSymbolDefinitions::Get_NewEnum ( );
__declspec(implementation_key(4926)) IVGSymbolDefinitionsPtr IVGSymbolLibrary::GetSymbols ( );
__declspec(implementation_key(4927)) _bstr_t IVGSymbolLibrary::GetName ( );
__declspec(implementation_key(4928)) _bstr_t IVGSymbolLibrary::GetFilePath ( );
__declspec(implementation_key(4929)) VARIANT_BOOL IVGSymbolLibrary::GetReadOnly ( );
__declspec(implementation_key(4930)) HRESULT IVGSymbolLibrary::Delete ( );
__declspec(implementation_key(4931)) HRESULT IVGSymbolLibrary::PurgeUnusedSymbols ( );
__declspec(implementation_key(4932)) IVGSymbolDefinitionPtr IVGSymbolLibrary::Paste ( _bstr_t Name );
__declspec(implementation_key(4933)) IVGSymbolLibraryPtr IVGSymbolLibraries::GetItem ( const _variant_t & IndexOrName );
__declspec(implementation_key(4934)) long IVGSymbolLibraries::GetCount ( );
__declspec(implementation_key(4935)) IVGSymbolLibraryPtr IVGSymbolLibraries::Add ( _bstr_t FileName, VARIANT_BOOL CopyLocally );
__declspec(implementation_key(4936)) long IVGSymbolLibraries::AddFromFolder ( _bstr_t Folder, VARIANT_BOOL Recursive, VARIANT_BOOL CopyLocally );
__declspec(implementation_key(4937)) IUnknownPtr IVGSymbolLibraries::Get_NewEnum ( );
__declspec(implementation_key(4938)) enum cdrTreeNodeType IVGTreeNode::GetType ( );
__declspec(implementation_key(4939)) enum cdrShapeType IVGTreeNode::GetShapeType ( );
__declspec(implementation_key(4940)) IVGShapePtr IVGTreeNode::GetShape ( );
__declspec(implementation_key(4941)) IVGShapePtr IVGTreeNode::GetVirtualShape ( );
__declspec(implementation_key(4942)) IVGPagePtr IVGTreeNode::GetPage ( );
__declspec(implementation_key(4943)) IVGLayerPtr IVGTreeNode::GetLayer ( );
__declspec(implementation_key(4944)) IVGDocumentPtr IVGTreeNode::GetDocument ( );
__declspec(implementation_key(4945)) IVGTreeNodePtr IVGTreeNode::GetNext ( );
__declspec(implementation_key(4946)) IVGTreeNodePtr IVGTreeNode::GetPrevious ( );
__declspec(implementation_key(4947)) IVGTreeNodePtr IVGTreeNode::GetParent ( );
__declspec(implementation_key(4948)) IVGTreeNodePtr IVGTreeNode::GetFirstChild ( );
__declspec(implementation_key(4949)) IVGTreeNodePtr IVGTreeNode::GetLastChild ( );
__declspec(implementation_key(4950)) IVGTreeNodesPtr IVGTreeNode::GetChildren ( );
__declspec(implementation_key(4951)) VARIANT_BOOL IVGTreeNode::GetIsGroupChild ( );
__declspec(implementation_key(4952)) VARIANT_BOOL IVGTreeNode::GetSelected ( );
__declspec(implementation_key(4953)) IVGTreeNodePtr IVGTreeNode::GetNextSelected ( );
__declspec(implementation_key(4954)) VARIANT_BOOL IVGTreeNode::UnLink ( );
__declspec(implementation_key(4955)) VARIANT_BOOL IVGTreeNode::LinkBefore ( struct IVGTreeNode * TreeNode );
__declspec(implementation_key(4956)) VARIANT_BOOL IVGTreeNode::LinkAfter ( struct IVGTreeNode * TreeNode );
__declspec(implementation_key(4957)) VARIANT_BOOL IVGTreeNode::LinkAsChildOf ( struct IVGTreeNode * TreeNode );
__declspec(implementation_key(4958)) VARIANT_BOOL IVGTreeNode::MoveToFirst ( );
__declspec(implementation_key(4959)) VARIANT_BOOL IVGTreeNode::MoveToLast ( );
__declspec(implementation_key(4960)) VARIANT_BOOL IVGTreeNode::MoveBefore ( struct IVGTreeNode * TreeNode );
__declspec(implementation_key(4961)) VARIANT_BOOL IVGTreeNode::MoveAfter ( struct IVGTreeNode * TreeNode );
__declspec(implementation_key(4962)) VARIANT_BOOL IVGTreeNode::IsDescendentOf ( struct IVGTreeNode * TreeNode );
__declspec(implementation_key(4963)) HRESULT IVGTreeNode::Delete ( );
__declspec(implementation_key(4964)) IVGTreeNodePtr IVGTreeNode::GetCopy ( );
__declspec(implementation_key(4965)) HRESULT IVGTreeNode::SwapData ( struct IVGTreeNode * TreeNode );
__declspec(implementation_key(4966)) HRESULT IVGTreeNode::SwapGroupData ( struct IVGTreeNode * GroupNode );
__declspec(implementation_key(4967)) long IVGTreeNode::GetHandle ( );
__declspec(implementation_key(4968)) _bstr_t IVGTreeNode::GetName ( );
__declspec(implementation_key(4969)) void IVGTreeNode::PutName ( _bstr_t pVal );
__declspec(implementation_key(4970)) IVGTreeNodePtr IVGTreeNodes::GetItem ( long Index );
__declspec(implementation_key(4971)) long IVGTreeNodes::GetCount ( );
__declspec(implementation_key(4972)) IUnknownPtr IVGTreeNodes::Get_NewEnum ( );
__declspec(implementation_key(4973)) long IVGSpread::GetIndex ( );
__declspec(implementation_key(4974)) double IVGSpread::GetSizeWidth ( );
__declspec(implementation_key(4975)) double IVGSpread::GetSizeHeight ( );
__declspec(implementation_key(4976)) double IVGSpread::GetLeftX ( );
__declspec(implementation_key(4977)) double IVGSpread::GetRightX ( );
__declspec(implementation_key(4978)) double IVGSpread::GetTopY ( );
__declspec(implementation_key(4979)) double IVGSpread::GetBottomY ( );
__declspec(implementation_key(4980)) double IVGSpread::GetCenterX ( );
__declspec(implementation_key(4981)) double IVGSpread::GetCenterY ( );
__declspec(implementation_key(4982)) IVGRectPtr IVGSpread::GetBoundingBox ( );
__declspec(implementation_key(4983)) HRESULT IVGSpread::GetBoundingBox ( double * x, double * y, double * Width, double * Height );
__declspec(implementation_key(4984)) IVGPagesPtr IVGSpread::GetPages ( );
__declspec(implementation_key(4985)) IVGSpreadPtr IVGSpread::GetNext ( );
__declspec(implementation_key(4986)) IVGSpreadPtr IVGSpread::GetPrevious ( );
__declspec(implementation_key(4987)) IVGLayersPtr IVGSpread::GetLayers ( );
__declspec(implementation_key(4988)) IVGLayersPtr IVGSpread::GetAllLayers ( );
__declspec(implementation_key(4989)) IVGLayerPtr IVGSpread::GetActiveLayer ( );
__declspec(implementation_key(4990)) IVGShapesPtr IVGSpread::GetShapes ( );
__declspec(implementation_key(4991)) IVGShapesPtr IVGSpread::GetSelectableShapes ( );
__declspec(implementation_key(4992)) IVGLayerPtr IVGSpread::CreateLayer ( _bstr_t LayerName );
__declspec(implementation_key(4993)) IVGShapeRangePtr IVGSpread::GetGuides ( enum cdrGuideType Type );
__declspec(implementation_key(4994)) IVGTreeNodePtr IVGSpread::GetTreeNode ( );
__declspec(implementation_key(4995)) IVGLayerPtr IVGSpread::GetGuidesLayer ( );
__declspec(implementation_key(4996)) IVGLayerPtr IVGSpread::GetDesktopLayer ( );
__declspec(implementation_key(4997)) IVGLayerPtr IVGSpread::GetGridLayer ( );
__declspec(implementation_key(4998)) IVGLayerPtr IVGTreeManager::GetVirtualLayer ( );
__declspec(implementation_key(4999)) long IVGTreeManager::GetSelectedNodeCount ( );
__declspec(implementation_key(5000)) IVGTreeNodePtr IVGTreeManager::GetFirstSelectedNode ( );
__declspec(implementation_key(5001)) IVGTreeNodePtr IVGTreeManager::CreateGroupNode ( );
__declspec(implementation_key(5002)) IVGTreeNodePtr IVGTreeManager::CleanGroupNode ( struct IVGTreeNode * GroupNode );
__declspec(implementation_key(5003)) IVGSpreadPtr IVGSpreads::GetItem ( long Index );
__declspec(implementation_key(5004)) long IVGSpreads::GetCount ( );
__declspec(implementation_key(5005)) IUnknownPtr IVGSpreads::Get_NewEnum ( );
__declspec(implementation_key(5006)) IVGSpreadPtr IVGSpreads::GetFirst ( );
__declspec(implementation_key(5007)) IVGSpreadPtr IVGSpreads::GetLast ( );
__declspec(implementation_key(5008)) _bstr_t IVGPageMarkup::GetPageGuid ( );
__declspec(implementation_key(5009)) IVGCommentThreadsPtr IVGPageMarkup::GetThreads ( );
__declspec(implementation_key(5010)) IVGPagePtr IVGPageMarkup::GetPage ( );
__declspec(implementation_key(5011)) IVGCommentPtr IVGPageMarkup::CreateHotspot ( _bstr_t Text, double x, double y, struct IVGCommentAuthor * Author );
__declspec(implementation_key(5012)) IVGCommentPtr IVGPageMarkup::CreateRectangle ( _bstr_t Text, double x, double y, double Width, double Height, long OutlineWidth, struct IVGColor * FillColor, struct IVGColor * OutlineColor, struct IVGCommentAuthor * Author );
__declspec(implementation_key(5013)) IVGCommentPtr IVGPageMarkup::CreateEllipse ( _bstr_t Text, double x, double y, double RadiusX, double RadiusY, long OutlineWidth, struct IVGColor * FillColor, struct IVGColor * OutlineColor, struct IVGCommentAuthor * Author );
__declspec(implementation_key(5014)) IVGCommentPtr IVGPageMarkup::CreateArrow ( _bstr_t Text, double x, double y, double VectorX, double VectorY, long OutlineWidth, struct IVGColor * OutlineColor, struct IVGCommentAuthor * Author );
__declspec(implementation_key(5015)) IVGCommentPtr IVGPageMarkup::CreateFreehand ( _bstr_t Text, struct IVGCurve * Curve, long OutlineWidth, struct IVGColor * OutlineColor, struct IVGCommentAuthor * Author );
__declspec(implementation_key(5016)) IVGCommentPtr IVGPageMarkup::CreateHighlight ( _bstr_t Text, struct IVGCurve * Curve, long OutlineWidth, struct IVGColor * OutlineColor, struct IVGCommentAuthor * Author );
__declspec(implementation_key(5017)) IVGCommentPtr IVGPageMarkup::CreateCollaborativeText ( _bstr_t Text, struct IVGShape * Shape, struct IVGColor * OutlineColor, struct IVGCommentAuthor * Author );
__declspec(implementation_key(5018)) IVGCommentThreadPtr IVGCommentThreads::GetItem ( const _variant_t & IndexOrGuid );
__declspec(implementation_key(5019)) IUnknownPtr IVGCommentThreads::Get_NewEnum ( );
__declspec(implementation_key(5020)) long IVGCommentThreads::GetCount ( );
__declspec(implementation_key(5021)) IVGCommentThreadPtr IVGCommentThreads::GetFirst ( );
__declspec(implementation_key(5022)) IVGCommentThreadPtr IVGCommentThreads::GetLast ( );
__declspec(implementation_key(5023)) IVGCommentTargetPtr IVGCommentThread::GetTarget ( );
__declspec(implementation_key(5024)) IVGCommentsPtr IVGCommentThread::GetComments ( );
__declspec(implementation_key(5025)) enum cdrCommentStatus IVGCommentThread::GetStatus ( );
__declspec(implementation_key(5026)) IVGCommentPtr IVGCommentThread::Reply ( _bstr_t Text, struct IVGCommentAuthor * Author );
__declspec(implementation_key(5027)) HRESULT IVGCommentThread::Resolve ( struct IVGCommentAuthor * Author );
__declspec(implementation_key(5028)) HRESULT IVGCommentThread::Reopen ( struct IVGCommentAuthor * Author );
__declspec(implementation_key(5029)) HRESULT IVGCommentThread::Delete ( );
__declspec(implementation_key(5030)) IVGPageMarkupPtr IVGCommentThread::GetPageMarkup ( );
__declspec(implementation_key(5031)) IVGCommentAnnotationPtr IVGCommentThread::GetAnnotation ( );
__declspec(implementation_key(5032)) IVGCommentAuthorPtr IVGComment::GetAuthor ( );
__declspec(implementation_key(5033)) void IVGComment::PutRefAuthor ( struct IVGCommentAuthor * * pRet );
__declspec(implementation_key(5034)) _bstr_t IVGComment::GetText ( );
__declspec(implementation_key(5035)) void IVGComment::PutText ( _bstr_t pRet );
__declspec(implementation_key(5036)) DATE IVGComment::GetCreationTime ( );
__declspec(implementation_key(5037)) void IVGComment::PutCreationTime ( DATE pRet );
__declspec(implementation_key(5038)) DATE IVGComment::GetModificationTime ( );
__declspec(implementation_key(5039)) void IVGComment::PutModificationTime ( DATE pRet );
__declspec(implementation_key(5040)) _bstr_t IVGComment::GetGuid ( );
__declspec(implementation_key(5041)) IVGCommentThreadPtr IVGComment::GetThread ( );
__declspec(implementation_key(5042)) _bstr_t IVGComment::GetOnlineID ( );
__declspec(implementation_key(5043)) void IVGComment::PutOnlineID ( _bstr_t pRet );
__declspec(implementation_key(5044)) HRESULT IVGComment::Delete ( );
__declspec(implementation_key(5045)) IVGCommentPtr IVGComments::GetItem ( const _variant_t & IndexOrGuid );
__declspec(implementation_key(5046)) IUnknownPtr IVGComments::Get_NewEnum ( );
__declspec(implementation_key(5047)) long IVGComments::GetCount ( );
__declspec(implementation_key(5048)) IVGCommentPtr IVGComments::GetFirst ( );
__declspec(implementation_key(5049)) IVGCommentPtr IVGComments::GetLast ( );
__declspec(implementation_key(5050)) IVGCommentPtr IVGDocumentMarkup::FindComment ( _bstr_t Guid );
__declspec(implementation_key(5051)) IVGCommentThreadPtr IVGDocumentMarkup::FindThread ( _bstr_t Guid );
__declspec(implementation_key(5052)) IVGPagePtr IVGDocumentMarkup::FindPage ( _bstr_t Guid );
__declspec(implementation_key(5053)) IDispatchPtr IVGWindow::GetApplication ( );
__declspec(implementation_key(5054)) IVGWindowsPtr IVGWindow::GetParent ( );
__declspec(implementation_key(5055)) HRESULT IVGWindow::Activate ( );
__declspec(implementation_key(5056)) HRESULT IVGWindow::Close ( );
__declspec(implementation_key(5057)) VARIANT_BOOL IVGWindow::GetFullScreen ( );
__declspec(implementation_key(5058)) void IVGWindow::PutFullScreen ( VARIANT_BOOL FullScreen );
__declspec(implementation_key(5059)) IDispatchPtr IVGWindow::GetPage ( );
__declspec(implementation_key(5060)) VARIANT_BOOL IVGWindow::GetActive ( );
__declspec(implementation_key(5061)) _bstr_t IVGWindow::GetCaption ( );
__declspec(implementation_key(5062)) long IVGWindow::GetHeight ( );
__declspec(implementation_key(5063)) void IVGWindow::PutHeight ( long pVal );
__declspec(implementation_key(5064)) long IVGWindow::GetWidth ( );
__declspec(implementation_key(5065)) void IVGWindow::PutWidth ( long pVal );
__declspec(implementation_key(5066)) long IVGWindow::GetLeft ( );
__declspec(implementation_key(5067)) void IVGWindow::PutLeft ( long pVal );
__declspec(implementation_key(5068)) long IVGWindow::GetTop ( );
__declspec(implementation_key(5069)) void IVGWindow::PutTop ( long pVal );
__declspec(implementation_key(5070)) enum cdrWindowState IVGWindow::GetWindowState ( );
__declspec(implementation_key(5071)) void IVGWindow::PutWindowState ( enum cdrWindowState pVal );
__declspec(implementation_key(5072)) IVGWindowPtr IVGWindow::GetPrevious ( );
__declspec(implementation_key(5073)) IVGWindowPtr IVGWindow::GetNext ( );
__declspec(implementation_key(5074)) long IVGWindow::GetIndex ( );
__declspec(implementation_key(5075)) IVGWindowPtr IVGWindow::NewWindow ( );
__declspec(implementation_key(5076)) HRESULT IVGWindow::Refresh ( );
__declspec(implementation_key(5077)) IVGDocumentPtr IVGWindow::GetDocument ( );
__declspec(implementation_key(5078)) IVGActiveViewPtr IVGWindow::GetActiveView ( );
__declspec(implementation_key(5079)) HRESULT IVGWindow::ScreenToDocument ( long XScreen, long YScreen, double * XDoc, double * YDoc );
__declspec(implementation_key(5080)) HRESULT IVGWindow::DocumentToScreen ( double XDoc, double YDoc, long * XScreen, long * YScreen );
__declspec(implementation_key(5081)) long IVGWindow::GetHandle ( );
__declspec(implementation_key(5082)) ICUIViewWindowPtr IVGWindow::GetViewWindow ( );
__declspec(implementation_key(5083)) double IVGWindow::ScreenDistanceToDocumentDistance ( double ScreenDistance );
__declspec(implementation_key(5084)) double IVGWindow::DocumentDistanceToScreenDistance ( double DocumentDistance );
__declspec(implementation_key(5085)) IDispatchPtr IVGWindows::GetApplication ( );
__declspec(implementation_key(5086)) IDispatchPtr IVGWindows::GetParent ( );
__declspec(implementation_key(5087)) IVGWindowPtr IVGWindows::GetItem ( long Index );
__declspec(implementation_key(5088)) IUnknownPtr IVGWindows::Get_NewEnum ( );
__declspec(implementation_key(5089)) long IVGWindows::GetCount ( );
__declspec(implementation_key(5090)) HRESULT IVGWindows::CloseAll ( );
__declspec(implementation_key(5091)) HRESULT IVGWindows::Arrange ( enum cdrWindowArrangeStyle Style );
__declspec(implementation_key(5092)) HRESULT IVGWindows::Refresh ( );
__declspec(implementation_key(5093)) IVGWindowPtr IVGWindows::FindWindow ( _bstr_t Caption );
__declspec(implementation_key(5094)) IVGApplicationPtr IVGActiveView::GetApplication ( );
__declspec(implementation_key(5095)) IVGWindowPtr IVGActiveView::GetParent ( );
__declspec(implementation_key(5096)) enum cdrViewType IVGActiveView::GetType ( );
__declspec(implementation_key(5097)) void IVGActiveView::PutType ( enum cdrViewType pType );
__declspec(implementation_key(5098)) double IVGActiveView::GetOriginX ( );
__declspec(implementation_key(5099)) void IVGActiveView::PutOriginX ( double pVal );
__declspec(implementation_key(5100)) double IVGActiveView::GetOriginY ( );
__declspec(implementation_key(5101)) void IVGActiveView::PutOriginY ( double pVal );
__declspec(implementation_key(5102)) double IVGActiveView::GetZoom ( );
__declspec(implementation_key(5103)) void IVGActiveView::PutZoom ( double pVal );
__declspec(implementation_key(5104)) HRESULT IVGActiveView::ToFitPage ( );
__declspec(implementation_key(5105)) HRESULT IVGActiveView::ToFitPageWidth ( );
__declspec(implementation_key(5106)) HRESULT IVGActiveView::ToFitPageHeight ( );
__declspec(implementation_key(5107)) HRESULT IVGActiveView::ToFitShape ( struct IVGShape * Shape );
__declspec(implementation_key(5108)) HRESULT IVGActiveView::ToFitSelection ( );
__declspec(implementation_key(5109)) HRESULT IVGActiveView::ToFitArea ( double Left, double Top, double Right, double Bottom );
__declspec(implementation_key(5110)) HRESULT IVGActiveView::ToFitAllObjects ( );
__declspec(implementation_key(5111)) HRESULT IVGActiveView::ToFitShapeRange ( struct IVGShapeRange * ShapeRange );
__declspec(implementation_key(5112)) HRESULT IVGActiveView::SetViewPoint ( double x, double y, double Zoom );
__declspec(implementation_key(5113)) HRESULT IVGActiveView::SetActualSize ( );
__declspec(implementation_key(5114)) HRESULT IVGActiveView::ZoomIn ( );
__declspec(implementation_key(5115)) HRESULT IVGActiveView::ZoomInAtPoint ( double x, double y );
__declspec(implementation_key(5116)) HRESULT IVGActiveView::ZoomOut ( );
__declspec(implementation_key(5117)) HRESULT IVGActiveView::GetViewArea ( double * x, double * y, double * Width, double * Height );
__declspec(implementation_key(5118)) HRESULT IVGActiveView::SetViewArea ( double x, double y, double Width, double Height );
__declspec(implementation_key(5119)) VARIANT_BOOL IVGActiveView::GetSimulateOverprints ( );
__declspec(implementation_key(5120)) void IVGActiveView::PutSimulateOverprints ( VARIANT_BOOL pVal );
__declspec(implementation_key(5121)) IVGProofColorSettingsPtr IVGActiveView::GetProofColorSettings ( );
__declspec(implementation_key(5122)) void IVGActiveView::PutProofColorSettings ( struct IVGProofColorSettings * ppVal );
__declspec(implementation_key(5123)) VARIANT_BOOL IVGActiveView::GetShowProofColors ( );
__declspec(implementation_key(5124)) void IVGActiveView::PutShowProofColors ( VARIANT_BOOL pVal );
__declspec(implementation_key(5125)) IDispatchPtr IVGWorkspace::GetApplication ( );
__declspec(implementation_key(5126)) IVGWorkspacesPtr IVGWorkspace::GetParent ( );
__declspec(implementation_key(5127)) _bstr_t IVGWorkspace::GetName ( );
__declspec(implementation_key(5128)) _bstr_t IVGWorkspace::GetDescription ( );
__declspec(implementation_key(5129)) VARIANT_BOOL IVGWorkspace::GetDefault ( );
__declspec(implementation_key(5130)) HRESULT IVGWorkspace::Activate ( );
__declspec(implementation_key(5131)) VARIANT_BOOL IVGWorkspace::GetActive ( );
__declspec(implementation_key(5132)) IDispatchPtr IVGWorkspaces::GetApplication ( );
__declspec(implementation_key(5133)) IDispatchPtr IVGWorkspaces::GetParent ( );
__declspec(implementation_key(5134)) IVGWorkspacePtr IVGWorkspaces::GetItem ( const _variant_t & IndexOrName );
__declspec(implementation_key(5135)) IUnknownPtr IVGWorkspaces::Get_NewEnum ( );
__declspec(implementation_key(5136)) long IVGWorkspaces::GetCount ( );
__declspec(implementation_key(5137)) IVGRecentFilePtr IVGRecentFiles::Add ( _bstr_t Name, _bstr_t Path );
__declspec(implementation_key(5138)) IDispatchPtr IVGRecentFiles::GetApplication ( );
__declspec(implementation_key(5139)) IDispatchPtr IVGRecentFiles::GetParent ( );
__declspec(implementation_key(5140)) IVGRecentFilePtr IVGRecentFiles::GetItem ( long Index );
__declspec(implementation_key(5141)) IUnknownPtr IVGRecentFiles::Get_NewEnum ( );
__declspec(implementation_key(5142)) long IVGRecentFiles::GetCount ( );
__declspec(implementation_key(5143)) long IVGRecentFiles::GetMaximum ( );
__declspec(implementation_key(5144)) HRESULT IVGRecentFile::Delete ( );
__declspec(implementation_key(5145)) IDispatchPtr IVGRecentFile::Open ( );
__declspec(implementation_key(5146)) IDispatchPtr IVGRecentFile::GetApplication ( );
__declspec(implementation_key(5147)) IVGRecentFilesPtr IVGRecentFile::GetParent ( );
__declspec(implementation_key(5148)) long IVGRecentFile::GetIndex ( );
__declspec(implementation_key(5149)) _bstr_t IVGRecentFile::GetName ( );
__declspec(implementation_key(5150)) void IVGRecentFile::PutName ( _bstr_t pVal );
__declspec(implementation_key(5151)) _bstr_t IVGRecentFile::GetPath ( );
__declspec(implementation_key(5152)) void IVGRecentFile::PutPath ( _bstr_t pVal );
__declspec(implementation_key(5153)) _bstr_t IVGRecentFile::GetFullName ( );
__declspec(implementation_key(5154)) void IVGRecentFile::PutFullName ( _bstr_t pVal );
__declspec(implementation_key(5155)) IVGApplicationPtr IVGPageSizes::GetParent ( );
__declspec(implementation_key(5156)) long IVGPageSizes::GetCount ( );
__declspec(implementation_key(5157)) IVGPageSizePtr IVGPageSizes::GetItem ( const _variant_t & IndexOrName );
__declspec(implementation_key(5158)) IUnknownPtr IVGPageSizes::Get_NewEnum ( );
__declspec(implementation_key(5159)) IVGPageSizePtr IVGPageSizes::Add ( _bstr_t Name, double Width, double Height );
__declspec(implementation_key(5160)) IVGPageSizesPtr IVGPageSize::GetParent ( );
__declspec(implementation_key(5161)) VARIANT_BOOL IVGPageSize::GetBuiltIn ( );
__declspec(implementation_key(5162)) _bstr_t IVGPageSize::GetName ( );
__declspec(implementation_key(5163)) double IVGPageSize::GetWidth ( );
__declspec(implementation_key(5164)) void IVGPageSize::PutWidth ( double pVal );
__declspec(implementation_key(5165)) double IVGPageSize::GetHeight ( );
__declspec(implementation_key(5166)) void IVGPageSize::PutHeight ( double pVal );
__declspec(implementation_key(5167)) long IVGPageSize::GetIndex ( );
__declspec(implementation_key(5168)) HRESULT IVGPageSize::Delete ( );
__declspec(implementation_key(5169)) VARIANT_BOOL IVGPageSize::GetFixedOrientation ( );
__declspec(implementation_key(5170)) enum cdrUnit IVGPageSize::GetDefaultUnit ( );
__declspec(implementation_key(5171)) IVGApplicationPtr IVGViews::GetApplication ( );
__declspec(implementation_key(5172)) IVGDocumentPtr IVGViews::GetParent ( );
__declspec(implementation_key(5173)) IVGViewPtr IVGViews::GetItem ( const _variant_t & IndexOrName );
__declspec(implementation_key(5174)) IUnknownPtr IVGViews::Get_NewEnum ( );
__declspec(implementation_key(5175)) long IVGViews::GetCount ( );
__declspec(implementation_key(5176)) IVGViewPtr IVGViews::AddActiveView ( _bstr_t Name );
__declspec(implementation_key(5177)) IVGApplicationPtr IVGView::GetApplication ( );
__declspec(implementation_key(5178)) IVGViewsPtr IVGView::GetParent ( );
__declspec(implementation_key(5179)) _bstr_t IVGView::GetName ( );
__declspec(implementation_key(5180)) void IVGView::PutName ( _bstr_t Name );
__declspec(implementation_key(5181)) double IVGView::GetOriginX ( );
__declspec(implementation_key(5182)) void IVGView::PutOriginX ( double pVal );
__declspec(implementation_key(5183)) double IVGView::GetOriginY ( );
__declspec(implementation_key(5184)) void IVGView::PutOriginY ( double pVal );
__declspec(implementation_key(5185)) VARIANT_BOOL IVGView::GetUsePage ( );
__declspec(implementation_key(5186)) void IVGView::PutUsePage ( VARIANT_BOOL pVal );
__declspec(implementation_key(5187)) IVGPagePtr IVGView::GetPage ( );
__declspec(implementation_key(5188)) void IVGView::PutPage ( struct IVGPage * Page );
__declspec(implementation_key(5189)) VARIANT_BOOL IVGView::GetUseZoom ( );
__declspec(implementation_key(5190)) void IVGView::PutUseZoom ( VARIANT_BOOL pVal );
__declspec(implementation_key(5191)) double IVGView::GetZoom ( );
__declspec(implementation_key(5192)) void IVGView::PutZoom ( double pVal );
__declspec(implementation_key(5193)) HRESULT IVGView::Activate ( );
__declspec(implementation_key(5194)) HRESULT IVGView::Delete ( );
#pragma stop_map_region

} // namespace VGCore

#pragma pack(pop)
